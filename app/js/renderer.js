// WORKAROUND for immer.js esm (see https://github.com/immerjs/immer/issues/557)
window.process = { env: { NODE_ENV: "production" } };
function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function not_equal(a, b) {
    return a != a ? b == b : a !== b;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function (event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

function create_animation(node, from, fn, params) {
    if (!from)
        return noop;
    const to = node.getBoundingClientRect();
    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
        return noop;
    const { delay = 0, duration = 300, easing = identity, 
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay, 
    // @ts-ignore todo:
    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
    let running = true;
    let started = false;
    let name;
    function start() {
        if (css) {
            name = create_rule(node, 0, 1, duration, delay, easing, css);
        }
        if (!delay) {
            started = true;
        }
    }
    function stop() {
        if (css)
            delete_rule(node, name);
        running = false;
    }
    loop(now => {
        if (!started && now >= start_time) {
            started = true;
        }
        if (started && now >= end) {
            tick(1, 0);
            stop();
        }
        if (!running) {
            return false;
        }
        if (started) {
            const p = now - start_time;
            const t = 0 + 1 * easing(p / duration);
            tick(t, 1 - t);
        }
        return true;
    });
    start();
    tick(0, 1);
    return stop;
}
function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== 'absolute' && style.position !== 'fixed') {
        const { width, height } = style;
        const a = node.getBoundingClientRect();
        node.style.position = 'absolute';
        node.style.width = width;
        node.style.height = height;
        add_transform(node, a);
    }
}
function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick$1() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_out_transition(node, fn, params) {
    let config = fn(node, params);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        add_render_callback(() => dispatch(node, false, 'start'));
        loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, 'end');
                    if (!--group.r) {
                        // this will result in `end()` being called,
                        // so we don't need to clean up here
                        run_all(group.c);
                    }
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) {
        wait().then(() => {
            // @ts-ignore
            config = config();
            go();
        });
    }
    else {
        go();
    }
    return {
        end(reset) {
            if (reset && config.tick) {
                config.tick(1, 0);
            }
            if (running) {
                if (animation_name)
                    delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}
function create_bidirectional_transition(node, fn, params, intro) {
    let config = fn(node, params);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = program.b - t;
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config();
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
    const keys = new Set();
    for (let i = 0; i < list.length; i++) {
        const key = get_key(get_context(ctx, list, i));
        if (keys.has(key)) {
            throw new Error('Cannot have duplicate keys in a keyed each');
        }
        keys.add(key);
    }
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.30.1' }, detail)));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

function n(n){for(var t=arguments.length,r=Array(t>1?t-1:0),e=1;e<t;e++)r[e-1]=arguments[e];if("production"!==process.env.NODE_ENV){var i=Y[n],o=i?"function"==typeof i?i.apply(null,r):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}throw Error("[Immer] minified error nr: "+n+(r.length?" "+r.map((function(n){return "'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function t(n){return !!n&&!!n[Q]}function r(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var t=Object.getPrototypeOf(n);return !t||t===Object.prototype}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function i(n,t,r){void 0===r&&(r=!1),0===o(n)?(r?Object.keys:Z)(n).forEach((function(e){r&&"symbol"==typeof e||t(e,n[e],n);})):n.forEach((function(r,e){return t(e,r,n)}));}function o(n){var t=n[Q];return t?t.i>3?t.i-4:t.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,t){return 2===o(n)?n.has(t):Object.prototype.hasOwnProperty.call(n,t)}function a(n,t){return 2===o(n)?n.get(t):n[t]}function f(n,t,r){var e=o(n);2===e?n.set(t,r):3===e?(n.delete(t),n.add(r)):n[t]=r;}function c(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var t=nn(n);delete t[Q];for(var r=Z(t),e=0;e<r.length;e++){var i=r[e],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),t)}function d(n,e){return void 0===e&&(e=!1),y(n)||t(n)||!r(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,t){return d(t,!0)}),!0),n)}function h(){n(2);}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(t){var r=tn[t];return r||n(18,t),r}function m(n,t){tn[n]||(tn[n]=t);}function _(){return "production"===process.env.NODE_ENV||U||n(0),U}function j(n,t){t&&(b("Patches"),n.u=[],n.s=[],n.v=t);}function g(n){O(n),n.p.forEach(S),n.p=null;}function O(n){n===U&&(U=n.l);}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var t=n[Q];0===t.i||1===t.i?t.j():t.g=!0;}function P(t,e){e._=e.p.length;var i=e.p[0],o=void 0!==t&&t!==i;return e.h.O||b("ES5").S(e,t,o),o?(i[Q].P&&(g(e),n(4)),r(t)&&(t=M(e,t),e.l||x(e,t)),e.u&&b("Patches").M(i[Q],t,e.u,e.s)):t=M(e,i,[]),g(e),e.u&&e.v(e.u,e.s),t!==H?t:void 0}function M(n,t,r){if(y(t))return t;var e=t[Q];if(!e)return i(t,(function(i,o){return A(n,e,t,i,o,r)}),!0),t;if(e.A!==n)return t;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(t,i){return A(n,e,o,t,i,r)})),x(n,o,!1),r&&n.u&&b("Patches").R(e,r,n.u,n.s);}return e.o}function A(e,i,o,a,c,s){if("production"!==process.env.NODE_ENV&&c===o&&n(5),t(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!t(v))return;e.m=!1;}if(r(c)&&!y(c)){if(!e.h.N&&e._<1)return;M(e,c),i&&i.A.l||x(e,c);}}function x(n,t,r){void 0===r&&(r=!1),n.h.N&&n.m&&d(t,r);}function z(n,t){var r=n[Q];return (r?p(r):n)[t]}function I(n,t){if(t in n)for(var r=Object.getPrototypeOf(n);r;){var e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=Object.getPrototypeOf(r);}}function E(n){n.P||(n.P=!0,n.l&&E(n.l));}function k(n){n.o||(n.o=l(n.t));}function R(n,t,r){var e=s(t)?b("MapSet").T(t,r):v(t)?b("MapSet").F(t,r):n.O?function(n,t){var r=Array.isArray(n),e={i:r?1:0,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:n,k:null,o:null,j:null,C:!1},i=e,o=rn;r&&(i=[e],o=en);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(t,r):b("ES5").J(t,r);return (r?r.A:_()).p.push(e),e}function D(e){return t(e)||n(22,e),function n(t){if(!r(t))return t;var e,u=t[Q],c=o(t);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=N(t,c),u.I=!1;}else e=N(t,c);return i(e,(function(t,r){u&&a(u.t,t)===r||f(e,t,n(r));})),3===c?new Set(e):e}(e)}function N(n,t){switch(t){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function F(){function e(n){if(!r(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return [n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var t=Object.create(Object.getPrototypeOf(n));for(var i in n)t[i]=e(n[i]);return t}function f(n){return t(n)?e(n):n}var c="add";m("Patches",{$:function(t,r){return r.forEach((function(r){for(var i=r.path,u=r.op,f=t,s=0;s<i.length-1;s++)"object"!=typeof(f=a(f,i[s]))&&n(15,i.join("/"));var v=o(f),p=e(r.value),l=i[i.length-1];switch(u){case"replace":switch(v){case 2:return f.set(l,p);case 3:n(16);default:return f[l]=p}case c:switch(v){case 1:return f.splice(l,0,p);case 2:return f.set(l,p);case 3:return f.add(p);default:return f[l]=p}case"remove":switch(v){case 1:return f.splice(l,1);case 2:return f.delete(l);case 3:return f.delete(r.value);default:return delete f[l]}default:n(17,u);}})),t},R:function(n,t,r,e){switch(n.i){case 0:case 4:case 2:return function(n,t,r,e){var o=n.t,s=n.o;i(n.D,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?"replace":c:"remove";if(v!==p||"replace"!==l){var d=t.concat(n);r.push("remove"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:"remove",path:d}:"remove"===l?{op:c,path:d,value:f(v)}:{op:"replace",path:d,value:f(v)});}}));}(n,t,r,e);case 5:case 1:return function(n,t,r,e){var i=n.t,o=n.D,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,r];r=s[0],e=s[1];}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=t.concat([v]);r.push({op:"replace",path:p,value:f(u[v])}),e.push({op:"replace",path:p,value:f(i[v])});}for(var l=i.length;l<u.length;l++){var d=t.concat([l]);r.push({op:c,path:d,value:f(u[l])});}i.length<u.length&&e.push({op:"replace",path:t.concat(["length"]),value:i.length});}(n,t,r,e);case 3:return function(n,t,r,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=t.concat([u]);r.push({op:"remove",path:i,value:n}),e.unshift({op:c,path:i,value:n});}u++;})),u=0,o.forEach((function(n){if(!i.has(n)){var o=t.concat([u]);r.push({op:c,path:o,value:n}),e.unshift({op:"remove",path:o,value:n});}u++;}));}(n,t,r,e)}},M:function(n,t,r,e){r.push({op:"replace",path:[],value:t}),e.push({op:"replace",path:[],value:n.t});}});}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return "Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return "Unsupported patch operation: "+n},18:function(n){return "The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return "'current' expects a draft, got: "+n},23:function(n){return "'original' expects a draft, got: "+n}},Z="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,nn=Object.getOwnPropertyDescriptors||function(n){var t={};return Z(n).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(n,r);})),t},tn={},rn={get:function(n,t){if(t===Q)return n;var e=p(n);if(!u(e,t))return function(n,t,r){var e,i=I(t,r);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,t);var i=e[t];return n.I||!r(i)?i:i===z(n.t,t)?(k(n),n.o[t]=R(n.A.h,i,n)):i},has:function(n,t){return t in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,t,r){var e=I(p(n),t);if(null==e?void 0:e.set)return e.set.call(n.k,r),!0;if(!n.P){var i=z(p(n),t),o=null==i?void 0:i[Q];if(o&&o.t===r)return n.o[t]=r,n.D[t]=!1,!0;if(c(r,i)&&(void 0!==r||u(n.t,t)))return !0;k(n),E(n);}return n.o[t]=r,n.D[t]=!0,!0},deleteProperty:function(n,t){return void 0!==z(n.t,t)||t in n.t?(n.D[t]=!1,k(n),E(n)):delete n.D[t],n.o&&delete n.o[t],!0},getOwnPropertyDescriptor:function(n,t){var r=p(n),e=Reflect.getOwnPropertyDescriptor(r,t);return e?{writable:!0,configurable:1!==n.i||"length"!==t,enumerable:e.enumerable,value:r[t]}:e},defineProperty:function(){n(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12);}},en={};i(rn,(function(n,t){en[n]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)};})),en.deleteProperty=function(t,r){return "production"!==process.env.NODE_ENV&&isNaN(parseInt(r))&&n(13),rn.deleteProperty.call(this,t[0],r)},en.set=function(t,r,e){return "production"!==process.env.NODE_ENV&&"length"!==r&&isNaN(parseInt(r))&&n(14),rn.set.call(this,t[0],r,e,t[0])};var on=function(){function e(n){this.O=B,this.N=!0,"boolean"==typeof(null==n?void 0:n.useProxies)&&this.setUseProxies(n.useProxies),"boolean"==typeof(null==n?void 0:n.autoFreeze)&&this.setAutoFreeze(n.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this);}var i=e.prototype;return i.produce=function(t,e,i){if("function"==typeof t&&"function"!=typeof e){var o=e;e=t;var u=this;return function(n){var t=this;void 0===n&&(n=o);for(var r=arguments.length,i=Array(r>1?r-1:0),a=1;a<r;a++)i[a-1]=arguments[a];return u.produce(n,(function(n){var r;return (r=e).call.apply(r,[t,n].concat(i))}))}}var a;if("function"!=typeof e&&n(6),void 0!==i&&"function"!=typeof i&&n(7),r(t)){var f=w(this),c=R(this,t,void 0),s=!0;try{a=e(c),s=!1;}finally{s?g(f):O(f);}return "undefined"!=typeof Promise&&a instanceof Promise?a.then((function(n){return j(f,i),P(n,f)}),(function(n){throw g(f),n})):(j(f,i),P(a,f))}if(!t||"object"!=typeof t){if((a=e(t))===H)return;return void 0===a&&(a=t),this.N&&d(a,!0),a}n(21,t);},i.produceWithPatches=function(n,t){var r,e,i=this;return "function"==typeof n?function(t){for(var r=arguments.length,e=Array(r>1?r-1:0),o=1;o<r;o++)e[o-1]=arguments[o];return i.produceWithPatches(t,(function(t){return n.apply(void 0,[t].concat(e))}))}:[this.produce(n,t,(function(n,t){r=n,e=t;})),r,e]},i.createDraft=function(e){r(e)||n(8),t(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,O(i),o},i.finishDraft=function(t,r){var e=t&&t[Q];"production"!==process.env.NODE_ENV&&(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,r),P(void 0,i)},i.setAutoFreeze=function(n){this.N=n;},i.setUseProxies=function(t){t&&!B&&n(20),this.O=t;},i.applyPatches=function(n,r){var e;for(e=r.length-1;e>=0;e--){var i=r[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}var o=b("Patches").$;return t(n)?o(n,r):this.produce(n,(function(n){return o(n,r.slice(e+1))}))},e}(),un=new on,an=un.produce,fn=un.produceWithPatches.bind(un),cn=un.setAutoFreeze.bind(un),sn=un.setUseProxies.bind(un),vn=un.applyPatches.bind(un),pn=un.createDraft.bind(un),ln=un.finishDraft.bind(un);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

function commonjsRequire (target) {
	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
}

var typeDetect = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	 module.exports = factory() ;
}(commonjsGlobal, (function () {
/* !
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var promiseExists = typeof Promise === 'function';

/* eslint-disable no-undef */
var globalObject = typeof self === 'object' ? self : commonjsGlobal; // eslint-disable-line id-blacklist

var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
/**
 * ### typeOf (obj)
 *
 * Uses `Object.prototype.toString` to determine the type of an object,
 * normalising behaviour across engine versions & well optimised.
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
function typeDetect(obj) {
  /* ! Speed optimisation
   * Pre:
   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
   * Post:
   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
   */
  var typeofObj = typeof obj;
  if (typeofObj !== 'object') {
    return typeofObj;
  }

  /* ! Speed optimisation
   * Pre:
   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
   * Post:
   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
   */
  if (obj === null) {
    return 'null';
  }

  /* ! Spec Conformance
   * Test: `Object.prototype.toString.call(window)``
   *  - Node === "[object global]"
   *  - Chrome === "[object global]"
   *  - Firefox === "[object Window]"
   *  - PhantomJS === "[object Window]"
   *  - Safari === "[object Window]"
   *  - IE 11 === "[object Window]"
   *  - IE Edge === "[object Window]"
   * Test: `Object.prototype.toString.call(this)``
   *  - Chrome Worker === "[object global]"
   *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
   *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
   *  - IE 11 Worker === "[object WorkerGlobalScope]"
   *  - IE Edge Worker === "[object WorkerGlobalScope]"
   */
  if (obj === globalObject) {
    return 'global';
  }

  /* ! Speed optimisation
   * Pre:
   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
   * Post:
   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
   */
  if (
    Array.isArray(obj) &&
    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))
  ) {
    return 'Array';
  }

  // Not caching existence of `window` and related properties due to potential
  // for `window` to be unset before tests in quasi-browser environments.
  if (typeof window === 'object' && window !== null) {
    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/multipage/browsers.html#location)
     * WhatWG HTML$7.7.3 - The `Location` interface
     * Test: `Object.prototype.toString.call(window.location)``
     *  - IE <=11 === "[object Object]"
     *  - IE Edge <=13 === "[object Object]"
     */
    if (typeof window.location === 'object' && obj === window.location) {
      return 'Location';
    }

    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/#document)
     * WhatWG HTML$3.1.1 - The `Document` object
     * Note: Most browsers currently adher to the W3C DOM Level 2 spec
     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
     *       which suggests that browsers should use HTMLTableCellElement for
     *       both TD and TH elements. WhatWG separates these.
     *       WhatWG HTML states:
     *         > For historical reasons, Window objects must also have a
     *         > writable, configurable, non-enumerable property named
     *         > HTMLDocument whose value is the Document interface object.
     * Test: `Object.prototype.toString.call(document)``
     *  - Chrome === "[object HTMLDocument]"
     *  - Firefox === "[object HTMLDocument]"
     *  - Safari === "[object HTMLDocument]"
     *  - IE <=10 === "[object Document]"
     *  - IE 11 === "[object HTMLDocument]"
     *  - IE Edge <=13 === "[object HTMLDocument]"
     */
    if (typeof window.document === 'object' && obj === window.document) {
      return 'Document';
    }

    if (typeof window.navigator === 'object') {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (typeof window.navigator.mimeTypes === 'object' &&
          obj === window.navigator.mimeTypes) {
        return 'MimeTypeArray';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (typeof window.navigator.plugins === 'object' &&
          obj === window.navigator.plugins) {
        return 'PluginArray';
      }
    }

    if ((typeof window.HTMLElement === 'function' ||
        typeof window.HTMLElement === 'object') &&
        obj instanceof window.HTMLElement) {
      /* ! Spec Conformance
      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
      *  - IE <=10 === "[object HTMLBlockElement]"
      */
      if (obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  }

  /* ! Speed optimisation
  * Pre:
  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
  * Post:
  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
  */
  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
  if (typeof stringTag === 'string') {
    return stringTag;
  }

  var objPrototype = Object.getPrototypeOf(obj);
  /* ! Speed optimisation
  * Pre:
  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
  * Post:
  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
  */
  if (objPrototype === RegExp.prototype) {
    return 'RegExp';
  }

  /* ! Speed optimisation
  * Pre:
  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
  * Post:
  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
  */
  if (objPrototype === Date.prototype) {
    return 'Date';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
   * Test: `Object.prototype.toString.call(Promise.resolve())``
   *  - Chrome <=47 === "[object Object]"
   *  - Edge <=20 === "[object Object]"
   *  - Firefox 29-Latest === "[object Promise]"
   *  - Safari 7.1-Latest === "[object Promise]"
   */
  if (promiseExists && objPrototype === Promise.prototype) {
    return 'Promise';
  }

  /* ! Speed optimisation
  * Pre:
  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
  * Post:
  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
  */
  if (setExists && objPrototype === Set.prototype) {
    return 'Set';
  }

  /* ! Speed optimisation
  * Pre:
  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
  * Post:
  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
  */
  if (mapExists && objPrototype === Map.prototype) {
    return 'Map';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
  * Post:
  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
  */
  if (weakSetExists && objPrototype === WeakSet.prototype) {
    return 'WeakSet';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
  * Post:
  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
  */
  if (weakMapExists && objPrototype === WeakMap.prototype) {
    return 'WeakMap';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
   *  - Edge <=13 === "[object Object]"
   */
  if (dataViewExists && objPrototype === DataView.prototype) {
    return 'DataView';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
   * Test: `Object.prototype.toString.call(new Map().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (mapExists && objPrototype === mapIteratorPrototype) {
    return 'Map Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
   * Test: `Object.prototype.toString.call(new Set().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (setExists && objPrototype === setIteratorPrototype) {
    return 'Set Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
    return 'Array Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
    return 'String Iterator';
  }

  /* ! Speed optimisation
  * Pre:
  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
  * Post:
  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
  */
  if (objPrototype === null) {
    return 'Object';
  }

  return Object
    .prototype
    .toString
    .call(obj)
    .slice(toStringLeftSliceLength, toStringRightSliceLength);
}

return typeDetect;

})));
});

/* globals Symbol: false, Uint8Array: false, WeakMap: false */
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true,
      });
    }
  },
};

var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);
    if (typeof result === 'boolean') {
      return result;
    }
  }
  return null;
}

/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}

/*!
 * Primary Export
 */

var deepEql = deepEqual;
var MemoizeMap_1 = MemoizeMap;

/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */
function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
  if (simpleResult !== null) {
    return simpleResult;
  }

  // Deeper comparisons are pushed through to a larger function
  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}

/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */
function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  }

  // handle NaN cases
  if (
    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
    return true;
  }

  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.
  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }
  return null;
}

/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator;

  // Check if a memoized result exists.
  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }
  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  }

  // If a comparator is present, use it.
  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand);
    // Comparators may return null, in which case we want to go back to default behavior.
    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    }
    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = typeDetect(leftHandOperand);
  if (leftHandType !== typeDetect(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  }

  // Temporarily set the operands in the memoize object to prevent blowing the stack
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);

  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
      return leftHandOperand === rightHandOperand;
    case 'Error':
      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);
    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);
    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);
    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);
    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}

/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */

function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}

/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }
  if (leftHandOperand.size === 0) {
    return true;
  }
  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([ key, value ]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([ key, value ]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}

/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;
  if (length !== rightHandOperand.length) {
    return false;
  }
  if (length === 0) {
    return true;
  }
  var index = -1;
  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}

/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */
function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' &&
    typeof target === 'object' &&
    typeof Symbol.iterator !== 'undefined' &&
    typeof target[Symbol.iterator] === 'function';
}

/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */
function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }
  return [];
}

/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */
function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [ generatorResult.value ];
  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }
  return accumulator;
}

/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */
function getEnumerableKeys(target) {
  var keys = [];
  for (var key in target) {
    keys.push(key);
  }
  return keys;
}

/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;
  if (length === 0) {
    return true;
  }
  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);
  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();
    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }
    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);
  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 &&
      leftHandEntries.length === 0 &&
      rightHandKeys.length === 0 &&
      rightHandEntries.length === 0) {
    return true;
  }

  return false;
}

/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */
function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}
deepEql.MemoizeMap = MemoizeMap_1;

// -------- PROTOTYPE EXTENSIONS -------- //

/**
 * Return true if array has ALL of the items
 * @param  {...any} items - One or more strings
 */
Array.prototype.hasAll = function(...items) {
  return items.every((i) => this.includes(i))
};

/**
 * Return true if array has ANY of the items
 * @param  {...any} items - One or more strings
 */
Array.prototype.hasAny = function(...items) {
  return items.some((i) => this.includes(i))
};

/**
 * Return true if string includes any of the items.
 * E.g. Returns true if item is `-span` and string is `text-span`
 * @param  {...any} items - One or more strings
 */
String.prototype.includesAny = function(...items) {
  return items.some((i) => this.includes(i))
};

/**
 * Return true if string includes ALL of the items.
 * E.g. Returns true if string is "reference-full" and items
 * are "reference" and "full"
 * @param  {...any} items - One or more strings
 */
String.prototype.includesAll = function(...items) {
  return items.every((i) => this.includes(i))
};

/**
 * Return true if string equals any of the items.
 * E.g. Returns true if item is `-span` and string is `text-span`
 * @param  {...any} items - One or more strings
 */
String.prototype.equalsAny = function(...items) {
  return items.some((i) => this === i)
};

/**
 * Return first character of string
 */
String.prototype.firstChar = function() {
  return this.charAt(0)
};

/**
 * Return last character of string
 */
String.prototype.lastChar = function() {
  return this.charAt(this.length - 1)
};


// -------- MISC HELPERS -------- //

/**
 * Returns true if arrays have same items in same order
 * From: https://gomakethings.com/how-to-check-if-two-arrays-are-equal-with-vanilla-js/
 */
function arraysEqual (arr1, arr2) {

	// Check if the arrays are the same length
	if (arr1.length !== arr2.length) return false

	// Check if all items exist and are in the same order
	for (var i = 0; i < arr1.length; i++) {
		if (arr1[i] !== arr2[i]) return false
  }
  
  return true
}

/**
 * Get file size in KB, MB, GB, or TB (whatever is closest), from bytes.
 * From: https://gist.github.com/lanqy/5193417#gistcomment-3240729
 * @param {*} bytes
 * @param {*} separator 
 * @param {*} postFix 
 */
function prettySize(bytes, separator = ' ', postFix = '') {
  if (bytes) {
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.min(parseInt(Math.floor(Math.log(bytes) / Math.log(1024)).toString(), 10), sizes.length - 1);
      return `${(bytes / (1024 ** i)).toFixed(i ? 1 : 0)}${separator}${sizes[i]}${postFix}`;
  }
  return 'n/a';
}

/**
 * Shorthand function for `JSON.stringify`
 * @param {*} value 
 */
function stringify(value) {
  return JSON.stringify(value, null, '\t')
}

/**
 * Wrap setTimeout in a promise so we can use with async/await. 
 * Use like: `await wait(1000);`
 * @param {*} ms 
 */
async function wait$1(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

const urlRE = new RegExp(/^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\.beep|\.lwz|\.xpc|\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\.beeps?|xmpp|xri|ymsgr|z39\.50[rs]?):(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]|\([^\s()<>]*\))+(?:\([^\s()<>]*\)|[^\s`*!()\[\]{};:'".,<>?«»“”‘’]))/i);

const imagePathRE = new RegExp(/^.*?\.(apng|bmp|gif|jpg|jpeg|jfif|pjpeg|pjp|png|svg|tif|tiff|webp)$/i);


/**
 * Return true if URL tests positive against GitHub's URL regex.
 * https://github.com/codemirror/CodeMirror/blob/master/mode/gfm/gfm.js#L14
 */
function isUrl(string) {
  return urlRE.test(string)
}

/**
 * Return true if string has valid image file format extension
 * E.g. .jpg, .gif, .apng.
 */
function isImagePath(url) {
  return imagePathRE.test(url)
}

// -------- COMPARE PATCHES -------- //

/**
 * Check if state property has changed by comparing Immer patches. And (optionally) if property now equals a specified value. For each patch, check if `path` array contains specified `props`, and if `value` value equals specified `toValue`.
 * @param {*} props - Either a string, or an array (for more precision).
 * @param {*} [toValue] - Optional value to check prop against
 */
function stateHasChanged(patches, props, toValue = '') {
	return patches.some((patch) => {

  	const pathAsString = patch.path.toString();
		const checkMultipleProps = Array.isArray(props);

		const hasChanged = checkMultipleProps ?
    	props.every((key) => pathAsString.includes(key)) :
      pathAsString.includes(props);
    
    // If optional 'toValue' argument is specified, check it.
    // Else, only check `hasChanged`
    if (toValue) {
      const equalsValue = patch.value == toValue;
      return hasChanged && equalsValue
    } else {
      return hasChanged
    }
  })
}

/**
 * Compare two objects and return `true` if they differ.
 * @param {*} objA 
 * @param {*} objB 
 */
function objHasChanged(objA, objB) {
  return !deepEql(objA, objB)
}

/**
 * Set initial theme values
 * @param {*} initialColors 
 */
function init$1(initialState, initialColors) {
  
  // Set initial values
  setCSSVariables(initialColors.colors);
  setEditorThemeStylesheet(initialState.theme.editorTheme);
}

async function updateTheme(newState, patches) {
  const darkModeChanged = stateHasChanged(patches, ["darkMode"]);
  const themeChanged = stateHasChanged(patches, "theme");
  
  if (darkModeChanged || themeChanged) {
    const observeThemeOverrides = window.id !== 'preferences';
    const { colors } = await window.api.invoke('getColors', observeThemeOverrides);
    setCSSVariables(colors);
  }

  if (themeChanged) {
    setEditorThemeStylesheet(newState.theme.editorTheme);
  }
}


/**
 * Set CSS variables on the `body` element
 * @param {*} colors 
 */
function setCSSVariables(colors) {
  for (const [varName, rgbaHex] of Object.entries(colors)) {
    document.body.style.setProperty(`--${varName}`, rgbaHex);
  }
}

/**
 * Set `editor-theme` stylesheet href in `index.html`
 * E.g. If editor theme name is 'solarized', then stylesheet 
 * href is './styles/themes/solarized/solarized.css'.
 */
function setEditorThemeStylesheet(themeName) {
  const stylesheet = document.getElementById('editor-theme');
  const url = `./styles/editorThemes/${themeName}.css`;
  stylesheet.setAttribute('href', url);
}

F(); // Required by immer

// Svelte stores:
// These are accessed by Svelte components.
const state = writable({});
const isWindowFocused = writable(false);
const isMetaKeyDown = writable(false);
const project = writable({});
const sidebar = writable({});
const markdownOptions = writable({});

// Current state as JS object:
// This may seem redundant (why not access state store?, but it's here for performance reasons. When we applyPatches(state, patches), we need to pass it the current state. We could get that from `state` writable by using `get(state)`, but that creates and destroys a one-time subscriber every time. Which has performance implications given how often we modify state. Svelte specifically recommends against this type of use, in the docs: https://svelte.dev/docs#get. So instead we create an intemediary `stateAsObject`, apply patches to it, and then pass it to state.set(...).
let stateAsObject = {};

// Copy of the previous state, so we can check for changes
let oldState = {}; 

/**
 * Set Svelte stores from `stateAsObject`.
 */
function setStores() {
   
  // Set `state` store
  state.set(stateAsObject);

  // Set `isWindowFocused` store
  isWindowFocused.set(stateAsObject.focusedWindowId == window.id);

  // Set isMetaKeyDown false when window is not focused
  if (stateAsObject.focusedWindowId !== window.id) {
    isMetaKeyDown.set(false);
  }

  // Set `project` and `sidebar` stores, if this is NOT the prefs window.
  if (window.id !== 'preferences') {
    const proj = stateAsObject.projects.byId[window.id];
    project.set(proj);
    sidebar.set(proj.sidebar);
  }

  const markdownOptionsHaveChanged = objHasChanged(oldState.markdown, stateAsObject.markdown);
  if (markdownOptionsHaveChanged) {
    markdownOptions.set(stateAsObject.markdown);
  }
}

function updateFromPatches(patches) {

  // Update stateAsObject
  oldState = {...stateAsObject};
  stateAsObject = vn(stateAsObject, patches);

  // Update `window.state`
  window.state = stateAsObject;

  // Update stores
  setStores();

  // Update theme values
  updateTheme(stateAsObject, patches);
}


/**
 * Set initial value of stores and `stateAsObject`
 */
function init$2(initialState) {

  // Create listeners for changes
  window.api.receive("statePatchesFromMain", updateFromPatches);

  // Set window.id. Retreive value from url params.
  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  window.id = urlParams.get('id');

  // Set initial state values
  stateAsObject = initialState;
  setStores();

  // Expose stateAsObject on window
  window.state = stateAsObject;

  // Listen for metakey presses
  document.addEventListener('keydown', (evt) => {
    if (evt.metaKey) {
      isMetaKeyDown.set(true);
    }
  });

  document.addEventListener('keyup', (evt) => {
    isMetaKeyDown.set(false);
  });

  
}

F(); // Required by immer

// Svelte store
const files = writable({});

// Current state as JS object:
// See: StateManager for explaination of how we use this object.
// (StateManager has equivalent, called `stateAsObject`.
let filesAsObject = {};


/**
 * Set Svelte stores from `stateAsObject`.
 */
function setStore() {
  files.set(filesAsObject);
}

function init$3(initialFiles) {

  // When we start the app, we try to fetch `files` from main. If case files aren't ready yet (most commmonly on first run, when the user has not yet defined a project directory), this will be skipped, and we'll instead set files when `initialFilesFromMain` is received.

  // During full app reload (main and render process), 
  if (initialFiles) {
    filesAsObject = initialFiles;
    setStore();
  }

  // Create listener: Main sends initial `files` when the project's Watcher instance has does its first `mapProject`.
  window.api.receive('initialFilesFromMain', (files) => {
    filesAsObject = files;
    setStore();
  });

  // Create listener: Update files when patches arrive from main...
  window.api.receive("filesPatchesFromMain", (patches) => {
    console.log('filesPatchesFromMain');
    filesAsObject = vn(filesAsObject, patches);
    setStore();
  });
}

const yamlOverlay = {
  startState: function () {
    return {
      frontMatter: false,
    }
  },
  token: function (stream, state) {
    state.combineTokens = true;

    // Mark lines as `frontmatter`

    if (stream.sol()) {

      if (stream.match(/---/, false)) {
        state.frontMatter = state.frontMatter ? false : true;
        stream.next();
        return "line-frontmatter"
      }

      if (state.frontMatter) {
        stream.next();
        return "line-frontmatter"
      }
    }

    while (stream.next() != null) { }

    // If we don't do any of the above, return null (token does not need to be styled)
    return null
  }
};

// const markdownOverlayOLD = {
//   startState: () => {
//     return {
//       frontMatter: false,
//       list_ul: false,
//       emphasis: false
//     }
//   },
//   token: (stream, state) => {

//     // state.combineTokens = null

//     // if (!state.emphasis) {
//     //   state.emphasis = true
//     // } else if (stream.sol() && state.emphasis) {
//     //   state.combineTokens = true
//     //   return 'line-emphasis'
//     // }

//     // let ch

//     // if (stream.sol() && state.emphasis) {
//     // }

//     // Demo: https://regex101.com/r/1MR7Tg/1
//     // if (stream.sol()) {
//     //   if (stream.match(/^(-|\*|\+)\s/)) {
//     //     // state.combineTokens = true
//     //     state.list_ul = true
//     //     // return "line-list1"
//     //     // } else if (stream.match(/^(-|\*|\+)\s/)) {
//     //     // state.list_ul = true
//     //     return "line-list1"
//     //   } else if (stream.match(/^\s{2,3}(-|\*|\+)\s/)) {
//     //     state.combineTokens = true
//     //     return "line-list2"
//     //   } else if (stream.match(/^\s{4,5}(-|\*|\+)\s/)) {
//     //     state.combineTokens = true
//     //     return "line-list3"
//     //   } else if (stream.match(/^\s{6, 7}(-|\*|\+)\s/)) {
//     //     state.combineTokens = true
//     //     return "line-list4"
//     //   }
//     // }

//     // Blockquote 
//     // if (stream.sol() && stream.match(/^>\s/)) {
//     //   // stream.skipToEnd()
//     //   stream.next()
//     //   return "line-blockquote"
//     // }

//     // // Strong - Flanking ** characters
//     // if (stream.match('**')) {
//     //   state.combineTokens = true
//     //   return 'flank'
//     // }

//     // // Emphasis - Flanking _ characters
//     // if (stream.match(' _') || stream.match('_ ')) {
//     //   state.combineTokens = true
//     //   return 'flank'
//     // }

//     // // Code - Flanking ` characters
//     // if (stream.match('`')) {
//     //   state.combineTokens = true
//     //   return 'flank'
//     // }

//     // // Header (hash tags)
//     // if (stream.sol() && stream.match(/^#{1,5}/)) {
//     //   state.combineTokens = true
//     //   return "header-hash"
//     // }

//     // Cite keys
//     if (stream.match("[@")) {
//       while ((ch = stream.next()) != null)
//         if (ch == "]") {
//           state.combineTokens = false
//           return "citation"
//         }
//     }

//     // Wiki links
//     // if (stream.match("[[")) {
//     //   while ((ch = stream.next()) != null)
//     //     if (ch == "]" && stream.next() == "]") {
//     //       stream.eat("]")
//     //       state.combineTokens = true
//     //       return "wikilink"
//     //     }
//     // }

//     // Figures
//     if (stream.match("![")) {
//       stream.skipToEnd()
//       return "figure"
//     }

//     // Links
//     // if (stream.match("[")) {
//     //   while ((ch = stream.next()) != null)
//     //     console.log(stream.baseToken())
//     //   if (ch == ")") {
//     //     // state.combineTokens = true
//     //     return "linkwrapper "
//     //   }
//     // }

//     while (
//       stream.next() != null
//       // Line
//       && !stream.match(">", false)
//       && !stream.match("#", false)
//       // Inline
//       && !stream.match("**", false)
//       && !stream.match(" _", false)
//       && !stream.match("_ ", false)
//       && !stream.match("`", false)
//       && !stream.match("[@", false)
//       && !stream.match("![", false)
//       && !stream.match("[[", false)
//       // && !stream.match("[", false)
//     ) { }

//     // If we don't do any of the above, return null (token does not need to be styled)
//     return null
//   }
// }

const markdownOverlay = {

  // State object: Is always passed when reading a token, and which can be mutated by the tokenizer.
  // Modes that use a state must define a `startState` method on their mode object.

  startState: () => {
    return {
      fencedCodeBlock: false,
      texMathDisplay: false,
    }
  },

  // Tokenizer (lexer): All modes must define this method. Takes a character stream as input, reads one token from the stream, advances it past a token, optionally update its state, and return a style string, or null for tokens that do not have to be styled.

  // Multiple styles can be returned (separated by spaces), for example "string error" for a thing that looks like a string but is invalid somehow (say, missing its closing quote). When a style is prefixed by "line-" or "line-background-", the style will be applied to the whole line

  // The stream object that's passed to token encapsulates a line of code (tokens may never span lines) and our current position in that line. 

  token: (stream, state) => {

    state.combineTokens = true;

    /*
    Style lines: We apply line styles in our overlay when we cannot apply them in the underlying markdown.js mode. This happens when we delegate styling to another mode, as in the case of fenced code blocks, TeX math, etc. 
    */

    if (stream.sol()) {

      // ----- Fenced code block: Style line ----- //

      // NOTE: Regex taken from underlying markdown mode
      if (!state.fencedCodeBlock && stream.match(/^(~~~+|```+)[ \t]*([\w+#-]*)[^\n`]*$/)) {
        state.fencedCodeBlock = true;
        stream.skipToEnd();
        return 'line-fencedcodeblock'
      } else if (state.fencedCodeBlock) {
        // If we've reached the end, stop the state
        if (stream.match(/^(~~~+|```+)/)) state.fencedCodeBlock = false;
        // console.log(stream)
        stream.skipToEnd();
        return 'line-fencedcodeblock'
      }

      // ----- TeX math equation: Style line ----- //
      
      // NOTE: Regex taken from underlying markdown mode
      if (!state.texMathDisplay && stream.match(/^\$\$$/)) {
        state.texMathDisplay = true;
        stream.skipToEnd();
        return 'line-texmath-display'
      } else if (state.texMathDisplay) {
        // If we've reached the end, stop the state
        if (stream.match(/^\$\$$/)) {
          state.texMathDisplay = false;
          stream.skipToEnd();
          return 'line-texmath-display md'
        } else {
          stream.skipToEnd();
          return 'line-texmath-display'
        }
      }
    }

    // Advance 
    if (stream.next() != null) ;

    // If we don't do any of the above, return null (token does not need to be styled)
    return null
  },

  blankLine: function (state) {

    // Style blank lines for multi-line 
    if (state.fencedCodeBlock) {
      return 'line-fencedcodeblock'
    } else if (state.texMathEquation) {
      return `line-texmath-display`
    }

    return
  }
};


/**
 * Define custom "Gambier" mode to be used with CodeMirror.
 * Per: https://codemirror.net/doc/manual.html#modeapi
 */
function defineGambierMode() {
  CodeMirror.defineMode("gambier", (config, modeConfig) => {

    /* 
    - config = "...a CodeMirror configuration object (the thing passed to the CodeMirror function)".
    - modeConfig = "...an optional mode configuration object (as in the mode option), returns a mode object".
    https://codemirror.net/doc/manual.html#modeapi
    */

    const START = 0, FRONTMATTER = 1, BODY = 2;

    const yamlMode = CodeMirror.overlayMode(CodeMirror.getMode(config, {
      name: "yaml"
    }), yamlOverlay);

    const markdownMode = CodeMirror.overlayMode(CodeMirror.getMode(config, {
      name: 'markdown',
      taskLists: true,
      strikethrough: true,
      fencedCodeBlockHighlighting: true,
      fencedCodeBlockDefaultMode: 'javascript',
      ...modeConfig.markdownOptions
      // highlightFormatting: true,
    }), markdownOverlay);

    function curMode(state) {
      return state.state == BODY ? markdownMode : yamlMode
    }

    return {
      startState: function () {
        return {
          state: START,
          inner: CodeMirror.startState(yamlMode)
        }
      },
      copyState: function (state) {
        return {
          state: state.state,
          inner: CodeMirror.copyState(curMode(state), state.inner)
        }
      },
      token: function (stream, state) {
        if (state.state == START) {
          if (stream.match(/---/, false)) {
            state.state = FRONTMATTER;
            return yamlMode.token(stream, state.inner)
          } else {
            state.state = BODY;
            state.inner = CodeMirror.startState(markdownMode);
            return markdownMode.token(stream, state.inner)
          }
        } else if (state.state == FRONTMATTER) {
          var end = stream.sol() && stream.match(/(---|\.\.\.)/, false);
          var style = yamlMode.token(stream, state.inner);
          if (end) {
            state.state = BODY;
            state.inner = CodeMirror.startState(markdownMode);
          }
          return style
        } else {
          return markdownMode.token(stream, state.inner)
        }
      },
      innerMode: function (state) {
        return { mode: curMode(state), state: state.inner }
      },
      blankLine: function (state) {
        var mode = curMode(state);

        // if (state.inner.overlay.fencedCodeBlock) return 'line-fencedcodeblock'
        if (mode.blankLine) return mode.blankLine(state.inner)
      }
    }
  });
}

/* src/js/renderer/component/backgrounds/midnight.svelte generated by Svelte v3.30.1 */

const file = "src/js/renderer/component/backgrounds/midnight.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-rchymv-style";
	style.textContent = "@keyframes svelte-rchymv-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.background.svelte-rchymv{width:100%;height:100%;top:0;left:0;position:absolute;z-index:-1;background:linear-gradient(#002F68, #005AB2)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkbmlnaHQuc3ZlbHRlIiwic291cmNlcyI6WyJtaWRuaWdodC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLmJhY2tncm91bmQge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogLTE7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjMDAyRjY4LCAjMDA1QUIyKTtcbn08L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiYmFja2dyb3VuZFwiPlxuXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSXdCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLGNBQUMsQ0FBQyxBQUNYLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixHQUFHLENBQUUsQ0FBQyxDQUNOLElBQUksQ0FBRSxDQUFDLENBQ1AsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEVBQUUsQ0FDWCxVQUFVLENBQUUsZ0JBQWdCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxBQUMvQyxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "background svelte-rchymv");
			add_location(div, file, 22, 0, 413);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Midnight", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Midnight> was created with unknown prop '${key}'`);
	});

	return [];
}

class Midnight extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-rchymv-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Midnight",
			options,
			id: create_fragment.name
		});
	}
}

/* src/js/renderer/component/backgrounds/systemWindow.svelte generated by Svelte v3.30.1 */

const file$1 = "src/js/renderer/component/backgrounds/systemWindow.svelte";

function add_css$1() {
	var style = element("style");
	style.id = "svelte-67911z-style";
	style.textContent = "@keyframes svelte-67911z-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.background.svelte-67911z{width:100%;height:100%;top:0;left:0;position:absolute;z-index:-1;background-color:var(--windowBackgroundColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtV2luZG93LnN2ZWx0ZSIsInNvdXJjZXMiOlsic3lzdGVtV2luZG93LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4uYmFja2dyb3VuZCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAtMTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2luZG93QmFja2dyb3VuZENvbG9yKTtcbn08L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiYmFja2dyb3VuZFwiPlxuXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSXdCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLGNBQUMsQ0FBQyxBQUNYLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixHQUFHLENBQUUsQ0FBQyxDQUNOLElBQUksQ0FBRSxDQUFDLENBQ1AsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEVBQUUsQ0FDWCxnQkFBZ0IsQ0FBRSxJQUFJLHVCQUF1QixDQUFDLEFBQ2hELENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "background svelte-67911z");
			add_location(div, file$1, 22, 0, 414);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SystemWindow", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SystemWindow> was created with unknown prop '${key}'`);
	});

	return [];
}

class SystemWindow extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-67911z-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SystemWindow",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/js/renderer/component/backgrounds/Background.svelte generated by Svelte v3.30.1 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFja2dyb3VuZC5zdmVsdGUiLCJzb3VyY2VzIjpbIkJhY2tncm91bmQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHN0YXRlIH0gZnJvbSBcIi4uLy4uL1N0YXRlTWFuYWdlclwiO1xuICBpbXBvcnQgTWlkbmlnaHQgZnJvbSBcIi4vbWlkbmlnaHQuc3ZlbHRlXCI7XG4gIGltcG9ydCBTeXN0ZW1XaW5kb3cgZnJvbSBcIi4vc3lzdGVtV2luZG93LnN2ZWx0ZVwiO1xuIFxuICBsZXQgY29tcG9uZW50XG5cbiAgJDogY29tcG9uZW50TmFtZSA9ICRzdGF0ZS50aGVtZS5iYWNrZ3JvdW5kQ29tcG9uZW50Lm5hbWVcbiAgJDogY29tcG9uZW50TmFtZSwgc2V0QmFja2dyb3VuZCgpXG5cbiAgZnVuY3Rpb24gc2V0QmFja2dyb3VuZCgpIHtcbiAgICBzd2l0Y2ggKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIGNhc2UgJ1N5c3RlbVdpbmRvdyc6XG4gICAgICAgIGNvbXBvbmVudCA9IFN5c3RlbVdpbmRvd1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnTWlkbmlnaHQnOlxuICAgICAgICBjb21wb25lbnQgPSBNaWRuaWdodFxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn08L3N0eWxlPlxuXG48c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtjb21wb25lbnR9IC8+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCd0IsV0FBVyx5QkFBWSxDQUFDLEFBQ3pDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRSxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*component*/ ctx[0];

	function switch_props(ctx) {
		return { $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let $state;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(2, $state = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Background", slots, []);
	let component;

	function setBackground() {
		switch (componentName) {
			case "SystemWindow":
				$$invalidate(0, component = SystemWindow);
				break;
			case "Midnight":
				$$invalidate(0, component = Midnight);
				break;
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Background> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		state,
		Midnight,
		SystemWindow,
		component,
		setBackground,
		componentName,
		$state
	});

	$$self.$inject_state = $$props => {
		if ("component" in $$props) $$invalidate(0, component = $$props.component);
		if ("componentName" in $$props) $$invalidate(1, componentName = $$props.componentName);
	};

	let componentName;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$state*/ 4) {
			 $$invalidate(1, componentName = $state.theme.backgroundComponent.name);
		}

		if ($$self.$$.dirty & /*componentName*/ 2) {
			 (setBackground());
		}
	};

	return [component, componentName, $state];
}

class Background extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Background",
			options,
			id: create_fragment$2.name
		});
	}
}

/**
 * Get element at specified line and ch
 */
function getElementAt(cm, line, ch) {
  const lineElements = getLineElements(cm, line);
  const element = lineElements.find((e) =>
    e.line == line &&
    e.start < ch &&
    e.end > ch
  );
  return element
}

/**
 * Get array of "elements" for the line. 
 * E.g. emphasis, link-inline, image-reference-full.
 * Elements contain 1 or more child spans.
 * E.g. `url` and `title` are child spans of a link element.
 * @param {*} cm 
 * @param {*} lineHandle 
 */
function getLineElements(cm, line) {

  let elements = [];
  const tokenPairs = getElementTokens(cm, line);

  tokenPairs.forEach((tokenPair) => {
    const { start: startToken, end: endToken, type, tokens } = tokenPair;
    const markdown = cm.getRange({ line, ch: startToken.start }, { line, ch: endToken.end });
    const classes = startToken.type.split(' ').filter((c) => !c.includesAny('md', '-start'));
    const element = {
      start: startToken.start,
      end: endToken.end,
      line,
      type,
      markdown,
      classes,
      isIncomplete: classes.includes('incomplete')
    };

    // Get child spans if type is link or image.
    // Else, define single span consisting of the text inside the `md` characters.
    if (type.includesAny('link', 'image', 'footnote-reference')) {
      element.spans = getChildSpans(cm, tokens);
    } else {
      const firstNonFormattingToken = tokens.find((t) => !t.type.includes('md'));
      const lastNonFormattingToken = [...tokens].reverse().find((t) => !t.type.includes('md'));
      element.spans = [{
        start: firstNonFormattingToken.start,
        end: lastNonFormattingToken.end,
      }];
    }

    // Define child strings 
    // E.g. Child string of **hello world** is "hello world".
    element.spans.forEach((s) => {
      s.string = markdown.slice(
        s.start - element.start,
        s.start - element.start + (s.end - s.start)
      );
    });

    // Define mark details

    element.mark = {
      isMarkable: type.equalsAny('link-inline', 'link-reference-full', 'link-reference-collapsed', 'image-inline', 'image-reference-full', 'image-reference-collapsed', 'footnote-inline', 'footnote-reference', 'citation'),
      isEditable: type.includesAny('link'),
    };

    // Define mark.displaySpanName
    if (element.type.includes('link')) {
      if (element.type.includesAny('shortcut', 'collapsed')) {
        element.mark.displayedSpanName = 'label';
      } else {
        element.mark.displayedSpanName = 'text';
      }
    }

    elements.push(element);
  });

  return elements
}


function getElementTokens(cm, line) {

  // For given line, go through tokens, and find tokens that start elements.
  // For each of the starts, find the end token.
  let startEndTokenPairs = [];
  const lineTokens = cm.getLineTokens(line).filter((t) => t.type !== null);

  for (var i = 0; i < lineTokens.length; i++) {

    const t = lineTokens[i];
    const prevT = lineTokens[i - 1];
    const isStartToken =
      t.type.includes('-start') && !prevT?.type.includes('-start') ||
      t.type == 'bare-url' && prevT?.type !== 'bare-url' ||
      t.type == 'task' && prevT?.type !== 'task';

    if (!isStartToken) continue

    if (t.type.includes('-start')) {
      const startType = t.type.match(/[^\s]*?-start/)[0];
      const endType = startType.replace('-start', '-end');
      // console.log(endType)
      let endIndex = lineTokens.slice(i).findIndex((t, index) => {
        const nextEl = lineTokens.slice(i)[index + 1];
        // Find last token with correct end type.
        // Check that subsequent character doesn't also have that type.
        // This applies in case of `strong`, which has two closing `*`.
        // We only want the last one.
        return t.type.includes(endType) && !nextEl?.type?.includes(endType)
      });
      endIndex = endIndex == -1 ?
        endIndex = lineTokens.length - 1 :
        endIndex += i;
      startEndTokenPairs.push({
        start: t,
        end: lineTokens[endIndex],
        type: startType.replace('-start', ''),
        tokens: lineTokens.slice(i, endIndex + 1)
      });
    } else if (t.type == 'bare-url') {
      let endIndex = lineTokens.slice(i).findIndex((t) => !t.type.includes('bare-url'));
      endIndex = endIndex == -1 ?
        endIndex = lineTokens.length - 1 :
        endIndex += i;
      startEndTokenPairs.push({
        start: t,
        end: lineTokens[endIndex],
        type: 'bare-url',
        tokens: lineTokens.slice(i, endIndex + 1)
      });
    } else if (t.type == 'task') {
      const endIndex = lineTokens.slice(i).findIndex((t) => !t.type.includes('task')) + i - 1;
      startEndTokenPairs.push({
        start: t,
        end: lineTokens[endIndex],
        type: 'task',
        tokens: lineTokens.slice(i, endIndex + 1)
      });
    }
  }

  return startEndTokenPairs
}


/**
 * Return array of "child spans" for the element.
 * Applies to compound elements like links, which have title, url, etc.
 * Each return object has `start`, `end`, and `type`.
 */
function getChildSpans(cm, tokens) {
  let spans = [];
  tokens = tokens.filter((t) => !t.type.includes('md'));
  var i = 0;
  while (i < tokens.length) {
    const token = tokens[i];
    const type = token.type;
    let indexOfEnd = tokens.slice(i).findIndex((t) => t.type !== type);
    if (indexOfEnd !== -1) {
      indexOfEnd += i;
      spans.push({
        start: token.start,
        end: tokens[indexOfEnd - 1].end,
        type
      });
      i = indexOfEnd;
    } else {
      spans.push({
        start: token.start,
        end: tokens[tokens.length - 1].end,
        type
      });
      break
    }
  }

  return spans
}

/* src/js/renderer/editor/marks/Task.svelte generated by Svelte v3.30.1 */

const { console: console_1 } = globals;
const file$2 = "src/js/renderer/editor/marks/Task.svelte";

function add_css$3() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFzay5zdmVsdGUiLCJzb3VyY2VzIjpbIlRhc2suc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgY21cbiAgZXhwb3J0IGxldCBlbGVtZW50XG5cbiAgJDogY29uc29sZS5sb2coZWxlbWVudClcblxuICBleHBvcnQgZnVuY3Rpb24gb25TZWxlY3Rpb25DaGFuZ2Uob3JpZ2luLCByYW5nZXMpIHtcbiAgICAvLyBEbyBub3RoaW5nXG4gIH1cblxuICAvKipcbiAgICogU2V0IENNIHNlbGVjdGlvbiB0byB0aGlzIG1hcmsuXG4gICAqL1xuICBleHBvcnQgZnVuY3Rpb24gYWx0VGFiVG8oKSB7XG4gICAgY29uc3QgeyBsaW5lLCBzdGFydCwgZW5kIH0gPSBlbGVtZW50XG4gICAgY20uc2V0U2VsZWN0aW9uKHsgbGluZSwgY2g6IGVuZCB9LCB7IGxpbmUsIGNoOiBzdGFydCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgIGNvbnN0IHsgaXNDbG9zZWQsIGxpbmUsIHN0YXJ0LCBlbmQgfSA9IGVsZW1lbnRcbiAgICBjbS5yZXBsYWNlUmFuZ2UoXG4gICAgICBpc0Nsb3NlZCA/ICcgJyA6ICd4JywgXG4gICAgICB7IGxpbmUsIGNoOiBzdGFydCArIDMgfSwgXG4gICAgICB7IGxpbmUsIGNoOiBzdGFydCArIDQgfVxuICAgIClcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufTwvc3R5bGU+XG5cbjxpbnB1dCBcbiAgY2xhc3M9e2VsZW1lbnQuY2xhc3Nlcy5qb2luKCcgJyl9IFxuICB0eXBlPVwiY2hlY2tib3hcIiBcbiAgY2hlY2tlZD17ZWxlbWVudC5pc0Nsb3NlZH1cbiAgb246Y2xpY2s9e3RvZ2dsZX0gXG4vPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$3(ctx) {
	let input;
	let input_class_value;
	let input_checked_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			attr_dev(input, "class", input_class_value = /*element*/ ctx[0].classes.join(" "));
			attr_dev(input, "type", "checkbox");
			input.checked = input_checked_value = /*element*/ ctx[0].isClosed;
			add_location(input, file$2, 37, 0, 780);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = listen_dev(input, "click", /*toggle*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*element*/ 1 && input_class_value !== (input_class_value = /*element*/ ctx[0].classes.join(" "))) {
				attr_dev(input, "class", input_class_value);
			}

			if (dirty & /*element*/ 1 && input_checked_value !== (input_checked_value = /*element*/ ctx[0].isClosed)) {
				prop_dev(input, "checked", input_checked_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onSelectionChange(origin, ranges) {
	
} // Do nothing

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Task", slots, []);
	let { cm } = $$props;
	let { element } = $$props;

	function altTabTo() {
		const { line, start, end } = element;
		cm.setSelection({ line, ch: end }, { line, ch: start });
	}

	function toggle() {
		const { isClosed, line, start, end } = element;
		cm.replaceRange(isClosed ? " " : "x", { line, ch: start + 3 }, { line, ch: start + 4 });
	}

	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Task> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(2, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(0, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		cm,
		element,
		onSelectionChange,
		altTabTo,
		toggle
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(2, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(0, element = $$props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element*/ 1) {
			 console.log(element);
		}
	};

	return [element, toggle, cm, onSelectionChange, altTabTo];
}

class Task extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$3();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			cm: 2,
			element: 0,
			onSelectionChange: 3,
			altTabTo: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Task",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*cm*/ ctx[2] === undefined && !("cm" in props)) {
			console_1.warn("<Task> was created without expected prop 'cm'");
		}

		if (/*element*/ ctx[0] === undefined && !("element" in props)) {
			console_1.warn("<Task> was created without expected prop 'element'");
		}
	}

	get cm() {
		throw new Error("<Task>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<Task>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<Task>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<Task>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onSelectionChange() {
		return onSelectionChange;
	}

	set onSelectionChange(value) {
		throw new Error("<Task>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get altTabTo() {
		return this.$$.ctx[4];
	}

	set altTabTo(value) {
		throw new Error("<Task>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/editor/marks/Mark.svelte generated by Svelte v3.30.1 */

const { document: document_1 } = globals;
const file$3 = "src/js/renderer/editor/marks/Mark.svelte";

function add_css$4() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1.head, style);
}

// (306:0) {:else}
function create_else_block(ctx) {
	let span;
	let span_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			span = element("span");
			attr_dev(span, "tabindex", "0");
			attr_dev(span, "class", span_class_value = `mark ${/*classes*/ ctx[0].join(" ")}`);
			toggle_class(span, "highlighted", /*isHighlighted*/ ctx[5]);
			add_location(span, file$3, 306, 2, 10352);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			/*span_binding_1*/ ctx[18](span);

			if (!mounted) {
				dispose = [
					listen_dev(span, "mousedown", /*selectMark*/ ctx[6], false, false, false),
					listen_dev(span, "dblclick", /*openWizard*/ ctx[1], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*classes*/ 1 && span_class_value !== (span_class_value = `mark ${/*classes*/ ctx[0].join(" ")}`)) {
				attr_dev(span, "class", span_class_value);
			}

			if (dirty & /*classes, isHighlighted*/ 33) {
				toggle_class(span, "highlighted", /*isHighlighted*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			/*span_binding_1*/ ctx[18](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(306:0) {:else}",
		ctx
	});

	return block;
}

// (292:0) {#if isEditable}
function create_if_block(ctx) {
	let span;
	let span_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			span = element("span");
			attr_dev(span, "contenteditable", "");
			attr_dev(span, "tabindex", "0");
			attr_dev(span, "class", span_class_value = `mark editable ${/*classes*/ ctx[0].join(" ")}`);
			if (/*displayedText*/ ctx[4] === void 0) add_render_callback(() => /*span_input_handler*/ ctx[17].call(span));
			toggle_class(span, "highlighted", /*isHighlighted*/ ctx[5]);
			add_location(span, file$3, 292, 2, 10014);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			/*span_binding*/ ctx[16](span);

			if (/*displayedText*/ ctx[4] !== void 0) {
				span.textContent = /*displayedText*/ ctx[4];
			}

			if (!mounted) {
				dispose = [
					listen_dev(span, "input", /*span_input_handler*/ ctx[17]),
					listen_dev(span, "mousedown", /*selectMark*/ ctx[6], false, false, false),
					listen_dev(span, "keydown", /*onKeyDown*/ ctx[8], false, false, false),
					listen_dev(span, "click", /*onClick*/ ctx[7], false, false, false),
					listen_dev(span, "dblclick", /*openWizard*/ ctx[1], false, false, false),
					listen_dev(span, "input", /*writeChanges*/ ctx[9], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*classes*/ 1 && span_class_value !== (span_class_value = `mark editable ${/*classes*/ ctx[0].join(" ")}`)) {
				attr_dev(span, "class", span_class_value);
			}

			if (dirty & /*displayedText*/ 16 && /*displayedText*/ ctx[4] !== span.textContent) {
				span.textContent = /*displayedText*/ ctx[4];
			}

			if (dirty & /*classes, isHighlighted*/ 33) {
				toggle_class(span, "highlighted", /*isHighlighted*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			/*span_binding*/ ctx[16](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(292:0) {#if isEditable}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*isEditable*/ ctx[3]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Mark", slots, []);
	let { cm } = $$props;
	let { textMarker = null } = $$props;
	let { type = "" } = $$props; // element.type
	let { classes = [] } = $$props; // element.classes
	let el; // This dom element
	let isEditable = false; // Depends on `type`
	let displayedText = ""; // Depends on the span and isEditable
	let isHighlighted = false;

	async function updateDisplayedText() {
		if (!textMarker) return;
		const { from, to } = textMarker.find();
		const element = getElementAt(cm, from.line, from.ch + 1);
		$$invalidate(3, isEditable = element.mark.isEditable);
		if (!isEditable) return;

		// Only update displayedText if there's a new value.
		// const newDisplayedText = element[element.mark.displayedSpanName].string
		// if (displayedText !== newDisplayedText) {
		//   displayedText = newDisplayedText
		// }
		const newDisplayedText = element.spans.find(c => c.type.includes(element.mark.displayedSpanName)).string;

		if (displayedText !== newDisplayedText) $$invalidate(4, displayedText = newDisplayedText);

		// Wait for state changes to apply to DOM,
		// then call changed() on the textMarker.
		// This tells CodeMirror that a resize has happened,
		// which is critical for correct cursor positioning.
		await tick$1();

		textMarker.changed();
	}

	function onSelectionChange() {
		const selections = cm.listSelections();

		for (const range of selections) {
			const { from, to } = getFromAndTo(range);
			if (isEditable) checkIfArrowedInto(origin, from, to);
			checkIfInsideSelection(from, to);
		}
	}

	/**
 * If user arrows into mark, place cursor inside the mark, on the appropriate edge. Sounds obvious, but we have to implement this manually, by checking
 * @param selectionFrom
 * @param selectionTo
 */
	function checkIfArrowedInto(origin, selectionFrom, selectionTo) {
		const { from, to } = textMarker.find();

		// Our criteria for whether to arrow into the mark.
		const keyWasPressed = origin == "+move";

		const markIsNotHighlighted = !isHighlighted;

		const isSingleChSelectionOnSameLineAsMark = selectionFrom.line == selectionTo.line && // Single line
		selectionFrom.ch == selectionTo.ch && // Single ch
		selectionFrom.line == from.line; // Same line as mark

		// Only proceed if the above are all true. Highlighted is important because when the mark is highlighted, we want the cursor to skip over the mark, instead of entering. By not proceeding, CM handles the arrow without interference, and the cursor skips the mark.
		if (!keyWasPressed || !markIsNotHighlighted || !isSingleChSelectionOnSameLineAsMark) return;

		// Set the cursor inside the mark on the correct side.
		// All the weird stuff with `createRange` etc is just part of how
		// setting text selections works with HTML, apparently.
		const enteredLeft = selectionTo.ch == to.ch && selectionTo.sticky == null;

		const enteredRight = selectionTo.ch == from.ch && selectionTo.sticky == null;
		if (!enteredLeft && !enteredRight) return;
		const placeCursorAt = enteredLeft ? 0 : displayedText.length;
		const range = document.createRange();
		const sel = window.getSelection();
		range.setStart(el.childNodes[0], placeCursorAt);
		range.collapse(true);
		sel.removeAllRanges();
		sel.addRange(range);
		el.focus();
	}

	/**
 * If mark is inside a text selection, highlight it. 
 * Else, make sure it's not highlighted.
 * @param selectionFrom
 * @param selectionTo
 */
	function checkIfInsideSelection(selectionFrom, selectionTo) {
		const { from, to } = textMarker.find();
		const isMultiLineSelection = selectionFrom.line !== selectionTo.line;
		const isMultiChSelectionOnSameLineAsMark = selectionFrom.line == selectionTo.line && selectionFrom.ch !== selectionTo.ch;
		selectionFrom.line == from.line;

		if (isMultiLineSelection) {
			var isInside = selectionFrom.line == from.line && selectionFrom.ch <= from.ch || selectionFrom.line < from.line && from.line < selectionTo.line || selectionTo.line == from.line && selectionTo.ch >= to.ch;
		} else if (isMultiChSelectionOnSameLineAsMark) {
			var isInside = from.line == selectionFrom.line && selectionFrom.ch <= from.ch && to.ch <= selectionTo.ch;
		} else {
			var isInside = false;
		}

		$$invalidate(5, isHighlighted = isInside);
	}

	/**
 * Set selection of CM instance.
 * If editable, place cursor at start of mark/element.
 * If NOT editable, select the entire mark/element
 * @param evt
 */
	function selectMark(evt) {
		const { from, to } = textMarker.find();

		// Clear existing editor text selection, otherwise it will remain visible while the cursor is inside the contenteditable.
		if (isEditable) {
			cm.setCursor(to.line, to.ch);
		} else {
			cm.setSelection(from, to);
		}
	}

	function altTabTo() {
		openWizard();
	}

	function openWizard() {
		const { from, to } = textMarker.find();

		// Notice we seem to select from end-to-start. With `setSelection`
		// the first value is the anchor, and second is the head. So we're
		// telling CM to place the anchor on the right. We do this so that
		// when alt-tabbing, we skip over the element child spans.
		// console.log(from, to)
		cm.setSelection(from, to);

		$$invalidate(5, isHighlighted = true);
		cm.wizard.show(textMarker, type);
	}

	// --------- EDITABLE MARK FUNCTIONS --------- //
	/**
 * Open url on command click (if there is a url)
 */
	function onClick(evt) {
		if (evt.metaKey && type.includes("link")) {
			const { from, to } = textMarker.find();
			const element = getElementAt(cm, from.line, from.ch + 1);
			const url = element.spans.find(s => s.type.includes("url"));

			if (url?.string) {
				window.api.send("openUrlInDefaultBrowser", url.string);
			} // TODO: Handle missing url?
			// Mark should be visibly "incomplete", so maybe we
		} // just do nothing on click. And/or don't style with 
		// cursor: pointer. 
	}

	function onKeyDown(evt) {
		const { from, to } = textMarker.find();

		switch (evt.key) {
			case "Backspace":
			case "Delete":
				if (isHighlighted) {
					cm.replaceRange("", from, to);
					cm.focus();
				}
				break;
			case "ArrowLeft":
				const atLeftEdge = window.getSelection().getRangeAt(0).endOffset == 0;
				if (atLeftEdge) {
					cm.setCursor(from.line, from.ch);
					cm.focus();

					if (evt.altKey) {
						// If alt key is pressed, trigger a second alt-left in CodeMirror, 
						// to correctly reproduce expected behaviour (cursor jumps to 
						// beginning of previous word.)
						cm.triggerOnKeyDown({
							type: "keydown",
							keyCode: 37,
							altKey: true,
							shiftKey: false
						});
					}
				}
				break;
			case "ArrowRight":
				const atRightEdge = window.getSelection().getRangeAt(0).endOffset == el.innerText.length;
				if (atRightEdge) {
					cm.setCursor(to.line, to.ch);
					cm.focus();

					// If alt key is pressed, trigger a second alt-right in CodeMirror, 
					// to correctly reproduce expected behaviour (cursor jumps to 
					// end of next word.)
					if (evt.altKey) {
						cm.triggerOnKeyDown({
							type: "keydown",
							keyCode: 39,
							altKey: true,
							shiftKey: false
						});
					}
				}
				break;
			case "ArrowUp":
				evt.preventDefault();
				cm.focus();
				cm.triggerOnKeyDown({
					type: "keydown",
					keyCode: 38,
					altKey: false,
					shiftKey: false
				});
				break;
			case "ArrowDown":
				evt.preventDefault();
				cm.focus();
				cm.triggerOnKeyDown({
					type: "keydown",
					keyCode: 40,
					altKey: false,
					shiftKey: false
				});
				break;
			case "Tab":
				evt.preventDefault();
				if (evt.altKey) {
					// Forward alt-tab events to `cm` by using undocumented `cm.triggerOnKeyDown` function. Per https://discuss.codemirror.net/t/signal-keydown/548/2. This ensures that alt-tab events work consistently, from user-pov, regardless of what element is focused (cm or widget).
					cm.triggerOnKeyDown({
						type: "keydown",
						keyCode: 9,
						altKey: true,
						shiftKey: evt.shiftKey
					});
				}
				break;
		}
	}

	/**
 * Write changes to the document.
 */
	function writeChanges(evt) {
		// Determine which span to write to. Depends on type and spanName.
		const { from, to } = textMarker.find();

		const element = getElementAt(cm, from.line, from.ch + 1);
		const { line, start, end } = element[element.mark.displayedSpanName];

		// Write changes
		writeToDoc(cm, evt.target.textContent, line, start, end);

		// Tell CodeMirror that TextMarker changed size
		textMarker.changed();
	}

	const writable_props = ["cm", "textMarker", "type", "classes"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mark> was created with unknown prop '${key}'`);
	});

	function span_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	function span_input_handler() {
		displayedText = this.textContent;
		$$invalidate(4, displayedText);
	}

	function span_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(10, cm = $$props.cm);
		if ("textMarker" in $$props) $$invalidate(11, textMarker = $$props.textMarker);
		if ("type" in $$props) $$invalidate(12, type = $$props.type);
		if ("classes" in $$props) $$invalidate(0, classes = $$props.classes);
	};

	$$self.$capture_state = () => ({
		tick: tick$1,
		getFromAndTo,
		writeToDoc,
		getElementAt,
		cm,
		textMarker,
		type,
		classes,
		el,
		isEditable,
		displayedText,
		isHighlighted,
		updateDisplayedText,
		onSelectionChange,
		checkIfArrowedInto,
		checkIfInsideSelection,
		selectMark,
		altTabTo,
		openWizard,
		onClick,
		onKeyDown,
		writeChanges
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(10, cm = $$props.cm);
		if ("textMarker" in $$props) $$invalidate(11, textMarker = $$props.textMarker);
		if ("type" in $$props) $$invalidate(12, type = $$props.type);
		if ("classes" in $$props) $$invalidate(0, classes = $$props.classes);
		if ("el" in $$props) $$invalidate(2, el = $$props.el);
		if ("isEditable" in $$props) $$invalidate(3, isEditable = $$props.isEditable);
		if ("displayedText" in $$props) $$invalidate(4, displayedText = $$props.displayedText);
		if ("isHighlighted" in $$props) $$invalidate(5, isHighlighted = $$props.isHighlighted);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*textMarker*/ 2048) {
			 (updateDisplayedText());
		}
	};

	return [
		classes,
		openWizard,
		el,
		isEditable,
		displayedText,
		isHighlighted,
		selectMark,
		onClick,
		onKeyDown,
		writeChanges,
		cm,
		textMarker,
		type,
		updateDisplayedText,
		onSelectionChange,
		altTabTo,
		span_binding,
		span_input_handler,
		span_binding_1
	];
}

class Mark extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-wv7751-style")) add_css$4();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			cm: 10,
			textMarker: 11,
			type: 12,
			classes: 0,
			updateDisplayedText: 13,
			onSelectionChange: 14,
			altTabTo: 15,
			openWizard: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Mark",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*cm*/ ctx[10] === undefined && !("cm" in props)) {
			console.warn("<Mark> was created without expected prop 'cm'");
		}
	}

	get cm() {
		return this.$$.ctx[10];
	}

	set cm(cm) {
		this.$set({ cm });
		flush();
	}

	get textMarker() {
		return this.$$.ctx[11];
	}

	set textMarker(textMarker) {
		this.$set({ textMarker });
		flush();
	}

	get type() {
		return this.$$.ctx[12];
	}

	set type(type) {
		this.$set({ type });
		flush();
	}

	get classes() {
		return this.$$.ctx[0];
	}

	set classes(classes) {
		this.$set({ classes });
		flush();
	}

	get updateDisplayedText() {
		return this.$$.ctx[13];
	}

	set updateDisplayedText(value) {
		throw new Error("<Mark>: Cannot set read-only property 'updateDisplayedText'");
	}

	get onSelectionChange() {
		return this.$$.ctx[14];
	}

	set onSelectionChange(value) {
		throw new Error("<Mark>: Cannot set read-only property 'onSelectionChange'");
	}

	get altTabTo() {
		return this.$$.ctx[15];
	}

	set altTabTo(value) {
		throw new Error("<Mark>: Cannot set read-only property 'altTabTo'");
	}

	get openWizard() {
		return this.$$.ctx[1];
	}

	set openWizard(value) {
		throw new Error("<Mark>: Cannot set read-only property 'openWizard'");
	}
}

/**
 * For each line of the doc, find and replace elements that 
 * have `isMarked` true with interactive Svelte components.
 */
function markDoc(cm) {

  // Clear existing marks
  cm.getAllMarks().forEach((mark) => mark.clear());

  cm.operation(() => {
    cm.eachLine((lineHandle) => markLine(cm, lineHandle.lineNo()));
  });
}


/**
 * Find the specified line, find and replace elements that 
 * have `isMarked` true with interactive Svelte components.
 * Before: `[Apple](https://apple.com "Computers!")`
 * After:  `Apple`
 */
function markLine(cm, line) {
  const elements = getLineElements(cm, line);
  elements.forEach((element) => markElement(cm, element));
}

/**
 * Mark the element. 
 * How we mark depends on the type.
 */
function markElement(cm, element) {

  // If element is not markable, or we're in sourceMode, return
  if (!element.mark?.isMarkable || window.state.sourceMode) return

  // const isNotReferenceDefinitonAnchor = !s.classes.includes('reference-definition-anchor-start')
  // const isNotInsideLinkReferenceDefinition = !s.lineClasses.includes('link-reference-definition')

  const frag = document.createDocumentFragment();

  // Create the Svelte component and attach to `frag`
  if (element.type == 'task') {
    var component = new Task({
      target: frag,
      props: { cm, element }
    });
  } else if (!element.type.includes('definition')) {
    var component = new Mark({
      target: frag,
      props: {
        cm,
        type: element.type,
        classes: element.classes
      }
    });
  }

  // Create the TextMarker
  const { line, start, end } = element;
  const textMarker = cm.markText(
    { line, ch: start },
    { line, ch: end },
    {
      replacedWith: frag,
      handleMouseEvents: false,
    }
  );

  // Set properties on the component and TextMarker
  component.textMarker = textMarker;
  textMarker.component = component;
  textMarker.replacedWith = textMarker.widgetNode.firstChild;

}

/**
 * Return array of "spans" for the line.
 * Each also contains details about the parent "element" it 
 * belongs to (e.g. url spans might belong to link element).
 * Spans correspond with the spans in the rendered HTML output. 
 * NOTE: We parse these from `lineHandle.styles`, which is a  strangely-formatted (but very useful) array of classes (e.g. `link inline text`) and the token number they end on. The format is number-followed-by-string——e.g. `24, "link inline text", 35, "link inline url"`——where `24` is the ending character of `link inline text`, and the starting character of `link inline url`. This array can also contain empty strings (e.g. "") and multiple consecutive numbers, which we need to ignore when parsing (they seem to belong to empty tokens).
 */
function getLineSpans(cm, lineHandle) {

  let spans = [];

  // If lineHandle has no styles, return empty array
  if (!lineHandle.styles?.some((s) => typeof s === 'string' && s !== '')) return spans

  const line = lineHandle.lineNo();
  
  // Get line classes
  const lineClasses = getLineClasses(lineHandle);

  // ---------- Get spans from lineHandle "styles" ---------- //

  lineHandle.styles.forEach((s, index) => {

    // Check if style has anything we care about
    if (typeof s === 'string' && s !== '') {

      // Two numbers preceding a class string and seperated by null, are the class's `start` and `end` values. Given `4, null, 6, "md footnote reference"`, 4 = start and 6 = end of "md footnote reference". `end` = the most-immediately preceding number (not string) in the array, before the class (s). `start` = the second-most-immediately preceding number

      let start = null;
      let end = 0;
      let counter = index;

      while (start == null) {
        counter--;
        if (typeof lineHandle.styles[counter] == 'number') {
          if (end == 0) {
            end = lineHandle.styles[counter];
          } else {
            // Fix for very annoying `lineHandle.styles` quirk: If a style starts at the first character of a line (0), the sequence of numbers looks like: `N, 3, "inline footnote malformed md"`, where `N` is the number of times the document has been loaded (very weird). In that case, we just set the first number to zero.
            start = counter == 0 ? 0 : lineHandle.styles[counter];
            // start = (counter == 0 && (lineHandle.styles[counter] == 1 || lineHandle.styles[counter] == 2)) ? 0 : lineHandle.styles[counter]
          }
        }
      }

      // Create the style object
      const span = {
        string: getTextFromRange(cm, line, start, end),
        line,
        start,
        end,
        classes: s.split(' '),
        lineClasses,
      };

      // Is span markdown formatting?
      span.isFormatting = span.classes.includes('md');

      spans.push(span);
    }
  });


  // ---------- Get few more spans manually ---------- //

  // Some spans we need aren't present in the lineHandle styles 
  // (because they're not in the markdown). So we add them manually.
  // Or modify them, if necessary.

  // We iterate over a duplicate of the spans array, so we can mutate the original.
  spans.slice().forEach((s, index) => {

    // Capture the content of the header.
    // Everything after the "#" characters and subsequent whitespace.
    if (s.classes.includes('header-start')) {
      const start = s.start + s.string.length;
      const end = cm.getLine(s.line).length;
      var newSpan = {
        string: getTextFromRange(cm, s.line, start, end),
        line: s.line,
        start,
        end,
        classes: [],
        lineClasses: s.lineClasses,
      };
    }

    // If span is found, insert it after the current item
    if (newSpan) {
      spans.splice(index + 1, 0, newSpan);
    }
  });

  return spans
}

/** 
 * For the given line, return line classes. E.g. 'header'
*/
function getLineClasses(lineHandle) {
  return lineHandle.styleClasses ?
    lineHandle.styleClasses.textClass :
    ""
}


/**
 * Get span at specified line and ch
 * Exclude formatting.
 */
function getSpanAt(cm, line, ch) {
  const lineSpans = getLineSpans(cm, cm.getLineHandle(line));
  const span = lineSpans.find((s) =>
    s.line == line &&
    s.start < ch &&
    ch < s.end &&
    !s.isFormatting
  );
  return span
}



// -------- GET DOCUMENT DETAILS -------- //

/**
 * Sometimes we need to access CodeMirror instances from outside their parent Editor components. This is a convenience function for finding the CM instance from `windows.cmInstances` by the ID of it's associated panel, and getting it's ddata.
 * @param {*} panelId 
 */
function getCmDataByPanelId(panelId) {
  const cmInstance = window.cmInstances.find((c) => c.state.panel.id == panelId);
  const data = cmInstance.getValue();
  return data
}

/**
 * For the given reference label, find the definition.
 * Returns object
 * @param {*} cm 
 * @param {*} label 
 * @param {*} type - 'link' or 'footnote' 
 */
function getReferenceDefinitions(cm, label, type = 'link') {

  let definitionsMatchingLabel = [];

  for (var i = 0; i < cm.lineCount(); i++) {
    const firstTokenType = cm.getTokenTypeAt({ line: i, ch: 0 });
    if (!firstTokenType) continue
    if (!firstTokenType.includes(`${type}-reference-definition-start`)) continue 
    const element = getElementAt(cm, i, 1);
    const elementLabel = element.spans.find((s) => s.type.includes('label'))?.string;
    if (elementLabel == label) {
      definitionsMatchingLabel.push(element);
    }
  }

  return definitionsMatchingLabel
}


/**
 * Is specified line a list?
 */
function isList(cm, line) {
  const lineHandle = cm.getLineHandle(line);
  const lineIsList = getLineClasses(lineHandle).includes('list');
  return lineIsList
}


/**
 * For a given range, if there are multiple lines selected,
 * return true if the lines contain a heterogeneous mix of
 * line styles (e.g. header and ul).
 */
function isLineClassesHeterogeneous(cm, range) {

  const { topLine, bottomLine } = getTopAndBottomLines(range);

  // If this is a single line selection, it cannot contain
  // multiple line styles, so we return false.
  if (topLine == bottomLine) return false

  const lineClassesInsideRange = [];
  for (var i = topLine; i <= bottomLine; i++) {
    const lineHandle = cm.getLineHandle(i);
    const lineClasses = getLineClasses(lineHandle);
    if (lineClasses) {
      // lineClasses are formatted like `header h1` and `ol list-1`
      // The "main" style is always the first word.
      // That's the one we want.
      const mainLineClass = lineClasses.split(' ')[0];
      lineClassesInsideRange.push(mainLineClass);
    }
  }

  // We know line styles are heterogeneous if they don't all
  // match the first one.
  const areHeterogeneous =
    lineClassesInsideRange.length > 1 &&
    !lineClassesInsideRange.every((ls) => {
      return ls == lineClassesInsideRange[0]
    });

  return areHeterogeneous

}


/**
 * Get the top and bottom line values from a `range`
 * Determine which of `range.anchor` and `range.head` comes first
 * in the doc (is top), and which is bottom, and return their
 * line values.
 */
function getTopAndBottomLines(range) {

  // First check if the range is just a single cursor
  // If yes, topLine and bottomLine are the same, so return
  const isSingleCursor =
    range.anchor.ch == range.head.ch &&
    range.anchor.line == range.head.line;
  if (isSingleCursor) {
    const line = range.anchor.line;
    return { topLine: line, bottomLine: line }
  }

  // Else, determine which is top and bottom lines
  const objA = range.anchor;
  const objB = range.head;
  const topLine = Math.min(objA.line, objB.line);
  let bottomLine = Math.max(objA.line, objB.line);

  // Check if bottom line selection ends on the first character.
  // This happens when we select the entire previous line.
  // CodeMirror adds the next line to the selection. But it doesn't
  // look selected to the user, and if it increments, it's confusing.
  // So we check for this condition, and if true, remove the last line.
  const bottomObj = [objA, objB].find(({ line }) => line == bottomLine);
  if (bottomObj.ch == 0) {
    bottomLine--;
  }
  return { topLine, bottomLine }
}


/**
 * Give `anchor` and `head` objects, determine which comes first in
 * the doc (top to bottom), and return from and to objects, each
 * with line and start values.
 * @param {*} anchor 
 * @param {*} head 
 */
function getFromAndTo(range) {

  const objA = range.anchor;
  const objB = range.head;
  const linesAreSame = objA.line == objB.line;

  if (linesAreSame) {
    // Selection is inside same line:
    // Compare the characters
    const earlierCh = Math.min(objA.ch, objB.ch);
    const laterCh = Math.max(objA.ch, objB.ch);
    var from = [objA, objB].find((o) => o.ch == earlierCh);
    var to = [objA, objB].find((o) => o.ch == laterCh);
  } else {
    // Selection is across multiple lines:
    // Compare the lines
    const earlierLine = Math.min(objA.line, objB.line);
    const laterLine = Math.max(objA.line, objB.line);
    var from = [objA, objB].find((o) => o.line == earlierLine);
    var to = [objA, objB].find((o) => o.line == laterLine);
  }

  return { from, to }
}



// -------- READ/WRITE STRINGS FROM DOC -------- //

/**
 * Return true if there's only one cursor, and no text selected.
 */
function isSingleCursor(cm) {
  const selections = cm.listSelections();
  const isSingleCursor =
    selections.length == 1 &&
    selections[0].anchor.line == selections[0].head.line &&
    selections[0].anchor.ch == selections[0].head.ch;
  return isSingleCursor
}

/**
 * A _slighty_ more compact snippet for getting text from a range.
 */
function getTextFromRange(cm, line, start, end) {
  return cm.getRange({ line: line, ch: start }, { line: line, ch: end })
}

/**
 * Return N characters immediately preceding the `fromPos` value.
 * @param {*} cm 
 * @param {*} numOfCharacters - How many characters before fromPos.ch to get
 * @param {*} fromPos - Pos (object with line and ch) to look before.
 */
function getPrevChars(cm, numSkipBehind, numToGet, fromPos,) {
  const { line, ch } = fromPos;
  return cm.getRange(
    { line, ch: ch - numSkipBehind - numToGet },
    { line, ch: ch - numSkipBehind }
  )
}

/**
 * Return N characters immediately following the `fromPos` value.
 * @param {*} cm 
 * @param {*} numToGet - How many characters after fromPos.ch to get
 * @param {*} fromPos - Pos (object with line and ch) to look before.
 */
function getNextChars(cm, numSkipAhead, numToGet, fromPos) {
  const { line, ch } = fromPos;
  return cm.getRange(
    { line, ch: ch + numSkipAhead },
    { line, ch: ch + numSkipAhead + numToGet }
  )
}

/**
 * Write input value to cm.
 */
function writeToDoc(cm, value, line, start, end) {
  cm.replaceRange(
    value,
    { line, ch: start },
    { line, ch: end },
    '+input'
  );
}


// -------- SAVE, OPEN, CLOSE -------- //

/**
 * On change, update `unsavedChanges` value on the parent panel.
 * Avoid spamming by first checking if there's a mismatch
 * between current state value and `cm.doc.isClean()`.
 */
function setUnsavedChanges(cm) {
  const docIsNowClean = cm.doc.isClean();
  const prevStateHadUnsavedChanges = cm.panel.unsavedChanges;

  if (docIsNowClean && prevStateHadUnsavedChanges) {
    // Need to update panel state: The doc is now clean.
    window.api.send('dispatch', {
      type: 'SET_UNSAVED_CHANGES',
      panelIndex: cm.panel.index,
      value: false
    });
  } else if (!prevStateHadUnsavedChanges) {
    // Need to update panel state: The doc now has unsaved changes.
    window.api.send('dispatch', {
      type: 'SET_UNSAVED_CHANGES',
      panelIndex: cm.panel.index,
      value: true
    });
  }
}

/**
 * Load empty doc into editor, and clear history
 * @param {*} cm 
 */
function loadEmptyDoc(cm) {
  if (!cm) return

  cm.swapDoc(CodeMirror.Doc('', 'gambier'));
  cm.focus();
}

/**
 * Load doc into the editor, and clear history
 * @param {*} doc - Instance of an object from `files.byId`
 */
async function loadDoc(cm, doc) {

  if (!cm || !doc) return

  // Get the doc text
  const text = doc.path ?
    await window.api.invoke('getFileByPath', doc.path, 'utf8') : '';

  // Load the doc text into the editor, and clear history.
  // "Each editor is associated with an instance of CodeMirror.Doc, its document. A document represents the editor content, plus a selection, an undo history, and a mode. A document can only be associated with a single editor at a time. You can create new documents by calling the CodeMirror.Doc(text: string, mode: Object, firstLineNumber: ?number, lineSeparator: ?string) constructor" — https://codemirror.net/doc/manual.html#Doc
  cm.swapDoc(CodeMirror.Doc(text));
  setMode(cm);

  // Restore cursor position, if possible
  const cursorHistory = window.state.cursorPositionHistory[doc.id];
  if (cursorHistory) {
    cm.setCursor(cursorHistory);

    // Vertically center cursor inside scrollable area
    const heightOfEditor = cm.getScrollInfo().clientHeight;
    cm.scrollIntoView(null, heightOfEditor / 2);
  }

  // Map, mark and focus the editor
  markDoc(cm);

  // setCursor(cm)
}

/** 
 * Save cursor position, so we can restore it if the doc is-reopened during the same app session (cursor position histories are erased at the start of each new app session).
 */
function saveCursorPosition(cm) {

  const docId = cm.panel.docId;
  const cursorPos = cm.doc.getCursor();

  // Only save if the doc is not empty, 
  // and the cursor is not on the first line.
  const shouldSaveCursorPos = docId && cursorPos.line !== 0;

  if (shouldSaveCursorPos) {
    window.api.send('dispatch', {
      type: 'SAVE_CURSOR_POSITION',
      docId,
      line: cursorPos.line,
      ch: cursorPos.ch
    });
  }
}

/**
 * Indent list line
 * If single line is selected, indent if 1) the line is a list, and 2) the preceding line is a list of an equal or lower depth. Else, if (1) is not true, just enter normal tab character.
 * If multiple lines are selected, only indent if 1) the selection starts and ends inside a list (and it's the same list) and 2) the topLine is safe to indent (same criteria as singe line).
 * @param {*} cm 
 */
function indentList(cm) {
  if (cm.getOption('disableInput')) return CodeMirror.Pass
  const ranges = cm.listSelections();
  // For each selection...
  ranges.forEach((range, index) => {
    const isSingleLine = range.anchor.line == range.head.line;
    if (isSingleLine) {
      const line = range.head.line;
      const lineIsList = isList(cm, line);
      if (lineIsList) {
        const lineIsSafeToIndent = isSafeToIndentLine(cm, line, 'add');
        if (lineIsSafeToIndent) {
          // Indent the list line
          cm.indentLine(line, 'add');
        }
      } else {
        // Perform the default action
        cm.execCommand('defaultTab');
      }
    } else {
      const { topLine, bottomLine } = getTopAndBottomLines(range);
      // Is it safe to indent the selected lines?
      const topLineIsSafeToIndent = isSafeToIndentLine(cm, topLine, 'add');
      const selectionIsInsideSameList = selectionStartsAndEndsInsideSameList(cm, topLine, bottomLine);
      if (topLineIsSafeToIndent && selectionIsInsideSameList) {
        // Indent the list lines
        for (var i = topLine; i <= bottomLine; i++) {
          cm.indentLine(i, 'add');
        }
      }
    }
  });
}

/**
 * Un-indent list line
 * Almost identical logic to `indentList`. 
 * Except the dependency is on the subsequent ('next') line.
 * @param {*} cm 
 */
function unindentList(cm) {
  if (cm.getOption('disableInput')) return CodeMirror.Pass
  const ranges = cm.listSelections();
  // For each selection...
  ranges.forEach((range) => {
    const isSingleLine = range.anchor.line == range.head.line;
    if (isSingleLine) {
      const line = range.head.line;
      const lineIsList = isList(cm, line);
      if (lineIsList) {
        const lineIsSafeToUnIndent = isSafeToIndentLine(cm, line, 'subtract');
        if (lineIsSafeToUnIndent) {
          // Un-indent the list line
          cm.indentLine(line, 'subtract');
        }
      } else {
        // Perform the default action
        cm.execCommand('indentAuto');
      }
    } else {
      const { topLine, bottomLine } = getTopAndBottomLines(range);
      // Is it safe to un-indent the selected lines?
      const bottomLineIsSafeToUnIndent = isSafeToIndentLine(cm, bottomLine, 'subtract');
      const selectionIsInsideSameList = selectionStartsAndEndsInsideSameList(cm, topLine, bottomLine);
      if (bottomLineIsSafeToUnIndent && selectionIsInsideSameList) {
        // Indent the list lines
        for (var i = topLine; i <= bottomLine; i++) {
          cm.indentLine(i, 'subtract');
        }
      }
    }
  });
}


// ---------- UTILITY FUNCTIONS ---------- //


/**
 * We only allow indentating multiple lines if the selection starts and 
 * stops inside the same list.
 */
function selectionStartsAndEndsInsideSameList(cm, topLine, bottomLine) {
  const topLineIsList = isList(cm, topLine);
  const bottomLineIsList = isList(cm, bottomLine);
  if (!topLineIsList || !bottomLineIsList) return false
  for (var i = topLine; i <= bottomLine; i++) {
    const lineIsList = isList(cm, i);
    if (!lineIsList) {
      return false
    }
  }
  return true
}


/**
 * Allow indentation ('add'), when the indentation of the list item above is equal or greater than the selected line. 
 * Allow un-indentation ('subtract'), when 1) the indentation of the list item below is equal or less than the selected line, or 2) the selected line is at the end of the list.
 */
function isSafeToIndentLine(cm, line, direction) {

  const thisLineClasses = getLineClasses(cm.getLineHandle(line));
  const thisLineDepth = thisLineClasses.match(/list-(\d)/)[1];

  if (direction == 'add') {

    const isFirstLineOfDoc = line == 0;
    if (isFirstLineOfDoc) return false

    const prevLineClasses = getLineClasses(cm.getLineHandle(line - 1));
    const prevLineIsList = prevLineClasses.includes('list');
    const prevLineDepth = prevLineIsList && prevLineClasses.match(/list-(\d)/)[1];  

    const safeToIndent = prevLineDepth >= thisLineDepth;
    return safeToIndent

  } else {

    const isLastLineOfDoc = line == cm.lastLine();
    if (isLastLineOfDoc) return true

    const nextLineClasses = getLineClasses(cm.getLineHandle(line + 1));
    const nextLineIsList = nextLineClasses.includes('list');
    const nextLineDepth = nextLineIsList && nextLineClasses.match(/list-(\d)/)[1];  

    const safeToUnIndent = !nextLineIsList || thisLineDepth >= nextLineDepth;
    return safeToUnIndent
  }
}

/*
Copyright (c) 2009-2019 Frank Bennett

	This program is free software: you can redistribute it and/or
	modify it under EITHER

      * the terms of the Common Public Attribution License (CPAL) as
	    published by the Open Source Initiative, either version 1 of
	    the CPAL, or (at your option) any later version; OR

      * the terms of the GNU Affero General Public License (AGPL)
        as published by the Free Software Foundation, either version
        3 of the AGPL, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Affero General Public License for more details.

	You should have received copies of the Common Public Attribution
    License and of the GNU Affero General Public License along with
    this program.  If not, see <https://opensource.org/licenses/> or
    <http://www.gnu.org/licenses/> respectively.
*/


var CSL = {

    PROCESSOR_VERSION: "1.4.48",

    error: function(str) { // default error function
        if ("undefined" === typeof Error) {
            throw new Error("citeproc-js error: " + str);
        } else {
            throw "citeproc-js error: " + str;
        }
    },
    debug: function(str) { // default debug function
        if ("undefined" === typeof console) {
            dump("CSL: " + str + "\n");
        } else {
            console.log("citeproc-js warning: " + str);
        }
    },

    toLocaleUpperCase(str) {
        var arr = this.tmp.lang_array;
        try {
            str = str.toLocaleUpperCase(arr);
        } catch (e) {
            str = str.toUpperCase();
        }
        return str;
    },

    toLocaleLowerCase(str) {
        var arr = this.tmp.lang_array;
        try {
            str = str.toLocaleLowerCase(arr);
        } catch (e) {
            str = str.toLowerCase();
        }
        return str;
    },

    LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),

    STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
    STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
 
    STATUTE_SUBDIV_STRINGS: {
        "vrs.": "verse",
		"sv.": "sub-verbo",
        "subpara.": "subparagraph",
        "op.": "opus",
        "subch.": "subchapter",
        "add.": "addendum",
        "amend.": "amendment",
        "annot.": "annotation",
        "app.": "appendix",
        "art.": "article",
        "bibliog.": "bibliography",
        "bk.": "book",
        "ch.": "chapter",
        "cl.": "clause",
        "col.": "column",
        "cmt.": "comment",
        "dec.": "decision",
        "dept.": "department",
        "div.": "division",
        "ex.": "example",
        "fig.": "figure",
        "fld.": "field",
        "fol.": "folio",
        "n.": "note",
        "hypo.": "hypothetical",
        "illus.": "illustration",
        "intro.": "introduction",
        "l.": "line",
        "no.": "issue",
        "p.": "page",
        "pp.": "page",
        "para.": "paragraph",
        "pt.": "part",
        "pmbl.": "preamble",
        "princ.": "principle",
        "pub.": "publication",
        "r.": "rule",
        "rn.": "randnummer",
        "sched.": "schedule",
        "sec.": "section",
        "ser.": "series,",
        "subdiv.": "subdivision",
        "subsec.": "subsection",
        "supp.": "supplement",
        "tbl.": "table",
        "tit.": "title",
        "vol.": "volume"
    },
    STATUTE_SUBDIV_STRINGS_REVERSE: {
        "verse": "vrs.",
		"sub-verbo": "sv.",
        "sub verbo": "sv.",
        "subparagraph": "subpara.",
        "opus": "op.",
        "subchapter": "subch.",
        "addendum": "add.",
        "amendment": "amend.",
        "annotation": "annot.",
        "appendix": "app.",
        "article": "art.",
        "bibliography": "bibliog.",
        "book": "bk.",
        "chapter": "ch.",
        "clause": "cl.",
        "column": "col.",
        "comment": "cmt.",
        "decision": "dec.",
        "department": "dept.",
        "division": "div.",
        "example": "ex.",
        "figure": "fig.",
        "field": "fld.",
        "folio": "fol.",
        "note": "n.",
        "hypothetical": "hypo.",
        "illustration": "illus.",
        "introduction": "intro.",
        "line": "l.",
        "issue": "no.",
        "page": "p.",
        "paragraph": "para.",
        "part": "pt.",
        "preamble": "pmbl.",
        "principle": "princ.",
        "publication": "pub.",
        "rule": "r.",
        "randnummer": "rn.",
        "schedule": "sched.",
        "section": "sec.",
        "series,": "ser.",
        "subdivision": "subdiv.",
        "subsection": "subsec.",
        "supplement": "supp.",
        "table": "tbl.",
        "title": "tit.",
        "volume": "vol."
    },

    LOCATOR_LABELS_MAP: {
        "vrs": "verse",
		"sv": "sub-verbo",
        "subpara": "subparagraph",
        "op": "opus",
        "subch": "subchapter",
        "add": "addendum",
        "amend": "amendment",
        "annot": "annotation",
        "app": "appendix",
        "art": "article",
        "bibliog": "bibliography",
        "bk": "book",
        "ch": "chapter",
        "cl": "clause",
        "col": "column",
        "cmt": "comment",
        "dec": "decision",
        "dept": "department",
        "div": "division",
        "ex": "example",
        "fig": "figure",
        "fld": "field",
        "fol": "folio",
        "n": "note",
        "hypo": "hypothetical",
        "illus": "illustration",
        "intro": "introduction",
        "l": "line",
        "no": "issue",
        "p": "page",
        "pp": "page",
        "para": "paragraph",
        "pt": "part",
        "pmbl": "preamble",
        "princ": "principle",
        "pub": "publication",
        "r": "rule",
        "rn": "randnummer",
        "sched": "schedule",
        "sec": "section",
        "ser": "series,",
        "subdiv": "subdivision",
        "subsec": "subsection",
        "supp": "supplement",
        "tbl": "table",
        "tit": "title",
        "vol": "volume"
    },
    MODULE_MACROS: {
        "juris-pretitle": true,
        "juris-title": true,
        "juris-pretitle-short": true,
        "juris-title-short": true,
        "juris-main": true,
        "juris-main-short": true,
        "juris-tail": true,
        "juris-tail-short": true,
        "juris-locator": true
    },
    MODULE_TYPES: {
        "legal_case": true,
        "legislation": true,
        "bill": true,
        "hearing": true,
        "gazette": true,
        "report": true,
        "regulation": true,
        "standard": true,
        "patent": true,
        "locator": true
    },
    checkNestedBrace: function(state) {
        if (state.opt.xclass === "note") {
            this.depth = 0;
            this.update = function(str) {
                
                // Receives affix string, returns with flipped parens.
                
                var str = str ? str : "";
                var lst = str.split(/([\(\)])/);
                for (var i=1,ilen=lst.length;i<ilen;i += 2) {
                    if (lst[i] === "(") {
                        if (1 === (this.depth % 2)) {
                            lst[i] = "[";
                        }
                        this.depth += 1;
                    } else if (lst[i] === ")") {
                        if (0 === (this.depth % 2)) {
                            lst[i] = "]";
                        }
                        this.depth -= 1;
                    }
                }
                var ret = lst.join("");
                return ret;
            };
        } else {
            this.update = function(str) {
                return str;
            };
        }
    },

    MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority","genre","title-short","medium","country","jurisdiction","archive","archive-place"],

    LangPrefsMap: {
        "title":"titles",
        "title-short":"titles",
        "event":"titles",
        "genre":"titles",
        "medium":"titles",
        "container-title":"journals",
        "collection-title":"titles",
        "archive":"journals",
        "publisher":"publishers",
        "authority":"publishers",
        "publisher-place": "places",
        "event-place": "places",
        "archive-place": "places",
        "jurisdiction": "places",
        "number": "places",
        "edition":"places",
        "issue":"places",
        "volume":"places"
    },

    AbbreviationSegments: function () {
        this["container-title"] = {};
        this["collection-title"] = {};
        this["institution-entire"] = {};
        this["institution-part"] = {};
        this.nickname = {};
        this.number = {};
        this.title = {};
        this.place = {};
        this.hereinafter = {};
        this.classic = {};
        this["container-phrase"] = {};
        this["title-phrase"] = {};
    },

    getAbbrevsDomain: function (state, country, lang) {
		var domain = null;
        if (state.opt.availableAbbrevDomains && country && country !== "default") {
	        var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
		    var itemDomainPreference = null;
		    if (state.locale[lang]) {
			    itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
		    }
		    if (itemDomainPreference) {
			    for (var j=itemDomainPreference.length-1; j > -1; j--) {
				    if (state.opt.availableAbbrevDomains[country].indexOf(itemDomainPreference[j]) > -1) {
					    domain = itemDomainPreference[j];
					    break;
				    }
			    }
		    }
		    if (!domain && globalDomainPreference) {
			    for (var j=globalDomainPreference.length-1; j > -1; j--) {
				    if (state.opt.availableAbbrevDomains[country].indexOf(globalDomainPreference[j]) > -1) {
					    domain = globalDomainPreference[j];
					    break;
				    }
			    }
		    }
        }
        return domain;
    },
    
    FIELD_CATEGORY_REMAP: {
        "title": "title",
        "container-title": "container-title",
        "collection-title": "collection-title",
        "country": "place",
        "number": "number",
        "place": "place",
        "archive": "container-title",
        "title-short": "title",
        "genre": "title",
        "event": "title",
        "medium": "title",
		"archive-place": "place",
		"publisher-place": "place",
		"event-place": "place",
		"jurisdiction": "place",
		"language-name": "place",
		"language-name-original": "place",
        "call-number": "number",
        "chapter-number": "number",
        "collection-number": "number",
        "edition": "number",
        "page": "number",
        "issue": "number",
        "locator": "number",
        "locator-extra": "number",
        "number-of-pages": "number",
        "number-of-volumes": "number",
        "volume": "number",
        "citation-number": "number",
        "publisher": "institution-part"
    },
    
    parseLocator: function(item) {
        if (this.opt.development_extensions.locator_date_and_revision) {
            // Break out locator elements if necessary
            if (item.locator) {
                item.locator = "" + item.locator;
                var idx = item.locator.indexOf("|");
                if (idx > -1) {
                    var raw_locator = item.locator;
                    item.locator = raw_locator.slice(0, idx);
                    raw_locator = raw_locator.slice(idx + 1);
                    var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
                    if (m) {
                        item["locator-date"] = this.fun.dateparser.parseDateToObject(m[1]);
                        raw_locator = raw_locator.slice(m[1].length);
                    }
                    item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
                }
            }
        }
        if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, '');
        }
        return item;
    },

    normalizeLocaleStr: function(str) {
        if (!str) {
            return;
        }
        var lst = str.split('-');
        lst[0] = lst[0].toLowerCase();
        if (lst[1]) {
            lst[1] = lst[1].toUpperCase();
        }
        return lst.join("-");
    },

    parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
        if ("string" !== typeof Item.note) {
            return;
        }
        var elems = [];
        var lines = Item.note.split('\n');
        // Normalize entries
        for (var i=0, ilen=lines.length; i<ilen; i++) {
            var line = lines[i];
            var elems = [];
            var m = line.match(CSL.NOTE_FIELDS_REGEXP);
            if (m) {
                var splt = line.split(CSL.NOTE_FIELDS_REGEXP);
                for (var j=0,jlen=(splt.length-1);j<jlen;j++) {
                    elems.push(splt[j]);
                    elems.push(m[j]);
                }
                elems.push(splt[splt.length-1]);
                for (var j=1,jlen=elems.length;j<jlen;j += 2) {
                    // Abort conversions if preceded by unparseable text
                    if (elems[j-1].trim() && (i>0 || j>1) && !elems[j-1].match(CSL.NOTE_FIELD_REGEXP)) {
                        break;
                    } else {
                        elems[j] = '\n' + elems[j].slice(2,-1).trim() + '\n';
                    }
                }
                lines[i] = elems.join('');
            }
        }
        // Resplit
        lines = lines.join('\n').split('\n');
        var offset = 0;
        var names = {};
        for (var i=0,ilen=lines.length;i<ilen;i++) {
            var line = lines[i];
            var mm = line.match(CSL.NOTE_FIELD_REGEXP);
            if (!line.trim()) {
                continue;
            } else if (!mm) {
                if (i === 0) {
                    continue;
                } else {
                    offset = i;
                    break;
                }
            }
            var key = mm[1];
            var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
            if (key === "type") {
                Item.type = val;
                lines[i] = "";
            } else if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                if (!Item[key] || allowDateOverride) {
                    Item[key] = CSL.DateParser.parseDateToArray(val);
                    if (!validFieldsForType || (validFieldsForType[key] && this.isDateString(val))) {
                        lines[i] = "";
                    }
                }
            } else if (!Item[key]) {
                if (CSL.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                    if (!names[key]) {
                        names[key] = [];
                    }
                    var lst = val.split(/\s*\|\|\s*/);
                    if (lst.length === 1) {
                        names[key].push({literal:lst[0]});
                    } else if (lst.length === 2) {
                        var name = {family:lst[0],given:lst[1]};
                        CSL.parseParticles(name);
                        names[key].push(name);
                    }
                } else {
                    Item[key] = val;
                }
                if (!validFieldsForType || validFieldsForType[key]) {
                    lines[i] = "";
                }
            }
        }
        for (var key in names) {
            Item[key] = names[key];
        }
        // Final cleanup for validCslFields only: eliminate blank lines, add blank line to text
        if (validFieldsForType) {
            if (lines[offset].trim()) {
                lines[offset] = '\n' + lines[offset];
            }
            for (var i=offset-1;i>-1;i--) {
                if (!lines[i].trim()) {
                    lines = lines.slice(0, i).concat(lines.slice(i + 1));
                }
            }
        }
        Item.note = lines.join("\n").trim();
    },

    checkPrefixSpaceAppend: function (state, prefix) {
        if (!prefix) {
            prefix = "";
        }
        var sp = "";
        // We need the raw string, without decorations
        // of any kind. Markup scheme is known, though, so
        // markup can be safely stripped at string level.
        //
        // U+201d = right double quotation mark
        // U+2019 = right single quotation mark
        // U+00bb = right double angle bracket (guillemet)
        // U+202f = non-breaking thin space
        // U+00a0 = non-breaking space
        var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g,"");
        var test_char = test_prefix.slice(-1);
        if (test_prefix.match(CSL.ENDSWITH_ROMANESQUE_REGEXP)) {
            sp = " ";
        } else if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1) {
            sp = " ";
        } else if (test_char.match(/[\)\],0-9]/)) {
            sp = " ";
        }
        // Protect against double spaces, which would trigger an extra,
        // explicit, non-breaking space.
        var prefix = (prefix + sp).replace(/\s+/g, " ");
        return prefix;
    },

    checkIgnorePredecessor: function(state, prefix) {
        var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g,"");
        var test_char = test_prefix.slice(-1);
        if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
            state.tmp.term_predecessor = false;
            return true;
        }
        return false;
    },

    checkSuffixSpacePrepend: function(state, suffix) {
        if (!suffix) {
            return "";
        }
        if (suffix.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) || ['[','('].indexOf(suffix.slice(0,1)) > -1) {
            suffix = " " + suffix;
        }
        return suffix;
    },
    
    GENDERS: ["masculine", "feminine"],
    
    ERROR_NO_RENDERED_FORM: 1,

    PREVIEW: "Just for laughs.",
    ASSUME_ALL_ITEMS_REGISTERED: 2,

    START: 0,
    END: 1,
    SINGLETON: 2,

    SEEN: 6,
    SUCCESSOR: 3,
    SUCCESSOR_OF_SUCCESSOR: 4,
    SUPPRESS: 5,

    SINGULAR: 0,
    PLURAL: 1,

    LITERAL: true,

    BEFORE: 1,
    AFTER: 2,

    DESCENDING: 1,
    ASCENDING: 2,

    PRIMARY: 1,
    SECONDARY: 2,
    
    POSITION_FIRST: 0,
    POSITION_SUBSEQUENT: 1,
    POSITION_IBID: 2,
    POSITION_IBID_WITH_LOCATOR: 3,
    POSITION_CONTAINER_SUBSEQUENT: 4,

    POSITION_MAP: {
        "0": 0,
        "4": 1,
        "1": 2,
        "2": 3,
        "3": 4
    },
    
    POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],

    AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],

    CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],

    SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
    TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],

    // update modes
    NONE: 0,
    NUMERIC: 1,
    POSITION: 2,
    TRIGRAPH: 3,

    DATE_PARTS: ["year", "month", "day"],
    DATE_PARTS_ALL: ["year", "month", "day", "season"],
    DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],

    NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],

    DISAMBIGUATE_OPTIONS: [
        "disambiguate-add-names",
        "disambiguate-add-givenname",
        "disambiguate-add-year-suffix"
    ],

    GIVENNAME_DISAMBIGUATION_RULES: [
        "all-names",
        "all-names-with-initials",
        "primary-name",
        "primary-name-with-initials",
        "by-cite"
    ],

    NAME_ATTRIBUTES: [
        "and",
        "delimiter-precedes-last",
        "delimiter-precedes-et-al",
        "initialize-with",
        "initialize",
        "name-as-sort-order",
        "sort-separator",
        "et-al-min",
        "et-al-use-first",
        "et-al-subsequent-min",
        "et-al-subsequent-use-first",
        "form",
        "prefix",
        "suffix",
        "delimiter"
    ],

    LOOSE: 0,
    STRICT: 1,
    TOLERANT: 2,

    PREFIX_PUNCTUATION: /[.;:]\s*$/,
    SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,

    NUMBER_REGEXP: /(?:^\d+|\d+$)/,
    //
    // \u0400-\u042f are cyrillic and extended cyrillic capitals
    // this is not fully smart yet.  can't do what this was trying to do
    // with regexps, actually; we want to identify strings with a leading
    // capital letter, and any subsequent capital letters.  Have to compare
    // locale caps version with existing version, character by character.
    // hard stuff, but if it breaks, that's what to do.
    // \u0600-\u06ff is Arabic/Persian
    // \u200c-\u200e and \u202a-\u202e are special spaces and left-right 
    // control characters



    NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
    ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
    ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
    STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
    ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
    ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,

    VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,

    VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,

    NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
    NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,

	PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
	PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,

    DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],

    NAME_VARIABLES: [
        "author",
        "collection-editor",
        "composer",
        "container-author",
        "director",
        "editor",
        "editorial-director",
        "illustrator",
        "interviewer",
        "original-author",
        "recipient",
        "reviewed-author",
        "translator",
        "commenter"
    ],
    CREATORS: [
        "author",
        "collection-editor",
        "composer",
        "container-author",
        "director",
        "editor",
        "editorial-director",
        "illustrator",
        "interviewer",
        "original-author",
        "recipient",
        "reviewed-author",
        "translator",
        "commenter"
    ],
    NUMERIC_VARIABLES: [
        "call-number",
        "chapter-number",
        "collection-number",
        "division",
        "edition",
        "page",
        "issue",
        "locator",
        "locator-extra",
        "number",
        "number-of-pages",
        "number-of-volumes",
        "version",
        "volume",
        // "section", ??? add this?
        "supplement",
        "citation-number"
    ],
    //var x = new Array();
    //x = x.concat(["title","container-title","issued","page"]);
    //x = x.concat(["locator","collection-number","original-date"]);
    //x = x.concat(["reporting-date","decision-date","filing-date"]);
    //x = x.concat(["revision-date"]);
    //NUMERIC_VARIABLES = x.slice();
    DATE_VARIABLES: [
        "locator-date", 
        "issued", 
        "event-date", 
        "accessed", 
        "original-date",
        "publication-date",
        "available-date",
        "submitted",
        "alt-issued",
        "alt-event"
    ],
    VARIABLES_WITH_SHORT_FORM: [
        "title",
        "container-title"
    ],
    TITLE_FIELD_SPLITS: function(seg) {
        var keys = ["title", "short", "main", "sub", "subjoin"];
        var ret = {};
        for (var i=0,ilen=keys.length;i<ilen;i++) {
            ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
        }
        return ret;
    },
    
    demoteNoiseWords: function (state, fld, drop_or_demote) {
        var SKIP_WORDS = state.locale[state.opt.lang].opts["leading-noise-words"];
        if (fld && drop_or_demote) {
            fld = fld.split(/\s+/);
            fld.reverse();
            var toEnd = [];
            for (var j  = fld.length - 1; j > -1; j += -1) {
                if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {
                    toEnd.push(fld.pop());
                } else {
                    break;
                }
            }
            fld.reverse();
            var start = fld.join(" ");
            var end = toEnd.join(" ");
            if ("drop" === drop_or_demote || !end) {
                fld = start;
            } else if ("demote" === drop_or_demote) {
                fld = [start, end].join(", ");
            }
        }
        return fld;
    },

    extractTitleAndSubtitle: function (Item, narrowSpaceLocale) {
        var narrowSpace = narrowSpaceLocale ? "\u202f" : "";
        // XXX In this function, split on split-char, but prefer exact match
        // XXX of subtitle to a split-char in title if found.
        var segments = [""];
        if (this.opt.development_extensions.split_container_title) {
            segments.push("container-");
        }
        for (var i=0,ilen=segments.length;i<ilen;i++) {
            var seg = segments[i];
            var title = CSL.TITLE_FIELD_SPLITS(seg);
            var langs = [false];
            if (Item.multi) {
                for (var lang in Item.multi._keys[title.short]) {
                    langs.push(lang);
                }
            }
            for (var j=0,jlen=langs.length;j<jlen;j++) {
                var lang = langs[j];
                var vals = {};
                if (lang) {
                    if (Item.multi._keys[title.title]) {
                        vals[title.title] = Item.multi._keys[title.title][lang];
                    }
                    if (Item.multi._keys[title["short"]]) {
                        vals[title["short"]] = Item.multi._keys[title["short"]][lang];
                    }
                } else {
                    vals[title.title] = Item[title.title];
                    vals[title["short"]] = Item[title["short"]];
                }
                vals[title.main] = vals[title.title];
                vals[title.sub] = false;
                var shortTitle = vals[title["short"]];
                if (vals[title.title]) {
                    // Rules
                    // TITLE_SPLIT eliminates split-points of period-space preceded by a capital letter.
                    // If short title exists and matches exactly to a split-point, use that split-point only.
                    // Otherwise if there is just one split-point, use that as main/sub split.
                    // Otherwise use all split-points ... which is handled in titleCaseSentenceOrNormal, not here.
                    if (shortTitle && shortTitle.toLowerCase() === vals[title.title].toLowerCase()) {
                        vals[title.main] = vals[title.title];
                        vals[title.subjoin] = "";
                        vals[title.sub] = "";
                    } else if (shortTitle) {
                        // check for valid match to shortTitle
                        var tail = vals[title.title].slice(shortTitle.replace(/[\?\!]+$/, "").length);
                        var top = vals[title.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                        var m = CSL.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                        if (m && top.toLowerCase() === shortTitle.toLowerCase()) {
                            vals[title.main] = top;
                            vals[title.subjoin] = m[1].replace(/[\?\!]+(\s*)$/, "$1");
                            vals[title.sub] = tail.replace(CSL.TITLE_SPLIT_REGEXP.matchfirst, "");
                            if (this.opt.development_extensions.force_short_title_casing_alignment) {
                                vals[title["short"]] = vals[title.main];
                            }
                        } else {
                            var splitTitle = CSL.TITLE_SPLIT(vals[title.title]);
                            if (splitTitle.length == 3) {
                                vals[title.main] = splitTitle[0];
                                vals[title.subjoin] = splitTitle[1];
                                vals[title.sub] = splitTitle[2];
                            } else {
                                vals[title.main] = vals[title.title];
                                vals[title.subjoin] = "";
                                vals[title.sub] = "";
                            }
                        }
                    } else {
                        var splitTitle = CSL.TITLE_SPLIT(vals[title.title]);
                        if (splitTitle.length == 3) {
                            vals[title.main] = splitTitle[0];
                            vals[title.subjoin] = splitTitle[1];
                            vals[title.sub] = splitTitle[2];
                            if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                                if (!Item[title.short] && !vals[title.main].match(/^[\-\.[0-9]+$/)) {
                                    var punct = vals[title.subjoin].trim();
                                    if (["?", "!"].indexOf(punct) === -1) {
                                        punct = "";
                                    }
                                    vals[title.short] = vals[title.main] + punct;
                                }
                            }
                        } else {
                            vals[title.main] = vals[title.title];
                            vals[title.subjoin] = "";
                            vals[title.sub] = "";
                        }
                    }
                    if (vals[title.subjoin]) {
                        if (vals[title.subjoin].match(/([\?\!])/)) {
                            var m = vals[title.subjoin].match(/(\s*)$/);
                            vals[title.main] = vals[title.main] + narrowSpace +vals[title.subjoin].trim();
                            vals[title.subjoin] = m[1];
                        }
                    }
                }
                if (vals[title.subjoin]) {
                    if (vals[title.subjoin].indexOf(":") > -1) {
                        vals[title.subjoin] = narrowSpace + ": ";
                    }
                    if (vals[title.subjoin].indexOf("-") > -1 || vals[title.subjoin].indexOf("—") > -1) {
                        vals[title.subjoin] = "—";
                    }
                }
                if (lang) {
                    for (var key in vals) {
                        if (!Item.multi._keys[key]) {
                            Item.multi._keys[key] = {};
                        }
                        Item.multi._keys[key][lang] = vals[key];
                    }
                } else {
                    for (var key in vals) {
                        Item[key] = vals[key];
                    }
                }
            }
        }
    },

    titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
        // Hold on here.
        // What is seg here?
        // It's ... either "" or "container-". Which is ugly, but works.
        // But this ALWAYS returns the full title, never short.
        // So sentence-casing cannot be applied to short.
        // Goes unnoticed because forced sentence-casing almost never appears in styles.
        var title = CSL.TITLE_FIELD_SPLITS(seg);
        var vals = {};
        if (lang && Item.multi) {
            if (Item.multi._keys[title.title]) {
                vals[title.title] = Item.multi._keys[title.title][lang];
            }
            if (Item.multi._keys[title.main]) {
                vals[title.main] = Item.multi._keys[title.main][lang];
            }
            if (Item.multi._keys[title.sub]) {
                vals[title.sub] = Item.multi._keys[title.sub][lang];
            }
            if (Item.multi._keys[title.subjoin]) {
                vals[title.subjoin] = Item.multi._keys[title.subjoin][lang];
            }
        } else {
            vals[title.title] = Item[title.title];
            vals[title.main] = Item[title.main];
            vals[title.sub] = Item[title.sub];
            vals[title.subjoin] = Item[title.subjoin];
        }
        if (vals[title.main] && vals[title.sub]) {
            var mainTitle = vals[title.main];
            var subJoin = vals[title.subjoin];
            var subTitle = vals[title.sub];
            if (sentenceCase) {
                mainTitle = CSL.Output.Formatters.sentence(state, mainTitle);
                subTitle = CSL.Output.Formatters.sentence(state, subTitle);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
                subTitle = CSL.Output.Formatters["capitalize-first"](state, subTitle);
            }
            return [mainTitle, subJoin, subTitle].join("");
        } else if (vals[title.title]) {
            if (sentenceCase) {
                return CSL.Output.Formatters.sentence(state, vals[title.title]);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
                // Split and apply everywhere.
                var splits = CSL.TITLE_SPLIT(vals[title.title]);
                for (var i=0,ilen=splits.length; i<ilen; i += 2) {
                    splits[i] = CSL.Output.Formatters["capitalize-first"](state, splits[i]);
                }
                for (var i=1, ilen=splits.length-1; i < ilen; i += 2) {
                    var m = splits[i].match(/([:\?\!] )/);
                    if (m) {
                        var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202f" : "";
                        splits[i] = narrowSpace + m[1];
                    }
                    if (splits[i].indexOf("-") > -1 || splits[i].indexOf("—") > -1) {
                        splits[i] = "—";
                    }
                }
                vals[title.title] = splits.join("");
                return vals[title.title];
            } else {
                return vals[title.title];
            }
        } else {
            return "";
        }
    },

    getSafeEscape: function(state) {
        if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
            // Callback to apply thin space hack
            // Callback to force LTR/RTL on parens and braces
            // XXX Is this really necessary?
            var callbacks = [];
            if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
                callbacks.push(function (txt) {
                    return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
                });
            }
            if (callbacks.length) {
                return function (txt) {
                    for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                        txt = callbacks[i](txt);
                    }
                    return CSL.Output.Formats[state.opt.mode].text_escape(txt);
                };
            } else {
                return CSL.Output.Formats[state.opt.mode].text_escape;
            }
        } else {
            return function (txt) { return txt; };
        }
    },

    SKIP_WORDS: ["about","above","across","afore","after","against","al", "along","alongside","amid","amidst","among","amongst","anenst","apropos","apud","around","as","aside","astride","at","athwart","atop","barring","before","behind","below","beneath","beside","besides","between","beyond","but","by","circa","despite","down","during","et", "except","for","forenenst","from","given","in","inside","into","lest","like","modulo","near","next","notwithstanding","of","off","on","onto","out","over","per","plus","pro","qua","sans","since","than","through"," thru","throughout","thruout","till","to","toward","towards","under","underneath","until","unto","up","upon","versus","vs.","v.","vs","v","via","vis-à-vis","with","within","without","according to","ahead of","apart from","as for","as of","as per","as regards","aside from","back to","because of","close to","due to","except for","far from","inside of","instead of","near to","next to","on to","out from","out of","outside of","prior to","pursuant to","rather than","regardless of","such as","that of","up to","where as","or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],

    FORMAT_KEY_SEQUENCE: [
        "@strip-periods",
        "@font-style",
        "@font-variant",
        "@font-weight",
        "@text-decoration",
        "@vertical-align",
        "@quotes"
    ],

    INSTITUTION_KEYS: [
        "font-style",
        "font-variant",
        "font-weight",
        "text-decoration",
        "text-case"
    ],

    SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
    ROMAN_NUMERALS: [
        [ "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix" ],
        [ "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc" ],
        [ "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm" ],
        [ "", "m", "mm", "mmm", "mmmm", "mmmmm"]
    ],

    LANGS: {
        "af-ZA":"Afrikaans",
        "ar":"Arabic",
        "bg-BG":"Bulgarian",
        "ca-AD":"Catalan",
        "cs-CZ":"Czech",
        "da-DK":"Danish",
        "de-AT":"Austrian",
        "de-CH":"German (CH)",
        "de-DE":"German (DE)",
        "el-GR":"Greek",
        "en-GB":"English (GB)",
        "en-US":"English (US)",
        "es-ES":"Spanish",
        "et-EE":"Estonian",
        "eu":"European",
        "fa-IR":"Persian",
        "fi-FI":"Finnish",
        "fr-CA":"French (CA)",
        "fr-FR":"French (FR)",
        "he-IL":"Hebrew",
        "hr-HR":"Croatian",
        "hu-HU":"Hungarian",
        "is-IS":"Icelandic",
        "it-IT":"Italian",
        "ja-JP":"Japanese",
        "km-KH":"Khmer",
        "ko-KR":"Korean",
        "lt-LT":"Lithuanian",
        "lv-LV":"Latvian",
        "mn-MN":"Mongolian",
        "nb-NO":"Norwegian (Bokmål)",
        "nl-NL":"Dutch",
        "nn-NO":"Norwegian (Nynorsk)",
        "pl-PL":"Polish",
        "pt-BR":"Portuguese (BR)",
        "pt-PT":"Portuguese (PT)",
        "ro-RO":"Romanian",
        "ru-RU":"Russian",
        "sk-SK":"Slovak",
        "sl-SI":"Slovenian",
        "sr-RS":"Serbian",
        "sv-SE":"Swedish",
        "th-TH":"Thai",
        "tr-TR":"Turkish",
        "uk-UA":"Ukrainian",
        "vi-VN":"Vietnamese",
        "zh-CN":"Chinese (CN)",
        "zh-TW":"Chinese (TW)"
    },

    LANG_BASES: {
        af: "af_ZA",
        ar: "ar",
        bg: "bg_BG",
        ca: "ca_AD",
        cs: "cs_CZ",
        da: "da_DK",
        de: "de_DE",
        el: "el_GR",
        en: "en_US",
        es: "es_ES",
        et: "et_EE",
        eu: "eu",
        fa: "fa_IR",
        fi: "fi_FI",
        fr: "fr_FR",
        he: "he_IL",
        hr: "hr-HR",
        hu: "hu_HU",
        is: "is_IS",
        it: "it_IT",
        ja: "ja_JP",
        km: "km_KH",
        ko: "ko_KR",
        lt: "lt_LT",
        lv: "lv-LV",
        mn: "mn_MN",
        nb: "nb_NO",
        nl: "nl_NL",
        nn: "nn-NO",
        pl: "pl_PL",
        pt: "pt_PT",
        ro: "ro_RO",
        ru: "ru_RU",
        sk: "sk_SK",
        sl: "sl_SI",
        sr: "sr_RS",
        sv: "sv_SE",
        th: "th_TH",
        tr: "tr_TR",
        uk: "uk_UA",
        vi: "vi_VN",
        zh: "zh_CN"
    },

    SUPERSCRIPTS: {
        "\u00AA": "\u0061",
        "\u00B2": "\u0032",
        "\u00B3": "\u0033",
        "\u00B9": "\u0031",
        "\u00BA": "\u006F",
        "\u02B0": "\u0068",
        "\u02B1": "\u0266",
        "\u02B2": "\u006A",
        "\u02B3": "\u0072",
        "\u02B4": "\u0279",
        "\u02B5": "\u027B",
        "\u02B6": "\u0281",
        "\u02B7": "\u0077",
        "\u02B8": "\u0079",
        "\u02E0": "\u0263",
        "\u02E1": "\u006C",
        "\u02E2": "\u0073",
        "\u02E3": "\u0078",
        "\u02E4": "\u0295",
        "\u1D2C": "\u0041",
        "\u1D2D": "\u00C6",
        "\u1D2E": "\u0042",
        "\u1D30": "\u0044",
        "\u1D31": "\u0045",
        "\u1D32": "\u018E",
        "\u1D33": "\u0047",
        "\u1D34": "\u0048",
        "\u1D35": "\u0049",
        "\u1D36": "\u004A",
        "\u1D37": "\u004B",
        "\u1D38": "\u004C",
        "\u1D39": "\u004D",
        "\u1D3A": "\u004E",
        "\u1D3C": "\u004F",
        "\u1D3D": "\u0222",
        "\u1D3E": "\u0050",
        "\u1D3F": "\u0052",
        "\u1D40": "\u0054",
        "\u1D41": "\u0055",
        "\u1D42": "\u0057",
        "\u1D43": "\u0061",
        "\u1D44": "\u0250",
        "\u1D45": "\u0251",
        "\u1D46": "\u1D02",
        "\u1D47": "\u0062",
        "\u1D48": "\u0064",
        "\u1D49": "\u0065",
        "\u1D4A": "\u0259",
        "\u1D4B": "\u025B",
        "\u1D4C": "\u025C",
        "\u1D4D": "\u0067",
        "\u1D4F": "\u006B",
        "\u1D50": "\u006D",
        "\u1D51": "\u014B",
        "\u1D52": "\u006F",
        "\u1D53": "\u0254",
        "\u1D54": "\u1D16",
        "\u1D55": "\u1D17",
        "\u1D56": "\u0070",
        "\u1D57": "\u0074",
        "\u1D58": "\u0075",
        "\u1D59": "\u1D1D",
        "\u1D5A": "\u026F",
        "\u1D5B": "\u0076",
        "\u1D5C": "\u1D25",
        "\u1D5D": "\u03B2",
        "\u1D5E": "\u03B3",
        "\u1D5F": "\u03B4",
        "\u1D60": "\u03C6",
        "\u1D61": "\u03C7",
        "\u2070": "\u0030",
        "\u2071": "\u0069",
        "\u2074": "\u0034",
        "\u2075": "\u0035",
        "\u2076": "\u0036",
        "\u2077": "\u0037",
        "\u2078": "\u0038",
        "\u2079": "\u0039",
        "\u207A": "\u002B",
        "\u207B": "\u2212",
        "\u207C": "\u003D",
        "\u207D": "\u0028",
        "\u207E": "\u0029",
        "\u207F": "\u006E",
        "\u2120": "\u0053\u004D",
        "\u2122": "\u0054\u004D",
        "\u3192": "\u4E00",
        "\u3193": "\u4E8C",
        "\u3194": "\u4E09",
        "\u3195": "\u56DB",
        "\u3196": "\u4E0A",
        "\u3197": "\u4E2D",
        "\u3198": "\u4E0B",
        "\u3199": "\u7532",
        "\u319A": "\u4E59",
        "\u319B": "\u4E19",
        "\u319C": "\u4E01",
        "\u319D": "\u5929",
        "\u319E": "\u5730",
        "\u319F": "\u4EBA",
        "\u02C0": "\u0294",
        "\u02C1": "\u0295",
        "\u06E5": "\u0648",
        "\u06E6": "\u064A"
    },
    SUPERSCRIPTS_REGEXP: new RegExp("[\u00AA\u00B2\u00B3\u00B9\u00BA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),

    // I think we need to have separate args for prefix and term,
    // since they have different effects between comma-safe and comma-safe-numbers-only.
    // Either that, or -- oh, we could just bang the two together for the test where
    // necessary.
    
    UPDATE_GROUP_CONTEXT_CONDITION: function (state, str, valueTerm, token, value) {
        if (!state.opt.use_context_condition) return;
        var flags = state.tmp.group_context.tip;
        if (flags.condition) {
            if (!flags.condition.termtxt) {
                flags.condition.termtxt = str;
                flags.condition.valueTerm = valueTerm;
            }
            if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
                if (value) {
                    flags.value_seen = true;
                    if (!value.match(/^[0-9]/)) {
                        state.tmp.just_did_number = false;
                    }
                }
            }
        } else {
            // If not inside a conditional group, raise numeric flag
            // if and only if the current term string ends in a number.
            if (token && token.decorations.filter(o => o[0] === "@vertical-align").length > 0) {
                state.tmp.just_did_number = false;
            } else if (token && token.strings.suffix) {
                state.tmp.just_did_number = false;
            } else if (str) {
                if (str.match(/[0-9]$/)) {
                    state.tmp.just_did_number = true;
                } else {
                    state.tmp.just_did_number = false;
                }
            }
        }
    },

    EVALUATE_GROUP_CONDITION: function(state, flags) {
        if (!state.opt.use_context_condition) return;
        var testres;
        var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
        if (flags.condition.test === "empty-label") {
            testres = !flags.condition.termtxt;
        } else if (flags.condition.test === "empty-label-no-decor") {
            testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
        } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
            var locale_term = flags.condition.termtxt;
            var termStartAlpha = false;
            if (flags.condition.termtxt) {
                termStartAlpha = flags.condition.termtxt.slice(0,1).match(CSL.ALL_ROMANESQUE_REGEXP);
            }
            var num = state.tmp.just_did_number;
            if (num) {
                if (flags.condition.valueTerm) {
                    testres = numbersOnly ? false : true;
                } else if (!locale_term) {
                    testres = true;
                } else if (termStartAlpha) {
                    testres = numbersOnly ? false : true;
                } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
                    testres = true;
                } else {
                    testres = false;
                }
            } else {
                if (flags.condition.valueTerm) {
                    testres = false;
                } else if (!locale_term) {
                    testres = false;
                } else if (termStartAlpha) {
                    testres = numbersOnly ? false : true;
                } else if (state.opt.require_comma_on_symbol === "always") {
                    testres = true;
                } else {
                    testres = false;
                }
            }
        }
        if (testres) {
            var force_suppress = false;
        } else {
            var force_suppress = true;
        }
        if (flags.condition.not) {
            force_suppress = !force_suppress;
        }
        return force_suppress;
    },
    
    SYS_OPTIONS: [
        "prioritize_disambiguate_condition",
        "csl_reverse_lookup_support",
        "main_title_from_short_title",
        "uppercase_subtitles",
        "force_short_title_casing_alignment",
        "implicit_short_title",
        "split_container_title"
    ],

    TITLE_SPLIT_REGEXP: (function() {
        var splits = [
            "\\.\\s+",
            "\\!\\s+",
            "\\?\\s+",
            "\\s*::*\\s+",
            "\\s*—\\s*",
            "\\s+\\-\\s+",
            "\\s*\\-\\-\\-*\\s*"
        ];
        return {
            match: new RegExp("(" + splits.join("|") + ")", "g"),
            matchfirst: new RegExp("^(" + splits.join("|") + ")"),
            split: new RegExp("(?:" + splits.join("|") + ")")
        }
    })(),

    TITLE_SPLIT: function(str) {
        if (!str) {
            return str;
        }
        var m = str.match(CSL.TITLE_SPLIT_REGEXP.match);
        var lst = str.split(CSL.TITLE_SPLIT_REGEXP.split);
        for (var i=lst.length-2; i>-1; i--) {
            lst[i] = lst[i].trim();
            if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
                // recombine
                lst[i] = lst[i] + m[i] + lst[i+1];
                lst = lst.slice(0, i+1).concat(lst.slice(i+2));
            } else {
                // merge
                lst = lst.slice(0, i+1).concat([m[i]]).concat(lst.slice(i+1));
            }
        }
        return lst;
    },
    
    GET_COURT_CLASS: function(state, Item, sortKey){
        // Get authority as a string
        var cls = "";
        var authority = null;
        var country = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
        // inStyle versus in module
        var classType = "court_condition_classes";
        if (sortKey) {
            classType = "court_key_classes";
        }
        if (country && Item.authority) {
            if ("string" === typeof Item.authority) {
                authority = Item.authority;
            } else {
                if (Item.authority[0] && Item.authority[0].literal) {
                    authority = Item.authority[0].literal;
                }
            }
        }
        if (authority) {
            if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country] && state.locale[this.lang].opts[classType][country][authority]) {
                cls = state.locale[this.lang].opts[classType][country][authority];
            } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country] && state.locale[state.opt["default-locale"][0]].opts[classType][country][authority]) {
                cls = state.locale[state.opt["default-locale"][0]].opts[classType][country][authority];
            }
        }
        return cls;
    },

    SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
        var nodes = myxml.getNodesByName(dataObj, 'court-class');
        for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            var courtclass = nodes[pos];
            var attributes = myxml.attributes(courtclass);
            var cls = attributes["@name"];
            var country = attributes["@country"];
            var courts = attributes["@courts"];
            
            // Okay, this is a hack.
            // If state.registry IS NOT yet defined, this is an in-style declaration.
            // If state.registry IS defined, this is an in-module declaration.
            var classType = "court_key_classes";
            if (state.registry) {
                classType = "court_condition_classes";
            }
            
            if (cls && country && courts) {
                courts = courts.trim().split(/\s+/);
                if (!state.locale[lang].opts[classType]) {
                    state.locale[lang].opts[classType] = {};
                }
                if (!state.locale[lang].opts[classType][country]) {
                    state.locale[lang].opts[classType][country] = {};
                }
                for (var i=0,ilen=courts.length;i<ilen;i++) {
                    state.locale[lang].opts[classType][country][courts[i]] = cls;
                }
            }
        }
    },

    INIT_JURISDICTION_MACROS: function (state, Item, item, macroName) {
        if (!state.sys.retrieveStyleModule || !CSL.MODULE_MACROS[macroName] || !Item.jurisdiction) {
            return false;
        }
        var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
        // Set up a list of jurisdictions here, we will reuse it
        if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
            var res = state.retrieveAllStyleModules(jurisdictionList);
            // Okay. We have code for each of the novel modules in the
            // hierarchy. Load them all into the processor.
            for (var jurisdiction in res) {
                var fallback = state.loadStyleModule(jurisdiction, res[jurisdiction]);
                if (fallback) {
                    if (!res[fallback]) {
                        Object.assign(res, state.retrieveAllStyleModules([fallback]));
                        state.loadStyleModule(fallback, res[fallback], true);
                    }
                }
            }
        }
        if (state.opt.parallel.enable) {
            if (!state.parallel) {
                state.parallel = new CSL.Parallel(state);
            }
        }
        // Identify the best jurisdiction for the item and return true, otherwise return false
        for (var i=0,ilen=jurisdictionList.length;i<ilen;i++) {
            var jurisdiction = jurisdictionList[i];
            if (item) {
                if (state.juris[jurisdiction] && !item["best-jurisdiction"] && state.juris[jurisdiction].types.locator) {
                    item["best-jurisdiction"] = jurisdiction;
                }
            }
            if(state.juris[jurisdiction] && state.juris[jurisdiction].types[Item.type]) {
                Item["best-jurisdiction"] = jurisdiction;
                return true;
            }
        }
        return false;
    }
};

/**
 * Functions for parsing an XML object converted to JSON.
 */

/*
  Style and locale JSON should be formatted as follows. Note that
  an empty literal should be set as an explicit empty strings within
  children:[]
  
  {
    name:"term",
    children:[
      ""
    ],
    attrs:{
      name:"author"
    }
  }

  The following script will generate correctly formatted JSON
  from a CSL style or locale file:
*/

CSL.XmlJSON = function (dataObj) {
    this.dataObj = dataObj;
    this.institution = {
        name:"institution",
        attrs:{
            "institution-parts":"long",
            "delimiter":", "
        },
        children:[
            {
                name:"institution-part",
                attrs:{
                    name:"long"
                },
                children:[]
            }
        ]
    };
};

/**
 * No need for cleaning with native JSON.
 */
CSL.XmlJSON.prototype.clean = function (json) {
    return json;
};


/**
 * Methods to call on a node.
 */
CSL.XmlJSON.prototype.getStyleId = function (myjson, styleName) {
    var tagName = 'id';
    if (styleName) {
        tagName = 'title';
    }
    var ret = "";
    var children = myjson.children;
    for (var i=0,ilen=children.length;i<ilen;i++) {
        if (children[i].name === 'info') {
            var grandkids = children[i].children;
            for (var j=0,jlen=grandkids.length;j<jlen;j++) {
                if (grandkids[j].name === tagName) {
                    ret = grandkids[j].children[0];
                }
            }
        }
    }
    return ret;
};

CSL.XmlJSON.prototype.children = function (myjson) {
    //print("children()");
    if (myjson && myjson.children.length) {
        return myjson.children.slice();
    } else {
        return false;
    }
};

CSL.XmlJSON.prototype.nodename = function (myjson) {
    //print("nodename()");
    return myjson ? myjson.name : null;
};

CSL.XmlJSON.prototype.attributes = function (myjson) {
    //print("attributes()");
    var ret = {};
    for (var attrname in myjson.attrs) {
        ret["@"+attrname] = myjson.attrs[attrname];
    }
    return ret;
};


CSL.XmlJSON.prototype.content = function (myjson) {
    //print("content()");
    // xmldom.js and xmle4x.js have "undefined" as default
    var ret = "";
    // This only catches content at first level, but that is good enough
    // for us.
    if (!myjson || !myjson.children) {
        return ret;
    }
    for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {
        if ("string" === typeof myjson.children[i]) {
            ret += myjson.children[i];
        }
    }
    return ret;
};


CSL.XmlJSON.prototype.namespace = {};

CSL.XmlJSON.prototype.numberofnodes = function (myjson) {
    //print("numberofnodes()");
    if (myjson && "number" == typeof myjson.length) {
        return myjson.length;
    } else {
        return 0;
    }
};

// getAttributeName() removed. Looks like it was not being used.

CSL.XmlJSON.prototype.getAttributeValue = function (myjson,name,namespace) {
    //print("getAttributeValue()");
    var ret = "";
    if (namespace) {
        name = namespace+":"+name;
    }
    if (myjson) {
        if (myjson.attrs) {
            if (myjson.attrs[name]) {
                ret = myjson.attrs[name];
            } else {
                ret = "";
            }
        }
    }
    return ret;
};

CSL.XmlJSON.prototype.getNodeValue = function (myjson,name) {
    //print("getNodeValue()");
    var ret = "";
    if (name){
        for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name === name) {
                // This will always be Object() unless empty
                if (myjson.children[i].children.length) {
                    ret = myjson.children[i];
                } else {
                    ret = "";
                }
            }
        }
    } else if (myjson) {
        ret = myjson;
    }
    // Just being careful here, following the former DOM code. The JSON object we receive 
    // for this should be fully normalized.
    if (ret && ret.children && ret.children.length == 1 && "string" === typeof ret.children[0]) {
        ret = ret.children[0];
    }
    return ret;
};

CSL.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myjson,nodename,partname,attrname,val) {
    if (attrname.slice(0,1) === '@'){
        attrname = attrname.slice(1);
    }
    // In the one place this is used in citeproc-js code, it doesn't need to recurse.
    for (var i=0,ilen=myjson.children.length; i<ilen; i += 1) {
        if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
            myjson.children[i].attrs[attrname] = val;
        }
    }
};

CSL.XmlJSON.prototype.deleteNodeByNameAttribute = function (myjson,val) {
    //print("deleteNodeByNameAttribute()");
    var i, ilen;
    for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (!myjson.children[i] || "string" === typeof myjson.children[i]) {
            continue;
        }
        if (myjson.children[i].attrs.name == val) {
            myjson.children = myjson.children.slice(0,i).concat(myjson.children.slice(i+1));
        }
    }
};

CSL.XmlJSON.prototype.deleteAttribute = function (myjson,attrname) {
    if ("undefined" !== typeof myjson.attrs[attrname]) {
        myjson.attrs.pop(attrname);
    }
};

CSL.XmlJSON.prototype.setAttribute = function (myjson,attr,val) {
    //print("setAttribute()");
    myjson.attrs[attr] = val;
    return false;
};

CSL.XmlJSON.prototype.nodeCopy = function (myjson,clone) {
    //print("nodeCopy()");
    if (!clone) {
        var clone = {};
    }
    if ("object" === typeof clone && "undefined" === typeof clone.length) {
        // myjson is an object
        for (var key in myjson) {
            if ("string" === typeof myjson[key]) {
                clone[key] = myjson[key];
            } else if ("object" === typeof myjson[key]) {
                if ("undefined" === typeof myjson[key].length) {
                    clone[key] = this.nodeCopy(myjson[key],{});
                } else {
                    clone[key] = this.nodeCopy(myjson[key],[]);
                }
            }
        }
    } else {
        // myjson is an array
        for (var i=0,ilen=myjson.length;i<ilen; i += 1) {
            if ("string" === typeof myjson[i]) {
                clone[i] = myjson[i];
            } else {
                // If it's at the first level of an array, it's an object.
                clone[i] = this.nodeCopy(myjson[i],{});
            }
        }
    }
    return clone;
};

CSL.XmlJSON.prototype.getNodesByName = function (myjson,name,nameattrval,ret) {
    if (!ret) {
        var ret = [];
    }
    if (!myjson || !myjson.children) {
        return ret;
    }
    if (name === myjson.name) {
        if (nameattrval) {
            if (nameattrval === myjson.attrs.name) {
                ret.push(myjson);
            }
        } else {
            ret.push(myjson);
        }
    }
    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1){
        if ("object" !== typeof myjson.children[i]) {
            continue;
        }
        this.getNodesByName(myjson.children[i],name,nameattrval,ret);
    }
    return ret;
};

CSL.XmlJSON.prototype.nodeNameIs = function (myjson,name) {
    //print("nodeNameIs()");
    if (typeof myjson === "undefined") {
        return false;
    }
    if (name == myjson.name) {
        return true;
    }
    return false;
};

CSL.XmlJSON.prototype.makeXml = function (myjson) {
    //print("makeXml()");
    if ("string" === typeof myjson) {
        if (myjson.slice(0, 1) === "<") {
            myjson = this.jsonStringWalker.walkToObject(myjson);
        } else {
            myjson = JSON.parse(myjson);
        }
    }
    return myjson;
};

CSL.XmlJSON.prototype.insertChildNodeAfter = function (parent,node,pos,datejson) {
    //print("insertChildNodeAfter()");
    // Function is misnamed: this replaces the node
    for (var i=0,ilen=parent.children.length;i<ilen;i+=1) {
        if (node === parent.children[i]) {
            parent.children = parent.children.slice(0,i).concat([datejson]).concat(parent.children.slice(i+1));
            break;
        }
    }
    return parent;
};


CSL.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
    if (myjson.name === "group") {
        var useme = true;
        var mustHaves = ["publisher","publisher-place"];
        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
            var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
            var isText = myjson.children[i].name === "text";
            if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
                mustHaves = mustHaves.slice(0,haveVarname).concat(mustHaves.slice(haveVarname+1));
            } else {
                useme = false;
                break;
            }
        }
        if (useme && !mustHaves.length) {
            myjson.attrs["has-publisher-and-publisher-place"] = true;
       }
    }
    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
        if ("object" === typeof myjson.children[i]) {
            this.insertPublisherAndPlace(myjson.children[i]);
        }
    }    
};
/*
CSL.XmlJSON.prototype.insertPublisherAndPlace = function(myxml) {
    var group = myxml.getElementsByTagName("group");
    for (var i = 0, ilen = group.length; i < ilen; i += 1) {
        var node = group.item(i);
        var skippers = [];
        for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
            if (node.childNodes.item(j).nodeType !== 1) {
                skippers.push(j);
            }
        }
        if (node.childNodes.length - skippers.length === 2) {
            var twovars = [];
            for (var j = 0, jlen = 2; j < jlen; j += 1) {
                if (skippers.indexOf(j) > -1) {
                    continue;
                }
                var child = node.childNodes.item(j);                    
                var subskippers = [];
                for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                    if (child.childNodes.item(k).nodeType !== 1) {
                        subskippers.push(k);
                    }
                }
                if (child.childNodes.length - subskippers.length === 0) {
                    twovars.push(child.getAttribute('variable'));
                    if (child.getAttribute('suffix')
                        || child.getAttribute('prefix')) {
                        twovars = [];
                        break;
                    }
                }
            }
            if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
                node.setAttribute('has-publisher-and-publisher-place', true);
            }
        }
    }
};
*/

CSL.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
    if (parents.length > 0) {
        var myparents = parents.slice();
        var parent = myparents.pop();
        if (parent === "substitute") {
            return true;
        } else {
            return this.isChildOfSubstitute(myparents);
        }
    }
    return false;
};

CSL.XmlJSON.prototype.addMissingNameNodes = function(myjson,parents) {
    if (!parents) {
        parents = [];
    }
    if (myjson.name === "names") {
        // Trawl through children to decide whether a name node is needed here
        if (!this.isChildOfSubstitute(parents)) {
            var addName = true;
            for (var i=0,ilen=myjson.children.length;i<ilen;i++) {
                if (myjson.children[i].name === "name") {
                    addName = false;
                    break;
                }
            }
            if (addName) {
                myjson.children = [{name:"name",attrs:{},children:[]}].concat(myjson.children);
            }
        }
    }
    parents.push(myjson.name);
    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
        if ("object" === typeof myjson.children[i]) {
            this.addMissingNameNodes(myjson.children[i],parents);
        }
    }
    parents.pop();
};


CSL.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
    //print("addInstitutionNodes()");
    var institution;
    // The idea here is to map relevant attributes from name and nampart=family
    // to the "long" institution-part node, when and only when forcing insert
    // of the default node.
    if (myjson.name === "names") {
        // do stuff
        var attributes = {};
        var insertPos = -1;
        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
            if (myjson.children[i].name == "name") {
                for (var key in myjson.children[i].attrs) {
                    attributes[key] = myjson.children[i].attrs[key];
                }
                attributes.delimiter = myjson.children[i].attrs.delimiter;
                attributes.and = myjson.children[i].attrs.and;
                insertPos = i;
                for (var k=0,klen=myjson.children[i].children.length;k<klen;k+=1) {
                    if (myjson.children[i].children[k].attrs.name !== 'family') {
                        continue;
                    }
                    for (var key in myjson.children[i].children[k].attrs) {
                        attributes[key] = myjson.children[i].children[k].attrs[key];
                    }
                }
            }
            if (myjson.children[i].name == "institution") {
                insertPos = -1;
                break;
            }
        }
        if (insertPos > -1) {
            var institution = this.nodeCopy(this.institution);
            for (var i=0,ilen = CSL.INSTITUTION_KEYS.length;i<ilen;i+=1) {
                var attrname = CSL.INSTITUTION_KEYS[i];
                if ("undefined" !== typeof attributes[attrname]) {
                    institution.children[0].attrs[attrname] = attributes[attrname];
                }
                if (attributes.delimiter) {
                    institution.attrs.delimiter = attributes.delimiter;
                }
                if (attributes.and) {
                    institution.attrs.and = attributes.and;
                }
            }
            myjson.children = myjson.children.slice(0,insertPos+1).concat([institution]).concat(myjson.children.slice(insertPos+1));
        }
    }
    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
        if ("string" === typeof myjson.children[i]) {
            continue;
        }
        // Recurse
        this.addInstitutionNodes(myjson.children[i]);
    }
};
CSL.XmlJSON.prototype.flagDateMacros = function(myjson) {
    // print("flagDateMacros()");
    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
        if (myjson.children[i].name === "macro") {
            if (this.inspectDateMacros(myjson.children[i])) {
                myjson.children[i].attrs["macro-has-date"] = "true";
            }
        }
    }
};
CSL.XmlJSON.prototype.inspectDateMacros = function(myjson) {
    //print("inspectDateMacros()");
    if (!myjson || !myjson.children) {
        return false;
    }
    if (myjson.name === "date") {
        return true;
    } else {
        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
            if (this.inspectDateMacros(myjson.children[i])) {
                return true;
            }
        }
    }
    return false;
};

/*
 * Clean serialized XML
 */
CSL.stripXmlProcessingInstruction = function (xml) {
    if (!xml) {
        return xml;
    }
    xml = xml.replace(/^<\?[^?]+\?>/, "");
    xml = xml.replace(/<!--[^>]+-->/g, "");
    xml = xml.replace(/^\s+/g, "");
    xml = xml.replace(/\s+$/g, "");
    return xml;
};


/*
 * String parser for XML inputs
 */
CSL.parseXml = function(str) {
    var _obj = {children:[]};
    var _stack = [_obj.children];

    function _listifyString(str) {
        str = str.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
        var lst = str.split("><");
        var stylePos = null;
        for (var i=0,ilen=lst.length;i<ilen;i++) {
            if (i > 0) {
                lst[i] = "<" + lst[i];
            }
            if (i < (lst.length-1)) {
                lst[i] = lst[i] + ">";
            }
            if ("number" != typeof stylePos) {
                if (lst[i].slice(0, 7) === "<style " || lst[i].slice(0, 8) == "<locale ") {
                    stylePos = i;
                }
            }
        }
        lst = lst.slice(stylePos);
        // Combine open/close elements for empty terms,
        // so that they will be passed through correctly
        // as empty strings.
        for (var i=lst.length-2;i>-1;i--) {
            if (lst[i].slice(1).indexOf("<") === -1) {
                var stub = lst[i].slice(0, 5);
                if (lst[i].slice(-2) !== "/>") {
                    if (stub === "<term") {
                        if (lst[i+1].slice(0, 6) === "</term") {
                            lst[i] = lst[i] + lst[i+1];
                            lst = lst.slice(0, i+1).concat(lst.slice(i+2));
                        }
                    } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                        if (lst[i].slice(-2) !== "/>" && lst[i+1].slice(0, 1) === "<") {
                            lst[i] = lst[i] + lst[i+1];
                            lst = lst.slice(0, i+1).concat(lst.slice(i+2));
                        }
                    }
                }
            }
        }
        return lst;
    }

    function _decodeHtmlEntities(str) {
        return str
            .split("&amp;").join("&")
            .split("&quot;").join("\"")
            .split("&gt;").join(">").split("&lt;").join("<")
            .replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
                var num = parseInt(numStr, 10); // read num as normal number
                return String.fromCharCode(num);
            })
            .replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr){
                var num = parseInt(numStr, 16); // read num as hex
                return String.fromCharCode(num);
            });
    }

    function _getAttributes(elem) {
        var m = elem.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
        if (m) {
            for (var i=0,ilen=m.length;i<ilen;i++) {
                m[i] = m[i].replace(/=.*/, "");
            }
        }
        return m;
    }

    function _getAttribute(elem, attr) {
        var rex = RegExp('^.*[	 ]+' + attr + '=(\"(?:[^\"]*)\"|\'(?:[^\']*)\').*$');
        var m = elem.match(rex);
        return m ? m[1].slice(1, -1) : null;
    }

    function _getTagName(elem) {
        var rex = RegExp("^<([^	 />]+)");
        var m = elem.match(rex);
        return m ? m[1] : null;
    }
    

    function _castObjectFromOpeningTag(elem) {
        var obj = {};
        obj.name = _getTagName(elem);
        obj.attrs = {};
        var attributes = _getAttributes(elem);
        if (attributes) {
            for (var i=0,ilen=attributes.length;i<ilen;i++) {
                var attr = {
                    name: attributes[i],
                    value: _getAttribute(elem, attributes[i])
                };
                obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
            }
        }
        obj.children = [];
        return obj;
    }

    function _extractTextFromCompositeElement(elem) {
        var m = elem.match(/^.*>([^<]*)<.*$/);
        return _decodeHtmlEntities(m[1]);
    }

    function _appendToChildren(obj) {
        _stack.slice(-1)[0].push(obj);
    }

    function _extendStackWithNewChildren(obj) {
        _stack.push(obj.children);
    }

    function processElement(elem) {
        var obj;
        if (elem.slice(1).indexOf('<') > -1) {
            // withtext
            var tag = elem.slice(0, elem.indexOf('>')+1);
            obj = _castObjectFromOpeningTag(tag);
            obj.children = [_extractTextFromCompositeElement(elem)];
            _appendToChildren(obj);
        } else if (elem.slice(-2) === '/>') {
            // singleton
            obj = _castObjectFromOpeningTag(elem);
            // Empty term as singleton
            if (_getTagName(elem) === 'term') {
                obj.children.push('');
            }
            _appendToChildren(obj);
        } else if (elem.slice(0, 2) === '</') {
            // close
            _stack.pop();
        } else {
            // open
            obj = _castObjectFromOpeningTag(elem);
            _appendToChildren(obj);
            _extendStackWithNewChildren(obj);
        }
    }

    var lst = _listifyString(str);

    for (var i=0,ilen=lst.length;i<ilen;i++) {
        var elem = lst[i];
        processElement(elem);
    }
    return _obj.children[0];
};

/**
 * Functions for parsing an XML object using E4X.
 */

CSL.XmlDOM = function (dataObj) {
    this.dataObj = dataObj;
    if ("undefined" == typeof DOMParser) {
        DOMParser = function() {};
        DOMParser.prototype.parseFromString = function(str, contentType) {
            if ("undefined" != typeof ActiveXObject) {
                var xmldata = new ActiveXObject('MSXML.DomDocument');
                xmldata.async = false;
                xmldata.loadXML(str);
                return xmldata;
            } else if ("undefined" != typeof XMLHttpRequest) {
                var xmldata = new XMLHttpRequest;
                if (!contentType) {
                    contentType = 'text/xml';
                }
                xmldata.open('GET', 'data:' + contentType + ';charset=utf-8,' + encodeURIComponent(str), false);
                if(xmldata.overrideMimeType) {
                    xmldata.overrideMimeType(contentType);
                }
                xmldata.send(null);
                return xmldata.responseXML;
            } else if ("undefined" != typeof marknote) {
                var parser = new marknote.Parser();
                return parser.parse(str);
            }
        };
        this.hasAttributes = function (node) {
            var ret;
            if (node.attributes && node.attributes.length) {
                ret = true;
            } else {
                ret = false;
            }
            return ret;
        };
    } else {
        /*
        this.hasAttributes = function (node) {
            return node["hasAttributes"]();
        };
        */
        this.hasAttributes = function (node) {
            var ret;
            if (node.attributes && node.attributes.length) {
                ret = true;
            } else {
                ret = false;
            }
            return ret;
        };
    }
    this.importNode = function (doc, srcElement) {
        var ret;
        if ("undefined" == typeof doc.importNode) {
            ret = this._importNode(doc, srcElement, true);
        } else {
            ret = doc.importNode(srcElement, true);
        }
        return ret;
    };
    // In case importNode is not available.
    // Thx + hat tip to Anthony T. Holdener III
    // http://www.alistapart.com/articles/crossbrowserscripting
    // cases 3, 4, 8 = text, cdata, comment
    this._importNode = function(doc, node, allChildren) {
        switch (node.nodeType) {
            // element node
            case 1:
                var newNode = doc.createElement(node.nodeName);
                if (node.attributes && node.attributes.length > 0)
                    for (var i = 0, il = node.attributes.length; i < il;)
                        newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
                    if (allChildren && node.childNodes && node.childNodes.length > 0)
                        for (var i = 0, il = node.childNodes.length; i < il;)
                            newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
                return newNode;
                // Drop comments on the floor as well.
                //return doc.createTextNode(node.nodeValue);
                //break;
        }
    };
    this.parser = new DOMParser();

    // This seems horribly tormented, but there might be a reason for it.
    // Perhaps this was the only way I found to get namespacing to work ... ?
    var str = "<docco><institution institution-parts=\"long\" delimiter=\", \" substitute-use-first=\"1\" use-last=\"1\"><institution-part name=\"long\"/></institution></docco>";
    var inst_doc = this.parser.parseFromString(str, "text/xml");
    var inst_node = inst_doc.getElementsByTagName("institution");
    this.institution = inst_node.item(0);
    var inst_part_node = inst_doc.getElementsByTagName("institution-part");
    this.institutionpart = inst_part_node.item(0);
    this.ns = "http://purl.org/net/xbiblio/csl";
};

/**
 * No need for cleaning with the DOM, I think.  This will probably just be a noop.
 * But first, let's get XML mode switching up and running.
 */
CSL.XmlDOM.prototype.clean = function (xml) {
    xml = xml.replace(/<\?[^?]+\?>/g, "");
    xml = xml.replace(/<![^>]+>/g, "");
    xml = xml.replace(/^\s+/, "");
    xml = xml.replace(/\s+$/, "");
    xml = xml.replace(/^\n*/, "");
    return xml;
};


/**
 * Methods to call on a node.
 */
CSL.XmlDOM.prototype.getStyleId = function (myxml, styleName) {
    var text = "";
    var tagName = "id";
    if (styleName) {
        tagName = "title";
    }
    var node = myxml.getElementsByTagName(tagName);
    if (node && node.length) {
        node = node.item(0);
    }
    if (node) {
        // W3C conformant browsers
        text = node.textContent;
    }
    if (!text) {
        // Opera, IE 6 & 7
        text = node.innerText;
    }
    if (!text) {
        // Safari
        text = node.innerHTML;
    }
    return text;
};

CSL.XmlDOM.prototype.children = function (myxml) {
    var children, pos, len, ret;
    if (myxml) {
        ret = [];
        children = myxml.childNodes;
        for (pos = 0, len = children.length; pos < len; pos += 1) {
            if (children[pos].nodeName != "#text") {
                ret.push(children[pos]);
            }
        }
        return ret;
    } else {
        return [];
    }
};

CSL.XmlDOM.prototype.nodename = function (myxml) {
    var ret = myxml.nodeName;
    return ret;
};

CSL.XmlDOM.prototype.attributes = function (myxml) {
    var ret, attrs, attr, pos, len;
    ret = new Object();
    if (myxml && this.hasAttributes(myxml)) {
        attrs = myxml.attributes;
        for (pos = 0, len=attrs.length; pos < len; pos += 1) {
            attr = attrs[pos];
            ret["@" + attr.name] = attr.value;
        }
    }
    return ret;
};


CSL.XmlDOM.prototype.content = function (myxml) {
    var ret;
    if ("undefined" != typeof myxml.textContent) {
        ret = myxml.textContent;
    } else if ("undefined" != typeof myxml.innerText) {
        ret = myxml.innerText;
    } else {
        ret = myxml.txt;
    }
    return ret;
};


CSL.XmlDOM.prototype.namespace = {
    "xml":"http://www.w3.org/XML/1998/namespace"
};

CSL.XmlDOM.prototype.numberofnodes = function (myxml) {
    if (myxml) {
        return myxml.length;
    } else {
        return 0;
    }
};

CSL.XmlDOM.prototype.getAttributeName = function (attr) {
    var ret = attr.name;
    return ret;
};

CSL.XmlDOM.prototype.getAttributeValue = function (myxml,name,namespace) {
    var ret = "";
    if (namespace) {
        name = namespace+":"+name;
    }
    if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
        ret = myxml.getAttribute(name);
    }
    return ret;
};

//
// Can't this be, you know ... simplified?
//
CSL.XmlDOM.prototype.getNodeValue = function (myxml,name) {
    var ret = null;
    if (name){
        var vals = myxml.getElementsByTagName(name);
        if (vals.length > 0) {
            if ("undefined" != typeof vals[0].textContent) {
                ret = vals[0].textContent;
            } else if ("undefined" != typeof vals[0].innerText) {
                ret = vals[0].innerText;
            } else {
                ret = vals[0].text;
            }
        }
    }
    if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || (myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text"))) {
        if ("undefined" != typeof myxml.textContent) {
            ret = myxml.textContent;
        } else if ("undefined" != typeof myxml.innerText) {
            ret = myxml.innerText;
        } else {
            ret = myxml.text;
        }
    }
    if (ret === null) {
        ret = myxml;
    }
    return ret;
};

CSL.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myxml,nodename,partname,attrname,val) {
    var pos, len, nodes, node;
    if (attrname.slice(0,1) === '@'){
        attrname = attrname.slice(1);
    }
    nodes = myxml.getElementsByTagName(nodename);
    for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes[pos];
        if (node.getAttribute("name") != partname) {
            continue;
        }
        node.setAttribute(attrname, val);
    }
};

CSL.XmlDOM.prototype.deleteNodeByNameAttribute = function (myxml,val) {
    var pos, len, node, nodes;
    nodes = myxml.childNodes;
    for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes[pos];
        if (!node || node.nodeType == node.TEXT_NODE) {
            continue;
        }
        if (this.hasAttributes(node) && node.getAttribute("name") == val) {
            myxml.removeChild(nodes[pos]);
        }
    }
};

CSL.XmlDOM.prototype.deleteAttribute = function (myxml,attr) {
    myxml.removeAttribute(attr);
};

CSL.XmlDOM.prototype.setAttribute = function (myxml,attr,val) {
    if (!myxml.ownerDocument) {
        myxml = myxml.firstChild;
    }
    // "unknown" to satisfy IE8, which crashes when setAttribute
    // is checked directly as a property, and report its type as
    // "unknown".
    // Many thanks to Phil Lord for tracing the cause of the fault.
    if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
        myxml.setAttribute(attr, val);
    }
    return false;
};

CSL.XmlDOM.prototype.nodeCopy = function (myxml) {
    var cloned_node = myxml.cloneNode(true);
    return cloned_node;
};

CSL.XmlDOM.prototype.getNodesByName = function (myxml,name,nameattrval) {
    var ret, nodes, node, pos, len;
    ret = [];
    nodes = myxml.getElementsByTagName(name);
    for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes.item(pos);
        if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
//        if (nameattrval && !(this.attributes && node.attributes.name && node.attributes.name.value == nameattrval)) {
            continue;
        }
        ret.push(node);
    }
    return ret;
};

CSL.XmlDOM.prototype.nodeNameIs = function (myxml,name) {
    if (name == myxml.nodeName) {
        return true;
    }
    return false;
};

CSL.XmlDOM.prototype.makeXml = function (myxml) {
    if (!myxml) {
        myxml = "<docco><bogus/></docco>";
    }
    myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
    var nodetree = this.parser.parseFromString(myxml, "application/xml");
    return nodetree.firstChild;
};

CSL.XmlDOM.prototype.insertChildNodeAfter = function (parent,node,pos,datexml) {
    var myxml;
    myxml = this.importNode(node.ownerDocument, datexml);
    parent.replaceChild(myxml, node);
     return parent;
};

CSL.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
    var group = myxml.getElementsByTagName("group");
    for (var i = 0, ilen = group.length; i < ilen; i += 1) {
        var node = group.item(i);
        var skippers = [];
        for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
            if (node.childNodes.item(j).nodeType !== 1) {
                skippers.push(j);
            }
        }
        if (node.childNodes.length - skippers.length === 2) {
            var twovars = [];
            for (var j = 0, jlen = 2; j < jlen; j += 1) {
                if (skippers.indexOf(j) > -1) {
                    continue;
                }
                var child = node.childNodes.item(j);                    
                var subskippers = [];
                for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                    if (child.childNodes.item(k).nodeType !== 1) {
                        subskippers.push(k);
                    }
                }
                if (child.childNodes.length - subskippers.length === 0) {
                    twovars.push(child.getAttribute('variable'));
                    if (child.getAttribute('suffix')
                        || child.getAttribute('prefix')) {
                        twovars = [];
                        break;
                    }
                }
            }
            if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
                node.setAttribute('has-publisher-and-publisher-place', true);
            }
        }
    }
};

CSL.XmlDOM.prototype.isChildOfSubstitute = function(node) {
    if (node.parentNode) {
        if (node.parentNode.tagName.toLowerCase() === "substitute") {
            return true;
        } else {
            return this.isChildOfSubstitute(node.parentNode);
        }
    }
    return false;
};

CSL.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
    var nameslist = myxml.getElementsByTagName("names");
    for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
        var names = nameslist.item(i);
        var namelist = names.getElementsByTagName("name");
        if ((!namelist || namelist.length === 0)
            && !this.isChildOfSubstitute(names)) {
            
            var doc = names.ownerDocument;
            var name = doc.createElement("name");
            names.appendChild(name);
        }
    }
};


CSL.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
    var names, thenames, institution, theinstitution, theinstitutionpart, name, thename, pos, len;
    names = myxml.getElementsByTagName("names");
    for (pos = 0, len = names.length; pos < len; pos += 1) {
        thenames = names.item(pos);
        name = thenames.getElementsByTagName("name");
        if (name.length == 0) {
            continue;
        }
        institution = thenames.getElementsByTagName("institution");
        if (institution.length == 0) {
            theinstitution = this.importNode(myxml.ownerDocument, this.institution);
            theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
            thename = name.item(0);
            thenames.insertBefore(theinstitution, thename.nextSibling);
            for (var j = 0, jlen = CSL.INSTITUTION_KEYS.length; j < jlen; j += 1) {
                var attrname = CSL.INSTITUTION_KEYS[j];
                var attrval = thename.getAttribute(attrname);
                if (attrval) {
                    theinstitutionpart.setAttribute(attrname, attrval);
                }
            }
            var nameparts = thename.getElementsByTagName("name-part");
            for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
                if ('family' === nameparts[j].getAttribute('name')) {
                    for (var k = 0, klen = CSL.INSTITUTION_KEYS.length; k < klen; k += 1) {
                        var attrname = CSL.INSTITUTION_KEYS[k];
                        var attrval = nameparts[j].getAttribute(attrname);
                        if (attrval) {
                            theinstitutionpart.setAttribute(attrname, attrval);
                        }
                    }
                }
            }
        }
    }
};


CSL.XmlDOM.prototype.flagDateMacros = function(myxml) {
    var pos, len, thenode, thedate;
    var nodes = myxml.getElementsByTagName("macro");
    for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        thenode = nodes.item(pos);
        thedate = thenode.getElementsByTagName("date");
        if (thedate.length) {
            thenode.setAttribute('macro-has-date', 'true');
        }
    }
};


/*global CSL: true */

CSL.setupXml = function(xmlObject) {
    var dataObj = {};
    var parser = null;
    if ("undefined" !== typeof xmlObject) {
        if ("string" === typeof xmlObject) {
            xmlObject = xmlObject.replace("^\uFEFF", "")
                .replace(/^\s+/, "");
            if (xmlObject.slice(0, 1) === "<") {
                // Assume serialized XML
                dataObj = CSL.parseXml(xmlObject);
            } else {
                // Assume serialized JSON
                dataObj = JSON.parse(xmlObject);
            }
            parser = new CSL.XmlJSON(dataObj);
        } else if ("undefined" !== typeof xmlObject.getAttribute) {
            // Assume DOM instance
            parser = new CSL.XmlDOM(xmlObject);
        } else if ("undefined" !== typeof xmlObject.toXMLString) {
            // Assume E4X object
            parser = new CSL.XmlE4X(xmlObject);
        } else {
            // Assume JS object
            parser = new CSL.XmlJSON(xmlObject);
        }
    } else {
        CSL.error("unable to parse XML input");
    }
    if (!parser) {
        CSL.error("citeproc-js error: unable to parse CSL style or locale object");
    }
    return parser;
};

/*global CSL: true */

CSL.getSortCompare = function (default_locale) {
    if (CSL.stringCompare) {
        return CSL.stringCompare;
    }
    var me = this;
    var strcmp;
    var strcmp_opts = {
        sensitivity:"base",
        ignorePunctuation:true,
        numeric:true
    };
    // In order, attempt the following:
    //   (1) Set locale collation from processor language
    //   (2) Use localeCompare()
    if (!default_locale) {
        default_locale = "en-US";
    }
    strcmp = function (a, b) {
        return CSL.toLocaleLowerCase.call(me, a).localeCompare(CSL.toLocaleLowerCase.call(me, b),default_locale,strcmp_opts);
    };
    var stripPunct = function (str) {
        return str.replace(/^[\[\]\'\"]*/g, "");
    };
    var getBracketPreSort = function () {
        if (!strcmp("[x","x")) {
            return false;
        } else {
            return function (a, b) {
                return strcmp(stripPunct(a), stripPunct(b));
            };
        }
    };
    var bracketPreSort = getBracketPreSort();
    var sortCompare = function (a, b) {
        if (bracketPreSort) {
            return bracketPreSort(a, b);
        } else {
            return strcmp(a, b);
        }
    };
    return sortCompare;
};

/*global CSL: true */

CSL.ambigConfigDiff = function(a, b) {
    var pos, len, ppos, llen;
    // return of true means the ambig configs differ
    if (a.names.length !== b.names.length) {
        //print("   (1)");
        return 1;
    } else {
        for (pos = 0, len = a.names.length; pos < len; pos += 1) {
            if (a.names[pos] !== b.names[pos]) {
        //print("   (2) "+a.names[pos]+" "+b.names[pos]);
                return 1;
            } else {
                for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {
                    if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {
        //print("   (3): "+a.givens[pos][ppos]+" "+b.givens[pos][ppos]+" "+pos+"/"+ppos+" "+b.givens[pos]);
                        return 1;
                    }
                }
            }
        }
    }
    if (a.disambiguate != b.disambiguate) {
        //print("   (4) "+a.disambiguate+" "+b.disambiguate);
        return 1;
    }
    if (a.year_suffix !== b.year_suffix) {
        //print("   (5) "+a.year_suffix+" "+b.year_suffix);
        return 1;
    }
    return 0;
};

CSL.cloneAmbigConfig = function (config, oldconfig) {
    var i, ilen, j, jlen, param;
    var ret = {};
    ret.names = [];
    ret.givens = [];
    ret.year_suffix = false;
    ret.disambiguate = false;
    for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
        param = config.names[i];
        // Fixes update bug affecting plugins, without impacting
        // efficiency with update of large numbers of year-suffixed
        // items.
        ret.names[i] = param;
    }
    for (i  = 0, ilen = config.givens.length; i < ilen; i += 1) {
        param = [];
        for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
            // condition at line 312 of disambiguate.js protects against negative
            // values of j
            param.push(config.givens[i][j]);
        }
        ret.givens.push(param);
    }
    // XXXX Is this necessary at all?
    if (oldconfig) {
        ret.year_suffix = oldconfig.year_suffix;
        ret.disambiguate = oldconfig.disambiguate;
    } else {
        ret.year_suffix = config.year_suffix;
        ret.disambiguate = config.disambiguate;
    }
    return ret;
};

/**
 * Return current base configuration for disambiguation
 */
CSL.getAmbigConfig = function () {
    var config, ret;
    config = this.tmp.disambig_request;
    if (!config) {
        config = this.tmp.disambig_settings;
    }
    var ret = CSL.cloneAmbigConfig(config);
    return ret;
};

/**
 * Return max values for disambiguation
 */
CSL.getMaxVals = function () {
    return this.tmp.names_max.mystack.slice();
};

/**
 * Return min value for disambiguation
 */
CSL.getMinVal = function () {
    return this.tmp["et-al-min"];
};

/*global CSL: true */

/* For node execution pretty-printing (see below) */

/*
var INDENT = "";
*/

CSL.tokenExec = function (token, Item, item) {
    // Called on state object
    var next, maybenext, exec, debug;
    debug = false;
    next = token.next;
    maybenext = false;

    /* Pretty-print node executions */

    /*
    if (["if", "else-if", "else"].indexOf(token.name) === -1) {
        if (token.tokentype == 1) {
            INDENT = INDENT.slice(0, -2);
        }
    }
    this.sys.print(INDENT + "---> Token: " + token.name + " (" + token.tokentype + ") in " + this.tmp.area + ", " + this.output.current.mystack.length);
    if (["if", "else-if", "else"].indexOf(token.name) === -1) {
        if (token.tokentype == 0) {
            INDENT += "  ";
        }
    }
    */

    var record = function (result) {
        if (result) {
            this.tmp.jump.replace("succeed");
            return token.succeed;
        } else {
            this.tmp.jump.replace("fail");
            return token.fail;
        }
    };
    if (token.test) {
        next = record.call(this,token.test(Item, item));
    }
    for (var i=0,ilen=token.execs.length;i<ilen;i++) {
        exec = token.execs[i];
        maybenext = exec.call(token, this, Item, item);
        if (maybenext) {
            next = maybenext;
        }
    }
    //SNIP-START
    if (debug) {
        CSL.debug(token.name + " (" + token.tokentype + ") ---> done");
    }
    //SNIP-END
    return next;
};

/**
 * Macro expander.
 * <p>Called on the state object.</p>
 */
CSL.expandMacro = function (macro_key_token, target) {
    var mkey, macro_nodes, end_of_macro, func;

    mkey = macro_key_token.postponed_macro;

    var sort_direction = macro_key_token.strings.sort_direction;
    
    // Decorations and affixes are in wrapper applied in cs:text
    macro_key_token = new CSL.Token("group", CSL.START);
    
    var hasDate = false;
    var macroid = false;
    macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, 'macro', mkey);
    if (macro_nodes.length) {
        macroid = this.cslXml.getAttributeValue(macro_nodes[0],'cslid');
        hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
    }
    if (hasDate) {
        mkey = mkey + "@" + this.build.current_default_locale;
        func = function (state) {
            if (state.tmp.extension) {
                state.tmp["doing-macro-with-date"] = true;
            }
        };
        macro_key_token.execs.push(func);
    }

    if (this.build.macro_stack.indexOf(mkey) > -1) {
        CSL.error("CSL processor error: call to macro \"" + mkey + "\" would cause an infinite loop");
    } else {
        this.build.macro_stack.push(mkey);
    }

    macro_key_token.cslid = macroid;

    if (CSL.MODULE_MACROS[mkey]) {
        macro_key_token.juris = mkey;
        this.opt.update_mode = CSL.POSITION;
    }
    // Macro group is treated as a real node in the style
    CSL.Node.group.build.call(macro_key_token, this, target, true);

    // Node does not exist in the CSL
    if (!this.cslXml.getNodeValue(macro_nodes)) {
        CSL.error("CSL style error: undefined macro \"" + mkey + "\"");
    }

    // Let's macro
    var mytarget = CSL.getMacroTarget.call(this, mkey);
    if (mytarget) {
        CSL.buildMacro.call(this, mytarget, macro_nodes);
        CSL.configureMacro.call(this, mytarget);
    }
    if (!this.build.extension) {
        var func = (function(macro_name) {
            return function (state, Item, item) {
                var next = 0;
                while (next < state.macros[macro_name].length) {
                    next = CSL.tokenExec.call(state, state.macros[macro_name][next], Item, item);
                }
            };
        }(mkey));
        var text_node = new CSL.Token("text", CSL.SINGLETON);
        text_node.execs.push(func);
        target.push(text_node);
    }

    // Decorations and affixes are in wrapper applied in cs:text
    end_of_macro = new CSL.Token("group", CSL.END);
    end_of_macro.strings.sort_direction = sort_direction;
    
    if (hasDate) {
        func = function (state) {
            if (state.tmp.extension) {
                state.tmp["doing-macro-with-date"] = false;
            }
        };
        end_of_macro.execs.push(func);
    }
    if (macro_key_token.juris) {
        end_of_macro.juris = mkey;
     }
    // Macro group is treated as a real node in the style
    CSL.Node.group.build.call(end_of_macro, this, target, true);

    this.build.macro_stack.pop();
};

CSL.getMacroTarget = function (mkey) {
    var mytarget = false;
    if (this.build.extension) {
        mytarget = this[this.build.root + this.build.extension].tokens;
    } else if (!this.macros[mkey]) {
        mytarget = [];
        this.macros[mkey] = mytarget;
    }
    return mytarget;
};

CSL.buildMacro = function (mytarget, macro_nodes) {
    var builder = CSL.makeBuilder(this, mytarget);
    var mynode;
    if ("undefined" === typeof macro_nodes.length) {
        mynode = macro_nodes;
    } else {
        mynode = macro_nodes[0];
    }
    builder(mynode);
};

CSL.configureMacro = function (mytarget) {
    if (!this.build.extension) {
        this.configureTokenList(mytarget);
    }
};


/**
 * Convert XML node to token.
 * <p>This is called on an XML node.  After extracting the name and attribute
 * information from the node, it performs three operations.  Attribute information
 * relating to output formatting is stored on the node as an array of tuples,
 * which fixes the sequence of execution of output functions to be invoked
 * in the next phase of processing.  Other attribute information is reduced
 * to functions, and is pushed into an array on the token in no particular
 * order, for later execution.  The element name is used as a key to
 * invoke the relevant <code>build</code> method of the target element.
 * Element methods are defined in {@link CSL.Node}.</p>
 * @param {Object} state  The state object returned by {@link CSL.Engine}.
 * @param {Int} tokentype  A CSL namespace constant (<code>CSL.START</code>,
 * <code>CSL.END</code> or <code>CSL.SINGLETON</code>.
 */
CSL.XmlToToken = function (state, tokentype, explicitTarget, var_stack) {
    var name, txt, attributes, decorations, token, key, target;
    name = state.cslXml.nodename(this);
    //CSL.debug(tokentype + " : " + name);
    if (state.build.skip && state.build.skip !== name) {
        return;
    }
    if (!name) {
        txt = state.cslXml.content(this);
        if (txt) {
            state.build.text = txt;
        }
        return;
    }
    if (!CSL.Node[state.cslXml.nodename(this)]) {
        CSL.error("Undefined node name \"" + name + "\".");
    }
    attributes = state.cslXml.attributes(this);
    decorations = CSL.setDecorations.call(this, state, attributes);
    token = new CSL.Token(name, tokentype);
    if (tokentype !== CSL.END || name === "if" || name === "else-if" || name === "layout") {
        //
        // xml: more xml stuff
        //
        for (var key in attributes) {
            if (attributes.hasOwnProperty(key)) {
                if (tokentype === CSL.END && key !== "@language" && key !== "@locale") {
                    continue;
                }
                if (attributes.hasOwnProperty(key)) {
                    if (CSL.Attributes[key]) {
                        try {
                            CSL.Attributes[key].call(token, state, "" + attributes[key]);
                        } catch (e) {
                            CSL.error(key + " attribute: " + e);
                        }
                    } else {
                        CSL.debug("warning: undefined attribute \""+key+"\" in style");
                    }
                }
            }
        }
        token.decorations = decorations;
        if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {
            var_stack.push(token.variables);
        }
    } else if (tokentype === CSL.END && attributes['@variable']) {
        token.hasVariable = true;
        if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {
            token.variables = var_stack.pop();
        }
    }
    //
    // !!!!!: eliminate diversion of tokens to separate
    // token list (formerly used for reading in macros
    // and terms).
    //
    if (explicitTarget) {
        target = explicitTarget;
    } else {
        target = state[state.build.area].tokens;
    }
    // True flags real nodes in the style
    CSL.Node[name].build.call(token, state, target, true);
};



/*global CSL: true */


CSL.DateParser = function () {

    /*
     * Fixed values
     */

    // jse imperial years
    var epochPairs = [
        ["\u660E\u6CBB", 1867],
        ["\u5927\u6B63", 1911],
        ["\u662D\u548C", 1925],
        ["\u5E73\u6210", 1988]
    ];
    for (var i=0,ilen=epochPairs.length; i<ilen; i++) {
        var key = epochPairs[i][0];
        var val = epochPairs[i][1];
    }
    
    var epochMatchStrings = [];
    var epochMap = {};
    for (var i=0,ilen=epochPairs.length; i<ilen; i++) {
        var pair = epochPairs[i];
        var val = pair[0];
        epochMatchStrings.push(val);
        epochMap[pair[0]] = pair[1];
    }
    var epochMatchString = epochMatchStrings.join("|");

    // regular expression to trap year name and year
    // (splitter and matcher, to cope with ancient JS implementations)
    var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
    var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");

    // regular expression for month or day kanji label
    var kanjiMonthDay = /(\u6708|\u5E74)/g;

    // regular expression for year kanji label
    var kanjiYear = /\u65E5/g;

    // regular expression for double-width Japanese range marker
    var kanjiRange = /\u301c/g;

    // parsing regexps for normalized strings
    //   raw materials
    var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
    var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
    var numberVal = "[?0-9]{1,3}";
    var rangeSeparator = "[%%DATED%%]";
    var fuzzyChar = "[?~]";
    var chars = "[^\-\/\~\?0-9]+";
    var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
    //   composed regexps
    var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
    var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "\/"));
    var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "\/").replace(/%%DATED%%/g, "-"));

    /*
     * Mutable values
     */

    // months
    var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
    this.monthStrings = monthString.split(" ");

    /*
     * Configuration functions
     */

    this.setOrderDayMonth = function() {
        // preferred ordering for numeric dates
        this.monthGuess = 1;
        this.dayGuess = 0;
    };

    this.setOrderMonthDay = function() {
        // preferred ordering for numeric dates
        this.monthGuess = 0;
        this.dayGuess = 1;
    };

    this.resetDateParserMonths = function() {
        // Function to reset months to default.
        this.monthSets = [];
        for (var i=0,ilen=this.monthStrings.length; i<ilen; i++) {
            this.monthSets.push([this.monthStrings[i]]);
        }
        this.monthAbbrevs = [];
        for (var i=0,ilen=this.monthSets.length; i<ilen; i++) {
            this.monthAbbrevs.push([]);
            for (var j=0,jlen=this.monthSets[i].length; j<jlen; j++) {
                this.monthAbbrevs[i].push(this.monthSets[i][0].slice(0, 3));
            }
        }
        this.monthRexes = [];
        for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {
            this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i].join("|") + ")"));
        }
    };

    this.addDateParserMonths = function(lst) {
        // Extend list of months with an additional set of month abbreviations,
        // extending strings as required to resolve ambiguities.

        // Normalize string to list
        if ("string" === typeof lst) {
            lst = lst.split(/\s+/);
        }

        // Check that there are twelve (or sixteen) to add
        if (lst.length !== 12 && lst.length !== 16) {
            CSL.debug("month [+season] list of "+lst.length+", expected 12 or 16. Ignoring.");
            return;
        }

        // Extend as necessary to resolve ambiguities
        // For each new month string ...
        for (var i=0,ilen=lst.length; i<ilen; i++) {
            var abbrevLength = null;
            var skip = false;
            var insert = 3;
            var extendedSets = {};
            for (var j=0,jlen=this.monthAbbrevs.length; j<jlen; j++) {
                extendedSets[j] = {};
                if (j === i) {
                    // Mark for skipping if same as an existing abbreviation of same month
                    for (var k=0,klen=this.monthAbbrevs[i].length; k<klen; k++) {
                        if (this.monthAbbrevs[i][k] === lst[i].slice(0, this.monthAbbrevs[i][k].length)) {
                            skip = true;
                            break;
                        }
                    }
                } else {
                    // Mark for extending if same as existing abbreviation of any expression of another month
                    for (var k=0,klen=this.monthAbbrevs[j].length; k<klen; k++) {
                        abbrevLength = this.monthAbbrevs[j][k].length;
                        if (this.monthAbbrevs[j][k] === lst[i].slice(0, abbrevLength)) {
                            while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i].slice(0, abbrevLength)) {
                                // Abort when full length is hit, otherwise extend
                                if (abbrevLength > lst[i].length || abbrevLength > this.monthSets[j][k].length) {
                                    CSL.debug("unable to disambiguate month string in date parser: "+lst[i]);
                                    break;
                                } else {
                                    // Mark both new entry and existing abbrev for extension
                                    abbrevLength += 1;
                                }
                            }
                            insert = abbrevLength;
                            extendedSets[j][k] = abbrevLength;
                        }
                    }
                }
                for (var jKey in extendedSets) {
                    for (var kKey in extendedSets[jKey]) {
                        abbrevLength = extendedSets[jKey][kKey];
                        jKey = parseInt(jKey, 10);
                        kKey = parseInt(kKey, 10);
                        this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
                    }
                }
            }
            // Insert here
            if (!skip) {
                this.monthSets[i].push(lst[i]);
                this.monthAbbrevs[i].push(lst[i].slice(0, insert));
            }
        }

        // Compose
        this.monthRexes = [];
        this.monthRexStrs = [];
        for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {
            this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i].join("|") + ")"));
            this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i].join("|") + ")");
        }
        if (this.monthAbbrevs.length === 18) {
            for (var i=12,ilen=14; i<ilen; i++) {
                this.monthRexes[i+4] = new RegExp("^(?:" + this.monthAbbrevs[i].join("|") + ")");
                this.monthRexStrs[i+4] = "^(?:" + this.monthAbbrevs[i].join("|") + ")";
            }
        }
    };

    /*
     * Conversion functions
     */

    this.convertDateObjectToArray = function (thedate) {
        // Converts object in place and returns object
        thedate["date-parts"] = [];
        thedate["date-parts"].push([]);
        var slicelen = 0;
        var part;
        for (var i=0,ilen=3; i<ilen; i++) {
            part = ["year", "month", "day"][i];
            if (!thedate[part]) {
                break;
            }
            slicelen += 1;
            thedate["date-parts"][0].push(thedate[part]);
            delete thedate[part];
        }
        thedate["date-parts"].push([]);
        for (var i=0, ilen=slicelen; i<ilen; i++) {
            part = ["year_end", "month_end", "day_end"][i];
            if (!thedate[part]) {
                break;
            }
            thedate["date-parts"][1].push(thedate[part]);
            delete thedate[part];
        }
        if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
            thedate["date-parts"].pop();
        }
        return thedate;
    };

    // XXXX String output is currently unable to represent ranges
    this.convertDateObjectToString = function(thedate) {
        // Returns string
        var ret = [];
        for (var i = 0, ilen = 3; i < ilen; i += 1) {
            if (thedate[CSL.DATE_PARTS_ALL[i]]) {
                ret.push(thedate[CSL.DATE_PARTS_ALL[i]]);
            } else {
                break;
            }
        }
        return ret.join("-");
    };

    /*
     * Utility function
     */

    this._parseNumericDate = function (ret, delim, suff, txt) {
        if (!suff) {
            suff = "";
        }
        var lst = txt.split(delim);
        
        for (var i=0, ilen=lst.length; i<ilen; i++) {
            if (lst[i].length === 4) {
                ret[("year" + suff)] = lst[i].replace(/^0*/, "");
                if (!i) {
                    lst = lst.slice(1);
                } else {
                    lst = lst.slice(0, i);
                }
                break;
            }
        }
        for (var i=0,ilen=lst.length; i<ilen; i++) {
            lst[i] = parseInt(lst[i], 10);
        }
        if (lst.length === 1 || (lst.length === 2 && !lst[1])) {
            var month = lst[0];
            if (month) {
                ret[("month" + suff)] = "" + lst[0];
            }
        } else if (lst.length === 2) {
            if (lst[this.monthGuess] > 12) {
                var month = lst[this.dayGuess];
                var day = lst[this.monthGuess];
                if (month) {
                    ret[("month" + suff)] = "" + month;
                    if (day) {
                        ret[("day" + suff)] = "" + day;
                    }
                }
            } else {
                var month = lst[this.monthGuess];
                var day = lst[this.dayGuess];
                if (month) {
                    ret[("month" + suff)] = "" + month;
                    if (day) {
                        ret[("day" + suff)] = "" + day;
                    }
                }
            }
        }
    };

    /*
     * Parsing functions
     */

    this.parseDateToObject = function (txt) {
        //
        // Normalize the format and the year if it's a Japanese date
        //
        var orig = txt;
        var slashPos = -1;
        var dashPos = -1;
        var yearIsNegative = false;
        var lst;
        if (txt) {
            txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
            // If string leads with a minus sign, strip and memo it.
            if (txt.slice(0, 1) === "-") {
                yearIsNegative = true;
                txt = txt.slice(1);
            }
            
            // If string is a number of 1 to 3 characters only, treat as year.
            if (txt.match(/^[0-9]{1,3}$/)) {
                while (txt.length < 4) {
                    txt = "0" + txt;
                }
            }
            
            // Normalize to string
            txt = "" + txt;
            // Remove things that look like times
            txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/,"");
            var m = txt.match(kanjiMonthDay);
            if (m) {
                txt = txt.replace(/\s+/g, "");
                txt = txt.replace(kanjiYear, "");
                txt = txt.replace(kanjiMonthDay, "-");
                txt = txt.replace(kanjiRange, "/");
                txt = txt.replace(/\-\//g, "/");
                txt = txt.replace(/-$/g,"");

                // Tortuous workaround for IE6
                var slst = txt.split(epochSplitter);
                lst = [];
                var mm = txt.match(epochMatcher);
                if (mm) {
                    var mmx = [];
                    for (var i=0,ilen=mm.length; i<ilen; i++) {
                        mmx = mmx.concat(mm[i].match(/([^0-9]+)([0-9]+)/).slice(1));
                    }
                    for (var i=0,ilen=slst.length; i<ilen; i++) {
                        lst.push(slst[i]);
                        if (i !== (ilen - 1)) {
                            // pos is undeclared, and multiplying by 2 here is insane.
                            var mmpos = (i * 2);
                            lst.push(mmx[mmpos]);
                            lst.push(mmx[mmpos + 1]);
                        }
                    }
                } else {
                    lst = slst;
                }
                // workaround duly applied, this now works
                for (var i=1,ilen=lst.length; i<ilen; i+=3) {
                    lst[i + 1] = epochMap[lst[i]] + parseInt(lst[i + 1], 10);
                    lst[i] = "";
                }
                txt = lst.join("");
                txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
                //
                // normalize date and identify delimiters
                //
                txt = txt.replace(/\.\s*$/, "");

                // not sure what this is meant to do
                txt = txt.replace(/\.(?! )/, "");

                slashPos = txt.indexOf("/");
                dashPos = txt.indexOf("-");
            }
        }
        // drop punctuation from a.d., b.c.
        txt = txt.replace(/([A-Za-z])\./g, "$1");

        var number = "";
        var note = "";
        var thedate = {};
        var rangeDelim;
        var dateDelim;
        if (txt.slice(0, 1) === "\"" && txt.slice(-1) === "\"") {
            thedate.literal = txt.slice(1, -1);
            return thedate;
        }
        if (slashPos > -1 && dashPos > -1) {
            var slashCount = txt.split("/");
            if (slashCount.length > 3) {
                rangeDelim = "-";
                txt = txt.replace(/\_/g, "-");
                dateDelim = "/";
                lst = txt.split(rexSlashDash);
            } else {
                rangeDelim = "/";
                txt = txt.replace(/\_/g, "/");
                dateDelim = "-";
                lst = txt.split(rexDashSlash);
            }
        } else {
            txt = txt.replace(/\//g, "-");
            txt = txt.replace(/\_/g, "-");
            rangeDelim = "-";
            dateDelim = "-";
            lst = txt.split(rexDash);
        }
        var ret = [];
        for (var i=0,ilen=lst.length; i<ilen; i++) {
            var m = lst[i].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
            if (m) {
                ret.push(m[1]);
            }
        }
        //
        // Phase 2
        //
        var delimPos = ret.indexOf(rangeDelim);
        var delims = [];
        var isRange = false;
        if (delimPos > -1) {
            delims.push([0, delimPos]);
            delims.push([(delimPos + 1), ret.length]);
            isRange = true;
        } else {
            delims.push([0, ret.length]);
        }
        //
        // For each side of a range divide ...
        //
        var suff = "";
        
        for (var i=0,ilen=delims.length; i<ilen; i++) {
            var delim = delims[i];
            //
            // Process each element ...
            //
            var date = ret.slice(delim[0], delim[1]);
            outer: 
            for (var j=0,jlen=date.length; j<jlen; j++) {
                var element = date[j];
                //
                // If it's a numeric date, process it.
                //
                if (element.indexOf(dateDelim) > -1) {
                    this._parseNumericDate(thedate, dateDelim, suff, element);
                    continue;
                }
                //
                // If it's an obvious year, record it.
                //
                if (element.match(/[0-9]{4}/)) {
                    thedate[("year" + suff)] = element.replace(/^0*/, "");
                    continue;
                }
                //
                // If it's a fuzzy marker, record it.
                //
                if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                    thedate.circa = true;
                }
                //
                // If it's a month, record it.
                //
                for (var k=0,klen=this.monthRexes.length; k<klen; k++) {
                    if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                        thedate[("month" + suff)] = "" + (parseInt(k, 10) + 1);
                        continue outer;
                    }
                }
                //
                // If it's a number, make a note of it
                //
                if (element.match(/^[0-9]+$/)) {
                    number = element;
                }
                //
                // If it's a BC or AD marker, make a year of
                // any note.  Separate, reverse the sign of the year
                // if it's BC.
                //
                if (element.toLocaleLowerCase().match(/^bc/) && number) {
                    thedate[("year" + suff)] = "" + (number * -1);
                    number = "";
                    continue;
                }
                if (element.toLocaleLowerCase().match(/^ad/) && number) {
                    thedate[("year" + suff)] = "" + number;
                    number = "";
                    continue;
                }
                //
                // If it's cruft, make a note of it
                //
                if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate[("season" + suff)]) {
                    note = element;
                    continue;
                }
            }
            //
            // If at the end of the string there's still a note
            // hanging around, make a day of it.
            //
            if (number) {
                thedate[("day" + suff)] = number;
                number = "";
            }
            //
            // If at the end of the string there's cruft lying
            // around, and the season field is empty, put the
            // cruft there.
            //
            if (note && !thedate[("season" + suff)]) {
                thedate[("season" + suff)] = note.trim();
                note = "";
            }
            suff = "_end";
        }
        //
        // update any missing elements on each side of the divide
        // from the other
        //
        if (isRange) {
            for (var j=0,jlen=CSL.DATE_PARTS_ALL.length; j<jlen; j++) {
                var item = CSL.DATE_PARTS_ALL[j];
                if (thedate[item] && !thedate[(item + "_end")]) {
                    thedate[(item + "_end")] = thedate[item];
                } else if (!thedate[item] && thedate[(item + "_end")]) {
                    thedate[item] = thedate[(item + "_end")];
                }
            }
        }
        //
        // If there's no year, or if there only a year and a day, it's a failure; pass through the literal
        //
        if (!thedate.year || (thedate.year && thedate.day && !thedate.month)) {
            thedate = { "literal": orig };
        }
        var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
        for (var i=0,ilen=parts.length; i<ilen; i++) {
            var part = parts[i];
            if ("string" === typeof thedate[part] && thedate[part].match(/^[0-9]+$/)) {
                thedate[part] = parseInt(thedate[part], 10);
            }
            
        }
        if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
            thedate.year = (thedate.year * -1);
        }
        return thedate;
    };

    this.parseDateToArray = function(txt) {
        return this.convertDateObjectToArray(this.parseDateToObject(txt));            
    };

    this.parseDateToString = function(txt) {
        return this.convertDateObjectToString(this.parseDateToObject(txt));
    };
    
    this.parse = function(txt) {
        return this.parseDateToObject(txt);
    };
    
    /*

     * Setup
     */

    this.setOrderMonthDay();
    this.resetDateParserMonths();
};
CSL.DateParser = new CSL.DateParser();

/*global CSL: true */

CSL.Engine = function (sys, style, lang, forceLang) {
    var attrs, langspec;
    this.processor_version = CSL.PROCESSOR_VERSION;
    this.csl_version = "1.0";
    this.sys = sys;
    
    if (typeof Object.assign != 'function') {
        // Must be writable: true, enumerable: false, configurable: true
        Object.defineProperty(Object, "assign", {
            value: function assign(target) { // .length of function is 2
                if (target == null) { // TypeError if undefined or null
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                var to = Object(target);

                for (var index = 1; index < arguments.length; index++) {
                    var nextSource = arguments[index];

                    if (nextSource != null) { // Skip over if undefined or null
                        for (var nextKey in nextSource) {
                            // Avoid bugs when hasOwnProperty is shadowed
                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                }
                return to;
            },
            writable: true,
            configurable: true
        });
    }

    // XXX This may be excess code. Given the normalization performed on
    // XXX the output queue before variableWrapper() is run, a single
    // XXX space should be the most cruft that we ever see before a variable.
    if (sys.variableWrapper) {
        CSL.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp('^([' + [" "].concat(CSL.SWAPPING_PUNCTUATION).join("") + ']*)(.*)');
    }
    // XXXX This should be restored -- temporarily suspended for testing of JSON style support.
    if (CSL.retrieveStyleModule) {
        this.sys.retrieveStyleModule = CSL.retrieveStyleModule;
    }
    if (CSL.getAbbreviation) {
        this.sys.getAbbreviation = CSL.getAbbreviation;
    }
    if (this.sys.stringCompare) {
        CSL.stringCompare = this.sys.stringCompare;
    }
    this.sys.AbbreviationSegments = CSL.AbbreviationSegments;

    this.transform = new CSL.Transform(this);
    // true or false
    this.setParseNames = function (val) {
        this.opt['parse-names'] = val;
    };
    
    this.opt = new CSL.Engine.Opt();
    this.tmp = new CSL.Engine.Tmp();
    this.build = new CSL.Engine.Build();
    this.fun = new CSL.Engine.Fun(this);

    this.configure = new CSL.Engine.Configure();
    // Build citation before citation_sort in order to pick up
    // state.opt.update_mode, needed it determine whether
    // a grouped sort should be performed.
    this.citation_sort = new CSL.Engine.CitationSort();
    this.bibliography_sort = new CSL.Engine.BibliographySort();
    this.citation = new CSL.Engine.Citation(this);
    this.bibliography = new CSL.Engine.Bibliography();
    this.intext = new CSL.Engine.InText();

    this.output = new CSL.Output.Queue(this);

    //this.render = new CSL.Render(this);
    //
    // This latter queue is used for formatting date chunks
    // before they are folded back into the main queue.
    //
    this.dateput = new CSL.Output.Queue(this);

    this.cslXml = CSL.setupXml(style);

    for (var i in CSL.SYS_OPTIONS) {
        var option = CSL.SYS_OPTIONS[i];
        if ("boolean" === typeof this.sys[option]) {
            this.opt.development_extensions[option] = this.sys[option];
        }
        
    }
    if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
        this.opt.development_extensions.main_title_from_short_title = true;
    }
    if (this.opt.development_extensions.csl_reverse_lookup_support) {
        this.build.cslNodeId = 0;
        this.setCslNodeIds = function(myxml, nodename) {
            var children = this.cslXml.children(myxml);
            this.cslXml.setAttribute(myxml, 'cslid', this.build.cslNodeId);
            this.opt.nodenames.push(nodename);
            this.build.cslNodeId += 1;
            for (var i = 0, ilen = this.cslXml.numberofnodes(children); i < ilen; i += 1) {
                nodename = this.cslXml.nodename(children[i]);
                if (nodename) {
                    this.setCslNodeIds(children[i], nodename);
                }
            }
        };
        this.setCslNodeIds(this.cslXml.dataObj, "style");
    }
    // Preprocessing ops for the XML input
    this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
    this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
    this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
    this.cslXml.flagDateMacros(this.cslXml.dataObj);
    attrs = this.cslXml.attributes(this.cslXml.dataObj);
    if ("undefined" === typeof attrs["@sort-separator"]) {
        this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
    }
    // This setting does the right thing and seems not to be side-effects
    this.opt["initialize-with-hyphen"] = true;

    // Locale resolution
    //
    // (1) Get three locale strings 
    //     -- default-locale (stripped)
    //     -- processor-locale
    //     -- en_US
    
    this.setStyleAttributes();

    this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
    this.opt["class"] = this.opt.xclass;
    this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
    this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);

    if (this.opt.version.slice(0,4) === "1.1m") {
        this.opt.development_extensions.consolidate_legal_items = true;
        this.opt.development_extensions.consolidate_container_items = true;
        this.opt.development_extensions.main_title_from_short_title = true;
        this.opt.development_extensions.expect_and_symbol_form = true;
        this.opt.development_extensions.require_explicit_legal_case_title_short = true;
        this.opt.development_extensions.force_jurisdiction = true;
        this.opt.development_extensions.force_title_abbrev_fallback = true;
    }
    // We seem to have two language specs flying around:
    //   this.opt["default-locale"], and this.opt.lang
    // Keeping them aligned for safety's sake, pending
    // eventual cleanup.
    if (lang) {
        lang = lang.replace("_", "-");
        lang = CSL.normalizeLocaleStr(lang);
    }
    if (this.opt["default-locale"][0]) {
        this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
        this.opt["default-locale"][0] = CSL.normalizeLocaleStr(this.opt["default-locale"][0]);
    }
    if (lang && forceLang) {
        this.opt["default-locale"] = [lang];
    }
    if (lang && !forceLang && this.opt["default-locale"][0]) {
        lang = this.opt["default-locale"][0];
    }
    if (this.opt["default-locale"].length === 0) {
        if (!lang) {
            lang = "en-US";
        }
        this.opt["default-locale"].push("en-US");
    }
    if (!lang) {
        lang = this.opt["default-locale"][0];
    }
    langspec = CSL.localeResolve(lang);
    this.opt.lang = langspec.best;
    this.opt["default-locale"][0] = langspec.best;
    this.locale = {};
    if (!this.opt["default-locale-sort"]) {
        this.opt["default-locale-sort"] = this.opt["default-locale"][0];
    }
    // Test processor against JS engine locale mess to find a field separator that works
    if ('dale|'.localeCompare('daleb', this.opt["default-locale-sort"]) > -1) {
        this.opt.sort_sep = "@";
    } else {
        this.opt.sort_sep = "|";
    }
    this.localeConfigure(langspec);

    // Build skip-word regexp
    function makeRegExp(lst) {
        var lst = lst.slice();
        var ret = new RegExp( "(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
        return ret;
    }
    this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);

    this.output.adjust = new CSL.Output.Queue.adjust(this.getOpt('punctuation-in-quote'));

    this.registry = new CSL.Registry(this);

    // XXX For modular jurisdiction support, parameterize buildTokenLists().
    // XXX Feed as arguments:
    // XXX * actual node to be walked (cslXml)
    // XXX * actual target array

    this.macros = {};

    this.build.area = "citation";
    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
    this.buildTokenLists(area_nodes, this[this.build.area].tokens);

    this.build.area = "bibliography";
    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
    this.buildTokenLists(area_nodes, this[this.build.area].tokens);

    this.build.area = "intext";
    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
    this.buildTokenLists(area_nodes, this[this.build.area].tokens);

    if (this.opt.parallel.enable) {
        this.parallel = new CSL.Parallel(this);
    }

    this.juris = {};

    this.configureTokenLists();

    this.disambiguate = new CSL.Disambiguation(this);

    this.splice_delimiter = false;

    //
    // date parser
    //
    this.fun.dateparser = CSL.DateParser;
    //
    // flip-flopper for inline markup
    //
    this.fun.flipflopper = new CSL.Util.FlipFlopper(this);
    //
    // utility functions for quotes
    //
    this.setCloseQuotesArray();
    //
    // configure ordinal numbers generator
    //
    this.fun.ordinalizer.init(this);
    //
    // configure long ordinal numbers generator
    //
    this.fun.long_ordinalizer.init(this);
    //
    // set up page mangler
    //
    this.fun.page_mangler = CSL.Util.PageRangeMangler.getFunction(this, "page");
    this.fun.year_mangler = CSL.Util.PageRangeMangler.getFunction(this, "year");

    this.setOutputFormat("html");
};

CSL.Engine.prototype.setCloseQuotesArray = function () {
    var ret;
    ret = [];
    ret.push(this.getTerm("close-quote"));
    ret.push(this.getTerm("close-inner-quote"));
    ret.push('"');
    ret.push("'");
    this.opt.close_quotes_array = ret;
};

// Walker for preparsed XML input
CSL.makeBuilder = function (me, target) {
    var var_stack = [];
    var node_stack = [];
    function runStart (node) {
        node_stack.push(node);
        CSL.XmlToToken.call(node, me, CSL.START, target, var_stack);
    }
    function runEnd () {
        var node = node_stack.pop();
        CSL.XmlToToken.call(node, me, CSL.END, target, var_stack);
    }
    function runSingle (node) {
        CSL.XmlToToken.call(node, me, CSL.SINGLETON, target, var_stack);
    }
    function buildStyle (nodes, parent, node_stack) {
        if (!nodes) {
            nodes = [];
        }
        if ("undefined" === typeof nodes.length) {
            nodes = [nodes];
        }
        for (var i=0; i<nodes.length; i++) {
            var node = nodes[i];
            if (me.cslXml.nodename(node) === null) {
                continue;
            }
            if (parent && me.cslXml.nodename(node) === "date") {
                CSL.Util.fixDateNode.call(me, parent, i, node);
                node = me.cslXml.children(parent)[i];
            }
            if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
                runStart(node);
                buildStyle(me.cslXml.children(node), node);
                runEnd();
            } else {
                runSingle(node);
            }
        }
    }
    return buildStyle;
};


CSL.Engine.prototype.buildTokenLists = function (area_nodes, target) {
    if (!this.cslXml.getNodeValue(area_nodes)) {
        return;
    }
    var builder = CSL.makeBuilder(this, target);
    var mynode;
    if ("undefined" === typeof area_nodes.length) {
        mynode = area_nodes;
    } else {
        mynode = area_nodes[0];
    }
    builder(mynode);
};


CSL.Engine.prototype.setStyleAttributes = function () {
    var dummy, attributes, attrname;
    // Protect against DOM engines that deliver a top-level document
    // (needed for createElement) that does not contain our top-level node.
    // 
    // The string coercion on this.cslXml.tagName addresses a bizarre
    // condition on the top-level node in jsdom running under node.js, in which:
    //   (1) typeof this.cslXml.tagName === "undefined"; and
    //   (2) !this.cslXml.tagName === false
    // Coerced, it becomes an empty string.
    var dummy = {};
    dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
    attributes = this.cslXml.attributes(this.cslXml.dataObj);
    for (attrname in attributes) {
        if (attributes.hasOwnProperty(attrname)) {
            // attr = attributes[key];
            CSL.Attributes[attrname].call(dummy, this, attributes[attrname]);
        }
    }
};

CSL.Engine.prototype.getTerm = function (term, form, plural, gender, mode, forceDefaultLocale) {
    if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
        CSL.debug("Warning: term key is in uppercase form: "+term);
        term = term.toLowerCase();
    }
    var lang;
    if (forceDefaultLocale) {
        lang = this.opt["default-locale"][0];
    } else {
        lang = this.opt.lang;
    }
    var ret = CSL.Engine.getField(CSL.LOOSE, this.locale[lang].terms, term, form, plural, gender);
    // XXXXX Temporary, until locale term is deployed in CSL.
    if (!ret && term === "range-delimiter") {
        ret = "\u2013";
    }
    // XXXXX Not so good if mode is neither strict nor tolerant ...
    if (typeof ret === "undefined") {
        if (mode === CSL.STRICT) {
            CSL.error("Error in getTerm: term \"" + term + "\" does not exist.");
        } else if (mode === CSL.TOLERANT) {
            ret = "";
        }
    }
    if (ret) {
        this.tmp.cite_renders_content = true;
    }
    return ret;
};

CSL.Engine.prototype.getDate = function (form, forceDefaultLocale) {
    var lang;
    if (forceDefaultLocale) {
        lang = this.opt["default-locale"];
    } else {
        lang = this.opt.lang;
    }
    if (this.locale[lang].dates[form]) {
        return this.locale[lang].dates[form];
    } else {
        return false;
    }
};

CSL.Engine.prototype.getOpt = function (arg) {
    if ("undefined" !== typeof this.locale[this.opt.lang].opts[arg]) {
        return this.locale[this.opt.lang].opts[arg];
    } else {
        return false;
    }
};



CSL.Engine.prototype.getVariable = function (Item, varname, form, plural) {
    return CSL.Engine.getField(CSL.LOOSE, Item, varname, form, plural);
};

CSL.Engine.prototype.getDateNum = function (ItemField, partname) {
    if ("undefined" === typeof ItemField) {
        return 0;
    } else {
        return ItemField[partname];
    }
};

CSL.Engine.getField = function (mode, hash, term, form, plural, gender) {
    var ret, forms, f, pos, len, hashterm;
    ret = "";
    if ("undefined" === typeof hash[term]) {
        if (mode === CSL.STRICT) {
            CSL.error("Error in getField: term \"" + term + "\" does not exist.");
        } else {
            return undefined;
        }
    }
    if (gender && hash[term][gender]) {
        hashterm = hash[term][gender];
    } else {
        hashterm = hash[term];
    }
    forms = [];
    if (form === "symbol") {
        forms = ["symbol", "short"];
    } else if (form === "verb-short") {
        forms = ["verb-short", "verb"];
    } else if (form !== "long") {
        forms = [form];
    }
    forms = forms.concat(["long"]);
    len = forms.length;
    for (pos = 0; pos < len; pos += 1) {
        f = forms[pos];
        if ("string" === typeof hashterm || "number" === typeof hashterm) {
            ret = hashterm;
        } else if ("undefined" !== typeof hashterm[f]) {
            if ("string" === typeof hashterm[f] || "number" === typeof hashterm[f]) {
                ret = hashterm[f];
            } else {
                if ("number" === typeof plural) {
                    ret = hashterm[f][plural];
                } else {
                    ret = hashterm[f][0];
                }
            }
            break;
        }
    }
    return ret;
};

CSL.Engine.prototype.configureTokenLists = function () {
    var area, pos, len;
    //for each (var area in ["citation", "citation_sort", "bibliography","bibliography_sort"]) {
    len = CSL.AREAS.length;
    for (pos = 0; pos < len; pos += 1) {
        //var ret = [];
        area = CSL.AREAS[pos];
        var tokens = this[area].tokens;
        this.configureTokenList(tokens);
    }
    this.version = CSL.version;
    return this.state;
};

CSL.Engine.prototype.configureTokenList = function (tokens) {
    var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
    dateparts_master = ["year", "month", "day"];
    llen = tokens.length - 1;
    for (ppos = llen; ppos > -1; ppos += -1) {
        token = tokens[ppos];
        //token.pos = ppos;
        //ret.push(token);
        if ("date" === token.name && CSL.END === token.tokentype) {
            dateparts = [];
        }
        if ("date-part" === token.name && token.strings.name) {
            lllen = dateparts_master.length;
            for (pppos = 0; pppos < lllen; pppos += 1) {
                part = dateparts_master[pppos];
                if (part === token.strings.name) {
                    dateparts.push(token.strings.name);
                }
            }
        }
        if ("date" === token.name && CSL.START === token.tokentype) {
            dateparts.reverse();
            token.dateparts = dateparts;
        }
        token.next = (ppos + 1);
        if (token.name && CSL.Node[token.name].configure) {
            CSL.Node[token.name].configure.call(token, this, ppos);
        }
    }
};

CSL.Engine.prototype.refetchItems = function (ids) {
    var ret = [];
    for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
        ret.push(this.refetchItem("" + ids[i]));
    }
    return ret;
};

CSL.ITERATION = 0;

// Wrapper for sys.retrieveItem supplied by calling application.
// Adds experimental fields embedded in the note field for
// style development trial and testing purposes.
CSL.Engine.prototype.retrieveItem = function (id) {
    var Item, m, i;

    if (!this.tmp.loadedItemIDs[id]) {
        this.tmp.loadedItemIDs[id] = true;
    } else {
        return this.registry.refhash[id];
    }

    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase &&
        "boolean" === typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        // This is a hack. Should properly be configured by a processor method after build.
        for (var i=0,ilen=this.opt["default-locale"].length; i<ilen; i+=1) {
            this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
        }
        for (var i=0,ilen=this.opt["locale-translit"].length; i<ilen; i+=1) {
            this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
        }
        for (var i=0,ilen=this.opt["locale-translat"].length; i<ilen; i+=1) {
            this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
        }
        this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
    }

    //Zotero.debug("XXX === ITERATION " + CSL.ITERATION + " "+ id +" ===");
    CSL.ITERATION += 1;

    Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id)));

    // Optionally normalize keys to lowercase()
    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        if (Item.multi) {
            if (Item.multi._keys) {
                for (var field in Item.multi._keys) {
                    for (var key in Item.multi._keys[field]) {
                        if (key !== key.toLowerCase()) {
                            Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                            delete Item.multi._keys[field][key];
                        }
                    }
                }
            }
            if (Item.multi.main) {
                for (var field in Item.multi.main) {
                    Item.multi.main[field] = Item.multi.main[field].toLowerCase();
                }
            }
        }
        for (var i=0, ilen=CSL.NAME_VARIABLES.length; i>ilen; i+=1) {
            var ctype = CSL.NAME_VARIABLES[i];
            if (Item[ctype] && Item[ctype].multi) {
                for (var j=0, jlen=Item[ctype].length; j<jlen; j+=1) {
                    var creator = Item[ctype][j];
                    if (creator.multi) {
                        if (creator.multi._key) {
                            for (var key in creator.multi._key) {
                                if (key !== key.toLowerCase()) {
                                    creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                                    delete creator.multi._key[key];
                                }
                            }
                        }
                        if (creator.multi.main) {
                            creator.multi.main = creator.multi.main.toLowerCase();
                        }
                    }
                }
            }
        }
    }

    // Normalize language field into "language" and "language-original"
    if (Item.language && Item.language.match(/[><]/)) {
        // Attempt to split field in two
        var m = Item.language.match(/(.*?)([<>])(.*)/);
        if (m[2] === "<") {
            Item["language-name"] = m[1];
            Item["language-name-original"] = m[3];
        } else {
            Item["language-name"] = m[3];
            Item["language-name-original"] = m[1];
        }
        if (this.opt.multi_layout) {
            if (Item["language-name-original"]) {
                Item.language = Item["language-name-original"];
            }
        } else {
            if (Item["language-name"]) {
                Item.language = Item["language-name"];
            }
        }
    }

    if (Item.page) {
        Item["page-first"] = Item.page;
        var num = "" + Item.page;
        var m = num.split(/\s*(?:&|, |-|\u2013)\s*/);
        if (m[0].slice(-1) !== "\\") {
            Item["page-first"] = m[0];
        }
    }
    // Optional development extensions
    if (this.opt.development_extensions.field_hack && Item.note) {
        // false is for validFieldsForType (all conforming entries scrubbed when false)
        CSL.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
    }
    // not including locator-date
    for (var key in Item) {
        if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
            var dateobj = Item[key];
            if (dateobj) {
                // raw date parsing is harmless, but can be disabled if desired
                if (this.opt.development_extensions.raw_date_parsing) {
                    if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                        dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
                    }
                }
                Item[key] = this.dateParseArray(dateobj);
            }
        }
    }
    if (this.opt.development_extensions.consolidate_legal_items) {
        if (Item.type && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
            var legislation_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
                varname = elements[i];
				if (Item[varname]) {
					legislation_id.push(Item[varname]);
				}
			}
            elements = ["original-date", "issued"];
			for (var i = 0, ilen=elements.length; i < ilen; i += 1) {
                varname = elements[i];
				if (Item[varname] && Item[varname].year) {
					var value = Item[varname].year;
					legislation_id.push(value);
					break;
				}
			}
			Item.legislation_id = legislation_id.join("::");
        }
    }
    if (this.bibliography.opt.track_container_items) {
        if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "container-title", "publisher", "edition"];
            var container_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
                varname = elements[i];
				if (Item[varname]) {
					container_id.push(Item[varname]);
				}
			}
			Item.container_id = container_id.join("::");
        }
    }
    // For authority to name shape in legal styles
    if (this.opt.development_extensions.force_jurisdiction) {
        if ("string" === typeof Item.authority) {
            Item.authority = [
                {
                    literal: Item.authority,
                    multi: {
                        _key: {}
                    }
                }
            ];
            if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
                Item.authority[0].multi._key = {};
                for (var key in Item.multi._keys.authority) {
                    Item.authority[0].multi._key[key] = {
                        literal: Item.multi._keys.authority[key]
                    };
                }
            }
        }
    }
    // Add getAbbreviation() call for title-short and container-title-short
    if (!Item["title-short"]) {
        Item["title-short"] = Item.shortTitle;
    }
    // Add support for main_title_from_short_title
    if (this.opt.development_extensions.main_title_from_short_title) {
        var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
        CSL.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
    }
    var isLegalType = ["bill","legal_case","legislation","gazette","regulation"].indexOf(Item.type) > -1;
    if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
        if (!Item.jurisdiction) {
            Item.jurisdiction = "us";
        }
    }
    var normalizedKey;
    if (!isLegalType && Item.title && this.sys.getAbbreviation) {
        if (!Item.jurisdiction) ;
        if (this.sys.normalizeAbbrevsKey) {
             normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
        } else {
            normalizedKey = Item.title;
        }
        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
        if (this.transform.abbrevs[jurisdiction].title) {
            if (this.transform.abbrevs[jurisdiction].title[normalizedKey]) {
                Item["title-short"] = this.transform.abbrevs[jurisdiction].title[normalizedKey];
            }
        }
    }
    if (!Item["container-title-short"]) {
        Item["container-title-short"] = Item.journalAbbreviation;
    }
    if (Item["container-title"] && this.sys.getAbbreviation) {
        if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
        } else {
            normalizedKey = Item["container-title"];
        }
        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
        if (this.transform.abbrevs[jurisdiction]["container-title"]) {
            if (this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey]) {
                Item["container-title-short"] = this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey];
            }
        }
    }
    if (Item.jurisdiction) {
        Item.country = Item.jurisdiction.split(":")[0];
    }
    if (this.registry.refhash[id]) {
        if (JSON.stringify(this.registry.refhash[id]) != JSON.stringify(Item)) {
            for (var key in this.registry.refhash[id]) {
                delete this.registry.refhash[id][key];
            }
            this.tmp.taintedItemIDs[Item.id] = true;
            Object.assign(this.registry.refhash[id], Item);
        }
    } else {
        this.registry.refhash[id] = Item;
    }
    return this.registry.refhash[id];
};

CSL.Engine.prototype.refetchItem = function (id) {
    return this.registry.refhash[id];
};

// Executed during style build
CSL.Engine.prototype.setOpt = function (token, name, value) {
    if (token.name === "style" || token.name === "cslstyle") {
        this.opt.inheritedAttributes[name] = value;
        this.citation.opt.inheritedAttributes[name] = value;
        this.bibliography.opt.inheritedAttributes[name] = value;
    } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
        this[token.name].opt.inheritedAttributes[name] = value;
    } else {
        token.strings[name] = value;
    }
};

// Executed at runtime, since macros can occur in the context of citation or bibliography
CSL.Engine.prototype.inheritOpt = function (token, attrname, parentname, defaultValue) {
    if ("undefined" !== typeof token.strings[attrname]) {
        return token.strings[attrname];
    } else {
        var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
        if ("undefined" !== typeof parentValue) {
            return parentValue;
        } else {
            return defaultValue;
        }
    }
};

CSL.Engine.prototype.remapSectionVariable = function (inputList) {
    // We have items with a value in the section field (on Item) that must
    // be mapped to the locator field (on item). We simply prepend it as
    // a string here, and handle all parsing of the resulting string
    // in processNumber(). Plurals and numeric are set in processNumber().
    
    // Because the target is in the citation item (lowercase), the
    // remapping cannot take place when the Item data is received.
    // Citation provides a list of Item/item pairs, hence the iteration
    // used here.
    for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
        var Item = inputList[i][0];
        var item = inputList[i][1];

        if (["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) > -1) {
             // If a locator value exists, then
            //   (a) Leave be an overriding label at the start of the locator field, defaulting to label value
            if (item.locator) {
                item.locator = item.locator.trim();
                var m = item.locator.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
                if (!m) {
                    if (item.label) {
                        item.locator = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
                    } else {
                        item.locator = "p. " + item.locator;
                    }
                }
            }
            // If a section value exists, then
            //   (a) Apply an overriding label at the start of the section field, defaulting to sec.
            var sectionMasterLabel = null;
            if (Item.section) {
                Item.section = Item.section.trim();
                var m = Item.section.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
                if (!m) {
                    Item.section = "sec. " + Item.section;
                    sectionMasterLabel = "sec.";
                } else {
                    sectionMasterLabel = m[0].trim();
                }
            }
            // If section is nil, then
            //   (a) Do nothing
            if (Item.section) {
            // If section exists and locator is nil
            //   (a) Set section string in locator field
                if (!item.locator) {
                    item.locator = Item.section;
                } else {
            // If both section and locator exist, then
            //   (a) If locator starts with p., remove p., merge with space or no-space, and set in locator field
            //   (b) If locator starts with non-p., prepend section value to locator with space, and set in locator field
                    var m = item.locator.match(/^([^ ]*)\s*(.*)/);
                    var space = " ";
                    if (m) {
                        if (m[1] === "p." && sectionMasterLabel !== "p.") {
                            item.locator = m[2];
                        }
                        if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                            space = "";
                        }
                    } else {
                       space = ""; 
                    }
                    item.locator = Item.section + space + item.locator;
                }
                //Item.section = "";
            }
            item.label = "";
            // And that's it. Pre-parse complete.
        }
    }
};


CSL.Engine.prototype.setNumberLabels = function (Item) {
     if (Item.number
        && ["bill", "gazette", "legislation","regulation","treaty"].indexOf(Item.type) > -1
        && this.opt.development_extensions.consolidate_legal_items
        && !this.tmp.shadow_numbers["number"]) {

        this.tmp.shadow_numbers["number"] = {};
        this.tmp.shadow_numbers["number"].values = [];
        this.tmp.shadow_numbers["number"].plural = 0;
        this.tmp.shadow_numbers["number"].numeric = false;
        this.tmp.shadow_numbers["number"].label = false;
        
        // Labels embedded in number variable
        var value = "" + Item.number;
        value = value.split("\\").join("");
        // Get first word, parse out labels only if it parses
        var firstword = value.split(/\s+/)[0];
        var firstlabel = CSL.STATUTE_SUBDIV_STRINGS[firstword];
        if (firstlabel) {
            // Get list and match
            var splt = value.split(CSL.STATUTE_SUBDIV_PLAIN_REGEX);
            if (splt.length > 1) {
                // Convert matches to localized form
                var lst = [];
                for (var j=1, jlen=splt.length; j < jlen; j += 1) {
                    lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
                }
                // Preemptively save to shadow_numbers
                value = lst.join(" ");
            } else {
                value = splt[0];
            }
            this.tmp.shadow_numbers["number"].label = firstlabel;
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = false;
        } else {
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = true;
        }
    }
};

/*global CSL: true */

CSL.substituteOne = function (template) {
    return function (state, list) {
        if (!list) {
            return "";
        } else {
            // ("string" === typeof list)
            return template.replace("%%STRING%%", list);
        }
    };
};


/**
 * Two-tiered substitutions gadget.
 * <p>This is used for
 * options like (now defunct) "font-family", where the option value
 * cannot be determined until the attribute is processed.
 * Need for this function might be reviewed at some point ...</p>
 * @param {String} template A template containing
 * <code>%%STRING%%</code> and <code>%%PARAM%%</code>
 * placeholders.  See {@link CSL.Output.Formats.html} for
 * examples.
 */
CSL.substituteTwo = function (template) {
    return function (param) {
        var template2 = template.replace("%%PARAM%%", param);
        return function (state, list) {
            if (!list) {
                return "";
            } else {
                //("string" === typeof list){
                return template2.replace("%%STRING%%", list);
            }
        };
    };
};

/**
 * Generate string functions for designated output mode.
 * <p>Only "html" (the default) is supported at present.</p>
 * @param {String} mode Either "html" or "rtf", eventually.
 */
CSL.Mode = function (mode) {
    var decorations, params, param, func, val, args;
    decorations = {};
    params = CSL.Output.Formats[mode];
    for (param in params) {
        {

            if ("@" !== param.slice(0, 1)) {
                decorations[param] = params[param];
                continue;
            }
            func = false;
            val = params[param];
            args = param.split('/');

            if (typeof val === "string" && val.indexOf("%%STRING%%") > -1)  {
                if (val.indexOf("%%PARAM%%") > -1) {
                    func = CSL.substituteTwo(val);
                } else {
                    func = CSL.substituteOne(val);
                }
            } else if (typeof val === "boolean" && !val) {
                func = CSL.Output.Formatters.passthrough;
            } else if (typeof val === "function") {
                func = val;
            } else {
                CSL.error("Bad " + mode + " config entry for " + param + ": " + val);
            }

            if (args.length === 1) {
                decorations[args[0]] = func;
            } else if (args.length === 2) {
                if (!decorations[args[0]]) {
                    decorations[args[0]] = {};
                }
                decorations[args[0]][args[1]] = func;
            }
        }
    }
    return decorations;
};


/**
 * Generate a separate list of formatting attributes.
 * <p>This generates a list of tuples containing attribute
 * information relevant to output formatting, in the order
 * fixed in the constant {@link CSL.FORMAT_KEY_SEQUENCE}.
 * This function is called during {@link CSL.Core.Build}.
 * Formatting hints are distilled to functions
 * later, in the second compilation pass ({@link CSL.Core.Configure}).</p>
 * @param {Object} state The state object returned by
 * {@link CSL.Engine}.
 * @param {Object} attributes The hash object containing
 * the attributes and values extracted from an XML node.
 */
CSL.setDecorations = function (state, attributes) {
    var ret, key, pos;
    // This applies a fixed processing sequence
    ret = [];
    for (pos in CSL.FORMAT_KEY_SEQUENCE) {
        {
            var key = CSL.FORMAT_KEY_SEQUENCE[pos];
            if (attributes[key]) {
                ret.push([key, attributes[key]]);
                delete attributes[key];
            }
        }
    }
    return ret;
};

CSL.Doppeler = function(rexStr, stringMangler) {
    var matchRex = new RegExp("(" + rexStr + ")", "g");
    var splitRex = new RegExp(rexStr, "g");
    this.split = function (str) {
        // Normalize markup
        if (stringMangler) {
            str = stringMangler(str);
        }
        var match = str.match(matchRex);
        if (!match) {
            return {
                tags: [],
                strings: [str]
            };
        }
        var split = str.split(splitRex);
        for (var i=match.length-1; i> -1; i--) {
            if (typeof match[i] === "number") {
                match[i] = "";
            }
            var tag = match[i];
            if (tag === "\'" && split[i+1].length > 0) {
                // Fixes https://forums.zotero.org/discussion/comment/294317
                split[i+1] = match[i] + split[i+1];
                match[i] = "";
            }
        }
        return {
            tags: match,
            strings: split,
            origStrings: split.slice()
        };
    };
    this.join = function (obj) {
        var lst = obj.strings.slice(-1);
        for (var i=obj.tags.length-1; i>-1; i--) {
            lst.push(obj.tags[i]);
            lst.push(obj.strings[i]);
        }
        lst.reverse();
        return lst.join("");
    };
};

CSL.Engine.prototype.normalDecorIsOrphan = function (blob, params) {
    //print("params: "+JSON.stringify(params));
    if (params[1] === "normal") {
        var use_param = false;
        var all_the_decor;
        if (this.tmp.area === "citation") {
            all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
        } else {
            all_the_decor = blob.alldecor;
        }
        for (var k = all_the_decor.length - 1; k > -1; k += -1) {
            //print("  all decor: "+JSON.stringify(all_the_decor[k]));
            for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
                //print("  superior param"+n+": "+all_the_decor[k][n][0]);
                if (all_the_decor[k][n][0] === params[0]) {
                    //print("  HIT!");
                    if (all_the_decor[k][n][1] !== "normal") {
                        use_param = true;
                    }
                }
            }
        }
        if (!use_param) {
            return true;
        }
    }
    return false;
};

/*global CSL: true */


CSL.Engine.prototype.getCitationLabel = function (Item) {
    var label = "";
    var params = this.getTrigraphParams();
    var config = params[0];
    var myname = this.getTerm("reference", "short", 0);
    if ("undefined" === typeof myname) {
        myname = "reference";
    }
    myname = myname.replace(".", "");
    myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
    for (var i = 0, ilen = CSL.NAME_VARIABLES.length; i < ilen; i += 1) {
        var n = CSL.NAME_VARIABLES[i];
        if (Item[n]) {
            var names = Item[n];
            if (names.length > params.length) {
                config = params[params.length - 1];
            } else {
                config = params[names.length - 1];
            }
            for (var j = 0, jlen = names.length; j < jlen; j += 1) {
                if (j === config.authors.length) {
                    break;
                }
                var res = this.nameOutput.getName(names[j], "locale-translit", true);
                var name = res.name;
                if (name && name.family) {
                    myname = name.family;
                    myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");

                } else if (name && name.literal) {
                    myname = name.literal;
                }
                var m = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
                if (m) {
                    myname = myname.slice(m[1].length);
                }
                myname = myname.replace(CSL.ROMANESQUE_NOT_REGEXP, "");
                if (!myname) {
                    break;
                }
                myname = myname.slice(0, config.authors[j]);
                if (myname.length > 1) {
                    myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
                } else if (myname.length === 1) {
                    myname = myname.toUpperCase();
                }
                label += myname;
            }
            break;
        }
    }
    if (!label) {
        // Try for something using title
        if (Item.title) {
            var skipWords = this.locale[this.opt.lang].opts["skip-words"];
            var lst = Item.title.split(/\s+/);
            for (var i = lst.length - 1; i > -1; i--) {
                if (skipWords.indexOf(lst[i]) > -1) {
                    lst = lst.slice(0, i).concat(lst.slice(i + 1));
                }
            }
            var str = lst.join('');
            str = str.slice(0, params[0].authors[0]);
            if (str.length > 1) {
                str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
            } else if (str.length === 1) {
                str = str.toUpperCase();
            }
            label = str;
        }
    }
    var year = "0000";
    if (Item.issued) {
        if (Item.issued.year) {
            year = "" + Item.issued.year;
        }
    }
    year = year.slice((config.year * -1));
    label = label + year;
    return label;
};

CSL.Engine.prototype.getTrigraphParams = function () {
    var params = [];
    var ilst = this.opt.trigraph.split(":");
    if (!this.opt.trigraph || this.opt.trigraph.slice(0,1) !== "A") {
        CSL.error("Bad trigraph definition: "+this.opt.trigraph);
    }
    for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
        var str = ilst[i];
        var config = {authors:[], year:0};
        for (var j = 0, jlen = str.length; j < jlen; j += 1) {
            switch (str.slice(j,j+1)) {
            case "A":
                config.authors.push(1);
                break;
            case "a":
                config.authors[config.authors.length - 1] += 1;
                break;
            case "0":
                config.year += 1;
                break;
            default:
                CSL.error("Invalid character in trigraph definition: "+this.opt.trigraph);
            }
        }
        params.push(config);
    }
    return params;
};

/*global CSL: true */

CSL.Engine.prototype.setOutputFormat = function (mode) {
    this.opt.mode = mode;
    this.fun.decorate = CSL.Mode(mode);
    if (!this.output[mode]) {
        this.output[mode] = {};
        this.output[mode].tmp = {};
    }
};

CSL.Engine.prototype.getSortFunc = function () {
    return function (a,b) {
        a = a.split("-");
        b = b.split("-");
        if (a.length < b.length) {
            return 1;
        } else if (a.length > b.length) {
            return -1;
        } else {
            a = a.slice(-1)[0];
            b = b.slice(-1)[0];
            if (a.length < b.length) {
                return 1;
            } else if (a.length > b.length) {
                return -1;
            } else {
                return 0;
            }
        }
    };
};

CSL.Engine.prototype.setLangTagsForCslSort = function (tags) {
    var i, ilen;
    if (tags) {
        this.opt['locale-sort'] = [];
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt['locale-sort'].push(tags[i]);
        }
    }
    this.opt['locale-sort'].sort(this.getSortFunc());
};
    
CSL.Engine.prototype.setLangTagsForCslTransliteration = function (tags) {
    var i, ilen;
    this.opt['locale-translit'] = [];
    if (tags) {
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt['locale-translit'].push(tags[i]);
        }
    }
    this.opt['locale-translit'].sort(this.getSortFunc());
};
    
CSL.Engine.prototype.setLangTagsForCslTranslation = function (tags) {
    var i, ilen;
    this.opt['locale-translat'] = [];
    if (tags) {
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt['locale-translat'].push(tags[i]);
        }
    }
    this.opt['locale-translat'].sort(this.getSortFunc());
};

CSL.Engine.prototype.setLangPrefsForCites = function (obj, conv) {
    var opt = this.opt['cite-lang-prefs'];
    if (!conv) {
        conv = function (key) {
            return key.toLowerCase();
        };
    }
    var segments = ['Persons', 'Institutions', 'Titles', 'Journals', 'Publishers', 'Places'];
    // Set values in place
    for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
        var clientSegment = conv(segments[i]);
        var citeprocSegment = segments[i].toLowerCase();
        if (!obj[clientSegment]) {
            continue;
        }
        //
        // Normalize the sequence of secondary and tertiary
        // in the provided obj segment list.
        //
        var supplements = [];
        while (obj[clientSegment].length > 1) {
            supplements.push(obj[clientSegment].pop());
        }
        var sortval = {orig:1,translit:2,translat:3};
        if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
            supplements.reverse();
        }
        while (supplements.length) {
            obj[clientSegment].push(supplements.pop());
        }
        //
        // normalization done.
        //
        var lst = opt[citeprocSegment];
        while (lst.length) {
            lst.pop();
        }
        for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
            lst.push(obj[clientSegment][j]);
        }
    }
};

CSL.Engine.prototype.setLangPrefsForCiteAffixes = function (affixList) {
    if (affixList && affixList.length === 48) {
        var affixes = this.opt.citeAffixes;
        var count = 0;
        var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
        var forms = ["translit", "orig", "translit", "translat"];
        var value;
        for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
            for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
                value = "";
                if ((count % 8) === 4) {
                    if (!affixes[settings[i]]["locale-"+forms[j]].prefix
                        && !affixes[settings[i]]["locale-"+forms[j]].suffix) {

                        value = affixList[count] ? affixList[count] : "";
                        affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                        value = affixList[count] ? affixList[count + 1] : "";
                        affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                    }
                } else {
                    value = affixList[count] ? affixList[count] : "";
                    affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                    value = affixList[count] ? affixList[count + 1] : "";
                    affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                }
                count += 2;
            }
        }
        this.opt.citeAffixes = affixes;
    }
};

CSL.Engine.prototype.setAutoVietnameseNamesOption = function (arg) {
    if (arg) {
        this.opt["auto-vietnamese-names"] = true;
    } else {
        this.opt["auto-vietnamese-names"] = false;
    }
};

CSL.Engine.prototype.setAbbreviations = function (arg) {
    if (this.sys.setAbbreviations) {
        this.sys.setAbbreviations(arg);
    }
};

CSL.Engine.prototype.setSuppressTrailingPunctuation = function (arg) {
    this.citation.opt.suppressTrailingPunctuation = !!arg;
};

/*global CSL: true */

CSL.Output = {};
/**
 * Output queue object.
 * @class
 */
CSL.Output.Queue = function (state) {
    this.levelname = ["top"];
    this.state = state;
    this.queue = [];
    this.empty = new CSL.Token("empty");
    var tokenstore = {};
    tokenstore.empty = this.empty;
    this.formats = new CSL.Stack(tokenstore);
    this.current = new CSL.Stack(this.queue);
};

// XXX This works, but causes a mismatch in api_cite
// Could insert a placeholder
// Better to have a function that spits out an independent blob.
// Is that possible though?
// Okay. Use queue.append() with fake_queue instead.
CSL.Output.Queue.prototype.pop = function () {
    // For some reason, state.output.current.value() here can be an array, 
    // not a blob ... ?
    var drip = this.current.value();
    if (drip.length) {
        return drip.pop();
    } else {
        return drip.blobs.pop();
    }
};

CSL.Output.Queue.prototype.getToken = function (name) {
    var ret = this.formats.value()[name];
    return ret;
};

CSL.Output.Queue.prototype.mergeTokenStrings = function (base, modifier) {
    var base_token, modifier_token, ret, key;
    base_token = this.formats.value()[base];
    modifier_token = this.formats.value()[modifier];
    ret = base_token;
    if (modifier_token) {
        if (!base_token) {
            base_token = new CSL.Token(base, CSL.SINGLETON);
            base_token.decorations = [];
        }
        ret = new CSL.Token(base, CSL.SINGLETON);
        var key = "";
        for (var key in base_token.strings) {
            if (base_token.strings.hasOwnProperty(key)) {
                ret.strings[key] = base_token.strings[key];
            }
        }
        for (var key in modifier_token.strings) {
            if (modifier_token.strings.hasOwnProperty(key)) {
                ret.strings[key] = modifier_token.strings[key];
            }
        }
        ret.decorations = base_token.decorations.concat(modifier_token.decorations);
    }
    return ret;
};

// Store a new output format token based on another
CSL.Output.Queue.prototype.addToken = function (name, modifier, token) {
    var newtok, attr;
    newtok = new CSL.Token("output");
    if ("string" === typeof token) {
        token = this.formats.value()[token];
    }
    if (token && token.strings) {
        for (attr in token.strings) {
            if (token.strings.hasOwnProperty(attr)) {
                newtok.strings[attr] = token.strings[attr];
            }
        }
        newtok.decorations = token.decorations;

    }
    if ("string" === typeof modifier) {
        newtok.strings.delimiter = modifier;
    }
    this.formats.value()[name] = newtok;
};

//
// newFormat adds a new bundle of formatting tokens to
// the queue's internal stack of such bundles
CSL.Output.Queue.prototype.pushFormats = function (tokenstore) {
    if (!tokenstore) {
        tokenstore = {};
    }
    tokenstore.empty = this.empty;
    this.formats.push(tokenstore);
};


CSL.Output.Queue.prototype.popFormats = function () {
    this.formats.pop();
};

CSL.Output.Queue.prototype.startTag = function (name, token) {
    var tokenstore = {};
    if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
        token = this.empty;
        name = "empty";
    }
    tokenstore[name] = token;
    this.pushFormats(tokenstore);
    this.openLevel(name);
};

CSL.Output.Queue.prototype.endTag = function (name) {
    this.closeLevel(name);
    this.popFormats();
};

//
// newlevel adds a new blob object to the end of the current
// list, and adjusts the current pointer so that subsequent
// appends are made to blob list of the new object.

CSL.Output.Queue.prototype.openLevel = function (token) {
    var blob, curr;
    if ("object" === typeof token) {
        // delimiter, prefix, suffix, decorations from token
        blob = new CSL.Blob(undefined, token);
    } else if ("undefined" === typeof token) {
        blob = new CSL.Blob(undefined, this.formats.value().empty, "empty");
    } else {
        if (!this.formats.value() || !this.formats.value()[token]) {
            CSL.error("CSL processor error: call to nonexistent format token \"" + token + "\"");
        }
        // delimiter, prefix, suffix, decorations from token
        blob = new CSL.Blob(undefined, this.formats.value()[token], token);
    }
    curr = this.current.value();
    if (!this.state.tmp.just_looking && this.checkNestedBrace) {
        blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
    }
    curr.push(blob);
    this.current.push(blob);
};

/**
 * "merge" used to be real complicated, now it's real simple.
 */
CSL.Output.Queue.prototype.closeLevel = function (name) {
    // CLEANUP: Okay, so this.current.value() holds the blob at the
    // end of the current list.  This is wrong.  It should
    // be the parent, so that we have  the choice of reading
    // the affixes and decorations, or appending to its
    // content.  The code that manipulates blobs will be
    // much simpler that way.
    if (name && name !== this.current.value().levelname) {
        CSL.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
    }
    var blob = this.current.pop();
    if (!this.state.tmp.just_looking && this.checkNestedBrace) {
        blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
    }
};

//
// append does the same thing as newlevel, except
// that the blob it pushes has text content,
// and the current pointer is not moved after the push.

CSL.Output.Queue.prototype.append = function (str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
    var token, blob, curr;
    var useblob = true;
    if (notSerious) {
        ignorePredecessor = true;
    }
    // XXXXX Nasty workaround, but still an improvement
    // over the reverse calls to the cs:date node build
    // function that we had before.
    if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
        if (tokname !== "macro-with-date") {
            return false;
        }
        if (tokname === "macro-with-date") {
            tokname = "empty";
        }
    }
    if ("undefined" === typeof str) {
        return false;
    }
    if ("number" === typeof str) {
        str = "" + str;
    }
    if (!notSerious 
        && this.state.tmp.element_trace 
        && this.state.tmp.element_trace.value() === "suppress-me") {
        
        return false;
    }
    blob = false;
    if (!tokname) {
        token = this.formats.value().empty;
    } else if (tokname === "literal") {
        token = true;
        useblob = false;
    } else if ("string" === typeof tokname) {
        token = this.formats.value()[tokname];
    } else {
        token = tokname;
    }
    if (!token) {
        CSL.error("CSL processor error: unknown format token name: " + tokname);
    }
    // Unset delimiters must be left undefined until they reach the queue
    // in order to discriminate unset from explicitly empty delimiters
    // when inheriting a default value from a superior node. [??? really ???]
    if (token.strings && "undefined" === typeof token.strings.delimiter) {
        token.strings.delimiter = "";
    }
    if ("string" === typeof str && str.length) {

        // Source (;?!»«): http://en.wikipedia.org/wiki/Space_(punctuation)#Breaking_and_non-breaking_spaces
        // Source (:): http://forums.zotero.org/discussion/4933/localized-quotes/#Comment_88384
        str = str.replace(/ ([:;?!\u00bb])/g, "\u202f$1").replace(/\u00ab /g, "\u00ab\u202f");

        this.last_char_rendered = str.slice(-1);
        // This, and not the str argument below on flipflop, is the
        // source of the flipflopper string source.
        str = str.replace(/\s+'/g, " \'");
        if (!notSerious) {
            // this condition for sort_LeadingApostropheOnNameParticle
            str = str.replace(/^'/g, " \'");
        }

        // signal whether we end with terminal punctuation?
        if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
        } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
        }
    }
    blob = new CSL.Blob(str, token);
    curr = this.current.value();
    if ("undefined" === typeof curr && this.current.mystack.length === 0) {
        // XXXX An operation like this is missing somewhere, this should NOT be necessary.
        // Addresses error triggered in multi-layouts.
        this.current.mystack.push([]);
        curr = this.current.value();
    }
    if ("string" === typeof blob.blobs) {
        if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
        } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
        }
    }
    //
    // Caution: The parallel detection machinery will blow up if tracking
    // variables are not properly initialized elsewhere.
    //
    if ("string" === typeof str) {
        if ("string" === typeof blob.blobs) {
            if (blob.blobs.slice(0, 1) !== " ") {
                var blobPrefix = "";
                var blobBlobs = blob.blobs;
                while (CSL.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
                    blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
                    blobBlobs = blobBlobs.slice(1);
                }
                if (blobBlobs && blobPrefix) {
                    blob.strings.prefix = blob.strings.prefix + blobPrefix;
                    blob.blobs = blobBlobs;
                }
            }
        }
        if (blob.strings["text-case"]) {
            //
            // This one is _particularly_ hard to follow.  It's not obvious,
            // but the blob already contains the input string at this
            // point, as blob.blobs -- it's a terminal node, as it were.
            // The str variable also contains the input string, but
            // that copy is not used for onward processing.  We have to
            // apply our changes to the blob copy.
            //
            blob.blobs = CSL.Output.Formatters[blob.strings["text-case"]](this.state, str);
        }
        if (this.state.tmp.strip_periods && !noStripPeriods) {
            blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
        }
        for (var i = blob.decorations.length - 1; i > -1; i += -1) {
            if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
                blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
            }
            if (!blob.blobs.match(CSL.ROMANESQUE_REGEXP)) {
                if (blob.decorations[i][0] === "@font-style") {
                    blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
                }
            }
        }
        //
        // XXX: Beware superfluous code in your code.  str in this
        // case is not the source of the final rendered string.
        // See note above.
        //
        curr.push(blob);
        this.state.fun.flipflopper.processTags(blob);
    } else if (useblob) {
        curr.push(blob);
    } else {
        curr.push(str);
    }
    return true;
};

CSL.Output.Queue.prototype.string = function (state, myblobs, blob) {
    var i, ilen, j, jlen, b;
    //if (blob && blob.strings.delimiter) {
    //    print("DELIMITER: "+blob.strings.delimiter+" on "+[x.blobs[0].num for each (x in myblobs)]);
    //}
    //var blobs, ret, blob_delimiter, i, params, blobjr, last_str, last_char, b, use_suffix, qres, addtoret, span_split, j, res, blobs_start, blobs_end, key, pos, len, ppos, llen, ttype, ltype, terminal, leading, delimiters, use_prefix, txt_esc;
    var txt_esc = CSL.getSafeEscape(this.state);
    var blobs = myblobs.slice();
    var ret = [];
    
    if (blobs.length === 0) {
        return ret;
    }

    var blob_delimiter = "";
    if (blob) {
        blob_delimiter = blob.strings.delimiter;
    } else {
        //print("=== Setting false to start ===");
        state.tmp.count_offset_characters = false;
        state.tmp.offset_characters = 0;
    }

    if (blob && blob.new_locale) {
        blob.old_locale = state.opt.lang;
        state.opt.lang = blob.new_locale;
    }

    var blobjr, use_suffix, use_prefix, params;
    for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
        blobjr = blobs[i];

        if (blobjr.strings.first_blob) {
            // Being the Item.id of the the entry being rendered.
            //print("  -- turning on counting");
            state.tmp.count_offset_characters = blobjr.strings.first_blob;
        }

        if ("string" === typeof blobjr.blobs) {
            if ("number" === typeof blobjr.num) {
                ret.push(blobjr);
            } else if (blobjr.blobs) {
                if (blobjr.particle) {
                    blobjr.blobs = blobjr.particle + blobjr.blobs;
                    blobjr.particle = "";
                }
                // (skips empty strings)
                //b = txt_esc(blobjr.blobs);
                b = txt_esc(blobjr.blobs);
                var blen = b.length;

                if (!state.tmp.suppress_decorations) {
                    for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                        params = blobjr.decorations[j];
                        if (params[0] === "@showid") {
                            continue;
                        }
                        if (state.normalDecorIsOrphan(blobjr, params)) {
                            continue;
                        }
                        b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                    }
                }
                //
                // because we will rip out portions of the output
                // queue before rendering, group wrappers need
                // to produce no output if they are found to be
                // empty.
                if (b && b.length) {
                    b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
                    if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                        for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                            params = blobjr.decorations[j];

                            if (params[0] === "@showid") {
                                b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                            }
                        }
                    }
                    ret.push(b);
                    if (state.tmp.count_offset_characters) {
                        state.tmp.offset_characters += (blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length);
                    }
                }
            }
        } else if (blobjr.blobs.length) {
            var addtoret = state.output.string(state, blobjr.blobs, blobjr);
            if (blob) {
                // Patch up world-class weird bug in the ill-constructed code of mine.
                if ("string" !== addtoret && addtoret.length > 1 && blobjr.strings.delimiter) {
                    var numberSeen = false;
                    for (var j=0,jlen=addtoret.length;j<jlen;j++) {
                        if ("string" !== typeof addtoret[j]) {
                            numberSeen = true;
                        } else if (numberSeen) {
                            addtoret[j] = (blobjr.strings.delimiter + addtoret[j]);
                        }
                    }
                }
            }
            ret = ret.concat(addtoret);
        }
        if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
            // The Item.id of the entry being rendered.
            state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
            state.tmp.count_offset_characters = false;
        }
    }

    // Provide delimiters on adjacent numeric blobs
    for (i=0,ilen=ret.length - 1;i<ilen;i+=1) {
        if ("number" === typeof ret[i].num && "number" === typeof ret[i+1].num && !ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK) {
            // XXX watch this
            ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
            ret[i+1].successor_prefix = "";
            ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK = true;
        }
    }

    var span_split = 0;
    for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
        if ("string" === typeof ret[i]) {
            span_split = (parseInt(i, 10) + 1);
            if (i < ret.length - 1  && "object" === typeof ret[i + 1]) {
                if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
                    ret[i] += txt_esc(blob_delimiter);
                }
                // One bite of the apple
                ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
            }
            //span_split = ret.length;
            //print("XXX ret: "+ret+" -- "+blob_delimiter);
        }
    }
/*
    if (blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
        span_split = ret.length;
    }
*/
    if (blob && (blob.decorations.length || blob.strings.suffix)) {
        span_split = ret.length;
    } else if (blob && blob.strings.prefix) {
        for (var i=0,ilen=ret.length;i<ilen;i++) {
            if ("undefined" !== typeof ret[i].num) {
                span_split = i;
                if (i === 0) {
                    ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
                }
                break;
            }
        }
    }

    var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
    if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
        if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
                params = blob.decorations[i];
                if (["@cite","@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
                    continue;
                }
                if (state.normalDecorIsOrphan(blobjr, params)) {
                    continue;
                }
                if (!params[0]) continue;
                if ("string" === typeof blobs_start) {
                    blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
                }
            }
        }
        //
        // XXXX: cut-and-paste warning.  same as a code block above.
        //
        b = blobs_start;
        use_suffix = blob.strings.suffix;
        if (b && b.length) {
            use_prefix = blob.strings.prefix;
            b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
            if (state.tmp.count_offset_characters) {
                state.tmp.offset_characters += (use_prefix.length + use_suffix.length);
            }
        }
        blobs_start = b;
        if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
                params = blob.decorations[i];
                if (["@cite","@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
                    continue;
                }
                if ("string" === typeof blobs_start) {
                    blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
                }
            }
        }
    }

    var blobs_end = ret.slice(span_split, ret.length);
    if (!blobs_end.length && blobs_start) {
        ret = [blobs_start];
    } else if (blobs_end.length && !blobs_start) {
        ret = blobs_end;
    } else if (blobs_start && blobs_end.length) {
        ret = [blobs_start].concat(blobs_end);
    }
    //
    // Blobs is now definitely a string with
    // trailing blobs.  Return it.
    if ("undefined" === typeof blob) {
        this.queue = [];
        this.current.mystack = [];
        this.current.mystack.push(this.queue);
        if (state.tmp.suppress_decorations) {
            ret = state.output.renderBlobs(ret, undefined, false);
        }
    } else if ("boolean" === typeof blob) {
        ret = state.output.renderBlobs(ret, undefined, true);
    }

    if (blob && blob.new_locale) {
        state.opt.lang = blob.old_locale;
    }
    //if (!blob && !state.tmp.just_looking) {
    //  print("QUEUE ("+ state.tmp.just_looking +"): "+JSON.stringify(state.output.queue, ["num", "strings", "decorations", "blobs", "prefix", "suffix", "delimiter"], 2));
    //}
    return ret;
};

CSL.Output.Queue.prototype.clearlevel = function () {
    var blob, pos, len;
    blob = this.current.value();
    len = blob.blobs.length;
    for (pos = 0; pos < len; pos += 1) {
        blob.blobs.pop();
    }
};

CSL.Output.Queue.prototype.renderBlobs = function (blobs, delim, in_cite, parent) {
    var state, ret, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
    txt_esc = CSL.getSafeEscape(this.state);
    if (!delim) {
        delim = "";
    }
    state = this.state;
    ret = "";
    use_delim = "";
    len = blobs.length;
    if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
        blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
        blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
        blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
        blobs[0].params = parent.params;
        return blobs[0];
    }
    var start = true;
    for (pos = 0; pos < len; pos += 1) {
        if (blobs[pos].checkNext) {
            blobs[pos].checkNext(blobs[pos + 1],start);
            start = false;
        } else if (blobs[pos+1] && blobs[pos+1].splice_prefix) {
            start = false;
            //blobs[pos+1].checkNext(blobs[pos + 1],start);
        } else {
            start = true;
        }
    }
    
    // print("LEN="+len+" "+JSON.stringify(blobs, null, 2));
    // Fix last non-range join
    var doit = true;
    for (pos = blobs.length - 1; pos > 0; pos += -1) {
        if (blobs[pos].checkLast) {
            if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
                doit = false;
            }
        } else {
            doit = true;
        }
    }
    len = blobs.length;
    for (pos = 0; pos < len; pos += 1) {
        blob = blobs[pos];
        if (ret) {
            use_delim = delim;
        }
        if ("string" === typeof blob) {
            ret += txt_esc(use_delim);
            // XXX Blob should be run through flipflop and flattened here.
            // (I think it must be a fragment of text around a numeric
            // variable)
            ret += blob;
            if (state.tmp.count_offset_characters) {
                //state.tmp.offset_characters += (use_delim.length + blob.length);
                state.tmp.offset_characters += (use_delim.length);
            }
        } else if (in_cite) {
            // pass
            // Okay, so this does it -- but we're now not able to return a string!
            if (ret) {
                ret = [ret, blob];
            } else {
                ret = [blob];
            }
        } else if (blob.status !== CSL.SUPPRESS) {
            if (blob.particle) {
                str = blob.particle + blob.num;
            } else {
                str = blob.formatter.format(blob.num, blob.gender);
            }
            // Workaround to get a more or less accurate value.
            var strlen = str.replace(/<[^>]*>/g, "").length;
            // notSerious
            this.append(str, "empty", true);
            var str_blob = this.pop();
            var count_offset_characters = state.tmp.count_offset_characters;
            str = this.string(state, [str_blob], false);
            state.tmp.count_offset_characters = count_offset_characters;
            if (blob.strings["text-case"]) {
                str = CSL.Output.Formatters[blob.strings["text-case"]](this.state, str);
            }
            if (str && this.state.tmp.strip_periods) {
                str = str.replace(/\.([^a-z]|$)/g, "$1");
            }
            if (!state.tmp.suppress_decorations) {
                llen = blob.decorations.length;
                for (ppos = 0; ppos < llen; ppos += 1) {
                    params = blob.decorations[ppos];
                    if (state.normalDecorIsOrphan(blob, params)) {
                        continue;
                    }
                    str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
                }
            }
            str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
            var addme = "";
            if (blob.status === CSL.END) {
                //print("  CSL.END");
                addme = txt_esc(blob.range_prefix);
            } else if (blob.status === CSL.SUCCESSOR) {
                //print("  CSL.SUCCESSOR");
                addme = txt_esc(blob.successor_prefix);
            } else if (blob.status === CSL.START) {
                //print("  CSL.START");
                if (pos > 0 && !blob.suppress_splice_prefix) {
                    addme = txt_esc(blob.splice_prefix);
                } else {
                    addme = "";
                }
            } else if (blob.status === CSL.SEEN) {
                //print("  CSL.SEEN");

                // THIS IS NOT THE PROPER FUNCTION OF CSL.SEEN, IS IT?

                addme = txt_esc(blob.splice_prefix);
            }
            ret += addme;
            ret += str;
            if (state.tmp.count_offset_characters) {
                state.tmp.offset_characters += (addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length);
            }
        }
    }
    return ret;
};

CSL.Output.Queue.purgeEmptyBlobs = function (parent) {
    //print("START1");
    if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
        return;
    }
    // back-to-front, bottom-first
    for (var i=parent.blobs.length-1;i>-1;i--) {
        CSL.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
        var child = parent.blobs[i];
        if (!child || !child.blobs || !child.blobs.length) {
            var buf = [];
            while ((parent.blobs.length-1) > i) {
                buf.push(parent.blobs.pop());
            }
            parent.blobs.pop();
            while (buf.length) {
                parent.blobs.push(buf.pop());
            }
        }
    }
    //print("   end");
};

// Adjustments to be made:
//
// * Never migrate beyond a @quotes node
// * Never migrate into a num node.

CSL.Output.Queue.adjust = function (punctInQuote) {

    var NO_SWAP_IN = {
        ";": true,
        ":": true
    };

    var NO_SWAP_OUT = {
        ".": true,
        "!": true,
        "?": true
    };

    var LtoR_MAP = {
        "!": {
            ".": "!",
            "?": "!?",
            ":": "!",
            ",": "!,",
            ";": "!;"
        },
        "?": {
            "!": "?!",
            ".": "?",
            ":": "?",
            ",": "?,",
            ";": "?;"
        },
        ".": {
            "!": ".!",
            "?": ".?",
            ":": ".:",
            ",": ".,",
            ";": ".;"
        },
        ":": {
            "!": "!",
            "?": "?",
            ".": ":",
            ",": ":,",
            ";": ":;"
        },
        ",": {
            "!": ",!",
            "?": ",?",
            ":": ",:",
            ".": ",.",
            ";": ",;"
        },
        ";": {
            "!": "!",
            "?": "?",
            ":": ";",
            ",": ";,",
            ".": ";"
        }
    };

    var SWAP_IN = {};
    var SWAP_OUT = {};
    var PUNCT = {};
    var PUNCT_OR_SPACE = {};
    for (var key in LtoR_MAP) {
        PUNCT[key] = true;
        PUNCT_OR_SPACE[key] = true;
        if (!NO_SWAP_IN[key]) {
            SWAP_IN[key] = true;
        }
        if (!NO_SWAP_OUT[key]) {
            SWAP_OUT[key] = true;
        }
    }
    PUNCT_OR_SPACE[" "] = true;
    PUNCT_OR_SPACE[" "] = true;

    var RtoL_MAP = {};
    for (var key in LtoR_MAP) {
        for (var subkey in LtoR_MAP[key]) {
            if (!RtoL_MAP[subkey]) {
                RtoL_MAP[subkey] = {};
            }
            RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
        }
    }

    function blobIsNumber(blob) {
        return ("number" === typeof blob.num || (blob.blobs && blob.blobs.length === 1 && "number" === typeof blob.blobs[0].num));
    }

    function blobEndsInNumber(blob) {
        if ("number" === typeof blob.num) {
            return true;
        }
        if (!blob.blobs || "object" !==  typeof blob.blobs) {
            return false;
        }
        if (blobEndsInNumber(blob.blobs[blob.blobs.length-1])) {
            return true;
        }
    }
    
    function blobHasDecorations(blob,includeQuotes) {
        var ret = false;
        var decorlist = ['@font-style','@font-variant','@font-weight','@text-decoration','@vertical-align'];
        if (includeQuotes) {
            decorlist.push('@quotes');
        }
        if (blob.decorations) {
            for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {
                if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
                    ret = true;
                    break;
                }
            }
        }
        return ret;
    }
    
    function blobHasDescendantQuotes(blob) {
        if (blob.decorations) {
            for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {
                if (blob.decorations[i][0] === '@quotes' && blob.decorations[i][1] !== "false") {
                    return true;
                }
            }
        }
        if ("object" !== typeof blob.blobs) {
            return false;
        }
        return blobHasDescendantQuotes(blob.blobs[blob.blobs.length-1]);
        //if (blobHasDescendantQuotes(blob.blobs[blob.blobs.length-1])) {
        //    return true
        //};
        //return false;
    }
    
    function blobHasDescendantMergingPunctuation(parentChar,blob) {
        var childChar = blob.strings.suffix.slice(-1);
        if (!childChar && "string" === typeof blob.blobs) {
            childChar = blob.blobs.slice(-1);
        }
        var mergedChars = RtoL_MAP[parentChar][childChar];
        if (mergedChars && mergedChars.length === 1) {
            return true;
        }
        if ("object" !== typeof blob.blobs) {
            return false;
        }
        if (blobHasDescendantMergingPunctuation(parentChar,blob.blobs[blob.blobs.length-1])) {
            return true;
        }
        return false;
    }
    
    function matchLastChar(blob, chr) {
        if (!PUNCT[chr]) {
            return false;
        }
        if ("string" === typeof blob.blobs) {

            if (blob.blobs.slice(-1) === chr) {
                return true;
            } else {
                return false;
            }
        } else {
            var child = blob.blobs[blob.blobs.length-1];
            if (child) {
                var childChar = child.strings.suffix.slice(-1);
                if (!childChar) {
                    return matchLastChar(child,chr);
                } else if (child.strings.suffix.slice(-1) == chr) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
    }
    
    function mergeChars (First, first, Second, second, merge_right) {
        var FirstStrings = "blobs" === first ? First : First.strings;
        var SecondStrings = "blobs" === second ? Second: Second.strings;
        var firstChar = FirstStrings[first].slice(-1);
        var secondChar = SecondStrings[second].slice(0,1);
        function cullRight () {
            SecondStrings[second] = SecondStrings[second].slice(1);
        }
        function cullLeft () {
            FirstStrings[first] = FirstStrings[first].slice(0,-1);
        }
        function addRight (chr) {
            SecondStrings[second] = chr + SecondStrings[second];
        }
        function addLeft (chr) {
            FirstStrings[first] += chr;
        }
        var cull = merge_right ? cullLeft : cullRight;
        function matchOnRight () {
            return RtoL_MAP[secondChar];
        }
        function matchOnLeft () {
            return LtoR_MAP[firstChar];
        }
        var match = merge_right ? matchOnLeft : matchOnRight;
        function mergeToRight () {
            var chr = LtoR_MAP[firstChar][secondChar];
            if ("string" === typeof chr) {
                cullLeft();
                cullRight();
                addRight(chr);
            } else {
                addRight(firstChar);
                cullLeft();
            }
        }
        function mergeToLeft () {
            var chr = RtoL_MAP[secondChar][firstChar];
            if ("string" === typeof chr) {
                cullLeft();
                cullRight();
                addLeft(chr);
            } else {
                addLeft(secondChar);
                cullRight();
            }
        }
        var merge = merge_right ? mergeToRight: mergeToLeft;

        var isDuplicate = firstChar === secondChar;
        if (isDuplicate) {
            cull();
        } else {
            if (match()) {
                merge();
            }
        }
    }

    function upward (parent) {
        //print("START2");
        // Terminus if no blobs
        if (parent.blobs && "string" == typeof parent.blobs) {
            if (PUNCT[parent.strings.suffix.slice(0,1)]
                && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {

                parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
        } else if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
            return;
        }

        // back-to-front, bottom-first
        var parentDecorations = blobHasDecorations(parent,true);
        for (var i=parent.blobs.length-1;i>-1;i--) {
            this.upward(parent.blobs[i]);
            var parentStrings = parent.strings;
            var childStrings = parent.blobs[i].strings;
            if (i === 0) {
                // Remove leading space on first-position child node prefix if there is a trailing space on the node prefix above 
                if (" " === parentStrings.prefix.slice(-1) && " " === childStrings.prefix.slice(0, 1)) {
                    childStrings.prefix = childStrings.prefix.slice(1);
                }
                // Migrate leading punctuation or space on a first-position prefix upward
                var childChar = childStrings.prefix.slice(0, 1);
                if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
                    parentStrings.prefix += childChar;
                    childStrings.prefix = childStrings.prefix.slice(1);
                }
            }
            if (i === (parent.blobs.length - 1)) {
                // Migrate trailing space ONLY on a last-position suffix upward, controlling for duplicates
                var childChar = childStrings.suffix.slice(-1);
                // ZZZ Loosened to fix initialized names wrapped in a span and followed by a period
                if (!parentDecorations && [" "].indexOf(childChar) > -1) {
                    if (parentStrings.suffix.slice(0,1) !== childChar) {
                        parentStrings.suffix = childChar + parentStrings.suffix;
                    }
                    childStrings.suffix = childStrings.suffix.slice(0, -1);
                }
            }
            if (parentStrings.delimiter && i > 0) {
                // Remove leading space on mid-position child node prefix if there is a trailing space on delimiter above
                if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)]
                    && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {

                    childStrings.prefix = childStrings.prefix.slice(1);
                }
            }
            // Siblings are handled in adjustNearsideSuffixes()
        }
        //print("   end");
    }

    function leftward (parent) {
        // Terminus if no blobs
        if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
            return;
        }

        for (var i=parent.blobs.length-1;i>-1;i--) {
            this.leftward(parent.blobs[i]);
            // This is a delicate one.
            //
            // Migrate if:
            // * there is no umbrella delimiter [ok]
            // * neither the child nor its sibling is a number [ok]
            // * decorations exist neither on the child nor on the sibling [ok]
            // * sibling prefix char is a swapping char [ok]
            //
            // Suppress without migration if:
            // * sibling prefix char matches child suffix char or
            // * child suffix is empty and sibling prefix char match last field char
            if ((i < parent.blobs.length -1) && !parent.strings.delimiter) {
                // If there is a trailing swappable character on a sibling prefix with no intervening delimiter, copy it to suffix,
                // controlling for duplicates
                var child = parent.blobs[i];
                var childChar = child.strings.suffix.slice(-1);
                var sibling = parent.blobs[i+1];
                var siblingChar = sibling.strings.prefix.slice(0, 1);
                var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
                var hasNumber = "number" === typeof childChar || "number" === typeof siblingChar;

                if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
                    var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
                    var suffixAndFieldMatch = (!child.strings.suffix && "string" === typeof child.blobs && child.blobs.slice(-1) === siblingChar);
                    if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                        mergeChars(child, 'suffix', sibling, 'prefix');
                        //child.strings.suffix += siblingChar;
                    } else {
                        sibling.strings.prefix = sibling.strings.prefix.slice(1);
                    }
                }
            }
        }
    }

    function downward (parent) {
        //print("START3");
        // Terminus if no blobs
        if (parent.blobs && "string" == typeof parent.blobs) {
            if (PUNCT[parent.strings.suffix.slice(0,1)]
                && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {

                parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
        } else if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
            return;
        }
        //if (top) {
        //    print("JSON "+JSON.stringify(parent, ["strings", "decorations", "blobs", "prefix", "suffix", "delimiter"], 2));
        //}

        var parentStrings = parent.strings;
        for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {
            if (blobIsNumber(parent.blobs[i])) {
                break;
            }
        }
        {
            // If there is a leading swappable character on delimiter, copy it to suffixes IFF none of the targets are numbers
            if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
                var delimChar = parentStrings.delimiter.slice(0, 1);
                for (var i=parent.blobs.length-2;i>-1;i--) {
                    var childStrings = parent.blobs[i].strings;
                    if (childStrings.suffix.slice(-1) !== delimChar) {
                        childStrings.suffix += delimChar;
                    }
                }
                parentStrings.delimiter = parentStrings.delimiter.slice(1);
            }
        }
        // back-to-front, top-first
        for (var i=parent.blobs.length-1;i>-1;i--) {
            var child = parent.blobs[i];
            var childStrings = parent.blobs[i].strings;
            var childDecorations = blobHasDecorations(child, true);
            var childIsNumber = blobIsNumber(child);

            if (i === (parent.blobs.length - 1)) {

                //if (blobHasDescendantQuotes(child)) {
                //    print("JSON "+JSON.stringify(parent, ["strings", "decorations", "blobs", "prefix", "suffix", "delimiter"]));
                //}

                {
                    // If we have decorations, drill down to see if there are quotes below.
                    // If so, we allow migration anyway.
                    // Original discussion is here:
                    // https://forums.zotero.org/discussion/37091/citeproc-bug-punctuation-in-quotes/
                    var parentChar = parentStrings.suffix.slice(0, 1);

                    // Hmm.
                    // Consider writing out the matching child from blobHasDescendant functions.
                    // It should save some cycles, and produce the same result.

                    var allowMigration = false;
                    if (PUNCT[parentChar]) {
                        allowMigration = blobHasDescendantMergingPunctuation(parentChar,child);
                        if (!allowMigration && punctInQuote) {
                            allowMigration = blobHasDescendantQuotes(child);
                        }
                    }
                    if (allowMigration) {
                        if (PUNCT[parentChar]) {
                            if (!blobEndsInNumber(child)) {
                                if ("string" === typeof child.blobs) {
                                    mergeChars(child, 'blobs', parent, 'suffix');
                                } else {
                                    mergeChars(child, 'suffix', parent, 'suffix');
                                }
                                if (parentStrings.suffix.slice(0,1) === ".") {
                                    childStrings.suffix += parentStrings.suffix.slice(0,1);
                                    parentStrings.suffix = parentStrings.suffix.slice(1);
                                }
                            }
                        }
                    }
                    if (childStrings.suffix.slice(-1) === " " && parentStrings.suffix.slice(0,1) === " ") {
                        parentStrings.suffix = parentStrings.suffix.slice(1);
                    }
                    // More duplicates control
                    if (PUNCT_OR_SPACE[childStrings.suffix.slice(0,1)]) {
                        if ("string" === typeof child.blobs && child.blobs.slice(-1) === childStrings.suffix.slice(0,1)) {
                            // Remove parent punctuation of it duplicates the last character of a field
                            childStrings.suffix = childStrings.suffix.slice(1);
                        }
                        if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                            // Remove duplicate punctuation on child suffix
                            parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                        }
                    }
                }
                // Squash dupes
                if (matchLastChar(parent,parent.strings.suffix.slice(0,1))) {
                    parent.strings.suffix = parent.strings.suffix.slice(1);
                }
            } else if (parentStrings.delimiter) {
                // Remove trailing space on mid-position child node suffix if there is a leading space on delimiter above
                if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0,1)]
                    && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {

                    parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
                    
                }
            } else {
                // Otherwise it's a sibling. We don't care about moving spaces here, just suppress a duplicate
                var siblingStrings = parent.blobs[i+1].strings;
                if (!blobIsNumber(child) 
                    && !childDecorations
                    && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)]
                    && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {

                    siblingStrings.prefix = siblingStrings.prefix.slice(1);
                }
            }
            // If field content ends with swappable punctuation, suppress swappable punctuation in style suffix.
            if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0,1)]
                && "string" === typeof child.blobs) {
                
                mergeChars(child, 'blobs', child, 'suffix');
            }
            this.downward(parent.blobs[i]);
        }
/*
        if (top) {

            var seen = [];
            print(JSON.stringify(parent, function(key, val) {
                if (!val || key === 'alldecor') return;
                if (typeof val == "object") {
                    if (seen.indexOf(val) >= 0)
                        return
                    seen.push(val)
                }
                return val
            },2));
        }
*/

        //print("  end");
    }
    // Abstract out a couple of utility functions, used in fix() below.
    function swapToTheLeft (child) {
        var childChar = child.strings.suffix.slice(0,1);
        if ("string" === typeof child.blobs) {
            while (SWAP_IN[childChar]) {
                mergeChars(child, 'blobs', child, 'suffix');
                childChar = child.strings.suffix.slice(0,1);
            }                                
        } else {
            while (SWAP_IN[childChar]) {
                mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix');
                childChar = child.strings.suffix.slice(0,1);
            }
        }
    }
    function swapToTheRight (child) {
        if ("string" === typeof child.blobs) {
            var childChar = child.blobs.slice(-1);
            while (SWAP_OUT[childChar]) {
                mergeChars(child, 'blobs', child, 'suffix', true);
                childChar = child.blobs.slice(-1);
            }
        } else {
            var childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);
            while (SWAP_OUT[childChar]) {
                mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix', true);
                childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);
            }
        }
    }

    function fix (parent) {
        // Terminus if no blobs
        if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
            return;
        }
        
        //print("START4");
        // Do the swap, front-to-back, bottom-first
        var lastChar;

        // XXX Two things to fix with this:
        // XXX (1) Stalls after one character
        // XXX (2) Moves colon and semicolon, both of which SHOULD stall

        for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {
            var child = parent.blobs[i];
            var quoteSwap = false;
            for (var j=0,jlen=child.decorations.length;j<jlen;j++) {
                var decoration = child.decorations[j];
                if (decoration[0] === "@quotes" && decoration[1] !== "false") {
                    quoteSwap = true;
                }
            }
            if (quoteSwap) {
                if (punctInQuote) {
                    swapToTheLeft(child);
                } else {
                    swapToTheRight(child);
                }
            }
            lastChar = this.fix(parent.blobs[i]);
            if (child.blobs && "string" === typeof child.blobs) {
                lastChar = child.blobs.slice(-1);
            }
        }
        return lastChar;
    }
    this.upward = upward;
    this.leftward = leftward;
    this.downward = downward;
    this.fix = fix;
};

/*global CSL: true */

CSL.Engine.Opt = function () {
    this.parallel = {
        enable: false,
    },
    this.has_disambiguate = false;
    this.mode = "html";
    this.dates = {};
    this.jurisdictions_seen = {};
    this.suppressedJurisdictions = {};
    this.inheritedAttributes = {};
    this["locale-sort"] = [];
    this["locale-translit"] = [];
    this["locale-translat"] = [];
    this.citeAffixes = {
        persons:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        },
        institutions:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        },
        titles:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        },
        journals:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        },
        publishers:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        },
        places:{
            "locale-orig":{
                prefix:"",
                suffix:""
            },
            "locale-translit":{
                prefix:"",
                suffix:""
            },
            "locale-translat":{
                prefix:"",
                suffix:""
            }
        }
    };
    this["default-locale"] = [];
    this.update_mode = CSL.NONE;
    this.bib_mode = CSL.NONE;
    this.sort_citations = false;
    /*
     * Default values.
     * The various et-al values are set globally,
     * and the appropriate value is set by the names start
     * tag at runtime, depending on whether the Item is a
     * first or a subsequent reference.
     */
    this["et-al-min"] = 0;
    this["et-al-use-first"] = 1;
    this["et-al-use-last"] = false;
    this["et-al-subsequent-min"] = false;
    this["et-al-subsequent-use-first"] = false;

    this["demote-non-dropping-particle"] = "display-and-sort";
    // default of true, because none of our consuming
    // applications so far store the various prefixes and 
    // suffixes we support in separate fields.
    this["parse-names"] = true;
    // this["auto-vietnamese-names"] = true;

    this.citation_number_slug = false;
    this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";

    this.nodenames = [];

    this.gender = {};
    this['cite-lang-prefs'] = {
        persons:['orig'],
        institutions:['orig'],
        titles:['orig'],
        journals:['orig'],
        publishers:['orig'],
        places:['orig'],
        number:['orig']
    };

    this.has_layout_locale = false;
    this.disable_duplicate_year_suppression = [];
    this.use_context_condition = false;

    this.jurisdiction_fallbacks = {};

    this.development_extensions = {};
    this.development_extensions.field_hack = true;
    this.development_extensions.allow_field_hack_date_override = true;
    this.development_extensions.locator_date_and_revision = true;
    this.development_extensions.locator_label_parse = true;
    this.development_extensions.raw_date_parsing = true;
    this.development_extensions.clean_up_csl_flaws = true;
    this.development_extensions.consolidate_legal_items = false;
    this.development_extensions.csl_reverse_lookup_support = false;
    this.development_extensions.wrap_url_and_doi = false;
    this.development_extensions.thin_non_breaking_space_html_hack = false;
    this.development_extensions.apply_citation_wrapper = false;
    this.development_extensions.main_title_from_short_title = false;
    this.development_extensions.uppercase_subtitles = false;
    this.development_extensions.normalize_lang_keys_to_lowercase = false;
    this.development_extensions.strict_text_case_locales = false;
    this.development_extensions.expect_and_symbol_form = false;
    this.development_extensions.require_explicit_legal_case_title_short = false;
    this.development_extensions.spoof_institutional_affiliations = false;
    this.development_extensions.force_jurisdiction = false;
    this.development_extensions.parse_names = true;
    this.development_extensions.hanging_indent_legacy_number = false;
    this.development_extensions.throw_on_empty = false;
    this.development_extensions.strict_inputs = true;
    this.development_extensions.prioritize_disambiguate_condition = false;
    this.development_extensions.force_short_title_casing_alignment = true;
    this.development_extensions.implicit_short_title = false;
    this.development_extensions.force_title_abbrev_fallback = false;
    this.development_extensions.split_container_title = false;
    this.development_extensions.legacy_institution_name_ordering = false;
};

CSL.Engine.Tmp = function () {
    //
    // scratch variable to display the total
    // number of names in all rendered variables
    // in a cite.  initialized to zero by the
    // citation element, incremented by each
    // name variable actually rendered
    this.names_max = new CSL.Stack();
    this.names_base = new CSL.Stack();
    this.givens_base = new CSL.Stack();
    //
    // this holds the field values collected by the @value
    // and @variable attributes, for processing by the
    // element functions.
    this.value = [];
    /**
     * Object to hold the decorations declared by a name-part
     * element.
     */
    this.namepart_decorations = {};
    /**
     * String variable to hold the type of a name-part
     * element.
     */
    this.namepart_type = false;
    //
    // scratch variable to flag whether we are processing
    // a citation or a bibiliography.  this diverts token and
    // configuration to the appropriateo objects inside
    // state.  the default is "citation".
    this.area = "citation";
    this.root = "citation";
    this.extension = "";
    //
    // controls the implicit conditional wrappers applied
    // to top-level elements inside a names substitute span.
    // false by default, names start tag pushes a new true level,
    // names end tag pops it.  Output value check in @variable
    // function of attributes.js sets level to false.  closing names
    // tag maps a false value to superior level.
    this.can_substitute = new CSL.Stack(0, CSL.LITERAL);
    //
    // notes whether the formatted elements of a date span
    // rendered anything.  controls whether literal fallback
    // is used.
    this.element_rendered_ok = false;
    //
    // element_trace keeps a record of rendered elements.
    // used to implement author-only.
    //
    this.element_trace = new CSL.Stack("style");
    //
    // counter for total namesets
    this.nameset_counter = 0;
    //
    /////  this.fun.check_for_output = CSL.check_for_output;
    //
    // stack flag used for term handling.  Set to true
    // if at least one variable has tried to render, and
    // no variables had content.
    this.group_context = new CSL.Stack({
        term_intended: false,
        variable_attempt: false,
        variable_success: false,
        output_tip: undefined,
        label_form:  undefined,
        parallel_first: undefined,
        parallel_last: undefined,
        parallel_delimiter_override: undefined,
        condition: false,
        force_suppress: false,
        done_vars: []
    });
    //
    // boolean flag used to control first-letter capitalization
    // of terms.  Set to true if any item preceding the term
    // being handled has rendered successfully, otherwise
    // false.
    this.term_predecessor = false;
    //
    // boolean flag to control use of layout delimiter
    // immediately before numbers. This hack is needed for
    // some numeric styles.
    this.in_cite_predecessor = false;
    //
    // stack flag used to control jumps in the closing
    // token of a conditional.
    this.jump = new CSL.Stack(0, CSL.LITERAL);
    //
    // holds string parameters for group formatting, between
    // the start of a group and the closing token.
    this.decorations = new CSL.Stack();
    //
    // token store stack.
    this.tokenstore_stack = new CSL.Stack();

    // for collapsing
    this.last_suffix_used = "";
    this.last_names_used = [];
    this.last_years_used = [];
    this.years_used = [];
    this.names_used = [];

    this.taintedItemIDs = {};
    this.taintedCitationIDs = {};
    //
    // scratch stack containing initialize-with strings or null values
    this.initialize_with = new CSL.Stack();
    //
    // this is used to set a requested set of
    // disambiguation parameters in the output.
    // for the array elements, the base array
    // (either zero for each nameset, or full-up
    // if givens are already used) is set
    // during names processing, if no value
    // is set in the processor before a rendering
    // run.  to simplify things for the calling
    // function, these are just bog-standard arrays,
    // and can be safely overwritten.
    this.disambig_request = false;
    //
    // scratch variable to toggle an attempt to set a
    // name in sort order rather than display
    // order.
    this["name-as-sort-order"] = false;
    //
    // suppress decorations (used for generating
    // sort keys and disambiguation keys)
    this.suppress_decorations = false;
    //
    // empty settings array, used to report settings used
    // if disambig_request is not set at runtime
    this.disambig_settings = new CSL.AmbigConfig();
    //
    // sort key array
    this.bib_sort_keys = [];
    //
    // holds the prefix between the start of a group
    // and the closing token.
    this.prefix = new CSL.Stack("", CSL.LITERAL);
    //
    // holds the suffix between the start of a group
    // and the closing token.
    this.suffix = new CSL.Stack("", CSL.LITERAL);
    //
    // holds the group delimiter between the start of a group
    // and the closing token.
    this.delimiter = new CSL.Stack("", CSL.LITERAL);
    //
    // Used for conditional locale switching.
    this.cite_locales = [];
    this.cite_affixes = {
        citation: false, 
        bibliography: false,
        citation_sort: false, 
        bibliography_sort: false
    };
    this.strip_periods = 0;
    this.shadow_numbers = {};
    this.authority_stop_last = 0;
    this.loadedItemIDs = {};
    //
    // Push/pop array for set/unset of opt.lang setting, used
    // in if locale="XX" to force terms to language of item.
    // @locale tests track their nesting level in a counter,
    // and push the current value of state.opt.lang to one array,
    // and the counter value to another. On the way back up,
    // closing node decrements the counter, compares its value
    // with the trailing value on the array, and pops both
    // arrays, resetting state.opt.lang to the previous value.
    // A hack to solve a surprisingly difficult problem caused
    // by the use of an execution stack for the nested structure.
    this.condition_counter = 0; //incremented/decremented on ALL conditions
    this.condition_lang_val_arr = [];
    this.condition_lang_counter_arr = [];
};


CSL.Engine.Fun = function (state) {
    //
    // matcher
    this.match = new CSL.Util.Match();
    //
    // utility to get standard suffixes for disambiguation
    this.suffixator = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
    //
    // utility to romanize a numeric value
    this.romanizer = new CSL.Util.Romanizer();
    //
    // utility to make an ordinal form of a number
    this.ordinalizer = new CSL.Util.Ordinalizer(state);
    //
    // utility to make the long ordinal form of a number, if possible
    this.long_ordinalizer = new CSL.Util.LongOrdinalizer();
};


CSL.Engine.Build = function () {
    // Alternate et-al term
    // Holds the localization key of the alternative term
    // to be used for et-al in a names environment.  Reduced
    // to a term object when the element tag is processed during
    // Build.
    this["alternate-term"] = false;
    //
    // flags that we are in the bibliography area.
    // used by sort.
    this.in_bibliography = false;
    //
    // scratch variable to alter behaviour when processing
    // locale files
    this.in_style = false;
    //
    // used to ignore info
    this.skip = false;
    //
    // the macro ATTRIBUTE stores a macro name on this
    // scratch variable anywhere outside the layout area
    // during build.  The macro name is picked up when
    // the token is encountered inside the layout area,
    // either through a direct call, or as part of a nested
    // macro expansion, and the macro content is exploded
    // into the token list.
    this.postponed_macro = false;
    //
    // used especially for controlling macro expansion
    // during Build.
    this.layout_flag = false;
    //
    // (was buffer_name)
    // scratch variable to hold the name of a macro
    // or a term until its children have been collected.
    this.name = false;
    this.names_variables = [[]];
    this.name_label = [{}];
    //
    // scratch variable to hold the value of a form
    // attribute until other attributes needed for
    // processing have been collected.
    this.form = false;
    this.term = false;
    //
    // the macros themselves are discarded after Build
    this.macro = {};
    //
    // the macro build stack.  used to raise an error
    // when macros would attempt to call themselves.
    this.macro_stack = [];
    //
    // stores the content of an XML text node during processing
    this.text = false;
    //
    // this is a scratch variable for holding an attribute
    // value during processing
    this.lang = false;
    //
    // should be able to run uninitialized; may attract some
    // cruft this way.
    this.area = "citation";
    this.root = "citation";
    this.extension = "";
    //
    // controls the application of implicit conditional wrappers
    // to top-level elements inside a names substitute span.
    // zero by default, build of names tag pushes a
    // new level with value 1.  group start tag increments by 1,
    // group end tag decrements by 1.  conditional wrappers are
    // only applied if value is exactly 1.
    this.substitute_level = new CSL.Stack(0, CSL.LITERAL);
    this.names_level = 0;
    this.render_nesting_level = 0;
    this.render_seen = false;
    this.bibliography_key_pos = 0;
};


CSL.Engine.Configure = function () {
    //
    // the fail and succeed arrays are used for stack
    // processing during configure.
    this.tests = [];
    this.fail = [];
    this.succeed = [];
};


CSL.Engine.Citation = function (state) {
     // Citation options area.
     // Holds a mixture of persistent and ephemeral
     // options and scratch data used during processing of
     // a citation.</p>
    this.opt = {
        inheritedAttributes: {}
    };

    this.tokens = [];
    // Placeholder function
    this.srt = new CSL.Registry.Comparifier(state, "citation_sort");
    //
    // configuration array to hold the collapse
    // options, if any.
    this.opt.collapse = [];
    //
    // disambiguate options
    this.opt["disambiguate-add-names"] = false;
    this.opt["disambiguate-add-givenname"] = false;
    this.opt["disambiguate-add-year-suffix"] = false;
    this.opt["givenname-disambiguation-rule"] = "by-cite";
    this.opt["near-note-distance"] = 5;

    this.opt.topdecor = [];
    this.opt.layout_decorations = [];
    this.opt.layout_prefix = "";
    this.opt.layout_suffix = "";
    this.opt.layout_delimiter = "";
    //
    // sorting
    this.opt.sort_locales = [];
    this.opt.max_number_of_names = 0;
    this.root = "citation";
};


CSL.Engine.Bibliography = function () {
    this.opt = {
        inheritedAttributes: {}
    };
    this.tokens = [];

    this.opt.collapse = [];

    this.opt.topdecor = [];
    this.opt.layout_decorations = [];
    this.opt.layout_prefix = "";
    this.opt.layout_suffix = "";
    this.opt.layout_delimiter = "";
    this.opt["line-spacing"] = 1;
    this.opt["entry-spacing"] = 1;
    //
    // sorting
    this.opt.sort_locales = [];
    this.opt.max_number_of_names = 0;
    this.root = "bibliography";
};


CSL.Engine.BibliographySort = function () {
    this.tokens = [];
    this.opt = {};
    this.opt.sort_directions = [];
    this.opt.topdecor = [];
    // Holds the final citation-number sort direction, for use
    // in applying numbers in cs:citation and cs:bibliography.
    // Value is exclusively controlled by cs:key in bibliography_sort
    this.opt.citation_number_sort_direction = CSL.ASCENDING;
    this.opt.citation_number_secondary = false;
    this.tmp = {};
    this.keys = [];
    this.root = "bibliography";
};


CSL.Engine.CitationSort = function () {
    this.tokens = [];
    this.opt = {};
    this.opt.sort_directions = [];
    this.keys = [];
    this.opt.topdecor = [];
    this.root = "citation";
};

CSL.Engine.InText = function () {
     // InText options area.
     // Holds a mixture of persistent and ephemeral
     // options and scratch data used during processing of
     // a citation.</p>
    this.opt = {
        inheritedAttributes: {}
    };

    this.tokens = [];
    // Placeholder function
    //this.srt = new CSL.Registry.Comparifier(state, "citation_sort");
    //
    // configuration array to hold the collapse
    // options, if any.
    this.opt.collapse = [];
    //
    // disambiguate options
    this.opt["disambiguate-add-names"] = false;
    this.opt["disambiguate-add-givenname"] = false;
    this.opt["disambiguate-add-year-suffix"] = false;
    this.opt["givenname-disambiguation-rule"] = "by-cite";
    this.opt["near-note-distance"] = 5;

    this.opt.topdecor = [];
    this.opt.layout_decorations = [];
    this.opt.layout_prefix = "";
    this.opt.layout_suffix = "";
    this.opt.layout_delimiter = "";
    //
    // sorting
    this.opt.sort_locales = [];
    this.opt.max_number_of_names = 0;
    this.root = "intext";
};

/*global CSL: true */

CSL.Engine.prototype.previewCitationCluster = function (citation, citationsPre, citationsPost, newMode) {
    // Generate output for a hypothetical citation at the current position,
    // Leave the registry in the same state in which it was found.
    //print("################### previewCitationCluster() #################");
    var oldMode = this.opt.mode;
    this.setOutputFormat(newMode);
    // Avoids generating unwanted ibids, if the citationID already exists in document
	if (citation.citationID) {
		delete citation.citationID;
	}
    var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL.PREVIEW);

    this.setOutputFormat(oldMode);
    return ret[1];
};

CSL.Engine.prototype.appendCitationCluster = function (citation) {
    var citationsPre = [];
    var len = this.registry.citationreg.citationByIndex.length;
    for (var pos = 0; pos < len; pos += 1) {
        var c = this.registry.citationreg.citationByIndex[pos];
        citationsPre.push(["" + c.citationID, c.properties.noteIndex]);
    }
    // Drop the data segment to return a list of pos/string pairs.
    return this.processCitationCluster(citation, citationsPre, [])[1];
};


CSL.Engine.prototype.processCitationCluster = function (citation, citationsPre, citationsPost, flag) {
    var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;
    this.debug = false;
    this.tmp.loadedItemIDs = {};

    // Revert citation dereference from 2ffc4664ae
    //citation = JSON.parse(JSON.stringify(citation));
    
    //print("################### processCitationCluster() #################");
    this.tmp.citation_errors = [];
    this.registry.return_data = {"bibchange": false};

    // make sure this citation has a unique ID, and register it in citationById.
    this.setCitationId(citation);

    var oldCitationList;
    var oldItemList;
    var oldAmbigs;
    if (flag === CSL.PREVIEW) {
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** start state save *********");
        }
        //SNIP-END
        //
        // Simplify.

        // Take a slice of existing citations.
        oldCitationList = this.registry.citationreg.citationByIndex.slice();

        // Take a slice of current items, for later use with update.
        oldItemList = this.registry.reflist.slice();

        // Make a list of preview citation ref objects. Omit the current
        // citation, because it will not exist in registry if: (a) this is
        // a new citation; or (b) the calling application is assigning
        // new citationIDs for every transaction.
        var newCitationList = citationsPre.concat(citationsPost);

        // Make a full list of desired ids, for use in preview update,
        // and a hash list of same while we're at it.
        // First step through known citations, then step through
        // the items in the citation for preview.
        var newItemIds = {};
        var newItemIdsList = [];
        for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
            c = this.registry.citationreg.citationById[newCitationList[i][0]];
            for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {
                newItemIds[c.citationItems[j].id] = true;
                newItemIdsList.push("" + c.citationItems[j].id);
            }
        }
        for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
            newItemIds[citation.citationItems[j].id] = true;
            newItemIdsList.push("" + citation.citationItems[j].id);
        }

        // Clone and save off disambigs of items that will be lost.
        oldAmbigs = {};
        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            if (!newItemIds[oldItemList[i].id]) {
                var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
                var ids = this.registry.ambigcites[oldAkey];
                if (ids) {
                    for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                        oldAmbigs[ids[j]] = CSL.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
                    }
                }
            }
        }

        // Update items.  This will produce the base name data and sort things.
        // Possibly unnecessary?
        //this.updateItems(this.registry.mylist.concat(tmpItems));

        //SNIP-START
        if (this.debug) {
            CSL.debug("****** end state save *********");
        }
        //SNIP-END
    }

    this.tmp.taintedCitationIDs = {};
    var sortedItems = [];

    // Styles that use note backreferencing with a by-cite
    // givenname disambiguation rule include the note number
    // in the cite for disambiguation purposes. Correct resolution
    // of disambiguate="true" conditions on first-reference cites 
    // in certain editing scenarios (e.g. where a cite is moved across
    // notes) requires that disambiguation be rerun on cites
    // affected by the edit.
    var rerunAkeys = {};

    // retrieve item data and compose items for use in rendering
    // attach pointer to item data to shared copy for good measure
    for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
        // Protect against caller-side overwrites to locator strings etc
        item = {};
        for (var key in citation.citationItems[i]) {
            item[key] = citation.citationItems[i][key];
        }
        Item = this.retrieveItem("" + item.id);
        if (Item.id) {
            this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
        }
        item = CSL.parseLocator.call(this, item);
        if (this.opt.development_extensions.consolidate_legal_items) {
            this.remapSectionVariable([[Item,item]]);
        }
        if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {
                var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);
                if (m) {
                    var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];
                    if (this.getTerm(tryLabel)) {
                        item.label = tryLabel;
                        item.locator = m[3];
                    }
                }
            }
        }
        var newitem = [Item, item];
        sortedItems.push(newitem);
        citation.citationItems[i].item = Item;
    }

    // ZZZ sort stuff moved from here.

    // attach the sorted list to the citation item
    citation.sortedItems = sortedItems;

    // build reconstituted citations list in current document order
    var citationByIndex = [];
    var citationById = {};
    var lastNotePos;
    for (i=0, ilen=citationsPre.length; i<ilen; i += 1) {
        preCitation = citationsPre[i];
        if (this.opt.development_extensions.strict_inputs) {
            if (citationById[preCitation[0]]) {
                CSL.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
            }
            if (preCitation[1]) {
                if (lastNotePos > preCitation[1]) {
                    CSL.debug("Note index sequence is not sane at citationsPre[" + i + "]");
                }
                lastNotePos = preCitation[1];
            }
        }
        this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
        citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
        citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
    }
    if (!citation.properties) {
        citation.properties = {
            noteIndex: 0
        };
    }
    if (this.opt.development_extensions.strict_inputs) {
        if (citationById[citation.citationID]) {
            CSL.error("Citation with previously referenced citationID " + citation.citationID);
        }
        if (citation.properties.noteIndex) {
            if (lastNotePos > citation.properties.noteIndex) {
                CSL.debug("Note index sequence is not sane for citation " + citation.citationID);
            }
            lastNotePos = citation.properties.noteIndex;
        }
    }
    citationByIndex.push(citation);
    citationById[citation.citationID] = citation;
    for (i=0, ilen=citationsPost.length; i<ilen; i += 1) {
        postCitation = citationsPost[i];
        if (this.opt.development_extensions.strict_inputs) {
            if (citationById[postCitation[0]]) {
                CSL.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
            }
            if (postCitation[1]) {
                if (lastNotePos > postCitation[1]) {
                    CSL.debug("Note index sequence is not sane at postCitation[" + i + "]");
                }
                lastNotePos = postCitation[1];
            }
        }
        this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
        citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
        citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
    }
    this.registry.citationreg.citationByIndex = citationByIndex;
    this.registry.citationreg.citationById = citationById;

    //
    // The processor provides three facilities to support
    // updates following position reevaluation.
    //
    // (1) The updateItems() function reports tainted ItemIDs
    // to state.tmp.taintedItemIDs.
    //
    // (2) The processor memos the type of style referencing as
    // CSL.NONE, CSL.NUMERIC or CSL.POSITION in state.opt.update_mode.
    //
    // XXXX: NO LONGER
    // (3) For citations containing cites with backreference note numbers,
    // a string image of the rendered citation is held in
    // citation.properties.backref_citation, and a list of
    // ItemIDs to be used to update the backreference note numbers
    // is memoed at citation.properties.backref_index.  When such
    // citations change position, they can be updated with a
    // series of simple find and replace operations, without
    // need for rerendering.
    //

    //
    // Position evaluation!
    //
    // set positions in reconstituted list, noting taints
    this.registry.citationreg.citationsByItemId = {};
    if (this.opt.update_mode === CSL.POSITION) {
        textCitations = [];
        noteCitations = [];
        citationsInNote = {};
    }
    var update_items = [];
    for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
        citationByIndex[i].properties.index = i;
        for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
            item = citationByIndex[i].sortedItems[j];
            if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
                this.registry.citationreg.citationsByItemId[item[1].id] = [];
                update_items.push("" + item[1].id);
            }
            if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
                this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
            }
        }
        if (this.opt.update_mode === CSL.POSITION) {
            if (citationByIndex[i].properties.noteIndex) {
                noteCitations.push(citationByIndex[i]);
            } else {
                citationByIndex[i].properties.noteIndex = 0;
                textCitations.push(citationByIndex[i]);
            }
        }
    }
    //
    // update bibliography items here
    //
    if (flag !== CSL.ASSUME_ALL_ITEMS_REGISTERED) {
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** start update items *********");
        }
        //SNIP-END
        // true signals implicit updateItems (will not rerun sys.retrieveItem())
        this.updateItems(update_items, null, null, true);
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** endo update items *********");
        }
        //SNIP-END
    }

    if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
        for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
        }

        /* 
         * Grouped sort stuff (start)
         */

        if (this.opt.grouped_sort &&  !citation.properties.unsorted) {
            // Insert authorstring as key.
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                var sortkeys = sortedItems[i][1].sortkeys;
                this.tmp.authorstring_request = true;
                // Run getAmbiguousCite() with the current disambig
                // parameters, and pick up authorstring from the registry.
                var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
                
                this.tmp.authorstring_request = true;
                CSL.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
                var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
                this.tmp.authorstring_request = false;

                sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
            }

            sortedItems.sort(this.citation.srt.compareCompositeKeys);
            // Replace authorstring key in items with same (authorstring) with the 
            // keystring of first normal key. This forces grouped sorts,
            // as discussed here:
            // https://github.com/citation-style-language/schema/issues/40
            var lastauthor = false;
            var thiskey = false;
            var thisauthor = false;
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
                    thisauthor = sortedItems[i][1].sortkeys[0];
                    thiskey =  sortedItems[i][1].sortkeys[1];
                }
                sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
                lastauthor = thisauthor;
            }
        }
        /*
         * Grouped sort stuff (end)
         */

        if (!citation.properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
    }

    // evaluate parallels

    if (this.opt.parallel.enable) {
        this.parallel.StartCitation(citation.sortedItems);
    }

    var citations;
    if (this.opt.update_mode === CSL.POSITION) {
        for (var i = 0; i < 2; i += 1) {
            citations = [textCitations, noteCitations][i];
            var first_ref = {};
            var last_ref = {};
            var first_container_ref = {};
            for (j = 0, jlen = citations.length; j < jlen; j += 1) {
                var onecitation = citations[j];
                if (!citations[j].properties.noteIndex) {
                    citations[j].properties.noteIndex = 0;
                }
                citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
                if (j > 0 && citations[j - 1].properties.noteIndex > citations[j].properties.noteIndex) {
                    citationsInNote = {};
                    first_ref = {};
                    last_ref = {};
                    first_container_ref = {};
                }
                for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
                    if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                        continue;
                    }
                    if (!citationsInNote[onecitation.properties.noteIndex]) {
                        citationsInNote[onecitation.properties.noteIndex] = 1;
                    } else {
                        citationsInNote[onecitation.properties.noteIndex] += 1;
                    }
                }
                // Set the following:
                //
                // (1) position as required (as per current Zotero)
                // (2) first-reference-note-number as required (on onecitation item)
                // (3) near-note as required (on onecitation item, according to
                //     state.opt["near-note-distance"] parameter)
                // (4) state.registry.citationreg.citationsByItemId.
                //
                // Any state changes caused by unsetting or resetting should
                // trigger a single entry for the citations in
                // state.tmp.taintedCitationIDs (can block on presence of
                // state.registry.citationreg.citationsByItemId).
                //
                for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
                    item = citations[j].sortedItems[k];
                    // Okay ...
                    // We set up three IDs for use in position evaluation.
                    // item_id is the real Item.id
                    // first_id is the legislation_id or Item.id (so statutes backref to first in set, chapters to specific chapter)
                    // last_id is the legislation_id or container_id (so statute AND chapter distance is from any ref in set)
                    // (replaces myid)
                    var item_id = item[0].id;
                    var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
                    var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
                    var myxloc = item[1]["locator-extra"];
                    var mylocator = item[1].locator;
                    var mylabel = item[1].label;
                    var incitationid;
                    var incitationxloc;
                    if (k > 0) {
                        // incitationid is only reached in the else branch
                        // following "undefined" === typeof first_ref[myid]
                        // below
                        if (onecitation.sortedItems[k - 1][0].legislation_id) {
                            incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                        } else {
                            incitationid = onecitation.sortedItems[k - 1][1].id;
                            incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                            //if (onecitation.sortedItems[k-1][1].parallel === "last") {
                                for (var l=k-2; l>-1; l--) {
                                    if (onecitation.sortedItems[l][1].parallel === "first") {
                                        incitationid = onecitation.sortedItems[l][1].id;
                                        incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                                    }
                                }
                            //}
                        }
                    }
                    // Don't touch item data of other cites when previewing
                    if (flag === CSL.PREVIEW) {
                        if (onecitation.citationID != citation.citationID) {
                            if ("undefined" === typeof first_ref[item[1].id]) {
                                first_ref[first_id] = onecitation.properties.noteIndex;
                                last_ref[last_id] = onecitation.properties.noteIndex;
                            } else {
                                last_ref[last_id] = onecitation.properties.noteIndex;
                            }
                            continue;
                        }
                    }
                    var oldvalue = {};
                    oldvalue.position = item[1].position;
                    oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
                    oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
                    oldvalue["near-note"] = item[1]["near-note"];
                    item[1]["first-reference-note-number"] = 0;
                    item[1]["first-container-reference-note-number"] = 0;
                    item[1]["near-note"] = false;
                    if (this.registry.citationreg.citationsByItemId[item_id]) {
                        if (this.opt.xclass === 'note' && this.opt.has_disambiguate) {
                            var oldCount = this.registry.registry[item[0].id]["citation-count"];
                            var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                            this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                            if ("number" === typeof oldCount) {
                                var oldCountCheck = (oldCount < 2);
                                var newCountCheck = (newCount < 2);
                                if (oldCountCheck !== newCountCheck) {
                                    for (var l=0,llen=this.registry.citationreg.citationsByItemId[item_id].length;l<llen;l++) {
                                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                                    }
                                }
                            } else {
                                for (var l=0,llen=this.registry.citationreg.citationsByItemId[item_id].length;l<llen;l++) {
                                    rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                    this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                                }
                            }
                        }
                    }
                    var oldlastid;
                    var oldlastxloc;
                    
                    // Okay, chill.
                    // The first test needs to be for presence of last_ref[last_id]. Everything
                    // after in subsequent evaluation depends on that.

                    // HOWEVER, despite starting with this test, we need to catch every member
                    // of the set, and set its first-container-reference-note-number to point at the
                    // first.

                    // ALSO, despite starting with this test, we need to set first-reference-note-number
                    // on every item.
                    
                    // So ... we run an independent test on first_ref[first_id]], and let this ride.
                    
                    if ("undefined" === typeof last_ref[last_id] && onecitation.properties.mode !== "author-only") {
                        first_ref[first_id] = onecitation.properties.noteIndex;
                        last_ref[last_id] = onecitation.properties.noteIndex;
                        first_container_ref[last_id] = onecitation.properties.noteIndex;
                        item[1].position = CSL.POSITION_FIRST;
                    } else {
                        //
                        // backward-looking position evaluation happens here.
                        //
                        //
                        //
                        var ibidme = false;
                        var suprame = false;
                        var prevCitation = null;
                        if (j > 0) {
                            var prevCitation = citations[j-1];
                        }
                        var thisCitation = citations[j];
                        // XXX Ugly, but This is used in the second else-if branch condition below.
                        if (j > 0) {
                            var old_last_id_offset = 1;
                            if (prevCitation.properties.mode === "author-only" && j > 1) {
                                old_last_id_offset = 2;
                            }
                            var adjusted_offset = (j - old_last_id_offset);
                            if (citations[adjusted_offset].sortedItems.length) {
                                oldlastid =  citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                                oldlastxloc =  citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                            }
                            if (prevCitation.sortedItems.length) {
                                if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                                    oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                                }
                            }
                        }
                        if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                            // Case 1: source in previous onecitation
                            // (1) Threshold conditions
                            //     (a) there must be a previous onecitation with one item
                            //     (b) this item must be the first in this onecitation
                            //     (c) the previous onecitation must contain a reference
                            //         to the same item ...
                            //     (d) the note numbers must be the same or consecutive.
                            // (this has some jiggery-pokery in it for parallels)
                            var useme = false;
                            // XXX Can oldid be equated with oldlastid, I wonder ...
                            var oldid = prevCitation.sortedItems[0][0].id;
                            if (prevCitation.sortedItems[0][0].legislation_id) {
                                oldid = prevCitation.sortedItems[0][0].legislation_id;
                            }
                            if ((oldid  == first_id && prevCitation.properties.noteIndex >= (thisCitation.properties.noteIndex - 1))) {
                                var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                                var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                                if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                                    useme = true;
                                }
                            }
                            if (useme) {
                                ibidme = true;
                            } else {
                                suprame = true;
                            }
                        } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                            // Case 2: immediately preceding source in this onecitation
                            // (1) Threshold conditions
                            //     (a) there must be an imediately preceding reference to  the
                            //         same item in this onecitation; and
                            ibidme = true;
                        } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex
                                   && prevCitation.sortedItems.length 
                                   && oldlastid == first_id && oldlastxloc == myxloc) {
                            // ... in case there are separate citations in the same note ...
                            // Case 2 [take 2]: immediately preceding source in this onecitation
                            // (1) Threshold conditions
                            //     (a) there must be an imediately preceding reference to  the
                            //         same item in this onecitation; and
                            ibidme = true;
                        } else {
                            // everything else is definitely subsequent
                            suprame = true;
                        }
                        // conditions
                        var prev, prev_locator, prev_label, curr_locator, curr_label;
                        if (ibidme) {
                            if (k > 0) {
                                prev = onecitation.sortedItems[(k - 1)][1];
                            } else {
                                prev = citations[(j - 1)].sortedItems[0][1];
                            }
                            if (prev.locator) {
                                if (prev.label) {
                                    prev_label = prev.label;
                                } else {
                                    prev_label = "";
                                }
                                prev_locator = "" + prev.locator + prev_label;
                            } else {
                                prev_locator = prev.locator;
                            }
                            if (mylocator) {
                                if (mylabel) {
                                    curr_label = mylabel;
                                } else {
                                    curr_label = "";
                                }
                                curr_locator = "" + mylocator + curr_label;
                            } else {
                                curr_locator = mylocator;
                            }
                        }
                        // triage
                        if (ibidme && prev_locator && !curr_locator) {
                            ibidme = false;
                            suprame = true;

                        }
                        if (ibidme) {
                            if (!prev_locator && curr_locator) {
                                //     (a) if the previous onecitation had no locator
                                //         and this onecitation has one, use ibid+pages
                                item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;
                            } else if (!prev_locator && !curr_locator) {
                                //     (b) if the previous onecitation had no locator
                                //         and this onecitation also has none, use ibid
                                item[1].position = CSL.POSITION_IBID;
                                //print("setting ibid in cmd_cite()");
                            } else if (prev_locator && curr_locator === prev_locator) {
                                //     (c) if the previous onecitation had a locator
                                //         (page number, etc.) and this onecitation has
                                //         a locator that is identical, use ibid

                                item[1].position = CSL.POSITION_IBID;
                                //print("setting ibid in cmd_cite() [2]");
                            } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                                //     (d) if the previous onecitation had a locator,
                                //         and this onecitation has one that differs,
                                //         use ibid+pages
                                item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;
                            } else {
                                //     (e) if the previous onecitation had a locator
                                //         and this onecitation has none, use subsequent
                                //
                                //     ... and everything else would be subsequent also
                                ibidme = false; // just to be clear
                                suprame = true;
                            }
                        }
                        if (suprame) {
                            item[1].position = CSL.POSITION_CONTAINER_SUBSEQUENT;
                            if (first_ref[first_id]) {
                                item[1].position = CSL.POSITION_SUBSEQUENT;
                            }
                            if (!first_ref[first_id]) {
                                first_ref[first_id] = onecitation.properties.noteIndex;
                            }
                        }
                        if (suprame || ibidme) {
                            if (onecitation.properties.mode === "author-only") {
                                item[1].position = CSL.POSITION_FIRST;
                            }
                            if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                                item[1]['first-container-reference-note-number'] = first_container_ref[last_id];
                                if (this.registry.registry[item[0].id]) {
                                    this.registry.registry[item[0].id]['first-container-reference-note-number'] = first_container_ref[last_id];
                                }
                            }
                            if (first_ref[first_id] != onecitation.properties.noteIndex) {
                                item[1]["first-reference-note-number"] = first_ref[first_id];
                                if (this.registry.registry[item[0].id]) {
                                    // This is either the earliest recorded number, or the number of the current citation, whichever is smaller.
                                    /*
                                    var oldFirst = this.registry.citationreg.citationsByItemId[item_id][0].properties.noteIndex;
                                    var newFirst = onecitation.properties.noteIndex;
                                    this.registry.registry[item[0].id]['first-reference-note-number'] = newFirst < oldFirst ? newFirst: oldFirst;
                                     */
                                    // Try this instead?
                                    this.registry.registry[item[0].id]['first-reference-note-number'] = first_ref[first_id];
                                }
                            }
                        }
                    }
                    if (onecitation.properties.noteIndex) {
                        var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                        if (item[1].position !== CSL.POSITION_FIRST 
                            && note_distance <= this.citation.opt["near-note-distance"]) {
                            item[1]["near-note"] = true;
                        }
                        last_ref[last_id] = onecitation.properties.noteIndex;
                    }
                    if (onecitation.citationID != citation.citationID) {
                        for (n = 0, nlen = CSL.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                            var param = CSL.POSITION_TEST_VARS[n];
                            if (item[1][param] !== oldvalue[param]) {
                                if (this.registry.registry[item[0].id]) {
                                    if (param === 'first-reference-note-number') {
                                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                        this.tmp.taintedItemIDs[item[0].id] = true;
                                    }
                                }
                                this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                            }
                        }
                    }
                    if (this.sys.variableWrapper) {
                        item[1].index = onecitation.properties.index;
                        item[1].noteIndex = onecitation.properties.noteIndex;
                    }
                }
            }
        }
    }
    if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
        if (!citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
    }
    for (var key in this.tmp.taintedItemIDs) {
        if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
            citations = this.registry.citationreg.citationsByItemId[key];
            // Current citation may be tainted but will not exist
            // during previewing.
            if (citations) {
                for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
                    this.tmp.taintedCitationIDs[citations[i].citationID] = true;
                }
            }
        }
    }

    var ret = [];
    if (flag === CSL.PREVIEW) {
        // If previewing, return only a rendered string
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** start run processor *********");
        }
        //SNIP-END
        try {
            ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
        } catch (e) {
            CSL.error("Error running CSL processor for preview: "+e);
        }
            
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** end run processor *********");
            CSL.debug("****** start state restore *********");
        }
        //SNIP-END
        // Wind out anything related to new items added for the preview.
        // This means (1) names, (2) disambig state for affected items,
        // (3) keys registered in the ambigs pool arrays, and (4) registry
        // items.
        //

        // restore sliced citations
        this.registry.citationreg.citationByIndex = oldCitationList;
        this.registry.citationreg.citationById = {};
        for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
            this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
        }

        //SNIP-START
        if (this.debug) {
            CSL.debug("****** start final update *********");
        }
        //SNIP-END
        var oldItemIds = [];
        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            oldItemIds.push("" + oldItemList[i].id);
        }
        this.updateItems(oldItemIds, null, null, true);
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** end final update *********");
        }
        //SNIP-END
        // Roll back disambig states
        for (var key in oldAmbigs) {
            if (oldAmbigs.hasOwnProperty(key)) {
                this.registry.registry[key].disambig = oldAmbigs[key];
            }
        }
        //SNIP-START
        if (this.debug) {
            CSL.debug("****** end state restore *********");
        }
        //SNIP-END
    } else {
        // Rerun cites that have moved across citations or had a change
        // in their number of subsequent references, so that disambiguate
        // and subsequent-reference-count conditions are applied
        // correctly in output.
        for (var rerunAkey in rerunAkeys) {
            this.disambiguate.run(rerunAkey, citation);
        }
        // Run taints only if not previewing
        //
        // Push taints to the return object
        //
        var obj;
        for (var key in this.tmp.taintedCitationIDs) {
            if (key == citation.citationID) {
                continue;
            }
            var mycitation = this.registry.citationreg.citationById[key];
            if (!mycitation.properties.unsorted) {
                for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
                    mycitation.sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
                }
                mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
            }
            // For error reporting
            this.tmp.citation_pos = mycitation.properties.index;
            this.tmp.citation_note_index = mycitation.properties.noteIndex;
            this.tmp.citation_id = "" + mycitation.citationID;
            obj = [];
            obj.push(mycitation.properties.index);
            obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
            obj.push(mycitation.citationID);
            ret.push(obj);
        }
        this.tmp.taintedItemIDs = {};
        this.tmp.taintedCitationIDs = {};

        // For error reporting again
        this.tmp.citation_pos = citation.properties.index;
        this.tmp.citation_note_index = citation.properties.noteIndex;
        this.tmp.citation_id = "" + citation.citationID;

        obj = [];
        obj.push(citationsPre.length);
        obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
        obj.push(citation.citationID);
        ret.push(obj);
        //
        // note for posterity: Rhino and Spidermonkey produce different
        // sort results for items with matching keys.  That discrepancy
        // turned up a subtle bug in the parallel detection code, trapped
        // at line 266, above, and in line 94 of util_parallel.js.
        //
        ret.sort(function (a, b) {
            if (a[0] > b[0]) {
                return 1;
            } else if (a[0] < b[0]) {
                return -1;
            } else {
                return 0;
            }
        });
        //
        // In normal rendering, return is a list of two-part arrays, with the first element
        // a citation index number, and the second the text to be inserted.
        //
    }
    this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
    return [this.registry.return_data, ret];
};

CSL.Engine.prototype.process_CitationCluster = function (sortedItems, citation) {
    var str = "";
    if (citation && citation.properties && citation.properties.mode === "composite") {
        citation.properties.mode = "author-only";
        var firstChunk = CSL.getCitationCluster.call(this, sortedItems, citation);
        citation.properties.mode = "suppress-author";
        var secondChunk = "";
        if (citation.properties.infix) {
            this.output.append(citation.properties.infix);
            secondChunk = this.output.string(this, this.output.queue);
            // Had no idea this could return a single-element array! Go figure.
            if ("object" === typeof secondChunk) {
                secondChunk = secondChunk.join("");
            }
        }
        var thirdChunk = CSL.getCitationCluster.call(this, sortedItems, citation);
        citation.properties.mode = "composite";
        if (firstChunk && secondChunk && CSL.SWAPPING_PUNCTUATION.concat(["\u2019", "\'"]).indexOf(secondChunk[0]) > -1) {
            firstChunk += secondChunk;
            secondChunk = false;
        }
        str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
            return obj;
        }).join(" ");
    } else {
        str = CSL.getCitationCluster.call(this, sortedItems, citation);
    }
    return str;
};

CSL.Engine.prototype.makeCitationCluster = function (rawList) {
    var inputList, newitem, str, pos, len, item, Item;
    inputList = [];
    len = rawList.length;
    for (pos = 0; pos < len; pos += 1) {
        item = {};
        for (var key in rawList[pos]) {
            item[key] = rawList[pos][key];
        }
        Item = this.retrieveItem("" + item.id);
        // Code block is copied from processCitationCluster() above
        if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {
                var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);
                if (m) {
                    var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];
                    if (this.getTerm(tryLabel)) {
                        item.label = tryLabel;
                        item.locator = m[3];
                    }
                }
            }
        }
        if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, '');
        }
        newitem = [Item, item];
        inputList.push(newitem);
    }
    if (this.opt.development_extensions.consolidate_legal_items) {
        this.remapSectionVariable(inputList);
    }
    if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
        len = inputList.length;
        for (pos = 0; pos < len; pos += 1) {
            inputList[pos][1].sortkeys = CSL.getSortKeys.call(this, inputList[pos][0], "citation_sort");
        }
        inputList.sort(this.citation.srt.compareCompositeKeys);
    }
    this.tmp.citation_errors = [];
    var str = CSL.getCitationCluster.call(this, inputList);
    return str;
};


/**
 * Get the undisambiguated version of a cite, without decorations
 * <p>This is used internally by the Registry.</p>
 *
 * [object] CSL Item
 * [object] disambiguation parameters
 * [boolean] If true, include first-reference-note-number value in cite
 */
CSL.getAmbiguousCite = function (Item, disambig, visualForm, item) {
    var ret;
    var flags = this.tmp.group_context.tip;
    var oldTermSiblingLayer = {
        term_intended: flags.term_intended,
        variable_attempt: flags.variable_attempt,
        variable_success: flags.variable_success,
        output_tip: flags.output_tip,
        label_form: flags.label_form,
        non_parallel: flags.non_parallel,
        parallel_last: flags.parallel_last,
        parallel_first: flags.parallel_first,
        parallel_last_override: flags.parallel_last_override,
        parallel_delimiter_override: flags.parallel_delimiter_override,
        parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
        condition: flags.condition,
        force_suppress: flags.force_suppress,
        done_vars: flags.done_vars.slice()
    };
    if (disambig) {
        this.tmp.disambig_request = disambig;
    } else {
        this.tmp.disambig_request = false;
    }
    var itemSupp = {
        position: CSL.POSITION_SUBSEQUENT,
        "near-note": true
    };

    if (item) {
        itemSupp.locator = item.locator;
        itemSupp.label = item.label;
    }

    if (this.registry.registry[Item.id] 
        && this.registry.citationreg.citationsByItemId
        && this.registry.citationreg.citationsByItemId[Item.id]
        && this.registry.citationreg.citationsByItemId[Item.id].length 
        && visualForm) {
        if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            itemSupp['first-reference-note-number'] = this.registry.registry[Item.id]['first-reference-note-number'];
        }
    }
    this.tmp.area = "citation";
    this.tmp.root = "citation";
    var origSuppressDecorations = this.tmp.suppress_decorations;
    this.tmp.suppress_decorations = true;
    this.tmp.just_looking = true;

    CSL.getCite.call(this, Item, itemSupp, null, false);
    // !!!
    for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {
        CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
    }
    if (this.opt.development_extensions.clean_up_csl_flaws) {
        for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.output.adjust.fix(this.output.queue[j]);
        }
    }
    var ret = this.output.string(this, this.output.queue);
    this.tmp.just_looking = false;
    this.tmp.suppress_decorations = origSuppressDecorations;
    // Cache the result.
    this.tmp.group_context.replace(oldTermSiblingLayer);
    return ret;
};

/**
 * Return delimiter for use in join
 * <p>Splice evaluation is done during cite
 * rendering, and this method returns the
 * result.  Evaluation requires three items
 * of information from the preceding cite, if
 * one is present: the names used; the years
 * used; and the suffix appended to the
 * citation.  These details are copied into
 * the state object before processing begins,
 * and are cleared by the processor on
 * completion of the run.</p>
 */

CSL.getSpliceDelimiter = function (last_locator, last_collapsed, pos) {
    //print(pos +  " after-collapse-delimiter="+this.citation.opt["after-collapse-delimiter"] + "\n  cite_group_delimiter=" + this.tmp.use_cite_group_delimiter + "\n  last_collapsed=" +last_collapsed + "\n  have_collapsed=" +this.tmp.have_collapsed + "\n  last_locator=" + last_locator)
    if (undefined !== this.citation.opt["after-collapse-delimiter"]) {
        if (last_locator) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else if (last_collapsed && !this.tmp.have_collapsed) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else {
            this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
        }
    } else if (this.tmp.use_cite_group_delimiter) {
        this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
    } else {
        if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL.NUMERIC) {
            this.tmp.splice_delimiter = ", ";
        } else if (this.tmp.cite_locales[pos - 1]) {
            //
            // Must have a value to take effect.  Use zero width space to force empty delimiter.
            var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
            if (alt_affixes && alt_affixes.delimiter) {
                this.tmp.splice_delimiter = alt_affixes.delimiter;
            }
        } else if (!this.tmp.splice_delimiter) {
            // This happens when no delimiter is set on cs:layout under cs:citation
            this.tmp.splice_delimiter = "";
        }
    }

/*
    if (last_locator && "string" === typeof this.citation.opt["after-collapse-delimiter"]) {
        this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
    } else if (last_collapsed && !this.tmp.have_collapsed && "string" === typeof this.citation.opt["after-collapse-delimiter"]) {
        this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
    } else if (!last_collapsed && !this.tmp.have_collapsed && "string" === typeof this.citation.opt["after-collapse-delimiter"] && !this.citation.opt.collapse === "year-suffix") {
        this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
    } else if (this.tmp.use_cite_group_delimiter) {
        this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
    } else if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL.NUMERIC) {
        this.tmp.splice_delimiter = ", ";
    } else if (this.tmp.cite_locales[pos - 1]) {
        //
        // Must have a value to take effect.  Use zero width space to force empty delimiter.
        var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
        if (alt_affixes && alt_affixes.delimiter) {
            this.tmp.splice_delimiter = alt_affixes.delimiter;
        }
    } else if (!this.tmp.splice_delimiter) {
        // This happens when no delimiter is set on cs:layout under cs:citation
        this.tmp.splice_delimiter = "";
    }
*/
    // Paranoia
    //if (!this.tmp.splice_delimiter) {
    //    this.tmp.splice_delimiter = "";
    //}
    return this.tmp.splice_delimiter;
};

/*
 * Compose individual cites into a single string, with
 * flexible inter-cite splicing.
 */
CSL.getCitationCluster = function (inputList, citation) {
    var result, objects, myparams, len, pos, item, last_collapsed, params, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
    var citation_prefix = "";
    this.output.checkNestedBrace = new CSL.checkNestedBrace(this);
    if (citation) {
        citationID = citation.citationID;
        authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
        if (this.opt.xclass !== "note") {
            suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
        }
        if (citation.properties.prefix) {
            citation_prefix = CSL.checkPrefixSpaceAppend(this, citation.properties.prefix);
        }
    }
    inputList = inputList ? inputList : [];
    this.tmp.last_primary_names_string = false;
    txt_esc = CSL.getSafeEscape(this);
    this.tmp.area = "citation";
    this.tmp.root = "citation";
    result = "";
    objects = [];
    this.tmp.last_suffix_used = "";
    this.tmp.last_names_used = [];
    this.tmp.last_years_used = [];
    this.tmp.backref_index = [];
    this.tmp.cite_locales = [];
    if (!this.tmp.just_looking) {
        this.tmp.abbrev_trimmer = {
            QUASHES: {}
        };
    }

    var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
    //var use_layout_prefix = this.citation.opt.layout_prefix;

    var suppressTrailingPunctuation = false;
    if (this.citation.opt.suppressTrailingPunctuation) {
        suppressTrailingPunctuation = true;
    }
    if (citationID) {
        //this.registry.citationreg.citationById[citationID].properties.backref_index = false;
        //this.registry.citationreg.citationById[citationID].properties.backref_citation = false;
        if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
            suppressTrailingPunctuation = true;
        }
    }

    // Adjust locator positions if that looks like a sensible thing to do.
    if (this.opt.xclass === "note") {
        var parasets = [];
        var lastTitle = false;
        var lastID = false;
        var lst = [];
        for (var i=0, ilen = inputList.length; i < ilen; i += 1) {
            var type = inputList[i][0].type;
            var title = inputList[i][0].title;
            var position = inputList[i][1].position;
            var id = inputList[i][0].id;
            if (title && type === "legal_case" && id !== lastID && position) {
                // Start a fresh sublist if the item title does not match the last one
                if (title !== lastTitle || parasets.length === 0) {
                    lst = [];
                    parasets.push(lst);
                }
                lst.push(inputList[i][1]);
            }
            lastTitle = title;
            lastID = id;
        }
        // We now have a list of sublists, each w/matching titles
        for (i=0, ilen=parasets.length; i < ilen; i += 1) {
            lst = parasets[i];
            if (lst.length < 2) {
                continue;
            }
            // Get the locator in last position, but only if it's the only one in the set.
            var locatorInLastPosition = lst.slice(-1)[0].locator;
            if (locatorInLastPosition) {
                for (var j=0, jlen=lst.length - 1; j < jlen; j += 1) {
                    if (lst[j].locator) {
                        locatorInLastPosition = false;
                    }
                }
            }
            // move the locator here, if it's called for.
            if (locatorInLastPosition) {
                lst[0].locator = locatorInLastPosition;
                delete lst.slice(-1)[0].locator;
                lst[0].label = lst.slice(-1)[0].label;
                if (lst.slice(-1)[0].label) {
                    delete lst.slice(-1)[0].label;
                }
            }
       }
    }
    myparams = [];
    len = inputList.length;
    if (inputList[0] && inputList[0][1]) {
        if (authorOnly) {
            delete inputList[0][1]["suppress-author"];
            inputList[0][1]["author-only"] = true;
        } else if (suppressAuthor) {
            delete inputList[0][1]["author-only"];
            inputList[0][1]["suppress-author"] = true;
        }
    }
    if (this.opt.parallel.enable) {
        this.parallel.StartCitation(inputList);
    }
    for (pos = 0; pos < len; pos += 1) {

        // Also for parallels only
        this.tmp.cite_index = pos;

        Item = inputList[pos][0];
        item = inputList[pos][1];
        item = CSL.parseLocator.call(this, item);
        last_collapsed = this.tmp.have_collapsed;
        var last_locator = false;
        if (pos > 0 && inputList[pos-1][1]) {
            last_locator = !!inputList[pos-1][1].locator;
        }
        params = {};
        
        // Reset shadow_numbers here, suppress reset in getCite()
        this.tmp.shadow_numbers = {};
        if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
            var output = this.output;
            this.output = new CSL.Output.Queue(this);
            this.output.adjust = new CSL.Output.Queue.adjust();
            CSL.getAmbiguousCite.call(this, Item, null, false, item);
            this.output = output;
        }

        this.tmp.in_cite_predecessor = false;
        // true is to block reset of shadow numbers
        
        
        if (pos > 0) {
            CSL.getCite.call(this, Item, item, "" + inputList[(pos - 1)][0].id, true);
        } else {
            this.tmp.term_predecessor = false;
            CSL.getCite.call(this, Item, item, null, true);
        }

        // Make a note of any errors
        if (!this.tmp.cite_renders_content) {
            error_object = {
                citationID: "" + this.tmp.citation_id,
                index: this.tmp.citation_pos,
                noteIndex: this.tmp.citation_note_index,
                itemID: "" + Item.id,
                citationItems_pos: pos,
                error_code: CSL.ERROR_NO_RENDERED_FORM
            };
            this.tmp.citation_errors.push(error_object);
        }
        params.splice_delimiter = CSL.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
        // XXX This appears to be superfluous.
        if (item && item["author-only"]) {
            this.tmp.suppress_decorations = true;
        }

        if (pos > 0) {
            preceding_item = inputList[pos - 1][1];

            // XXX OR if preceding suffix is empty, and the current prefix begins with a full stop.

            var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
            var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
            if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
                var spaceidx = params.splice_delimiter.indexOf(" ");
                if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
                    params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
                } else {
                    params.splice_delimiter = "";
                }
            }
        }
        params.suppress_decorations = this.tmp.suppress_decorations;
        params.have_collapsed = this.tmp.have_collapsed;
        //
        // XXXXX: capture parameters to an array, which
        // will be of the same length as this.output.queue,
        // corresponding to each element.
        //
        myparams.push(params);
        if (item["author-only"]) {
            break;
        }
    }
    myblobs = this.output.queue.slice();

    var citation_suffix = "";
    if (citation) {
        citation_suffix = CSL.checkSuffixSpacePrepend(this, citation.properties.suffix);
    }
    var suffix = this.citation.opt.layout_suffix;
    var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
    //
    // Must have a value to take effect.  Use zero width space to force empty suffix.
    if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
        suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
    }
    if (CSL.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
        suffix = suffix.slice(0, 1);
    }
    //print("=== FROM CITE ===");
    suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);


    for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {
        CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
    }
    if (!this.tmp.suppress_decorations && this.output.queue.length) {
        if (!(this.opt.development_extensions.apply_citation_wrapper
              && this.sys.wrapCitationEntry
               && !this.tmp.just_looking
              && this.tmp.area === "citation")) { 

            if (!suppressTrailingPunctuation) {
                this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
            }
            this.output.queue[0].strings.prefix = use_layout_prefix;
        }
    }
    if (this.opt.development_extensions.clean_up_csl_flaws) {
        for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
            //print("OUTPUT[5]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
            this.output.adjust.upward(this.output.queue[j]);
            //print("OUTPUT[4]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
            this.output.adjust.leftward(this.output.queue[j]);
            //print("OUTPUT[3]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
            this.output.adjust.downward(this.output.queue[j]);
            //print("OUTPUT[2]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
            this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
            //print("OUTPUT[1]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations','num'],2))
        }
    }
    //print("this.tmp.last_chr="+this.tmp.last_chr);
    for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
        var buffer = [];
        this.output.queue = [myblobs[pos]];
        this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
        this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
        //
        // oh, one last second thought on delimiters ...
        //

        if (myblobs[pos].parallel_delimiter) {
            this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
        }
        this.tmp.have_collapsed = myparams[pos].have_collapsed;

        composite = this.output.string(this, this.output.queue);

        this.tmp.suppress_decorations = false;
        // meaningless assignment
        // this.tmp.handle_ranges = false;
        if ("string" === typeof composite) {
            this.tmp.suppress_decorations = false;
            if (!composite) {
                if (this.opt.development_extensions.throw_on_empty) {
                    CSL.error("Citation would render no content");
                } else {
                    composite = "[NO_PRINTED_FORM]";
                }
            }
            return composite;
        }
        if ("object" === typeof composite && composite.length === 0 && !item["suppress-author"]) {
            if (pos === 0) {
                var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
                var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
                var sufStr = pos === (myblobs.length - 1) ? txt_esc(this.citation.opt.layout_suffix) : "";
                composite.push(preStr + errStr + sufStr);
            } else if (pos === myblobs.length - 1) {
                var tmpobj = objects[objects.length - 1];
                if (typeof tmpobj === "string") {
                    objects[objects.length -1] += (txt_esc(this.citation.opt.layout_suffix));
                } else if (typeof tmpobj === "object") {
                    tmpobj.strings.suffix += (txt_esc(this.citation.opt.layout_suffix));
                }
            }
        }
        if (buffer.length && "string" === typeof composite[0]) {
            composite.reverse();
            var tmpstr = composite.pop();
            if (tmpstr && tmpstr.slice(0, 1) === ",") {
                buffer.push(tmpstr);
            } else if ("string" == typeof buffer.slice(-1)[0] && buffer.slice(-1)[0].slice(-1) === ",") {
                buffer.push(" " + tmpstr);
            } else if (tmpstr) {
                buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
            }
        } else {
            composite.reverse();
            compie = composite.pop();
            if ("undefined" !== typeof compie) {
                if (buffer.length && "string" === typeof buffer[buffer.length - 1]) {
                    buffer[buffer.length - 1] += compie.successor_prefix;
                }
                buffer.push(compie);
            }
        }
        // Seems odd, but this was unnecessary and broken.
        //composite.reverse();
        llen = composite.length;
        for (ppos = 0; ppos < llen; ppos += 1) {
            obj = composite[ppos];
            if ("string" === typeof obj) {
                buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
                continue;
            }
            compie = composite.pop();
            if ("undefined" !== typeof compie) {
                buffer.push(compie);
            }
        }
        if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) ;
        if (buffer.length > 1 && typeof buffer[0] !== "string") {
            buffer = [this.output.renderBlobs(buffer)];
        }
        if (buffer.length) {
            if ("string" === typeof buffer[0]) {
                if (pos > 0) {
                    buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
                }
            } else {
                if (pos > 0) {
                    buffer[0].splice_prefix = this.tmp.splice_delimiter;
                } else {
                    buffer[0].splice_prefix = "";
                }
            }
        }
        objects = objects.concat(buffer);
    }
    // print("OBJECTS="+objects);
    result += this.output.renderBlobs(objects);

    if (result) {
        //if (CSL.TERMINAL_PUNCTUATION.indexOf(this.tmp.last_chr) > -1 
        //    && this.tmp.last_chr === use_layout_suffix.slice(0, 1)) {
        //    use_layout_suffix = use_layout_suffix.slice(1);
        //}
        if (!this.tmp.suppress_decorations) {
            len = this.citation.opt.layout_decorations.length;
            for (pos = 0; pos < len; pos += 1) {
                params = this.citation.opt.layout_decorations[pos];
                // The "normal" formats in some output modes expect
                // a superior nested decoration environment, and
                // so should produce no output here.
                if (params[1] === "normal") {
                    continue;
                }
                if (!item || !item["author-only"]) {
                    result = this.fun.decorate[params[0]][params[1]](this, result);
                }
            }
        }
    }
    this.tmp.suppress_decorations = false;
    if (!result) {
        if (this.opt.development_extensions.throw_on_empty) {
            CSL.error("Citation would render no content");
        } else {
            result = "[NO_PRINTED_FORM]";
        }
    }
    return result;
};

/*
 * Render a single cite item.
 *
 * This is called on the state object, with a single
 * Item as input.  It iterates exactly once over the style
 * citation tokens, and leaves the result of rendering in
 * the top-level list in the relevant *.opt.output
 * stack, as a list item consisting of a single string.
 *
 * (This is dual-purposed for generating individual
 * entries in a bibliography.)
 */
CSL.getCite = function (Item, item, prevItemID, blockShadowNumberReset) {
    var next, error_object;
    var areaOrig = this.tmp.area;
    if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
            this.tmp.area = "intext";
    }
    this.tmp.cite_renders_content = false;
    this.tmp.probably_rendered_something = false;
    this.tmp.prevItemID = prevItemID;

    CSL.citeStart.call(this, Item, item, blockShadowNumberReset);
    next = 0;
    this.tmp.name_node = {};
    this.nameOutput = new CSL.NameOutput(this, Item, item);

    // rerun?
    while (next < this[this.tmp.area].tokens.length) {
        next = CSL.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
    }

    CSL.citeEnd.call(this, Item, item);
    // Odd place for this, but it seems to fit here
    if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
        if (this.tmp.area === "bibliography") {
            error_object = {
                index: this.tmp.bibliography_pos,
                itemID: "" + Item.id,
                error_code: CSL.ERROR_NO_RENDERED_FORM
            };
            this.tmp.bibliography_errors.push(error_object);
        }
    }
    this.tmp.area = areaOrig;
    return "" + Item.id;
};


CSL.citeStart = function (Item, item, blockShadowNumberReset) {
    this.tmp.lang_array = [];
    if (Item.language) {
        // Guard against garbage locales in user input
        var m = Item.language.match(/^([a-zA-Z]+).*/);
        if (m) {
            this.tmp.lang_array.push(m[1].toLowerCase());
        }
    }
    this.tmp.lang_array.push(this.opt.lang);
    if (!blockShadowNumberReset) {
        this.tmp.shadow_numbers = {};
    }
    
    this.tmp.disambiguate_count = 0;
    this.tmp.disambiguate_maxMax = 0;
    this.tmp.same_author_as_previous_cite = false;
    if (!this.tmp.suppress_decorations) {
        this.tmp.subsequent_author_substitute_ok = true;
    } else {
        this.tmp.subsequent_author_substitute_ok = false;
    }
    this.tmp.lastchr = "";
    if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
        //this.tmp.have_collapsed = "year";
        this.tmp.have_collapsed = true;
    } else {
        this.tmp.have_collapsed = false;
    }
    this.tmp.render_seen = false;
    if (this.tmp.disambig_request  && ! this.tmp.disambig_override) {
        this.tmp.disambig_settings = this.tmp.disambig_request;
    } else if (this.registry.registry[Item.id] && ! this.tmp.disambig_override) {
        this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
        this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
    } else {
        this.tmp.disambig_settings = new CSL.AmbigConfig();
    }
    if (this.tmp.area !== 'citation') {
        if (!this.registry.registry[Item.id]) {
            this.tmp.disambig_restore = new CSL.AmbigConfig();
        } else {
            this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
            if (this.tmp.area === 'bibliography' && this.tmp.disambig_settings && this.tmp.disambig_override) {
                if (this.opt["disambiguate-add-names"]) {
                    this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
                    if (this.tmp.disambig_request) {
                        this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
                    }
                }
                if (this.opt["disambiguate-add-givenname"]) {
                    // This is weird and delicate and not fully understood
                    this.tmp.disambig_request = this.tmp.disambig_settings;
                    this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
                    this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
                    for (var i=0,ilen=this.tmp.disambig_settings.givens.length;i<ilen;i+=1) {
                        this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                    }
                    for (var i=0,ilen=this.tmp.disambig_request.givens.length;i<ilen;i+=1) {
                        this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                    }
                }
            }
        }
    }

    this.tmp.names_used = [];
    this.tmp.nameset_counter = 0;
    this.tmp.years_used = [];
    this.tmp.names_max.clear();
    if (!this.tmp.just_looking) {
        if (!item || item.parallel === "first" || !item.parallel) {
            this.tmp.abbrev_trimmer = {
                QUASHES: {}
            };
        }
    }

    this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
    //this.tmp.splice_delimiter = this[this.tmp.area].opt.delimiter;

    this.bibliography_sort.keys = [];
    this.citation_sort.keys = [];

    this.tmp.has_done_year_suffix = false;
    this.tmp.last_cite_locale = false;
    // SAVE PARAMETERS HERE, IF APPROPRIATE
    // (promiscuous addition of global parameters => death by a thousand cuts)
    if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
        this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
    }
    // XXX This only applied to the "number" variable itself? Huh?
    //this.setNumberLabels(Item);
    this.tmp.first_name_string = false;
    this.tmp.authority_stop_last = 0;
};

CSL.citeEnd = function (Item, item) {
    // RESTORE PARAMETERS IF APPROPRIATE
    if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
        this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
        this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
        for (var i=0,ilen=this.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {
            this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
        }
    }
    this.tmp.disambig_restore = false;

    if (item && item.suffix) {
        //this.tmp.last_suffix_used = this.tmp.suffix.value();
        this.tmp.last_suffix_used = item.suffix;
    } else {
        this.tmp.last_suffix_used = "";
    }
    this.tmp.last_years_used = this.tmp.years_used.slice();
    this.tmp.last_names_used = this.tmp.names_used.slice();
    this.tmp.cut_var = false;

    // This is a hack, in a way; I have lost track of where
    // the disambig (name rendering) settings used for rendering work their way
    // into the registry.  This resets defaults to the subsequent form,
    // when first cites are rendered.
    //if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
    //    this.registry.registry[Item.id].disambig = this.tmp.disambig_restore;
    //}
    //this.tmp.disambig_restore = false;
    this.tmp.disambig_request = false;

    this.tmp.cite_locales.push(this.tmp.last_cite_locale);

    if (this.tmp.issued_date && this.tmp.renders_collection_number) {
        var buf = [];
        for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
            buf.push(this.tmp.issued_date.list.pop());
        }
        // Throw away the unwanted blob
        this.tmp.issued_date.list.pop();
        // Put the other stuff back
        for (i = buf.length - 1; i > -1; i += -1) {
            this.tmp.issued_date.list.push(buf.pop());
        }
    }
    this.tmp.issued_date = false;
    this.tmp.renders_collection_number = false;

};

/*global CSL: true */

CSL.Engine.prototype.makeBibliography = function (bibsection) {
    var debug, ret, params, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
    debug = false;
    if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
        bibsection = {
            exclude: []
        };
        if (this.bibliography.opt.exclude_types) {
            for (var i in this.bibliography.opt.exclude_types) {
                var val = this.bibliography.opt.exclude_types[i];
                bibsection.exclude.push({
                    field: "type",
                    value: val
                });
            }
        }
        if (this.bibliography.opt.exclude_with_fields) {
            for (var i in this.bibliography.opt.exclude_with_fields) {
                var field = this.bibliography.opt.exclude_with_fields[i];
                bibsection.exclude.push({
                    field: field, value: true
                });
            }
        }
    }
    // API change: added in version 1.0.51
    if (!this.bibliography.tokens.length) {
        return false;
    }
    if ("string" === typeof bibsection) {
        this.opt.citation_number_slug = bibsection;
        bibsection = false;
    }
    //SNIP-START
    if (debug) {
        len = this.bibliography.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
            tok = this.bibliography.tokens[pos];
            CSL.debug("bibtok: " + tok.name);
        }
        CSL.debug("---");
        len = this.citation.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
            tokk = this.citation.tokens[pos];
            CSL.debug("cittok: " + tok.name);
        }
        CSL.debug("---");
        len = this.bibliography_sort.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
            tokkk = this.bibliography_sort.tokens[pos];
            CSL.debug("bibsorttok: " + tok.name);
        }
    }
    //SNIP-END

    // For paged returns
    ret = CSL.getBibliographyEntries.call(this, bibsection);
    entry_ids = ret[0];
    entry_strings = ret[1];

    // For paged returns
    var done = ret[2];

    params = {
        "maxoffset": 0,
        "entryspacing": this.bibliography.opt["entry-spacing"],
        "linespacing": this.bibliography.opt["line-spacing"],
        "second-field-align": false,
        "entry_ids": entry_ids,
        "bibliography_errors": this.tmp.bibliography_errors.slice(),
        "done": done
    };
    if (this.bibliography.opt["second-field-align"]) {
        params["second-field-align"] = this.bibliography.opt["second-field-align"];
    }
    len = this.registry.reflist.length;
    for (pos = 0; pos < len; pos += 1) {
        item = this.registry.reflist[pos];
        if (item.offset > params.maxoffset) {
            params.maxoffset = item.offset;
        }
    }
    if (this.bibliography.opt.hangingindent) {
        params.hangingindent = this.bibliography.opt.hangingindent;
    }
    params.bibstart = this.fun.decorate.bibstart;
    params.bibend = this.fun.decorate.bibend;

    this.opt.citation_number_slug = false;
    return [params, entry_strings];
};

/*
 * Compose individual cites into a single string.
 */
CSL.getBibliographyEntries = function (bibsection) {
    var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, i, ilen, siblings, skips, sortedItems, entry_item_data, j, jlen;
    ret = [];
    entry_item_data = [];
    this.tmp.area = "bibliography";
    this.tmp.root = "bibliography";
    this.tmp.last_rendered_name = false;
    this.tmp.bibliography_errors = [];
    this.tmp.bibliography_pos = 0;
    
    // For paged returns: disable generated entries and
    // do not fetch full items as a batch (input variable
    // consists of ids only in this case)
    if (bibsection && bibsection.page_start && bibsection.page_length) {
        input = this.registry.getSortedIds();        
    } else {
        input = this.refetchItems(this.registry.getSortedIds());
    }
    
    this.tmp.disambig_override = true;
    function eval_string(a, b) {
        if (a === b) {
            return true;
        }
        return false;
    }
    function eval_list(a, lst) {
        lllen = lst.length;
        for (pppos = 0; pppos < lllen; pppos += 1) {
            if (eval_string(a, lst[pppos])) {
                return true;
            }
        }
        return false;
    }
    function eval_spec(a, b) {
        if ("boolean" === typeof a || !a) {
            if (a) {
                return !!b;
            } else {
                return !b;
            }
        } else {
            if ("string" === typeof b) {
                return eval_string(a, b);
            } else if (!b) {
                return false;
            } else {
                return eval_list(a, b);
            }
        }
    }

    skips = {};

    // For paged returns
    var page_item_count;
    if (bibsection && bibsection.page_start && bibsection.page_length) {
        page_item_count = 0;
        if (bibsection.page_start !== true) {
            for (i = 0, ilen = input.length; i < ilen; i += 1) {
                skips[input[i]] = true;
                if (bibsection.page_start == input[i]) {
                    break;
                }
            }
        }
    }

    var processed_item_ids = [];

    var consolidatedIDs = {};
    this.tmp.container_item_count = {};
    input = input.filter(o => {
        var ret = o;
        if (o.legislation_id) {
            if (consolidatedIDs[o.legislation_id]) {
                ret = false;
            } else {
                consolidatedIDs[o.legislation_id] = true;
            }
        } else if (o.container_id) {
            if (!this.tmp.container_item_count[o.container_id]) {
                this.tmp.container_item_count[o.container_id] = 0;
            }
            this.tmp.container_item_count[o.container_id]++;
            if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
                if (consolidatedIDs[o.container_id]) {
                    ret = false;
                } else {
                    consolidatedIDs[o.container_id] = true;
                }
            }
        }
        return ret;
    });

    this.tmp.container_item_pos = {};

    for (i = 0, ilen = input.length; i < ilen; i += 1) {
        
        // For paged returns
        if (bibsection && bibsection.page_start && bibsection.page_length) {
            if (skips[input[i]]) {
                continue;
            }
            item = this.refetchItem(input[i]);
            if (page_item_count === bibsection.page_length) {
                break;
            }
        } else {
            item = input[i];
            if (skips[item.id]) {
                continue;
            }
        }
        if (bibsection) {
            include = true;
            if (bibsection.include) {
                //
                // Opt-in: these are OR-ed.
                //
                include = false;
                for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
                    spec = bibsection.include[j];
                    if (eval_spec(spec.value, item[spec.field])) {
                        include = true;
                        break;
                    }
                }
            } else if (bibsection.exclude) {
                //
                // Opt-out: these are also OR-ed.
                //
                anymatch = false;
                for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
                    spec = bibsection.exclude[j];
                    if (eval_spec(spec.value, item[spec.field])) {
                        anymatch = true;
                        break;
                    }
                }
                if (anymatch) {
                    include = false;
                }
            } else if (bibsection.select) {
                //
                // Multiple condition opt-in: these are AND-ed.
                //
                include = false;
                allmatch = true;
                for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
                    spec = bibsection.select[j];
                    if (!eval_spec(spec.value, item[spec.field])) {
                        allmatch = false;
                    }
                }
                if (allmatch) {
                    include = true;
                }
            }
            if (bibsection.quash) {
                //
                // Stop criteria: These are AND-ed.
                //
                allmatch = true;
                for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
                    spec = bibsection.quash[j];
                    if (!eval_spec(spec.value, item[spec.field])) {
                        allmatch = false;
                    }
                }
                if (allmatch) {
                    include = false;
                }
            }
            if (!include) {
                continue;
            }
        }

        if (item.container_id) {
            if (!this.tmp.container_item_pos[item.container_id]) {
                this.tmp.container_item_pos[item.container_id] = 0;
            }
            this.tmp.container_item_pos[item.container_id]++;
        }
        
        //SNIP-END
        bib_entry = new CSL.Token("group", CSL.START);
        bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
        this.output.startTag("bib_entry", bib_entry);
        if (item.system_id && this.sys.embedBibliographyEntry) {
            this.output.current.value().item_id = item.system_id;
        } else {
            this.output.current.value().system_id = item.id;
        }

        // 2019-06-25 Hacked to conform to new parallels evaluation method
        // 2020-04-25 Revised to work with latest, and final, parallel-first/parallel-last attributes
        entry_item_ids = [];
        if (this.registry.registry[item.id].master
            && !(bibsection && bibsection.page_start && bibsection.page_length)) {
            // Fetch item content
            sortedItems = [[item, {id: item.id}]];
            siblings = this.registry.registry[item.id].siblings;
            for (var j=0,jlen=siblings.length; j<jlen; j++) {
               sortedItems.push([this.refetchItem(siblings[j]), {id: siblings[j]}]);
            }
            // Adjust parameters
            this.parallel.StartCitation(sortedItems);
            if (this.registry.registry[item.id].parallel_delimiter_override) {
                this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
            } else {
                this.output.queue[0].strings.delimiter = ", ";
            }
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            // Run cites
            for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
                if (j < (sortedItems.length - 1)) {
                    this.tmp.parallel_and_not_last = true;
                } else {
                    delete this.tmp.parallel_and_not_last;
                }
                entry_item_ids.push("" + CSL.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
                this.tmp.cite_index++;
                skips[sortedItems[j][0].id] = true;
            }
        } else if (!this.registry.registry[item.id].siblings) {
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            entry_item_ids.push("" + CSL.getCite.call(this, item));
            if (bibsection && bibsection.page_start && bibsection.page_length) {
                page_item_count += 1;
            }
            //skips[item.id] = true;
        }
        // For RDF support
        entry_item_data.push("");

        this.tmp.bibliography_pos += 1;

        processed_item_ids.push(entry_item_ids);
        //
        // XXX: loop to render parallels goes here
        // XXX: just have to mark them somehow ...
        //
        this.output.endTag("bib_entry");
        //
        // place layout prefix on first blob of each cite, and suffix
        // on the last non-empty blob of each cite.  there be dragons
        // here.
        //
        if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
            // The output queue stuff needs cleaning up.  the result of
            // output.current.value() is sometimes a blob, sometimes its list
            // of blobs.  this inconsistency is a source of confusion, and
            // should be cleaned up across the code base in the first
            // instance, before making any other changes to output code.
            if (!this.output.queue[0].blobs[0].blobs[0].strings) {
                topblobs = this.output.queue[0].blobs;
            } else {
                topblobs = this.output.queue[0].blobs[0].blobs;
            }
            topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
        }
        for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
            CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
            //print("XXX: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
        }
        for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j],true);
            this.output.adjust.fix(this.output.queue[j]);
            //print("OUTPUT: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
        }

        //print("DUMP "+JSON.stringify(this.output.queue, ["strings", "decorations", "prefix", "suffix", "delimiter", "blobs"], 2));

        // XXX Need to account for numeric blobs in input.
        // XXX No idea how this could have worked previously.

        //print("BLOBS "+this.output.queue[0].blobs[0].blobs);

        //print("JSON "+JSON.stringify(this.output.queue[0].blobs, null, 2));

        res = this.output.string(this, this.output.queue)[0];
        
        if (!res && this.opt.update_mode === CSL.NUMERIC) {
            var err = (ret.length + 1) + ". [CSL STYLE ERROR: reference with no printed form.]";
            res = CSL.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
        }
        if (res) {
            ret.push(res);
        }
    }

    var done = false;
    if (bibsection && bibsection.page_start && bibsection.page_length) {
        var last_expected_id = input.slice(-1)[0];
        var last_seen_id = processed_item_ids.slice(-1)[0];
        if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
            done = true;
        }
    }
    this.tmp.disambig_override = false;

    // XXX done
    return [processed_item_ids, ret, done];
};

/*global CSL: true */


CSL.Engine.prototype.setCitationId = function (citation, force) {
    var ret, id, direction;
    ret = false;
    if (!citation.citationID || force) {
        id = Math.floor(Math.random() * 100000000000000);
        while (true) {
            direction = 0;
            if (!this.registry.citationreg.citationById[id]) {
                // In case the ID is used as an HTML identifier in the
                // calling application.
                //   https://github.com/Juris-M/citeproc-js/issues/22
                citation.citationID = "a" + id.toString(32);
                break;
            } else if (!direction && id < 50000000000000) {
                direction = 1;
            } else {
                direction = -1;
            }
            if (direction === 1) {
                id += 1;
            } else {
                id += -1;
            }
        }
        ret = "" + id;
    }
    this.registry.citationreg.citationById[citation.citationID] = citation;
    return ret;
};

CSL.Engine.prototype.rebuildProcessorState = function (citations, mode, uncitedItemIDs) {
    // Rebuilds the processor from scratch, based on a list of citation
    // objects. In a dynamic application, once the internal state of processor
    // is established, citations should edited with individual invocations
    // of processCitationCluster().

    // citations is a list of citation objects in document order.
    // mode is one of "html", "text" or "rtf".
    // uncitedItemIDs is a list of itemIDs or a JS object with itemIDs as keys.
    // Returns a list of [citationID,noteIndex,string] triples in document order.
    // Set citation.properties.noteIndex to 0 for in-text citations.
    // It is not necessary to run updateItems() before this function.
    if (!citations) {
        citations = [];
    }
    if (!mode) {
        mode = 'html';
    }
    var doneIDs = {};
    var itemIDs = [];
    for (var i=0,ilen=citations.length;i<ilen;i+=1) {
        for (var j=0,jlen=citations[i].citationItems.length;j<jlen;j+=1) {
            var itemID = "" + citations[i].citationItems[j].id;
            if (!doneIDs[itemID]) {
                itemIDs.push(itemID);
            }
            doneIDs[itemID] = true;
        }
    }
    this.updateItems(itemIDs);
    var pre = [];
    var post = [];
    var ret = [];
    var oldMode = this.opt.mode;
    this.setOutputFormat(mode);
    for (var i=0,ilen=citations.length;i<ilen;i+=1) {
        // res contains a result report and a list of [index,string] pairs
        // index begins at 0
        var res = this.processCitationCluster(citations[i],pre,post,CSL.ASSUME_ALL_ITEMS_REGISTERED);
        pre.push([citations[i].citationID,citations[i].properties.noteIndex]);
        for (var j=0,jlen=res[1].length;j<jlen;j+=1) {
            var index = res[1][j][0];
            ret[index] = [
                pre[index][0],
                pre[index][1],
                res[1][j][1]
            ];
        }
    }
    this.updateUncitedItems(uncitedItemIDs);
    this.setOutputFormat(oldMode);
    return ret;
};


CSL.Engine.prototype.restoreProcessorState = function (citations) {
    var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
    
    // This function is deprecated.
    // Use rebuildProcessorState() instead.

    // Quickly restore state from citation details retained by
    // calling application.
    //
    // if citations are provided, position details and sortkeys 
    // on the citation objects are are assumed to be correct.  Item
    // data is retrieved, and sortedItems arrays are created and
    // sorted as required by the current style.
    //
    // If citations is an empty list or nil, reset processor to
    // empty state.
    citationList = [];
    itemList = [];
    if (!citations) {
        citations = [];
    }
    // Adjust citationIDs to avoid duplicates, save off index numbers
    var indexNumbers = [];
    var citationIds = {};
    for (i = 0, ilen = citations.length; i < ilen; i += 1) {
        if (citationIds[citations[i].citationID]) {
            this.setCitationId(citations[i], true);
        }
        citationIds[citations[i].citationID] = true;
        indexNumbers.push(citations[i].properties.index);
    }
    // Slice citations and sort by their declared index positions, if any,
    // then reassign index and noteIndex numbers.
    var oldCitations = citations.slice();
    oldCitations.sort(
        function (a,b) {
            if (a.properties.index < b.properties.index) {
                return -1;
            } else if (a.properties.index > b.properties.index) {
                return 1;
            } else {
                return 0;
            }
        }
    );
    for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
        oldCitations[i].properties.index = i;
    }
    for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
        sortedItems = [];
        for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
            item = oldCitations[i].citationItems[j];
            if ("undefined" === typeof item.sortkeys) {
                item.sortkeys = [];
            }
            Item = this.retrieveItem("" + item.id);
            newitem = [Item, item];
            sortedItems.push(newitem);
            oldCitations[i].citationItems[j].item = Item;
            itemList.push("" + item.id);
        }
        if (!oldCitations[i].properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
        oldCitations[i].sortedItems = sortedItems;
        // Save citation data in registry
        this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
    }
    // Register Items
    this.updateItems(itemList);

    // Construct citationList from original copy
    for (i = 0, ilen = citations.length; i < ilen; i += 1) {
        citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
    }

    var ret = [];
    if (citations && citations.length) {
        // Rendering one citation restores remainder of processor state.
        // If citations is empty, rest to empty state.
        ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
    } else {
        this.registry = new CSL.Registry(this);
        this.tmp = new CSL.Engine.Tmp();
        this.disambiguate = new CSL.Disambiguation(this);
    }
    return ret;
};


CSL.Engine.prototype.updateItems = function (idList, nosort, rerun_ambigs, implicitUpdate) {
    var oldArea = this.tmp.area;
    var oldRoot = this.tmp.root;
    var oldExtension = this.tmp.extension;
    if (this.bibliography_sort.tokens.length === 0) {
        nosort = true;
    }
    this.tmp.area = "citation";
    this.tmp.root = "citation";
    this.tmp.extension = "";
    if (!implicitUpdate) {
        this.tmp.loadedItemIDs = {};
    }
    //SNIP-END
    this.registry.init(idList);

	if (rerun_ambigs) {
		for (var ambig in this.registry.ambigcites) {
			this.registry.ambigsTouched[ambig] = true;
		}
	}

    this.registry.dodeletes(this.registry.myhash);
    
    this.registry.doinserts(this.registry.mylist);
    
    this.registry.dorefreshes();

    // *** affects reflist
    this.registry.rebuildlist(nosort);
    
    this.registry.setsortkeys();

    // taints always
    this.registry.setdisambigs();

    // *** affects reflist
    this.registry.sorttokens(nosort);

    // *** affects reflist
    // taints if numbered style
    this.registry.renumber();
    
    // taints always
    //this.registry.yearsuffix();

    this.tmp.extension = oldExtension;
    this.tmp.area = oldArea;
    this.tmp.root = oldRoot;

    return this.registry.getSortedIds();
};

CSL.Engine.prototype.updateUncitedItems = function (idList, nosort) {
    var idHash;
    var oldArea = this.tmp.area;
    var oldRoot = this.tmp.root;
    var oldExtension = this.tmp.extension;
    if (this.bibliography_sort.tokens.length === 0) {
        nosort = true;
    }
    this.tmp.area = "citation";
    this.tmp.root = "citation";
    this.tmp.extension = "";
    this.tmp.loadedItemIDs = {};
    // This should be a utility function
    if (!idList) {
        idList = [];
    }
    if ("object" == typeof idList) {
        if ("undefined" == typeof idList.length) {
            idHash = idList;
            idList = [];
            for (var key in idHash) {
                idList.push(key);
            }
        } else if ("number" == typeof idList.length) {
            idHash = {};
            for (var i=0,ilen=idList.length;i<ilen;i+=1) {
                idHash[idList[i]] = true;
            }
        }
    }

    // prepare extended list of items
    this.registry.init(idList, true);

    // Use purge instead of delete.
    // this.registry.dodeletes(this.registry.myhash);
    this.registry.dopurge(idHash);

    // everything else is the same as updateItems()
    this.registry.doinserts(this.registry.mylist);

    this.registry.dorefreshes();

    this.registry.rebuildlist(nosort);

    this.registry.setsortkeys();

    this.registry.setdisambigs();

    this.registry.sorttokens(nosort);

    this.registry.renumber();

    this.tmp.extension = oldExtension;
    this.tmp.area = oldArea;
    this.tmp.root = oldRoot;

    return this.registry.getSortedIds();
};

/*global CSL: true */

CSL.localeResolve = function (langstr, defaultLocale) {
    var ret, langlst;
    if (!defaultLocale) {
        defaultLocale = "en-US";
    }
    if (!langstr) {
        langstr = defaultLocale;
    }
    ret = {};
    //if ("undefined" === typeof langstr) {
    //    langstr = "en_US";
    //}
    langlst = langstr.split(/[\-_]/);
    ret.base = CSL.LANG_BASES[langlst[0]];
    if ("undefined" === typeof ret.base) {
        //CSL.debug("Warning: unknown locale "+langstr+", setting fallback to "+defaultLocale);
        return {base:defaultLocale, best:langstr, bare:langlst[0]};
    }
    if (langlst.length === 1) {
        ret.generic = true;
    }
    if (langlst.length === 1 || langlst[1] === "x") {
        ret.best = ret.base.replace("_", "-");
    } else {
        ret.best = langlst.slice(0, 2).join("-");
    }
    ret.base = ret.base.replace("_", "-");
    ret.bare = langlst[0];
    return ret;
};

// Use call to invoke this.
CSL.Engine.prototype.localeConfigure = function (langspec, beShy) {
    var localexml;
    if (beShy && this.locale[langspec.best]) {
        return;
    }
    if (langspec.best === "en-US") {
        localexml = CSL.setupXml(this.sys.retrieveLocale("en-US"));
        this.localeSet(localexml, "en-US", langspec.best);
    } else if (langspec.best !== "en-US") {
        if (langspec.base !== langspec.best) {
            localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.base));
            this.localeSet(localexml, langspec.base, langspec.best);
        }
        localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.best));
        this.localeSet(localexml, langspec.best, langspec.best);        
    }
    this.localeSet(this.cslXml, "", langspec.best);
    this.localeSet(this.cslXml, langspec.bare, langspec.best);
    if (langspec.base !== langspec.best) {
        this.localeSet(this.cslXml, langspec.base, langspec.best);
    }
    this.localeSet(this.cslXml, langspec.best, langspec.best);
    if ("undefined" === typeof this.locale[langspec.best].terms["page-range-delimiter"]) {
        if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
            this.locale[langspec.best].terms["page-range-delimiter"] = "-";
        } else {
            this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
        }
    }
    if ("undefined" === typeof this.locale[langspec.best].terms["year-range-delimiter"]) {
        this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
    }
    if ("undefined" === typeof this.locale[langspec.best].terms["citation-range-delimiter"]) {
        this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
    }
    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        var localeLists = ["default-locale","locale-sort","locale-translit","locale-translat"];
        for (var i=0,ilen=localeLists.length;i<ilen;i+=1) {
            for (var j=0,jlen=this.opt[localeLists[i]].length;j<jlen;j+=1) {
                this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
            }
        }
        this.opt.lang = this.opt.lang.toLowerCase();
    }
};
    
//
// XXXXX: Got it.  The locales objects need to be reorganized,
// with a top-level local specifier, and terms, opts, dates
// below.
//
CSL.Engine.prototype.localeSet = function (myxml, lang_in, lang_out) {
    var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date, attrname, len, genderform, target, i, ilen;
    lang_in = lang_in.replace("_", "-");
    lang_out = lang_out.replace("_", "-");

    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        lang_in = lang_in.toLowerCase();
        lang_out = lang_out.toLowerCase();
    }

    if (!this.locale[lang_out]) {
        this.locale[lang_out] = {};
        this.locale[lang_out].terms = {};
        this.locale[lang_out].opts = {};
        // Set default skip words. Can be overridden in locale by attribute on style-options node.
        this.locale[lang_out].opts["skip-words"] = CSL.SKIP_WORDS;
        // Initialise leading noise word to false. Actual assignment is below. Empty by default, can be overridden in locale by attribute on style-options node.
        if (!this.locale[lang_out].opts["leading-noise-words"]) {
            this.locale[lang_out].opts["leading-noise-words"] = [];
        }
        this.locale[lang_out].dates = {};
        // For ordinals
        this.locale[lang_out].ord = {'1.0.1':false,keys:{}};
        this.locale[lang_out]["noun-genders"] = {};
    }

    //
    // Xml: Test if node is "locale" (nb: ns declarations need to be invoked
    // on every access to the xml object; bundle this with the functions
    //
    locale = myxml.makeXml();
    if (myxml.nodeNameIs(myxml.dataObj, 'locale')) {
        locale = myxml.dataObj;
    } else {
        //
        // Xml: get a list of all "locale" nodes
        //
        nodes = myxml.getNodesByName(myxml.dataObj, "locale");
        var foundLocale = false;
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            blob = nodes[pos];
            //
            // Xml: get locale xml:lang
            //
            // Iterate over all locales, but for non-matching nodes,
            // we set jurisdiction_preference only (processing of the
            // chosen one will process the attribute there,
            // separately.
            if (!foundLocale && myxml.getAttributeValue(blob, 'lang', 'xml') === lang_in) {
                locale = blob;
                foundLocale = true;
            } else {
                var lang = myxml.getAttributeValue(blob, 'lang', 'xml');
                var style_options = myxml.getNodesByName(blob, 'style-options');
                if (lang && style_options && style_options.length) {
                    var jurispref = myxml.getAttributeValue(style_options[0], 'jurisdiction-preference');
                    if (jurispref) {
                        if (!this.locale[lang]) {
                            this.locale[lang] = {
                                opts: {}
                            };
                        }
                        this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
                    }
                }
            }
        }
    }
    //
    // Xml: get a list of any cs:type nodes within locale
    //
    nodes = myxml.getNodesByName(locale, 'type');
    for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
        var typenode = nodes[i];
        var type = myxml.getAttributeValue(typenode, 'name');
        var gender = myxml.getAttributeValue(typenode, 'gender');
        this.opt.gender[type] = gender;
    }
    //
    // Xml: get a list of term nodes within locale
    //

    // If we are setting CSL 1.0.1 ordinals inside a style, wipe the
    // slate clean and start over.
    var hasCslOrdinals101 = myxml.getNodesByName(locale, 'term', 'ordinal').length;
    if (hasCslOrdinals101) {
        for (var key in this.locale[lang_out].ord.keys) {
            delete this.locale[lang_out].terms[key];
        }
        this.locale[lang_out].ord = {"1.0.1":false,keys:{}};
    }

    nodes = myxml.getNodesByName(locale, 'term');
    // Collect ordinals info as for 1.0.1, but save only if 1.0.1 toggle triggers
    var ordinals101 = {"last-digit":{},"last-two-digits":{},"whole-number":{}};
    var ordinals101_toggle = false;
    var genderized_terms = {};
    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        term = nodes[pos];
        //
        // Xml: get string value of attribute
        //
        termname = myxml.getAttributeValue(term, 'name');
        if (termname === "sub verbo") {
            termname = "sub-verbo";
        }
        if (termname.slice(0,7) === "ordinal") {
            if (termname === "ordinal") {
                ordinals101_toggle = true;
            } else {
                var match = myxml.getAttributeValue(term, 'match');
                var termstub = termname.slice(8);
                var genderform = myxml.getAttributeValue(term, 'gender-form');
                if (!genderform) {
                    genderform = "neuter";
                }
                if (!match) {
                    match = "last-two-digits";
                    if (termstub.slice(0,1) === "0") {
                        match = "last-digit";
                    }
                }
                if (termstub.slice(0,1) === "0") {
                    termstub = termstub.slice(1);
                }
                if (!ordinals101[match][termstub]) {
                    ordinals101[match][termstub] = {};
                }
                ordinals101[match][termstub][genderform] = termname;
            }
            this.locale[lang_out].ord.keys[termname] = true;
        }
        if ("undefined" === typeof this.locale[lang_out].terms[termname]) {
            this.locale[lang_out].terms[termname] = {};
        }
        form = "long";
        genderform = false;
        //
        // Xml: get string value of form attribute, if any
        //
        if (myxml.getAttributeValue(term, 'form')) {
            form = myxml.getAttributeValue(term, 'form');
        }
        //
        // Xml: get string value of gender attribute, if any
        // 
        if (myxml.getAttributeValue(term, 'gender-form')) {
            genderform = myxml.getAttributeValue(term, 'gender-form');
        }
        //
        // Xml: set global gender assignment for variable associated
        // with term name
        // 
        if (myxml.getAttributeValue(term, 'gender')) {
            this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, 'gender');
        }
        // Work on main segment or gender-specific sub-segment as appropriate
        if (genderform) {
            this.locale[lang_out].terms[termname][genderform] = {};
            this.locale[lang_out].terms[termname][genderform][form] = [];
            target = this.locale[lang_out].terms[termname][genderform];
            genderized_terms[termname] = true;
        } else {
            this.locale[lang_out].terms[termname][form] = [];
            target = this.locale[lang_out].terms[termname];
        }
        //
        // Xml: test of existence of node
        //
        if (myxml.numberofnodes(myxml.getNodesByName(term, 'multiple'))) {
            //
            // Xml: get string value of attribute, plus
            // Xml: get string value of node content
            //
            target[form][0] = myxml.getNodeValue(term, 'single');
            if (target[form][0].indexOf("%s") > -1) {
                this.opt.hasPlaceholderTerm = true;
            }
            //
            // Xml: get string value of attribute, plus
            // Xml: get string value of node content
            //
            target[form][1] = myxml.getNodeValue(term, 'multiple');
            if (target[form][1].indexOf("%s") > -1) {
                this.opt.hasPlaceholderTerm = true;
            }
        } else {
            //
            // Xml: get string value of attribute, plus
            // Xml: get string value of node content
            //
            target[form] = myxml.getNodeValue(term);
            if (target[form].indexOf("%s") > -1) {
                this.opt.hasPlaceholderTerm = true;
            }
        }
    }
    if (!this.locale[lang_out].terms.supplement) {
        this.locale[lang_out].terms.supplement = {};
    }
    if (!this.locale[lang_out].terms.supplement["long"]) {
        this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
    }
    // If locale had a CSL 1.0.1-style ordinal definition, install the logic object
    // and iterate over gendered terms, filling in default values for use by getTerm.
    if (ordinals101_toggle) {
        for (var ikey in genderized_terms) {
            var gender_segments = {};
            var form_segments = 0;
            for (var jkey in this.locale[lang_out].terms[ikey]) {
                if (["masculine","feminine"].indexOf(jkey) > -1) {
                    gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
                } else {
                    form_segments += 1;
                }
            }
            if (!form_segments) {
                if (gender_segments.feminine) {
                    // Link each feminine form segment to default
                    // (no need to filter, these will not have gender segments mixed in)
                    for (var jkey in gender_segments.feminine) {
                        this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
                    }
                } else if (gender_segments.masculine) {
                    // Otherwise link each masculine form segment to default 
                    for (var jkey in gender_segments.masculine) {
                        this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
                    }
                }
            }
        }
        this.locale[lang_out].ord['1.0.1'] = ordinals101;
    }

    // Iterate over main segments, and fill in any holes in gender-specific data
    // sub-segments
    for (termname in this.locale[lang_out].terms) {
        for (i = 0, ilen = 2; i < ilen; i += 1) {
            genderform = CSL.GENDERS[i];
            if (this.locale[lang_out].terms[termname][genderform]) {
                for (form in this.locale[lang_out].terms[termname]) {
                    if (!this.locale[lang_out].terms[termname][genderform][form]) {
                        this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
                    }
                }
            }
        }
    }
    //
    // Xml: get list of nodes by node type
    //
    nodes = myxml.getNodesByName(locale, 'style-options');
    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        {
            styleopts = nodes[pos];
            //
            // Xml: get list of attributes on a node
            //
            attributes = myxml.attributes(styleopts);
            for (attrname in attributes) {
                if (attributes.hasOwnProperty(attrname)) {
                    if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                        if (attributes[attrname] === "true") {
                            // trim off leading @
                            this.locale[lang_out].opts[attrname.slice(1)] = true;
                        } else {
                            // trim off leading @
                            this.locale[lang_out].opts[attrname.slice(1)] = false;
                        }
                    } else if (attrname === "@jurisdiction-preference") {
                        var jurisdiction_preference = attributes[attrname].split(/\s+/);
                        this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
                    } else if (attrname === "@skip-words") {
                        var skip_words = attributes[attrname].split(/\s*,\s*/);
                        this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
                    } else if (attrname === "@leading-noise-words") {
                        var val = attributes[attrname].split(/\s*,\s*/);
                        this.locale[lang_out].opts["leading-noise-words"] = val;
                    } else if (attrname === "@name-as-sort-order") {
                        // Fallback is okay here.
                        this.locale[lang_out].opts["name-as-sort-order"] = {};
                        var lst = attributes[attrname].split(/\s+/);
                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                            this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                        }
                    } else if (attrname === "@name-as-reverse-order") {
                        // Fallback is okay here.
                        this.locale[lang_out].opts["name-as-reverse-order"] = {};
                        var lst = attributes[attrname].split(/\s+/);
                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                            this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                        }
                    } else if (attrname === "@name-never-short") {
                        // Here too.
                        this.locale[lang_out].opts["name-never-short"] = {};
                        var lst = attributes[attrname].split(/\s+/);
                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                            this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                        }
                    }
                }
            }
        }
    }
    //
    // Xml: get list of nodes by type
    //
    nodes = myxml.getNodesByName(locale, 'date');
    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        {
            var date = nodes[pos];
            //
            // Xml: get string value of attribute
            //
            this.locale[lang_out].dates[myxml.getAttributeValue(date, "form")] = date;
        }
    }
    //
    // Xml: get list of nodes by node type
    //
    CSL.SET_COURT_CLASSES(this, lang_out, myxml, locale);
};


CSL.getLocaleNames = function (myxml, preferredLocale) {
    var stylexml = CSL.setupXml(myxml);

    function extendLocaleList(localeList, locale) {
        var forms = ["base", "best"];
        if (locale) {
            var normalizedLocale = CSL.localeResolve(locale);
            for (var i=0,ilen=forms.length;i<ilen;i++) {
                if (normalizedLocale[forms[i]] && localeList.indexOf(normalizedLocale[forms[i]]) === -1) {
                    localeList.push(normalizedLocale[forms[i]]);
                }
            }
        }
    }
    
    var localeIDs = ["en-US"];
    
    function sniffLocaleOnOneNodeName(nodeName) {
        var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
        for (var i=0,ilen=nodes.length;i<ilen;i++) {
            var nodeLocales = stylexml.getAttributeValue(nodes[i], "locale");
            if (nodeLocales) {
                nodeLocales = nodeLocales.split(/ +/);
                for (var j=0,jlen=nodeLocales.length;j<jlen;j++) {
                    this.extendLocaleList(localeIDs, nodeLocales[j]);
                }
            }
        }
    }

    extendLocaleList(localeIDs, preferredLocale);

    var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
    var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
    extendLocaleList(localeIDs, defaultLocale);

    var nodeNames = ["layout", "if", "else-if", "condition"];
    for (var i=0,ilen=nodeNames.length;i<ilen;i++) {
        sniffLocaleOnOneNodeName(stylexml);
    }
    return localeIDs;
};

/*global CSL: true */

CSL.Node = {};

CSL.Node.bibliography = {
    build: function (state, target) {
        if (this.tokentype === CSL.START) {

            state.build.area = "bibliography";
            state.build.root = "bibliography";
            state.build.extension = "";

            var func = function(state) {
                state.tmp.area = "bibliography";
                state.tmp.root = "bibliography";
                state.tmp.extension = "";
            };
            this.execs.push(func);

        }
        target.push(this);
    }
};


/*global CSL: true */

CSL.Node.choose = {
    build: function (state, target) {
        var func;
        if (this.tokentype === CSL.START) {
            //open condition
            func = function (state) {
                state.tmp.jump.push(undefined, CSL.LITERAL);
            };
        }
        if (this.tokentype === CSL.END) {
            //close condition
            func = function (state) {
                state.tmp.jump.pop();
            };
        }
        this.execs.push(func);
        target.push(this);
    },

    configure: function (state, pos) {
        if (this.tokentype === CSL.END) {
            state.configure.fail.push((pos));
            state.configure.succeed.push((pos));
        } else {
            state.configure.fail.pop();
            state.configure.succeed.pop();
        }
    }
};

/*global CSL: true */

CSL.Node.citation = {
    build: function (state, target) {
        if (this.tokentype === CSL.START) {

            state.build.area = "citation";
            state.build.root = "citation";
            state.build.extension = "";


            var func = function(state) {
                state.tmp.area = "citation";
                state.tmp.root = "citation";
                state.tmp.extension = "";
            };
            this.execs.push(func);

/*
            state.build.root = "citation";

            OK state.fixOpt(this, "names-delimiter", "delimiter");
            OK state.fixOpt(this, "name-delimiter", "delimiter");
            OK state.fixOpt(this, "name-form", "form");
            OK state.fixOpt(this, "and", "and");
            OK state.fixOpt(this, "delimiter-precedes-last", "delimiter-precedes-last");
            OK state.fixOpt(this, "delimiter-precedes-et-al", "delimiter-precedes-et-al");
            OK state.fixOpt(this, "initialize-with", "initialize-with");
            OK state.fixOpt(this, "initialize", "initialize");
            OK state.fixOpt(this, "name-as-sort-order", "name-as-sort-order");
            OK state.fixOpt(this, "sort-separator", "sort-separator");

            OK state.fixOpt(this, "et-al-min", "et-al-min");
            OK state.fixOpt(this, "et-al-use-first", "et-al-use-first");
            OK state.fixOpt(this, "et-al-use-last", "et-al-use-last");
            state.fixOpt(this, "et-al-subsequent-min", "et-al-subsequent-min");
            state.fixOpt(this, "et-al-subsequent-use-first", "et-al-subsequent-use-first");
*/
        }
        if (this.tokentype === CSL.END) {

            // Open an extra key at first position for use in
            // grouped sorts.
            // print("in cs:citation END");
            state.opt.grouped_sort = state.opt.xclass === "in-text" 
                && (state.citation.opt.collapse 
                    && state.citation.opt.collapse.length)
                || (state.citation.opt.cite_group_delimiter
                    && state.citation.opt.cite_group_delimiter.length)
                && state.opt.update_mode !== CSL.POSITION
                && state.opt.update_mode !== CSL.NUMERIC;
            
            if (state.opt.grouped_sort 
                && state.citation_sort.opt.sort_directions.length) {
                
                var firstkey = state.citation_sort.opt.sort_directions[0].slice();
                //print("extending sort keys "+state.citation_sort.opt.sort_directions+" with "+firstkey);
                state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
                // print("new key directions in effect: "+state.citation_sort.opt.sort_directions);
            }
            // print("creating new comparifier");
            state.citation.srt = new CSL.Registry.Comparifier(state, "citation_sort");
        }
        target.push(this);
    }
};


/*global CSL: true */

CSL.Node["#comment"] = {
       // This is a comment in the CSL file.
       build: function () {
        // Save some space in the log files -- no need to mention this, really.
        // CSL.debug("CSL processor warning: comment node reached");
       }
};

/*global CSL: true */

CSL.Node.date = {
    build: function (state, target) {
        var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;
        if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
            // used to collect rendered date part names in node_datepart,
            // for passing through to node_key, for use in dates embedded
            // in macros
            state.dateput.string(state, state.dateput.queue);
            state.tmp.date_token = CSL.Util.cloneToken(this);
            state.tmp.date_token.strings.prefix = "";
            state.tmp.date_token.strings.suffix = "";
            state.dateput.openLevel(this);
            state.build.date_parts = [];
            state.build.date_variables = this.variables;
            if (!state.build.extension) {
                CSL.Util.substituteStart.call(this, state, target);
            }
            if (state.build.extension) {
                func = CSL.dateMacroAsSortKey;
            } else {
                func = function (state, Item, item) {
                    var dp;
                    state.tmp.element_rendered_ok = false;
                    state.tmp.donesies = [];
                    state.tmp.dateparts = [];
                    dp = [];
                    //if (this.variables.length && Item[this.variables[0]]){
                    if (this.variables.length
                        && !(state.tmp.just_looking
                             && this.variables[0] === "accessed")) {
                        
                        date_obj = Item[this.variables[0]];
                        if ("undefined" === typeof date_obj) {
                            date_obj = {"date-parts": [[0]] };
                            if (state.opt.development_extensions.locator_date_and_revision) {
                                if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                                    date_obj = item["locator-date"];
                                }
                            }
                        }
                        state.tmp.date_object = date_obj;
                        //
                        // Call a function here to analyze the
                        // data and set the name of the date-part that
                        // should collapse for this range, if any.
                        //
                        // (1) build a filtered list, in y-m-d order,
                        // consisting only of items that are (a) in the
                        // date-parts and (b) in the *_end data.
                        // (note to self: remember that season is a
                        // fallback var when month and day are empty)
                        
                        //if ("undefined" === typeof this.dateparts) {
                        //    this.dateparts = ["year", "month", "day"];
                        //}
                        len = this.dateparts.length;
                        for (pos = 0; pos < len; pos += 1) {
                            part = this.dateparts[pos];
                            if ("undefined" !== typeof state.tmp.date_object[(part +  "_end")]) {
                                dp.push(part);
                            } else if (part === "month" && "undefined" !== typeof state.tmp.date_object.season_end) {
                                dp.push(part);
                            }
                        }
                        dpx = [];
                        parts = ["year", "month", "day"];
                        len = parts.length;
                        for (pos = 0; pos < len; pos += 1) {
                            if (dp.indexOf(parts[pos]) > -1) {
                                dpx.push(parts[pos]);
                            }
                        }
                        dp = dpx.slice();
                        //
                        // (2) Reverse the list and step through in
                        // reverse order, popping each item if the
                        // primary and *_end data match.
                        mypos = 2;
                        len = dp.length;
                        for (pos = 0; pos < len; pos += 1) {
                            part = dp[pos];
                            start = state.tmp.date_object[part];
                            end = state.tmp.date_object[(part + "_end")];
                            if (start !== end) {
                                mypos = pos;
                                break;
                            }
                        }
                        
                        //
                        // (3) When finished, the first item in the
                        // list, if any, is the date-part where
                        // the collapse should occur.

                        // XXXXX: was that it?
                        state.tmp.date_collapse_at = dp.slice(mypos);
                        //
                        // The collapse itself will be done by appending
                        // string output for the date, less suffix,
                        // placing a delimiter on output, then then
                        // doing the *_end of the range, dropping only
                        // the prefix.  That should give us concise expressions
                        // of ranges.
                        //
                        // Numeric dates should not collapse, though,
                        // and should probably use a slash delimiter.
                        // Scope for configurability will remain (all over
                        // the place), but this will do to get this feature
                        // started.
                        //
                    } else {
                        state.tmp.date_object = false;
                    }
                };
            }
            this.execs.push(func);

            // newoutput
            func = function (state, Item) {
                if (!Item[this.variables[0]]) {
                    return;
                }
                state.output.startTag("date", this);
                if (this.variables[0] === "issued"
                    && (Item.type === "legal_case" || Item.type === "legislation")
                    && state.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1
                    && !state.tmp.extension
                    && "" + Item["collection-number"] === "" + state.tmp.date_object.year
                    && this.dateparts.length === 1
                    && this.dateparts[0] === "year") {

                    // Set up to (maybe) suppress the year if we're not sorting, and
                    // it's the same as the collection-number, and we would render
                    // only the year, with not month or day, and this is a legal_case item.
                    // We save a pointer to the blob parent and its position here. The
                    // blob will be popped from output if at the end of processing for
                    // this cite we find that we have rendered the collection-number
                    // variable also.
                    for (var key in state.tmp.date_object) {
                        if (state.tmp.date_object.hasOwnProperty(key)) {
                            if (key.slice(0, 4) === "year") {
                                state.tmp.issued_date = {};
                                var lst = state.output.current.mystack.slice(-2)[0].blobs;
                                state.tmp.issued_date.list = lst;
                                state.tmp.issued_date.pos = lst.length - 1;
                            }
                        }
                    }
                }
            };
            this.execs.push(func);
        }

        if (!state.build.extension && (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON)) {
            // mergeoutput
            func = function (state, Item) {
                if (!Item[this.variables[0]]) {
                    return;
                }
                state.output.endTag();
            };
            this.execs.push(func);
        }
        target.push(this);

        if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
            if (!state.build.extension) {
                CSL.Util.substituteEnd.call(this, state, target);
            }
        }
    }
};

/*global CSL: true */

CSL.Node["date-part"] = {
    build: function (state, target) {
        var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number, num, formatter, item;
        if (!this.strings.form) {
            this.strings.form = "long";
        }
        // used in node_date, to send a list of rendering date parts
        // to node_key, for dates embedded in macros.
        state.build.date_parts.push(this.strings.name);
        //
        // Set delimiter here, if poss.
        //

        var date_variable = state.build.date_variables[0];

        function formatAndStrip(myform, gender, val) {
            if (!val) {
                return val;
            }
            val = "" + CSL.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
            if ("month" === this.strings.name) {
                if (state.tmp.strip_periods) {
                    val = val.replace(/\./g, "");
                } else {
                    for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                        if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                            val = val.replace(/\./g, "");
                            break;
                        }
                    }
                }
            }
            return val;
        }

        func = function (state, Item) {

            if (!state.tmp.date_object) {
                return;
            } else {
                state.tmp.probably_rendered_something = true;
            }

            var last_string_output = "";

            first_date = true;
            value = "";
            value_end = "";
            state.tmp.donesies.push(this.strings.name);

            // Render literal only when year is included in date output
            if (state.tmp.date_object.literal && "year" === this.strings.name) {
                last_string_output = state.tmp.date_object.literal;
                state.output.append(state.tmp.date_object.literal, this);
            }

            if (state.tmp.date_object) {
                value = state.tmp.date_object[this.strings.name];
                value_end = state.tmp.date_object[(this.strings.name + "_end")];
            }
            if ("year" === this.strings.name && value === 0 && !state.tmp.suppress_decorations) {
                value = false;
            }
            real = !state.tmp.suppress_decorations;
            have_collapsed = state.tmp.have_collapsed;
            invoked = state[state.tmp.area].opt.collapse === "year-suffix" || state[state.tmp.area].opt.collapse === "year-suffix-ranged";
            precondition = state.opt["disambiguate-add-year-suffix"];
            if (real && precondition && invoked) {
                state.tmp.years_used.push(value);
                known_year = state.tmp.last_years_used.length >= state.tmp.years_used.length;
                if (known_year && have_collapsed) {
                    if (state.tmp.last_years_used[(state.tmp.years_used.length - 1)] === value) {
                        value = false;
                    }
                }
            }
            if ("undefined" !== typeof value) {
                bc = false;
                ad = false;
                bc_end = false;
                ad_end = false;
                if ("year" === this.strings.name) {
                    if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                        ad = state.getTerm("ad");
                    }
                    if (parseInt(value, 10) < 0) {
                        bc = state.getTerm("bc");
                        value = (parseInt(value, 10) * -1);
                    }
                    if (value_end) {
                        if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                            ad_end = state.getTerm("ad");
                        }
                        if (parseInt(value_end, 10) < 0) {
                            bc_end = state.getTerm("bc");
                            value_end = (parseInt(value_end, 10) * -1);
                        }
                    }
                }

                // For gendered locales
                var monthnameid = ""+state.tmp.date_object.month;
                while (monthnameid.length < 2) {
                    monthnameid = "0"+monthnameid;
                }
                monthnameid = "month-"+monthnameid;
                var gender = state.locale[state.opt.lang]["noun-genders"][monthnameid];
                if (this.strings.form) {
                    var myform = this.strings.form;
                    var myform_end = this.strings.form;
                    if (this.strings.name === "day") {
                        if (myform === "ordinal" && state.locale[state.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                            if (value != 1) {
                                myform = "numeric";
                            }
                            if (value_end != 1) {
                                myform_end = "numeric";
                            }
                        }
                    }
                    value = formatAndStrip.call(this, myform, gender, value);
                    value_end = formatAndStrip.call(this, myform_end, gender, value_end);
                }
                state.output.openLevel("empty");
                if (state.tmp.date_collapse_at.length) {
                    //state.output.startTag(this.strings.name,this);
                    ready = true;
                    len = state.tmp.date_collapse_at.length;
                    for (pos = 0; pos < len; pos += 1) {
                        item = state.tmp.date_collapse_at[pos];
                        if (state.tmp.donesies.indexOf(item) === -1) {
                            ready = false;
                            break;
                        }
                    }
                    if (ready) {
                        if ("" + value_end !== "0") {
                            if (state.dateput.queue.length === 0) {
                                first_date = true;
                            }

                            // OK! So if the actual data has no month, day or season,
                            // and we reach this block, then we can combine the dates
                            // to a string, run minimial-two, and output the trailing
                            // year right here. No impact on other functionality.
                            
                            if (state.opt["year-range-format"]
                                && state.opt["year-range-format"] !== "expanded"
                                && !state.tmp.date_object.day
                                && !state.tmp.date_object.month
                                && !state.tmp.date_object.season
                                && this.strings.name === "year"
                                && value && value_end) {
                                
                                // second argument adjusts collapse as required for years
                                // See OSCOLA section 1.3.2
                                value_end = state.fun.year_mangler(value + "-" + value_end, true);
                                var range_delimiter = state.getTerm("year-range-delimiter");
                                value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                            }
                            last_string_output = value_end;
                            state.dateput.append(value_end, this);
                            if (first_date) {
                                state.dateput.current.value().blobs[0].strings.prefix = "";
                            }
                        }
                        last_string_output = value;
                        state.output.append(value, this);
                        curr = state.output.current.value();
                        curr.blobs[(curr.blobs.length - 1)].strings.suffix = "";
                        if (this.strings["range-delimiter"]) {
                            state.output.append(this.strings["range-delimiter"]);
                        } else {
                            state.output.append(state.getTerm("year-range-delimiter"), "empty");
                        }
                        state.dateput.closeLevel();
                        dcurr = state.dateput.current.value();
                        curr.blobs = curr.blobs.concat(dcurr);
                        // This may leave the stack pointer on a lower level.
                        // It's not a problem because the stack will be clobbered
                        // when the queue is initialized by the next cs:date node.
                        state.dateput.string(state, state.dateput.queue);
                        state.dateput.openLevel(state.tmp.date_token);
                        state.tmp.date_collapse_at = [];
                    } else {
                        last_string_output = value;
                        state.output.append(value, this);
                        // print("collapse_at: "+state.tmp.date_collapse_at);
                        if (state.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                            //
                            // Use ghost dateput queue
                            //
                            if ("" + value_end !== "0") {
                                //
                                // XXXXX: It's a workaround.  It's ugly.
                                // There's another one above.
                                //
                                if (state.dateput.queue.length === 0) {
                                    first_date = true;
                                }
                                state.dateput.openLevel("empty");
                                last_string_output = value_end;
                                state.dateput.append(value_end, this);
                                if (first_date) {
                                    state.dateput.current.value().blobs[0].strings.prefix = "";
                                }
                                if (bc) {
                                    last_string_output = bc;
                                    state.dateput.append(bc);
                                }
                                if (ad) {
                                    last_string_output = ad;
                                    state.dateput.append(ad);
                                }
                                state.dateput.closeLevel();
                            }
                        }
                    }
                } else {
                    last_string_output = value;
                    state.output.append(value, this);
                }

                if (bc) {
                    last_string_output = bc;
                    state.output.append(bc);
                }
                if (ad) {
                    last_string_output = ad;
                    state.output.append(ad);
                }
                state.output.closeLevel();
                //state.output.endTag();
            } else if ("month" === this.strings.name) {
                // XXX The simpler solution here will be to
                // directly install season and season_end on
                // month, with a value of 13, 14, 15, 16, or
                // (to allow correct ranging with Down Under
                // dates) 17 or 18.  That will allow ranging
                // to take place in the normal way.  With this
                // "approach", it doesn't.
                //
                // No value for this target variable
                //
                if (state.tmp.date_object.season) {
                    value = "" + state.tmp.date_object.season;
                    if (value && value.match(/^[1-4]$/)) {
                        // XXXXXXXXXXXXXXXXXXX was replace([false, false, true]);
                        //state.tmp.group_context.replace([false, false, true]);
                        state.tmp.group_context.tip.variable_success = true;
                        last_string_output = "winter";
                        state.output.append(state.getTerm(("season-0" + value)), this);
                    } else if (value) {
                        last_string_output = value;
                        state.output.append(value, this);
                    }
                }
            }
            state.tmp.value = [];
            if (Item[date_variable] && (value || state.tmp.have_collapsed) && !state.opt.has_year_suffix && "year" === this.strings.name && !state.tmp.just_looking) {
                if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.has_done_year_suffix) {
                    state.tmp.has_done_year_suffix = true;
                    last_string_output = "x";
                    num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);
                    // first argument is for number particle [a-zA-Z], never present on dates
                    number = new CSL.NumericBlob(false, num, this, Item.id);
                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                    this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                    formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
                    number.setFormatter(formatter);
                    if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                        number.range_prefix = state.getTerm("citation-range-delimiter");
                    }
                    if (state[state.tmp.area].opt.cite_group_delimiter) {
                        number.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;
                    } else if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                        number.successor_prefix = state[state.tmp.area].opt["year-suffix-delimiter"];
                    } else {
                        number.successor_prefix = state[state.tmp.area].opt.layout_delimiter;
                    }
                    number.UGLY_DELIMITER_SUPPRESS_HACK = true;
                    state.output.append(number, "literal");
                }
            }
            if (last_string_output && !state.tmp.group_context.tip.condition) {
                state.tmp.just_did_number = last_string_output.match(/[0-9]$/);
                if (state.output.current.tip.strings.suffix) {
                    state.tmp.just_did_number = false;
                }
            }
        };
        this.execs.push(func);
        target.push(this);
    }
};



/*global CSL: true */

CSL.Node["else-if"] = {
    //
    // these function are the same as those in if, might just clone
    build: function (state, target) {
        CSL.Conditions.TopNode.call(this, state, target);
        target.push(this);
    },
    configure: function (state, pos) {
        CSL.Conditions.Configure.call(this, state, pos);
    }
};

/*global CSL: true */

CSL.Node["else"] = {
    build: function (state, target) {
        target.push(this);
    },
    configure: function (state, pos) {
        if (this.tokentype === CSL.START) {
            state.configure.fail[(state.configure.fail.length - 1)] = pos;
        }
    }
};


/*global CSL: true */

CSL.Node["et-al"] = {
    build: function (state, target) {
        if (state.build.area === "citation" || state.build.area === "bibliography") {
            var func = function (state) {
                state.tmp.etal_node = this;
                if ("string" === typeof this.strings.term) {
                    state.tmp.etal_term = this.strings.term;
                }
            };
            this.execs.push(func);
        }
        target.push(this);
    }
};

/*global CSL: true */

CSL.Node.group = {
    build: function (state, target, realGroup) {
        var func, execs;
        this.realGroup = realGroup;
        if (this.tokentype === CSL.START) {
            CSL.Util.substituteStart.call(this, state, target);
            if (state.build.substitute_level.value()) {
                state.build.substitute_level.replace((state.build.substitute_level.value() + 1));
            }
            if (!this.juris) {
                target.push(this);
            }

            // newoutput
            func = function (state) {
                state.output.startTag("group", this);
                
                if (this.strings.label_form_override) {
                    if (!state.tmp.group_context.tip.label_form) {
                        state.tmp.group_context.tip.label_form = this.strings.label_form_override;
                    }
                }
                
                if (this.strings.label_capitalize_if_first_override) {
                    if (!state.tmp.group_context.tip.label_capitalize_if_first) {
                        state.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
                    }
                }
                
                if (this.realGroup) {
                    
                    if (state.tmp.group_context.tip.condition) {
                        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, this.strings.prefix, null, this);
                    }
                    
                    var condition = false;
                    var force_suppress = false;

                    // XXX Can we do something better for length here?
                    if (state.tmp.group_context.mystack.length) {
                        state.output.current.value().parent = state.tmp.group_context.tip.output_tip;
                    }
                    
                    // fieldcontextflag
                    var label_form = state.tmp.group_context.tip.label_form;
                    if (!label_form) {
                        label_form = this.strings.label_form_override;
                    }
                    
                    var label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
                    if (!label_capitalize_if_first) {
                        label_capitalize_if_first = this.strings.label_capitalize_if_first;
                    }
                    if (state.tmp.group_context.tip.condition) {
                        condition = state.tmp.group_context.tip.condition;
                        force_suppress = state.tmp.group_context.tip.force_suppress;
                        //force_suppress: false;
                    } else if (this.strings.reject) {
                        condition = {
                            test: this.strings.reject,
                            not: true
                        };
                    } else if (this.strings.require) {
                        condition = {
                            test: this.strings.require,
                            not: false
                        };
                    }
                    var context = {
                        old_term_predecessor: state.tmp.term_predecessor,
                        term_intended: false,
                        variable_attempt: false,
                        variable_success: false,
                        variable_success_parent: state.tmp.group_context.tip.variable_success,
                        output_tip: state.output.current.tip,
                        label_form: label_form,
                        label_static: state.tmp.group_context.tip.label_static,
                        label_capitalize_if_first: label_capitalize_if_first,
                        parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                        parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                        condition: condition,
                        force_suppress: force_suppress,
                        done_vars: state.tmp.group_context.tip.done_vars.slice()
                    };
                    if(this.non_parallel) {
                        var non_parallel = state.tmp.group_context.tip.non_parallel;
                        if (!non_parallel) {
                            non_parallel = {};
                        }
                        Object.assign(non_parallel, this.non_parallel);
                        context.non_parallel = non_parallel;
                    }
                    if(this.parallel_first) {
                        var parallel_first = state.tmp.group_context.tip.parallel_first;
                        if (!parallel_first) {
                            parallel_first = {};
                        }
                        Object.assign(parallel_first, this.parallel_first);
                        context.parallel_first = parallel_first;
                    }
                    if(this.parallel_last) {
                        var parallel_last = state.tmp.group_context.tip.parallel_last;
                        if (!parallel_last) {
                            parallel_last = {};
                        }
                        Object.assign(parallel_last, this.parallel_last);
                        context.parallel_last = parallel_last;
                    }
                    if (state.tmp.abbrev_trimmer && state.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                        if (!context.parallel_first) {
                            context.parallel_first = {};
                        }
                        for (var varname in state.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                            if (context.parallel_last[varname]) {
                                context.parallel_first[varname] = true;
                                delete context.parallel_last[varname];
                            }
                        }
                    }
                    
                    /*
                    if(this.parallel_last_override) {
                        var parallel_last_override = state.tmp.group_context.tip.parallel_last_override;
                        if (!parallel_last_override) {
                            parallel_last_override = {};
                        }
                        Object.assign(parallel_last_override, this.parallel_last_override);
                        context.parallel_last_override = parallel_last_override;
                    }
                     */
                    state.tmp.group_context.push(context);

                    if (state.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                        if (!state.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                            state.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                        }
                        for (var varname in this.parallel_last_to_first) {
                            state.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                        }
                    }
                    
                    //if (!state.tmp.just_looking) {
                    //    print("       flags="+JSON.stringify(state.tmp.group_context.tip, params))
                    //}
                }
            };
            //
            // Paranoia.  Assure that this init function is the first executed.
            execs = [];
            execs.push(func);
            this.execs = execs.concat(this.execs);

            // "Special handling" for nodes that contain only
            // publisher and place, with no affixes. For such
            // nodes only, parallel publisher/place pairs
            // will be parsed out and properly joined, piggybacking on
            // join parameters set on cs:citation or cs:bibliography.
            if (this.strings["has-publisher-and-publisher-place"]) {
                // Pass variable string values to the closing
                // tag via a global, iff they conform to expectations.
                state.build["publisher-special"] = true;
                if (this.strings["subgroup-delimiter"]) {
                    // Set the handling function only if name-delimiter
                    // is set on the parent cs:citation or cs:bibliography
                    // node.
                    func = function (state, Item) {
                        if (Item.publisher && Item["publisher-place"]) {
                            var publisher_lst = Item.publisher.split(/;\s*/);
                            var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                            if (publisher_lst.length > 1
                                && publisher_lst.length === publisher_place_lst.length) {
                                state.publisherOutput = new CSL.PublisherOutput(state, this);
                                state.publisherOutput["publisher-list"] = publisher_lst;
                                state.publisherOutput["publisher-place-list"] = publisher_place_lst;
                            }
                        }
                    };
                    this.execs.push(func);
                }
            }

            if (this.juris) {
                // "Special handling" for jurisdiction macros
                // We try to instantiate these as standalone token lists.
                // If available, the token list is executed,
                // the result is written directly into output,
                // and control returns here.

                // So we'll have something like this:
                // * expandMacro() in util_node.js flags juris- macros
                //   on build. [DONE]
                // * Those are picked up here, and
                //   - A runtime function attempts to fetch and instantiate
                //     the macros in separate token lists under a segment
                //     opened for the jurisdiction. We assume that the
                //     jurisdiction has a full set of macros. That will need
                //     to be enforced by validation. [DONE HERE, function is TODO]
                //   - Success or failure is marked in a runtime flag object
                //     (in citeproc.opt). [DONE]
                //   - After the instantiation function comes a test, for
                //     juris- macros only, which either runs diverted code,
                //     or proceeds as per normal through the token list. [TODO]
                // I think that's all there is to it.
                
                // Code for fetching an instantiating?

                var choose_start = new CSL.Token("choose", CSL.START);
                CSL.Node.choose.build.call(choose_start, state, target);
                
                var if_start = new CSL.Token("if", CSL.START);

                func = (function (macroName) {
                    return function (Item, item) {
                        return CSL.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
                    }
                }(this.juris));
                
                if_start.tests ? {} : if_start.tests = [];
                if_start.tests.push(func);
                if_start.test = state.fun.match.any(if_start, state, if_start.tests);
                target.push(if_start);
                var text_node = new CSL.Token("text", CSL.SINGLETON);
                func = function (state, Item, item) {
                    // This will run the juris- token list.
                    var itemItem = Item;
                    if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                        itemItem = item;
                    }
                    var next = 0;
                    if (state.juris[itemItem["best-jurisdiction"]][this.juris]) {
                        while (next < state.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                            next = CSL.tokenExec.call(state, state.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                        }
                    }
                };
                text_node.juris = this.juris;
                text_node.execs.push(func);
                target.push(text_node);

                var if_end = new CSL.Token("if", CSL.END);
                CSL.Node["if"].build.call(if_end, state, target);
                var else_start = new CSL.Token("else", CSL.START);
                CSL.Node["else"].build.call(else_start, state, target);
            }
        }

        if (this.tokentype === CSL.END) {
            
            // Unbundle and print publisher lists
            // Same constraints on creating the necessary function here
            // as above. The full content of the group formatting token
            // is apparently not available on the closing tag here,
            // hence the global flag on state.build.
            if (state.build["publisher-special"]) {
                state.build["publisher-special"] = false;
                func = function (state) {
                    if (state.publisherOutput) {
                        state.publisherOutput.render();
                        state.publisherOutput = false;
                    }
                };
                this.execs.push(func);
            }
            
            // quashnonfields
            func = function (state, Item, item) {
                if (!state.tmp.group_context.tip.condition) {
                    if (state.output.current.tip.strings.suffix) {
                        state.tmp.just_did_number = false;
                    }
                }
                state.output.endTag();
                if (this.realGroup) {
                    var flags = state.tmp.group_context.pop();
                    if (flags.parallel_delimiter_override) {
                        state.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                        if (!state.tmp.just_looking && state.registry.registry[Item.id].master) {
                            state.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                        }
                    }
                    if (flags.parallel_delimiter_override_on_suppress) {
                        state.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
                    }
                    if (state.tmp.area === "bibliography_sort") {
                        var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                        if (this.strings.sort_direction && citationNumberIdx > -1 && state.tmp.group_context.length() == 1) {
                            if (this.strings.sort_direction === CSL.DESCENDING) {
                                state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;
                            } else {
                                state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;
                            }
                            flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1));
                        }
                    }
                    //var params = ["condition", "variable_success", "force_suppress","term_intended", "variable_attempt"]
                    //if (!state.tmp.just_looking) {
                    //    print("POP parent="+JSON.stringify(state.tmp.group_context.tip, params))
                    //    print("    flags="+JSON.stringify(flags, params));
                    //}
                    if (flags.condition) {
                        flags.force_suppress = CSL.EVALUATE_GROUP_CONDITION(state, flags);
                    }
                    if (state.tmp.group_context.tip.condition) {
                        state.tmp.group_context.tip.force_suppress = flags.force_suppress;
                    }
                            
                    if (!flags.force_suppress && (flags.variable_success || (flags.term_intended && !flags.variable_attempt))) {
                        if (!this.isJurisLocatorLabel) {
                            state.tmp.group_context.tip.variable_success = true;
                        }
                        var blobs = state.output.current.value().blobs;
                        var pos = state.output.current.value().blobs.length - 1;

                        if (!state.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                            // flags.parallel_last
                            // flags.parallel_first

                            // Returns true ONLY if all variables listed on this group are repeats.
                            var hasRepeat = state.parallel.checkRepeats(flags);
                            if (hasRepeat) {
                                if (blobs) {
                                    blobs.pop();
                                }
                            }
                            if (state.tmp.cite_index > 0 && (hasRepeat || (!flags.parallel_first && !flags.parallel_last && !flags.non_parallel))) {
                                //state.sys.print(`${state.tmp.cite_index} ${JSON.stringify(state.tmp.suppress_repeats, null, 2)}`)
                                var info = state.tmp.suppress_repeats[state.tmp.cite_index-1];
                                if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                                    state.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                                } else if (flags.parallel_delimiter_override && info.SIBLING) {
                                    state.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                                }
                            }
                        }
                    } else {
                        state.tmp.term_predecessor = flags.old_term_predecessor;
                        state.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                        if (flags.force_suppress && !state.tmp.group_context.tip.condition) {
                            state.tmp.group_context.tip.variable_attempt = true;
                            state.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                        }
                        if (flags.force_suppress) {
                            // 2019-04-15
                            // This is removing variables done within the group we're leaveing from global
                            // done_vars? How does that make sense?
                            // Ah. This is a FAILURE. So removing from done_vars allows it to re-render
                            // later in the cite if desired.
                            // Currently no tests fail from removing the condition, but leaving it in.
                            for (var i=0,ilen=flags.done_vars.length;i<ilen;i++) {
                                var doneVar = flags.done_vars[i];
                                for (var j=0,jlen=state.tmp.done_vars.length; j<jlen; j++) {
                                    if (state.tmp.done_vars[j] === doneVar) {
                                        state.tmp.done_vars = state.tmp.done_vars.slice(0, j).concat(state.tmp.done_vars.slice(j+1));
                                    }
                                }
                            }
                        }
                        if (state.output.current.value().blobs) {
                            state.output.current.value().blobs.pop();
                        }
                    }
                }
            };
            this.execs.push(func);
            
            if (this.juris) {
                var else_end = new CSL.Token("else", CSL.END);
                CSL.Node["else"].build.call(else_end, state, target);
                var choose_end = new CSL.Token("choose", CSL.END);
                CSL.Node.choose.build.call(choose_end, state, target);
            }
        }

        if (this.tokentype === CSL.END) {
            if (!this.juris) {
                target.push(this);
            }
            if (state.build.substitute_level.value()) {
                state.build.substitute_level.replace((state.build.substitute_level.value() - 1));
            }
            CSL.Util.substituteEnd.call(this, state, target);
        }
    }
};

/*global CSL: true */

CSL.Node["if"] = {
    build: function (state, target) {
        CSL.Conditions.TopNode.call(this, state, target);
        target.push(this);
    },
    configure: function (state, pos) {
        CSL.Conditions.Configure.call(this, state, pos);
    }
};


CSL.Node["conditions"] = {
    build: function (state) {
        if (this.tokentype === CSL.START) {
            state.tmp.conditions.addMatch(this.match);
        }
        if (this.tokentype === CSL.END) {
            state.tmp.conditions.matchCombine();
        }
    }
};

CSL.Node["condition"] = {
    build: function (state) {
        if (this.tokentype === CSL.SINGLETON) {
            var test = state.fun.match[this.match](this, state, this.tests);
            state.tmp.conditions.addTest(test);
        }
    }
};

CSL.Conditions = {};

CSL.Conditions.TopNode = function (state) {
    var func;
    if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
        if (this.locale) {
            state.opt.lang = this.locale;
        }
        if (!this.tests || !this.tests.length) {
            // Set up the condition compiler with our current context
            state.tmp.conditions = new CSL.Conditions.Engine(state, this);
        } else {
            // The usual.
            this.test = state.fun.match[this.match](this, state, this.tests);
        }
        if (state.build.substitute_level.value() === 0) {
            func = function(state) {
                state.tmp.condition_counter++;
            };
            this.execs.push(func);
        }
    }
    if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
        if (state.build.substitute_level.value() === 0) {
            func = function (state) {
                state.tmp.condition_counter--;
                if (state.tmp.condition_lang_counter_arr.length > 0) {
                    var counter = state.tmp.condition_lang_counter_arr.slice(-1)[0];
                    if (counter === state.tmp.condition_counter) {
                        state.opt.lang = state.tmp.condition_lang_val_arr.pop();
                        state.tmp.condition_lang_counter_arr.pop();
                    }
                }
                if (this.locale_default) {
                    // Open output tag with locale marker
                    state.output.current.value().old_locale = this.locale_default;
                    state.output.closeLevel("empty");
                    state.opt.lang = this.locale_default;
                }
            };
            this.execs.push(func);
        }
        // closingjump
        func = function (state) {
            var next = this[state.tmp.jump.value()];
            return next;
        };
        this.execs.push(func);
        if (this.locale_default) {
            state.opt.lang = this.locale_default;
        }
    }
};

CSL.Conditions.Configure = function (state, pos) {
    if (this.tokentype === CSL.START) {
        // jump index on failure
        this.fail = state.configure.fail.slice(-1)[0];
        this.succeed = this.next;
        state.configure.fail[(state.configure.fail.length - 1)] = pos;
    } else if (this.tokentype === CSL.SINGLETON) {
        // jump index on failure
        this.fail = this.next;
        this.succeed = state.configure.succeed.slice(-1)[0];
        state.configure.fail[(state.configure.fail.length - 1)] = pos;
    } else {
        // jump index on success
        this.succeed = state.configure.succeed.slice(-1)[0];
        this.fail = this.next;
    }
};

CSL.Conditions.Engine = function (state, token) {
    this.token = token;
    this.state = state;
};

CSL.Conditions.Engine.prototype.addTest = function (test) {
    this.token.tests ? {} : this.token.tests = [];
    this.token.tests.push(test);
};

CSL.Conditions.Engine.prototype.addMatch = function (match) {
    this.token.match = match;
};

CSL.Conditions.Engine.prototype.matchCombine = function () {
    this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
};

/*global CSL: true */

CSL.Node.info = {
    build: function (state) {
        if (this.tokentype === CSL.START) {
            state.build.skip = "info";
        } else {
            state.build.skip = false;
        }
    }
};


/*global CSL: true */

CSL.Node.institution = {
    build: function (state, target) {
        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {

            var func = function (state) {
                if ("string" === typeof this.strings.delimiter) {
                    state.tmp.institution_delimiter = this.strings.delimiter;
                } else {
                    state.tmp.institution_delimiter = state.tmp.name_delimiter;
                }

                // This is the same code for the same result as in node_name.js, 
                // but when cs:institution comes on stream, it may produce
                // different results.
                if ("text" === state.inheritOpt(this, "and")) {
                    this.and_term = state.getTerm("and", "long", 0);
                } else if ("symbol" === state.inheritOpt(this, "and")) {
                    if (state.opt.development_extensions.expect_and_symbol_form) {
                        this.and_term = state.getTerm("and", "symbol", 0);
                    } else {
                        this.and_term = "&";
                    }
                } else if ("none" === state.inheritOpt(this, "and")) {
                    this.and_term = state.tmp.institution_delimiter;
                }
                if ("undefined" === typeof this.and_term && state.tmp.and_term) {
                    // this.and_term = state.getTerm("and", "long", 0);
                    this.and_term = state.tmp.and_term;
                }
                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                    this.and_prefix_single = " ";
                    this.and_prefix_multiple = ", ";
                    if ("string" === typeof state.tmp.institution_delimiter) {
                        this.and_prefix_multiple = state.tmp.institution_delimiter;
                    }
                    this.and_suffix = " ";
                } else {
                    this.and_prefix_single = "";
                    this.and_prefix_multiple = "";
                    this.and_suffix = "";
                }
                if (state.inheritOpt(this, "delimiter-precedes-last") === "always") {
                    this.and_prefix_single = state.tmp.institution_delimiter;
                } else if (state.inheritOpt(this, "delimiter-precedes-last") === "never") {
                    // Slightly fragile: could test for charset here to make
                    // this more certain.
                    if (this.and_prefix_multiple) {
                        this.and_prefix_multiple = " ";
                    }
                }
                
                this.and = {};
                if ("undefined" !== typeof this.and_term) {
                    state.output.append(this.and_term, "empty", true);
                    this.and.single = state.output.pop();
                    this.and.single.strings.prefix = this.and_prefix_single;
                    this.and.single.strings.suffix = this.and_suffix;
                    state.output.append(this.and_term, "empty", true);
                    this.and.multiple = state.output.pop();
                    this.and.multiple.strings.prefix = this.and_prefix_multiple;
                    this.and.multiple.strings.suffix = this.and_suffix;
                } else if ("undefined" !== this.strings.delimiter) {
                    this.and.single = new CSL.Blob(state.tmp.institution_delimiter);
                    this.and.single.strings.prefix = "";
                    this.and.single.strings.suffix = "";
                    this.and.multiple = new CSL.Blob(state.tmp.institution_delimiter);
                    this.and.multiple.strings.prefix = "";
                    this.and.multiple.strings.suffix = "";
                }
                state.nameOutput.institution = this;
            };
            this.execs.push(func);
        }
        target.push(this);
    },
    configure: function (state) {
        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {
            state.build.has_institution = true;
        }
    }
};

/*global CSL: true */

CSL.Node["institution-part"] = {
    build: function (state, target) {
        var func;
        if ("long" === this.strings.name) {
            if (this.strings["if-short"]) {
                func = function (state) {
                    state.nameOutput.institutionpart["long-with-short"] = this;
                };
            } else {
                func = function (state) {
                    state.nameOutput.institutionpart["long"] = this;
                };
            }
        } else if ("short" === this.strings.name) {
            func = function (state) {
                state.nameOutput.institutionpart["short"] = this;
            };
        }
        this.execs.push(func);
        target.push(this);
    }
};

/*global CSL: true */

CSL.Node.key = {
    build: function (state, target) {
        
        target = state[state.build.root + "_sort"].tokens;

        var func;
        var start_key = new CSL.Token("key", CSL.START);

        state.tmp.root = state.build.root;

        // The params object for build and runtime (tmp) really shouldn't have been separated.
        // Oh, well.
        start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
        start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
        start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");


        // initialize done vars
        func = function (state) {
            state.tmp.done_vars = [];
        };
        start_key.execs.push(func);

        // initialize output queue
        func = function (state) {
            state.output.openLevel("empty");
        };
        start_key.execs.push(func);

        // sort direction
        var sort_direction = [];
        if (this.strings.sort_direction === CSL.DESCENDING) {
            //print("sort: descending on "+state.tmp.area);
            sort_direction.push(1);
            sort_direction.push(-1);
        } else {
            //print("sort: ascending");
            sort_direction.push(-1);
            sort_direction.push(1);
        }
        state[state.build.area].opt.sort_directions.push(sort_direction);

        if (CSL.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
            state.build.date_key = true;
        }

        // et al init
        func = function (state) {
            state.tmp.sort_key_flag = true;
            //print("== key node function ==");
            if (state.inheritOpt(this, "et-al-min")) {
                state.tmp["et-al-min"] = state.inheritOpt(this, "et-al-min");
            }
            if (state.inheritOpt(this, "et-al-use-first")) {
                state.tmp["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
            }
            if ("boolean" === typeof state.inheritOpt(this, "et-al-use-last")) {
                state.tmp["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                //print("  set tmp et-al-use-last: "+this.strings["et-al-use-last"])
            }
        };
        start_key.execs.push(func);
        target.push(start_key);
        
        //
        // ops to initialize the key's output structures
        if (this.variables.length) {
            var variable = this.variables[0];
            if (CSL.NAME_VARIABLES.indexOf(variable) > -1) {
                //
                // Start tag
                var names_start_token = new CSL.Token("names", CSL.START);
                names_start_token.tokentype = CSL.START;
                names_start_token.variables = this.variables;
                CSL.Node.names.build.call(names_start_token, state, target);
                //
                // Name tag
                var name_token = new CSL.Token("name", CSL.SINGLETON);
                name_token.tokentype = CSL.SINGLETON;
                name_token.strings["name-as-sort-order"] = "all";
                name_token.strings["sort-separator"] = " ";
                name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
                name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
                CSL.Node.name.build.call(name_token, state, target);
                //
                // Institution tag
                var institution_token = new CSL.Token("institution", CSL.SINGLETON);
                institution_token.tokentype = CSL.SINGLETON;
                CSL.Node.institution.build.call(institution_token, state, target);
                //
                // End tag
                var names_end_token = new CSL.Token("names", CSL.END);
                names_end_token.tokentype = CSL.END;
                CSL.Node.names.build.call(names_end_token, state, target);
            } else {
                var single_text = new CSL.Token("text", CSL.SINGLETON);
                single_text.strings.sort_direction = this.strings.sort_direction;
                single_text.dateparts = this.dateparts;
                if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                    // citation-number is virtualized. As a sort key it has no effect on registry
                    // sort order per se, but if set to DESCENDING, it reverses the sequence of numbers representing
                    // bib entries.
                    if (variable === "citation-number") {
                        func = function (state, Item) {
                            if (state.tmp.area === "bibliography_sort") {
                                if (this.strings.sort_direction === CSL.DESCENDING) {
                                    state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;
                                } else {
                                    state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;
                                }
                            }
                            if (state.tmp.area === "citation_sort" && state.bibliography_sort.tmp.citation_number_map) {
                                var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];
                            } else {
                                var num = state.registry.registry[Item.id].seq;
                            }
                            if (num) {
                                // Code currently in util_number.js
                                num = CSL.Util.padding("" + num);
                            }
                            state.output.append(num, this);
                        };
                    } else {
                        func = function (state, Item) {
                            var num = false;
                            num = Item[variable];
                            // XXX What if this is NaN?
                            if (num) {
                                // Code currently in util_number.js
                                num = CSL.Util.padding(num);
                            }
                            state.output.append(num, this);
                        };
                    }
                } else if (variable === "citation-label") {
                    func = function (state, Item) {
                        var trigraph = state.getCitationLabel(Item);
                        state.output.append(trigraph, this);
                    };
                } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {
                    func = CSL.dateAsSortKey;
                    single_text.variables = this.variables;
                } else if ("title" === variable) {
                    var abbrevfam = "title";
                    var abbrfall = false;
                    var altvar = false;
                    var transfall = true;
                    func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                } else if ("court-class" === variable) {
                    func = function(state, Item, item) {
                        CSL.INIT_JURISDICTION_MACROS(state, Item, item, "juris-main");
                        // true is for sortKey mode
                        var cls = CSL.GET_COURT_CLASS(state, Item, true);
                        state.output.append(cls, "empty");
                    };
                } else {
                    func = function (state, Item) {
                        var varval = Item[variable];
                        state.output.append(varval, "empty");
                    };
                }
                single_text.execs.push(func);
                target.push(single_text);
            }
        } else { // macro
            //
            // if it's not a variable, it's a macro
            var token = new CSL.Token("text", CSL.SINGLETON);
            token.strings.sort_direction = this.strings.sort_direction;
            token.postponed_macro = this.postponed_macro;
            CSL.expandMacro.call(state, token, target);
        }
        //
        // ops to output the key string result to an array go
        // on the closing "key" tag before it is pushed.
        // Do not close the level.
        var end_key = new CSL.Token("key", CSL.END);

        // Eliminated at revision 1.0.159.
        // Was causing non-fatal error "wanted empty but found group".
        // Possible contributor to weird "PAGES" bug?
        //func = function (state, Item) {
        //state.output.closeLevel("empty");
        //};
        //end_key.execs.push(func);
        
        // store key for use
        func = function (state) {
            var keystring = state.output.string(state, state.output.queue);
            if (state.sys.normalizeUnicode) {
                keystring = state.sys.normalizeUnicode(keystring);
            }
            keystring = keystring ? (keystring.split(" ").join(state.opt.sort_sep) + state.opt.sort_sep) : "";
            //print("keystring: (" + keystring + ") " + typeof keystring + " " + state.tmp.area);
            //SNIP-END
            //state.sys.print("keystring: (" + keystring + ") " + typeof keystring + " " + state.tmp.area);
            if ("" === keystring) {
                keystring = undefined;
            }
            if ("string" !== typeof keystring || state.tmp.empty_date) {
                keystring = undefined;
                state.tmp.empty_date = false;
            }
            state[state[state.tmp.area].root + "_sort"].keys.push(keystring);
            state.tmp.value = [];
        };
        end_key.execs.push(func);

        // Set year-suffix key on anything that looks like a date
        if (state.build.date_key) {
            if (state.build.area === "citation" && state.build.extension === "_sort") {
                // ascending sort always
                state[state.build.area].opt.sort_directions.push([-1,1]);
                func = function (state, Item) {
                    // year-suffix Key
                    var year_suffix = state.registry.registry[Item.id].disambig.year_suffix;
                    if (!year_suffix) {
                        year_suffix = 0;
                    }
                    var key = CSL.Util.padding("" + year_suffix);
                    state[state.tmp.area].keys.push(key);
                };
                end_key.execs.push(func);
            }
            state.build.date_key = false;
        }

        // reset key params
        func = function (state) {
            // state.tmp.name_quash = new Object();

            // XXX This should work, should be necessary, but doesn't and isn't.
            //state.output.closeLevel("empty");

            state.tmp["et-al-min"] = undefined;
            state.tmp["et-al-use-first"] = undefined;
            state.tmp["et-al-use-last"] = undefined;
            state.tmp.sort_key_flag = false;
        };
        end_key.execs.push(func);
        target.push(end_key);
    }
};

/*global CSL: true */

CSL.Node.label = {
    build: function (state, target) {
        
        if (this.strings.term) {
            // Non-names labels
            var func = function (state, Item, item) {
                // Must accomplish this without touching strings
                // shared with the calling application: "sub verbo"
                // and "sub-verbo" must both pass, as they stand.
                //if (item && item.label === "sub verbo") {
                //    item.label = "sub-verbo";
                //}
                // This is abstracted away, because the same
                // logic must be run in cs:names.
                var termtxt = CSL.evaluateLabel(this, state, Item, item);
                if (item && this.strings.term === "locator") {

                    item.section_form_override = this.strings.form;

                }
                if (termtxt) {
                    state.tmp.group_context.tip.term_intended = true;
                }
                CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, termtxt, null, this);
                if (termtxt.indexOf("%s") === -1) {
                    // ^ Suppress output here if we have an embedded term
                    if (this.strings.capitalize_if_first) {
                        if (!state.tmp.term_predecessor && !(state.opt["class"] === "in-text" && state.tmp.area === "citation")) {
                            termtxt = CSL.Output.Formatters["capitalize-first"](state, termtxt);
                        }
                    }
                    state.output.append(termtxt, this);
                }
            };
            this.execs.push(func);
        } else {
            if (!this.strings.form) {
                this.strings.form = "long";
            }
            // Names labels
            // Picked up in names END
            var namevars = state.build.names_variables[state.build.names_variables.length-1];
            var namelabels = state.build.name_label[state.build.name_label.length-1];
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                if (!namelabels[namevars[i]]) {
                    namelabels[namevars[i]] = {};
                }
            }
            if (!state.build.name_flag) {
                for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                    namelabels[namevars[i]].before = this;
                }
            } else {
                for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                    namelabels[namevars[i]].after = this;
                }
            }
        }
        target.push(this);
    }
};

/*global CSL: true */

CSL.Node.layout = {
    build: function (state, target) {
        var func, prefix_token, suffix_token, tok;

        function setSuffix() {
            if (state.build.area === "bibliography") {
                suffix_token = new CSL.Token("text", CSL.SINGLETON);
                func = function(state) {
                    // Suppress suffix on all but the last item in bibliography parallels
                    if (!state.tmp.parallel_and_not_last) {
                        var suffix;
                        if (state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale]) {
                            suffix = state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale].suffix;
                        } else {
                            suffix = state.bibliography.opt.layout_suffix;
                        }

                        // If @display is used, layout suffix is placed on the last
                        // immediate child of the layout, which we assume will be a
                        // @display group node.
                        var topblob = state.output.current.value();
                        if (state.opt.using_display) {
                            topblob.blobs[topblob.blobs.length-1].strings.suffix = suffix;
                        } else {
                            topblob.strings.suffix = suffix;
                        }
                    }
                    if (state.bibliography.opt["second-field-align"]) {
                        // closes bib_other
                        state.output.endTag("bib_other");
                    }
                };
                suffix_token.execs.push(func);
                target.push(suffix_token);
            }
        }

        if (this.tokentype === CSL.START) {

            if (this.locale_raw) {
                state.build.current_default_locale = this.locale_raw;
            } else {
                state.build.current_default_locale = state.opt["default-locale"];
            }

            func = function (state, Item, item) {
                if (state.opt.development_extensions.apply_citation_wrapper
                    && state.sys.wrapCitationEntry
                    && !state.tmp.just_looking
                    && Item.system_id 
                    && state.tmp.area === "citation") { 

                    var cite_entry = new CSL.Token("group", CSL.START);
                    cite_entry.decorations = [["@cite", "entry"]];
                    state.output.startTag("cite_entry", cite_entry);
                    state.output.current.value().item_id = Item.system_id;
                    if (item) {
                        state.output.current.value().locator_txt = item.locator_txt;
                        state.output.current.value().suffix_txt = item.suffix_txt;
                    }
                }
            };
            this.execs.push(func);
        }

        // XXX Works, but using state.tmp looks wrong here? We're in the build layer ...
        if (this.tokentype === CSL.START && !state.tmp.cite_affixes[state.build.area]) {
            //
            // done_vars is used to prevent the repeated
            // rendering of variables
            //
            // initalize done vars
            func = function (state, Item, item) {

                state.tmp.done_vars = [];
                if (item && item["author-only"]) {
                    state.tmp.done_vars.push("locator");
                }
                if (state.opt.suppressedJurisdictions[Item["country"]]
                    && Item["country"]
                    && ["treaty", "patent"].indexOf(Item.type) === -1) {
                    
                    state.tmp.done_vars.push("country");
                }
                if (!state.tmp.just_looking && state.registry.registry[Item.id] && state.registry.registry[Item.id].parallel) {
                    state.tmp.done_vars.push("first-reference-note-number");
                }
                // trimmer is not available in getAmbiguousCite
                if (!state.tmp.just_looking && state.tmp.abbrev_trimmer && Item.jurisdiction) {
                    for (var field in state.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                        state.tmp.done_vars.push(field);
                    }
                }

                //CSL.debug(" === init rendered_name === ");
                state.tmp.rendered_name = false;
            };
            this.execs.push(func);
            // set opt delimiter
            func = function (state) {
                // just in case
                state.tmp.sort_key_flag = false;
            };
            this.execs.push(func);
            
            // reset nameset counter [all nodes]
            func = function (state) {
                state.tmp.nameset_counter = 0;
            };
            this.execs.push(func);

            func = function (state, Item) {
                var tok = new CSL.Token();
                state.output.openLevel(tok);
            };
            this.execs.push(func);
            target.push(this);

            if (state.build.area === "citation") {
                prefix_token = new CSL.Token("text", CSL.SINGLETON);
                func = function (state, Item, item) {
                    if (item && item.prefix) {
                        var prefix = CSL.checkPrefixSpaceAppend(state, item.prefix);
                        if (!state.tmp.just_looking) {
                            prefix = state.output.checkNestedBrace.update(prefix);
                        }
                        var ignorePredecessor = CSL.checkIgnorePredecessor(state, prefix);
                        state.output.append(prefix, this, false, ignorePredecessor);
                    }
                };
                prefix_token.execs.push(func);
                target.push(prefix_token);
            }
        }

        // Cast token to be used in one of the configurations below.
        var my_tok;
        if (this.locale_raw) {
            my_tok = new CSL.Token("dummy", CSL.START);
            my_tok.locale = this.locale_raw;
            my_tok.strings.delimiter = this.strings.delimiter;
            my_tok.strings.suffix = this.strings.suffix;
            if (!state.tmp.cite_affixes[state.build.area]) {
                state.tmp.cite_affixes[state.build.area] = {};
            }
        }

        if (this.tokentype === CSL.START) {
            state.build.layout_flag = true;
                            
            // Only run the following once, to set up the final layout node ...
            if (!this.locale_raw) {
                //
                // save out decorations for flipflop processing [final node only]
                //
                state[state.tmp.area].opt.topdecor = [this.decorations];
                state[(state.tmp.area + "_sort")].opt.topdecor = [this.decorations];

                state[state.build.area].opt.layout_prefix = this.strings.prefix;
                state[state.build.area].opt.layout_suffix = this.strings.suffix;
                state[state.build.area].opt.layout_delimiter = this.strings.delimiter;

                state[state.build.area].opt.layout_decorations = this.decorations;
                
                // Only do this if we're running conditionals
                if (state.tmp.cite_affixes[state.build.area]) {
                    // if build_layout_locale_flag is true,
                    // write cs:else START to the token list.
                    tok = new CSL.Token("else", CSL.START);
                    CSL.Node["else"].build.call(tok, state, target);
                }

            } // !this.locale_raw

            // Conditionals
            if (this.locale_raw) {
                if (!state.build.layout_locale_flag) {
                    // if layout_locale_flag is untrue,
                    // write cs:choose START and cs:if START
                    // to the token list.
                    var choose_tok = new CSL.Token("choose", CSL.START);
                    CSL.Node.choose.build.call(choose_tok, state, target);
                    my_tok.name = "if";
                    CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                    CSL.Node["if"].build.call(my_tok, state, target);
                } else {
                    // if build_layout_locale_flag is true,
                    // write cs:else-if START to the token list.
                    my_tok.name = "else-if";
                    CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                    CSL.Node["else-if"].build.call(my_tok, state, target);
                }
                // cite_affixes for this node
                state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
                state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
                state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
            }
        }
        if (this.tokentype === CSL.END) {
            if (this.locale_raw) {
                setSuffix();
                if (!state.build.layout_locale_flag) {
                    // If layout_locale_flag is untrue, write cs:if END
                    // to the token list.
                    my_tok.name = "if";
                    my_tok.tokentype = CSL.END;
                    CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                    CSL.Node["if"].build.call(my_tok, state, target);
                    state.build.layout_locale_flag = true;
                } else {
                    // If layout_locale_flag is true, write cs:else-if END
                    // to the token list.
                    my_tok.name = "else-if";
                    my_tok.tokentype = CSL.END;
                    CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                    CSL.Node["else-if"].build.call(my_tok, state, target);
                }
            }
            if (!this.locale_raw) {
                setSuffix();
                // Only add this if we're running conditionals
                if (state.tmp.cite_affixes[state.build.area]) {
                    // If layout_locale_flag is true, write cs:else END
                    // and cs:choose END to the token list.
                    if (state.build.layout_locale_flag) {
                        tok = new CSL.Token("else", CSL.END);
                        CSL.Node["else"].build.call(tok, state, target);
                        tok = new CSL.Token("choose", CSL.END);
                        CSL.Node.choose.build.call(tok, state, target);
                    }
                }
                state.build_layout_locale_flag = true;
                if (state.build.area === "citation") {
                    suffix_token = new CSL.Token("text", CSL.SINGLETON);
                    func = function (state, Item, item) {
                        if (item && item.suffix) {
                            var suffix = CSL.checkSuffixSpacePrepend(state, item.suffix);
                            if (!state.tmp.just_looking) {
                                suffix = state.output.checkNestedBrace.update(suffix);
                            }
                            state.output.append((suffix), this);
                        }
                    };
                    suffix_token.execs.push(func);
                    target.push(suffix_token);
                }

                // Closes wrapper token
                func = function (state) {
                    state.output.closeLevel();
                };
                this.execs.push(func);
                func = function (state, Item) {
                    if (state.opt.development_extensions.apply_citation_wrapper
                        && state.sys.wrapCitationEntry
                        && !state.tmp.just_looking
                        && Item.system_id 
                        && state.tmp.area === "citation") { 
                        
                        state.output.endTag(); // closes citation link wrapper
                    }
                };
                this.execs.push(func);
                target.push(this);
                state.build.layout_flag = false;
                state.build.layout_locale_flag = false;
            } // !this.layout_raw
        }
    }
};

/*global CSL: true */

CSL.Node.macro = {
    build: function () {}
};

/*global CSL: true */

CSL.Node.alternative = {
    build: function (state, target) {
        if (this.tokentype === CSL.START) {

            var choose_tok = new CSL.Token("choose", CSL.START);
            CSL.Node["choose"].build.call(choose_tok, state, target);

            var if_tok = new CSL.Token("if", CSL.START);
            CSL.Attributes["@alternative-node-internal"].call(if_tok, state);
            CSL.Node["if"].build.call(if_tok, state, target);

            var func = function(state, Item) {

                state.tmp.oldItem = Item;
                state.tmp.oldLang = state.opt.lang;
                state.tmp.abort_alternative = true;

                if (Item["language-name"] && Item["language-name-original"]) {

                    var newItem = JSON.parse(JSON.stringify(Item));

                    newItem.language = newItem["language-name"];
                    var langspec = CSL.localeResolve(newItem.language, state.opt["default-locale"][0]);

                    if (state.opt.multi_layout) {
                        for (var i in state.opt.multi_layout) {
                            var locale_list = state.opt.multi_layout[i];
                            var gotlang = false;
                            for (var j in locale_list) {
                                var tryspec = locale_list[j];
                                if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                                    gotlang = locale_list[0].best;
                                    break;
                                }
                            }
                            if (!gotlang) {
                                gotlang = state.opt["default-locale"][0];
                            }
                            state.opt.lang = gotlang;
                        }
                    }

                    for (var key in newItem) {
                        if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                            if (newItem.multi && newItem.multi._keys[key]) {
                                var deleteme = true;
                                for (var lang in newItem.multi._keys[key]) {
                                    if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                                        deleteme = false;
                                        break;
                                    }
                                }
                                if (deleteme) {
                                    delete newItem[key];
                                }
                            } else {
                                delete newItem[key];
                            }
                        }
                    }
                    for (var key in newItem) {
                        if (key.slice(0, 4) === "alt-") {
                            newItem[key.slice(4)] = newItem[key];
                            state.tmp.abort_alternative = false;
                        } else {
                            if (newItem.multi && newItem.multi._keys) {
                                if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                                    if (newItem.multi._keys[key][langspec.best]) {
                                        newItem[key] = newItem.multi._keys[key][langspec.best];
                                        state.tmp.abort_alternative = false;
                                    } else if (newItem.multi._keys[key][langspec.base]) {
                                        newItem[key] = newItem.multi._keys[key][langspec.base];
                                        state.tmp.abort_alternative = false;
                                    } else if (newItem.multi._keys[key][langspec.bare]) {
                                        newItem[key] = newItem.multi._keys[key][langspec.bare];
                                        state.tmp.abort_alternative = false;
                                    }
                                }
                            }
                        }
                    }
                }

                state.output.openLevel(this);
                state.registry.refhash[Item.id] = newItem;
                state.nameOutput = new CSL.NameOutput(state, newItem);
            };
            this.execs.push(func);
            target.push(this);

            var choose_tok = new CSL.Token("choose", CSL.START);
            CSL.Node["choose"].build.call(choose_tok, state, target);

            var if_tok = new CSL.Token("if", CSL.START);
            CSL.Attributes["@alternative-node-internal"].call(if_tok, state);
            var func = function(state) {
                state.tmp.abort_alternative = true;
            };
            if_tok.execs.push(func);
            CSL.Node["if"].build.call(if_tok, state, target);

        } else if (this.tokentype === CSL.END) {

            var if_tok = new CSL.Token("if", CSL.END);
            CSL.Node["if"].build.call(if_tok, state, target);

            var choose_tok = new CSL.Token("choose", CSL.END);
            CSL.Node["choose"].build.call(choose_tok, state, target);

            var func = function(state, Item) {
                state.output.closeLevel();
                state.registry.refhash[Item.id] = state.tmp.oldItem;
                state.opt.lang = state.tmp.oldLang;
                state.nameOutput = new CSL.NameOutput(state, state.tmp.oldItem);
                state.tmp.abort_alternative = false;
            };
            this.execs.push(func);
            target.push(this);

            var if_tok = new CSL.Token("if", CSL.END);
            CSL.Node["if"].build.call(if_tok, state, target);

            var choose_tok = new CSL.Token("choose", CSL.END);
            CSL.Node["choose"].build.call(choose_tok, state, target);

        }
    }
};

CSL.Node["alternative-text"] = {
    build: function (state, target) {
        if (this.tokentype === CSL.SINGLETON) {
            // do stuff
            var func = function(state, Item) {
                var Item = state.refetchItem(Item.id);
                CSL.getCite.call(state, Item);
            };
            this.execs.push(func);
        }
        target.push(this);
    }
};



/*global CSL: true */

CSL.NameOutput = function(state, Item, item) {
    this.debug = false;
    //SNIP-START
    if (this.debug) {
        print("(1)");
    }
    //SNIP-END
    this.state = state;
    this.Item = Item;
    this.item = item;
    this.nameset_base = 0;
    this.etal_spec = {};
    this._first_creator_variable = false;
    this._please_chop = false;
};

CSL.NameOutput.prototype.init = function (names) {
    this.requireMatch = names.requireMatch;
    if (this.state.tmp.term_predecessor) {
        this.state.tmp.subsequent_author_substitute_ok = false;
    }
    if (this.nameset_offset) {
        this.nameset_base = this.nameset_base + this.nameset_offset;
    }
    this.nameset_offset = 0;
    this.names = names;
    this.variables = names.variables;

    this.state.tmp.value = [];
    this.state.tmp.rendered_name = [];
    this.state.tmp.label_blob = false;
    this.state.tmp.etal_node = false;
    this.state.tmp.etal_term = false;
    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
        }
    }
    this["et-al"] = undefined;
    // REMOVE THIS
    this["with"] = undefined;

    this.name = undefined;
    // long, long-with-short, short
    this.institutionpart = {};
    // family, given
    //this.namepart = {};
    // before, after
    //this.label = {};

    this.state.tmp.group_context.tip.variable_attempt = true;

    this.labelVariable = this.variables[0];

    if (!this.state.tmp.value.length) {
        return;
    }

    // Abort and proceed to the next substitution if a match is required,
    // two variables are called, and they do not match.
    var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
    if (checkCommonTerm) {
        this.state.tmp.can_substitute.pop();
        this.state.tmp.can_substitute.push(true);
        //this.state.tmp.group_context.mystack[this.state.tmp.group_context.mystack.length-1].variable_success = false;
        for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
                this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));
            }
        }
        this.state.tmp.common_term_match_fail = true;
        this.variables = [];
    }
};


CSL.NameOutput.prototype.reinit = function (names, labelVariable) {
    this.requireMatch = names.requireMatch;
    this.labelVariable = labelVariable;

    if (this.state.tmp.can_substitute.value()) {
        this.nameset_offset = 0;
        // What-all should be carried across from the subsidiary
        // names node, and on what conditions? For each attribute,
        // and decoration, is it an override, or is it additive?
        this.variables = names.variables;
        
        // Not sure why this is necessary. Guards against a memory leak perhaps?
        var oldval = this.state.tmp.value.slice();
        this.state.tmp.value = [];

        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
                this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
            }
        }
        if (this.state.tmp.value.length) {
            this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
        }

        this.state.tmp.value = oldval;

    }
    // Abort and proceed to the next substitution if a match is required,
    // two variables are called, and they do not match.
    var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
    if (checkCommonTerm) {
        this.state.tmp.can_substitute.pop();
        this.state.tmp.can_substitute.push(true);
        for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
                this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));
            }
        }
        this.variables = [];
    }
};

CSL.NameOutput.prototype.outputNames = function () {
    var i, ilen;
    var variables = this.variables;
    if (this.institution.and) {
        if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
            this.institution.and.single.blobs = this.name.and.single.blobs;
        }
        if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
            this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
        }
    }

    this.variable_offset = {};
    if (this.family) {
        this.family_decor = CSL.Util.cloneToken(this.family);
        this.family_decor.strings.prefix = "";
        this.family_decor.strings.suffix = "";
        // Sets text-case value (text-case="title" is suppressed for items
        // non-English with non-English value in Item.language)
        for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
            this.family.execs[i].call(this.family_decor, this.state, this.Item);
        }
    } else {
        this.family_decor = false;
    }

    if (this.given) {
        this.given_decor = CSL.Util.cloneToken(this.given);
        this.given_decor.strings.prefix = "";
        this.given_decor.strings.suffix = "";
        // Sets text-case value (text-case="title" is suppressed for items
        // non-English with non-English value in Item.language)
        for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
            this.given.execs[i].call(this.given_decor, this.state, this.Item);
        }
    } else {
        this.given_decor = false;
    }

    //SNIP-START
    if (this.debug) {
        print("(2)");
    }
    //SNIP-END
    // util_names_etalconfig.js
    this.getEtAlConfig();
    //SNIP-START
    if (this.debug) {
        print("(3)");
    }
    //SNIP-END
    // util_names_divide.js
    this.divideAndTransliterateNames();
    //SNIP-START
    if (this.debug) {
        print("(4)");
    }
    //SNIP-END
    // util_names_truncate.js

    this.truncatePersonalNameLists();
    //SNIP-START
    if (this.debug) {
        print("(5)");
    }
    //SNIP-END

    //SNIP-START
    if (this.debug) {
        print("(6)");
    }
    //SNIP-END
    // util_names_disambig.js
    this.disambigNames();

    // util_names_constraints.js
    this.constrainNames();
    //SNIP-START
    if (this.debug) {
        print("(7)");
    }
    //SNIP-END
    // form="count"
    if (this.name.strings.form === "count") {
        if (this.state.tmp.extension || this.names_count != 0) {
            this.state.output.append(this.names_count, "empty");
            this.state.tmp.group_context.tip.variable_success = true;
        }
        return;
    }

    //SNIP-START
    if (this.debug) {
        print("(8)");
    }
    //SNIP-END
    this.setEtAlParameters();
    //SNIP-START
    if (this.debug) {
        print("(9)");
    }
    //SNIP-END
    this.setCommonTerm(this.requireMatch);
    //SNIP-START
    if (this.debug) {
        print("(10)");
    }
    //SNIP-END
    this.renderAllNames();
    //SNIP-START
    if (this.debug) {
        print("(11)");
    }
    //SNIP-END
    var blob_list = [];
    for (i = 0, ilen = variables.length; i < ilen; i += 1) {
        var v = variables[i];
        var institution_sets = [];
        var institutions = false;
        var varblob = null;
        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
            varblob = this._join([this.freeters[v]], "");
        } else {
            //SNIP-START
            if (this.debug) {
                print("(11a)");
            }
            //SNIP-END
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
                institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
            }
            //SNIP-START
            if (this.debug) {
                print("(11b)");
            }
            //SNIP-END
            if (this.institutions[v].length) {
                var pos = this.nameset_base + this.variable_offset[v];
                if (this.freeters[v].length) {
                    pos += 1;
                }
                institutions = this.joinInstitutionSets(institution_sets, pos);
            }
            //SNIP-START
            if (this.debug) {
                print("(11c)");
            }
            //SNIP-END
            var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
            //SNIP-START
            if (this.debug) {
                print("(11d)");
            }
            //SNIP-END
        }
        if (varblob) {
            // Apply labels, if any
            if (!this.state.tmp.extension) {
                varblob = this._applyLabels(varblob, v);
            }
            blob_list.push(varblob);
        }
        //SNIP-START
        if (this.debug) {
            print("(11e)");
        }
        //SNIP-END
        if (this.common_term) {
            break;
        }
    }
    //SNIP-START
    if (this.debug) {
        print("(12)");
    }
    //SNIP-END
    this.state.output.openLevel("empty");
    this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
    //SNIP-START
    if (this.debug) {
        print("(13)");
    }
    //SNIP-END
    for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
        // notSerious
        this.state.output.append(blob_list[i], "literal", true);
    }
    if (!this.state.tmp.just_looking && blob_list.length > 0) {
        this.state.tmp.probably_rendered_something = true;
    }
    //SNIP-START
    if (this.debug) {
        print("(14)");
    }
    //SNIP-END
    this.state.output.closeLevel("empty");
    //SNIP-START
    if (this.debug) {
        print("(15)");
    }
    //SNIP-END
    var blob = this.state.output.pop();
    this.state.tmp.name_node.top = blob;
    //SNIP-START
    if (this.debug) {
        print("(16)");
    }
    //SNIP-END

    // Append will drop the names on the floor here if suppress-me is
    // set on element_trace.
    // Need to rescue the value for collapse comparison.
    var namesToken = CSL.Util.cloneToken(this.names);
    if (this.state.tmp.group_context.tip.condition) {
        CSL.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
    }
    this.state.output.append(blob, namesToken);
    if (this.state.tmp.term_predecessor_name) {
        this.state.tmp.term_predecessor = true;
    }
    //SNIP-START
    if (this.debug) {
        print("(17)");
    }
    //SNIP-END
    // Also used in CSL.Util.substituteEnd (which could do with
    // some cleanup at this writing).
    //SNIP-START
    if (this.debug) {
        print("(18)");
    }
    //SNIP-END
    if (variables[0] !== "authority") {
        // Just grab the string values in the name
        var name_node_string = [];
        var nameobjs = this.Item[variables[0]];
        if (nameobjs) {
            for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
                var substring = CSL.Util.Names.getRawName(nameobjs[i]);
                if (substring) {
                    name_node_string.push(substring);
                }
            }
        }
        name_node_string = name_node_string.join(", ");
        if (name_node_string) {
            this.state.tmp.name_node.string = name_node_string;
        }
    }
    // for classic support
    // This may be more convoluted than it needs to be. Or maybe not.
    //
    // Check for classic abbreviation
    //
    // If found, then (1) suppress title rendering, (2) replace the node
    // with the abbreviation output [and (3) do not run this._collapseAuthor() ?]
    if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
        this.state.tmp.first_name_string = this.state.tmp.name_node.string;
    }
    if ("classic" === this.Item.type) {
        if (this.state.tmp.first_name_string) {
            var author_title = [];
            author_title.push(this.state.tmp.first_name_string);
            if (this.Item.title) {
                author_title.push(this.Item.title);
            }
            author_title = author_title.join(", ");
            if (author_title && this.state.sys.getAbbreviation) {
                if (this.state.sys.normalizeAbbrevsKey) {
                    author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
                }
                this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
                if (this.state.transform.abbrevs["default"].classic[author_title]) {
                    this.state.tmp.done_vars.push("title");
                    this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
                    blob = this.state.output.pop();
				    this.state.tmp.name_node.top.blobs.pop();
                    this.state.tmp.name_node.top.blobs.push(blob);
                }
            }
        }
    }

    // Let's try something clever here.
    this._collapseAuthor();

    // For name_SubstituteOnNamesSpanNamesSpanFail
    this.variables = [];
    
    // Reset stop-last after rendering
    this.state.tmp.authority_stop_last = 0;

    //SNIP-START
    if (this.debug) {
        print("(19)");
    }
    //SNIP-END
};

CSL.NameOutput.prototype._applyLabels = function (blob, v) {
    var txt;
    if (!this.label || !this.label[this.labelVariable]) {
        return blob;
    }
    var plural = 0;
    var num = this.freeters_count[v] + this.institutions_count[v];
    if (num > 1) {
        plural = 1;
    } else {
        for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
            num += this.persons_count[v][i];
        }
        if (num > 1) {
            plural = 1;
        }
    }
    // Some code duplication here, should be factored out.
    if (this.label[this.labelVariable].before) {
        if ("number" === typeof this.label[this.labelVariable].before.strings.plural) {
            plural = this.label[this.labelVariable].before.strings.plural;
        }
        txt = this._buildLabel(v, plural, "before", this.labelVariable);
        this.state.output.openLevel("empty");
        this.state.output.append(txt, this.label[this.labelVariable].before, true);
        this.state.output.append(blob, "literal", true);
        this.state.output.closeLevel("empty");
        blob = this.state.output.pop();
    } else if (this.label[this.labelVariable].after) {
        if ("number" === typeof this.label[this.labelVariable].after.strings.plural) {
            plural = this.label[this.labelVariable].after.strings.plural;
        }
        txt = this._buildLabel(v, plural, "after", this.labelVariable);
        this.state.output.openLevel("empty");
        this.state.output.append(blob, "literal", true);
        this.state.output.append(txt, this.label[this.labelVariable].after, true);
        this.state.tmp.label_blob = this.state.output.pop();
        this.state.output.append(this.state.tmp.label_blob,"literal",true);
        this.state.output.closeLevel("empty");
        blob = this.state.output.pop();
    }
    return blob;
};

CSL.NameOutput.prototype._buildLabel = function (term, plural, position, v) {
    if (this.common_term) {
        term = this.common_term;
    }

    var ret = false;
    var node = this.label[v][position];
    if (node) {
        ret = CSL.castLabel(this.state, node, term, plural, CSL.TOLERANT);
    }
    return ret;
};


CSL.NameOutput.prototype._collapseAuthor = function () {
    var myqueue, mystr, oldchars;
    // collapse can be undefined, an array of length zero, and probably
    // other things ... ugh.
    if (this.state.tmp.name_node.top.blobs.length === 0) {
        return;
    }
    if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
        this._first_creator_variable = this.variables[0];
    }
    if ((this.state[this.state.tmp.area].opt.collapse
            && this.state[this.state.tmp.area].opt.collapse.length)
        || (this.state[this.state.tmp.area].opt.cite_group_delimiter 
            && this.state[this.state.tmp.area].opt.cite_group_delimiter.length)) {

        if (this.state.tmp.authorstring_request) {
            // Avoid running this on every call to getAmbiguousCite()?
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
                mystr = this.state.output.string(this.state, myqueue, false);
            }
            // Avoid side-effects on character counting: we're only interested
            // in the final rendering.
            this.state.tmp.offset_characters = oldchars;
            this.state.registry.authorstrings[this.Item.id] = mystr;
        } else if (!this.state.tmp.just_looking
                   && !this.state.tmp.suppress_decorations && ((this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
            // XX1 print("RENDER: "+this.Item.id);
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
                mystr = this.state.output.string(this.state, myqueue, false);
            }
            if (mystr === this.state.tmp.last_primary_names_string) {
                if (this.item["suppress-author"] || (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length)) {
                    // XX1 print("    CUT!");
                    this.state.tmp.name_node.top.blobs.pop();
                    this.state.tmp.name_node.children = [];
                    // If popped, avoid side-effects on character counting: we're only interested
                    // in things that actually render.
                    this.state.tmp.offset_characters = oldchars;
                }
                // Needed
                if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                    this.state.tmp.use_cite_group_delimiter = true;
                }
            } else {
                // XX1 print("remembering: "+mystr);
                this.state.tmp.last_primary_names_string = mystr;
                // XXXXX A little more precision would be nice.
                // This will clobber variable="author editor" as well as variable="author".

                if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
                    this.state.tmp.name_node.top.blobs.pop();
                    this.state.tmp.name_node.children = [];
                    // If popped, avoid side-effects on character counting: we're only interested
                    // in things that actually render.
                    this.state.tmp.offset_characters = oldchars;

                    // A wild guess, but will usually be correct
                    this.state.tmp.term_predecessor = false;
                }
                // Arcane and probably unnecessarily complicated?
                this.state.tmp.have_collapsed = false;
                // Needed
                if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                    this.state.tmp.use_cite_group_delimiter = false;
                }
            }
        }
    }
};

/*
CSL.NameOutput.prototype.suppressNames = function() {
    suppress_condition = suppress_min && display_names.length >= suppress_min;
    if (suppress_condition) {
        continue;
    }
}
*/

/*global CSL: true */

CSL.NameOutput.prototype.isPerson = function (value) {
    if (value.literal
        || (!value.given && value.family && value.isInstitution)) {
        
        return false;
    } else {
        return true;
    }
};

/*global CSL: true */

CSL.NameOutput.prototype.truncatePersonalNameLists = function () {
    var v, i, ilen, j, jlen, chopvar;
    // XXX Before truncation, make a note of the original number
    // of names, for use in et-al evaluation.
    this.freeters_count = {};
    this.persons_count = {};
    this.institutions_count = {};
    // By key is okay here, as we don't care about sequence.
    for (v in this.freeters) {
        if (this.freeters.hasOwnProperty(v)) {
            this.freeters_count[v] = this.freeters[v].length;
            this.freeters[v] = this._truncateNameList(this.freeters, v);
        }
    }

    for (v in this.persons) {
        if (this.persons.hasOwnProperty(v)) {
            this.institutions_count[v] = this.institutions[v].length;
            this._truncateNameList(this.institutions, v);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.persons_count[v] = [];
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                this.persons_count[v][j] = this.persons[v][j].length;
                this.persons[v][j] = this._truncateNameList(this.persons, v, j);
            }
        }
    }
    // Could be factored out to a separate function for clarity.
    if (this.etal_min === 1 && this.etal_use_first === 1 
        && !(this.state.tmp.extension
             || this.state.tmp.just_looking)) {
        chopvar = v;
    } else {
        chopvar = false;
    }
    if (chopvar || this._please_chop) {
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            v = this.variables[i];
            if (this.freeters[v].length) {
                if (this._please_chop === v) {
                    this.freeters[v] = this.freeters[v].slice(1);
                    this.freeters_count[v] += -1;
                    this._please_chop = false;
                } else if (chopvar && !this._please_chop) {
                    this.freeters[v] = this.freeters[v].slice(0, 1);
                    this.freeters_count[v] = 1;
                    this.institutions[v] = [];
                    this.persons[v] = [];
                    this._please_chop = chopvar;
                }
            }
            for (var j=0,jlen = this.persons[v].length;j<jlen;j++) {
                if (this.persons[v][j].length) {
                    if (this._please_chop === v) {
                        this.persons[v][j] = this.persons[v][j].slice(1);
                        this.persons_count[v][j] += -1;
                        this._please_chop = false;
                        break;
                    } else if (chopvar && !this._please_chop) {
                        this.freeters[v] = this.persons[v][j].slice(0, 1);
                        this.freeters_count[v] = 1;
                        this.institutions[v] = [];
                        this.persons[v] = [];
                        this._please_chop = chopvar;
                        break;
                    }
                }
            }
            if (this.institutions[v].length) {
                if (this._please_chop === v) {
                    this.institutions[v] = this.institutions[v].slice(1);
                    this.institutions_count[v] += -1;
                    this._please_chop = false;
                } else if (chopvar && !this._please_chop) {
                    this.institutions[v] = this.institutions[v].slice(0, 1);
                    this.institutions_count[v] = 1;
                    this._please_chop = chopvar;
                }
            }
        }
    }

    // Transliteration and abbreviation mapping

    // Hmm. This could produce three lists for each nameset:
    //   - primary (transformed in place)
    //   - secondary
    //   - tertiary
    // with items that produce no result in the secondary and tertiary
    // transforms set to false. Maybe.

    // Actually that would be insane, so forget it.
    // What we need is to add suitable parameters to getName(), and merge
    // the single-name-level operations below into that function. Then the
    // operation can be applied in util_names_render.js, and the logic
    // becomes very similar to what we already have running in util_transform.js.

/*
    for (v in this.freeters) {
        this._transformNameset(this.freeters[v]);
    }
    for (v in this.persons) {
        for (i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
            this._transformNameset(this.persons[v][i]);
        }
        this._transformNameset(this.institutions[v]);
    }
*/

    // Could also be factored out to a separate function for clarity.
    // ???? XXX Does this belong?
    for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        if (this.institutions[v].length) {
            this.nameset_offset += 1;
        }
        for (var j=0,jlen=this.persons[v].length;j<jlen;j++) {
            if (this.persons[v][j].length) {
                this.nameset_offset += 1;
            }
            // this.institutions[v][i] = this._splitInstitution(this.institutions[v][i], v, i);
        }
    }
};

CSL.NameOutput.prototype._truncateNameList = function (container, variable, index) {
    var lst;
    if ("undefined" === typeof index) {
        lst = container[variable];
    } else {
        lst = container[variable][index];
    }
    if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names 
        && lst.length > 50 
        && lst.length > (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2)) {

        // Preserve the last name in the list, in case we're rendering with a PI ellipsis (et-al-use-last)
        var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
        lst = lst.slice(0, limit+1).concat(lst.slice(-1));
    }
    return lst;
};


/*global CSL: true */

CSL.NameOutput.prototype.divideAndTransliterateNames = function () {
    var i, ilen, j, jlen;
    var Item = this.Item;
    var variables = this.variables;
    this.varnames = variables.slice();
    this.freeters = {};
    this.persons = {};
    this.institutions = {};
    for (i = 0, ilen = variables.length; i < ilen; i += 1) {
        var v = variables[i];
        this.variable_offset[v] = this.nameset_offset;
        var values = this._normalizeVariableValue(Item, v);
        if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
            values = [];
        }
        if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
            values = [];
        }
        this._getFreeters(v, values);
        this._getPersonsAndInstitutions(v, values);
        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
            if (this.name.strings["suppress-min"] === 0) {
                this.freeters[v] = [];
                for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                    this.persons[v][j] = [];
                }
            } else if (this.institution.strings["suppress-min"] === 0) {
                this.institutions[v] = [];
                this.freeters[v] = this.freeters[v].concat(this.persons[v]);
                for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                    for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                        this.freeters[v].push(this.persons[v][j][k]);
                    }
                }
                this.persons[v] = [];
            }
        }
    }
};

CSL.NameOutput.prototype._normalizeVariableValue = function (Item, variable) {
    var names;
    if ("string" === typeof Item[variable] || "number" === typeof Item[variable]) {
        CSL.debug("name variable \"" + variable + "\" is string or number, not array. Attempting to fix.");
        names = [{literal: Item[variable] + ""}];
    } else if (!Item[variable]) {
        names = [];
    } else if ("number" !== typeof Item[variable].length) {
        CSL.debug("name variable \"" + variable + "\" is object, not array. Attempting to fix.");
        Item[variable] = [Item[variable]];
        names = Item[variable].slice();
    } else {
        names = Item[variable].slice();
    }
    return names;
};

CSL.NameOutput.prototype._getFreeters = function (v, values) {
    this.freeters[v] = [];
    if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
        for (var i=values.length-1;i>-1;i--) {
            if (this.isPerson(values[i])) {
                var value = this._checkNickname(values.pop());
                if (value) {
                    this.freeters[v].push(value);
                }
            } else {
                break;
            }
        }
    } else {
        for (var i=values.length-1;i>-1;i--) {
            var value = values.pop();
            if (this.isPerson(value)) {
                var value = this._checkNickname(value);
            }
            this.freeters[v].push(value);
        }
    }
    this.freeters[v].reverse();
    if (this.freeters[v].length) {
        this.nameset_offset += 1;
    }
};

CSL.NameOutput.prototype._getPersonsAndInstitutions = function (v, values) {
    this.persons[v] = [];
    this.institutions[v] = [];
    if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
        return;
    }
    var persons = [];
    var has_affiliates = false;
    var first = true;
    for (var i = values.length - 1; i > -1; i += -1) {
        if (this.isPerson(values[i])) {
            var value = this._checkNickname(values[i]);
            if (value) {
                persons.push(value);
            }
        } else {
            has_affiliates = true;
            this.institutions[v].push(values[i]);
            if (!first) {
                persons.reverse();
                this.persons[v].push(persons);
                persons = [];
            }
            first = false;
        }
    }
    if (has_affiliates) {
        persons.reverse();
        this.persons[v].push(persons);
        this.persons[v].reverse();
        this.institutions[v].reverse();
    }
};

CSL.NameOutput.prototype._clearValues = function (values) {
    for (var i = values.length - 1; i > -1; i += -1) {
        values.pop();
    }
};

CSL.NameOutput.prototype._checkNickname = function (name) {
    if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
        var author = "";
        author = CSL.Util.Names.getRawName(name);
        if (author && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
            var normalizedKey = author;
            if (this.state.sys.normalizeAbbrevsKey) {
                // The first argument does not have to be the exact variable name.
                normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author);
            }
            this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
            // XXX Why does this have to happen here?
            var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
            if (myLocalName) {
                if (myLocalName === "!here>>>") {
                    name = false;
                } else {
                    name = {family:myLocalName,given:''};
                }
            }
        }
    }
    return name;
};

/*global CSL: true */

CSL.NameOutput.prototype._purgeEmptyBlobs = function (blobs) {
    for (var i = blobs.length - 1; i > -1; i += -1) {
        if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
            blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
        }
    }
    return blobs;
};

CSL.NameOutput.prototype.joinPersons = function (blobs, pos, j, tokenname) {
    var ret;
    blobs = this._purgeEmptyBlobs(blobs);
    if ("undefined" === typeof j) {
        if (this.etal_spec[pos].freeters === 1) {
           ret = this._joinEtAl(blobs);
        } else if (this.etal_spec[pos].freeters === 2) {
            ret = this._joinEllipsis(blobs);
        } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
        } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
        }
    } else {
        if (this.etal_spec[pos].persons[j] === 1) {
            ret = this._joinEtAl(blobs);
        } else if (this.etal_spec[pos].persons[j] === 2) {
            ret = this._joinEllipsis(blobs);
        } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
        } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
        }
    }
    return ret;
};


CSL.NameOutput.prototype.joinInstitutionSets = function (blobs, pos) {
    var ret;
    blobs = this._purgeEmptyBlobs(blobs);
    if (this.etal_spec[pos].institutions === 1) {
        ret = this._joinEtAl(blobs, "institution");
    } else if (this.etal_spec[pos].institutions === 2) {
        ret = this._joinEllipsis(blobs, "institution");
    } else {
        ret = this._joinAnd(blobs);
    }
    return ret;
};


CSL.NameOutput.prototype.joinPersonsAndInstitutions = function (blobs) {
    //
    blobs = this._purgeEmptyBlobs(blobs);
    var ret = this._join(blobs, this.state.tmp.name_delimiter);
    ret.isInstitution = true;
    return ret;
};

// LEGACY
// This should go away eventually
CSL.NameOutput.prototype.joinFreetersAndInstitutionSets = function (blobs) {
    // Nothing, one or two, never more
    blobs = this._purgeEmptyBlobs(blobs);
    var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
    //var ret = this._join(blobs, "");
    return ret;
};

CSL.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
    if (finalJoin && blobs.length > 1) {
        if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
            var prevBlob = blobs[blobs.length - 2];
            if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
                finalJoin.strings.prefix = delimiter;
            }
        }
    }
    return finalJoin;
};

CSL.NameOutput.prototype._getAndJoin = function (blobs, delimiter) {
    var finalJoin = false;
    if (blobs.length > 1) {
        var singleOrMultiple = "single";
        if (blobs.length > 2) {
            singleOrMultiple = "multiple";
        }
        if (blobs[blobs.length - 1].isInstitution) {
            finalJoin = this.institution.and[singleOrMultiple];
        } else {
            finalJoin = this.name.and[singleOrMultiple];
        }
        // finalJoin = new CSL.Blob(finalJoin);
        finalJoin = JSON.parse(JSON.stringify(finalJoin));
        finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
    }
    return finalJoin;
};

CSL.NameOutput.prototype._joinEtAl = function (blobs) {
    var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
    var blob = this._join(blobs, delimiter);
    
    // notSerious
    this.state.output.openLevel(this._getToken("name"));
    // Delimiter is applied from separately saved source in this case,
    // for discriminate application of single and multiple joins.
    this.state.output.current.value().strings.delimiter = "";
    this.state.output.append(blob, "literal", true);
    if (blobs.length > 1) {
        this.state.output.append(this["et-al"].multiple, "literal", true);
    } else if (blobs.length === 1) {
        this.state.output.append(this["et-al"].single, "literal", true);
    }
    this.state.output.closeLevel();
    return this.state.output.pop();
};


CSL.NameOutput.prototype._joinEllipsis = function (blobs) {
    var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
    var finalJoin = false;
    if (blobs.length > 1) {
        var singleOrMultiple = "single";
        if (blobs.length > 2) {
            singleOrMultiple = "multiple";
        }
        finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
        finalJoin = this._getAfterInvertedName(blobs, delimiter , finalJoin);
        
    }
    return this._join(blobs, delimiter, finalJoin);
};

CSL.NameOutput.prototype._joinAnd = function (blobs) {
    var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
    var finalJoin = this._getAndJoin(blobs, delimiter);
    return this._join(blobs, delimiter, finalJoin);
};


CSL.NameOutput.prototype._join = function (blobs, delimiter, finalJoin) {
    var i, ilen;
    if (!blobs) {
        return false;
    }
    blobs = this._purgeEmptyBlobs(blobs);
    if (!blobs.length) {
        return false;
    }
    if (blobs.length > 1) {
        if (blobs.length === 2) {
            if (!finalJoin) {
                blobs[0].strings.suffix += delimiter;
            } else {
                blobs = [blobs[0], finalJoin, blobs[1]];
            }
        } else {
            var offset;
            if (finalJoin) {
                offset = 1;
            } else {
                offset = 0;
            }
            var blob = blobs.pop();
            for (var i=0,ilen=blobs.length - offset;i<ilen;i++) {
                blobs[i].strings.suffix += delimiter;
            }
            blobs.push(finalJoin);
            blobs.push(blob);
        }
    }

    //this.state.output.openLevel(this._getToken(tokenname));
    this.state.output.openLevel();

    //this.state.output.openLevel(this._getToken("empty"));
    // Delimiter is applied from separately saved source in this case,
    // for discriminate application of single and multiple joins.
    for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
        this.state.output.append(blobs[i], false, true);
    }
    this.state.output.closeLevel();
    return this.state.output.pop();
};


CSL.NameOutput.prototype._getToken = function (tokenname) {
    var token = this[tokenname];
    if (tokenname === "institution") {
        var newtoken = new CSL.Token();
        // Which, hmm, is the same thing as "empty"
        // Oh, well.
        //newtoken.strings.prefix = token.prefix;
        //newtoken.strings.suffix = token.suffix;
        return newtoken;
    }
    return token;
};

/*global CSL: true */

CSL.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
    if (!requireMatch) {
        return false;
    }
    var common_term = false;
    if (this.variables.length === 2) {
        var variables = this.variables;
        var varnames = variables.slice();
        varnames.sort();
        common_term = varnames.join("");
    }
    if (!common_term) {
        return false;
    }
    var has_term = false;
    if (this.state.locale[this.state.opt.lang].terms[common_term]) {
        has_term = true;
    }
    if (!has_term) {
        this.state.tmp.done_vars.push(this.variables[0]);
        this.state.tmp.done_vars.push(this.variables[1]);
        return false;
    }
    var firstSet = this.Item[this.variables[0]];
    var secondSet = this.Item[this.variables[1]];
    var perfectMatch = this._compareNamesets(firstSet, secondSet);
    if (perfectMatch === true) {
        this.state.tmp.done_vars.push(this.variables[0]);
        this.state.tmp.done_vars.push(this.variables[1]);
    }
    // This may be counter-intuitive.
    // This check controls whether we will fail on the this attempt at rendering
    // and proceed with substitution. If the names match exactly (true), then
    // we do *not* want to abort and continue with substitution.
    return !perfectMatch;
};

CSL.NameOutput.prototype.setCommonTerm = function () {
    var variables = this.variables;
    var varnames = variables.slice();
    varnames.sort();
    this.common_term = varnames.join("");
    // When no varnames are on offer
    if (!this.common_term) {
        return;
    }
    var has_term = false;
    if (this.label && this.label[this.variables[0]]) {
        if (this.label[this.variables[0]].before) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
        } else if (this.label[this.variables[0]].after) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
        }
     }

    // When there is no common term
    if (!this.state.locale[this.state.opt.lang].terms[this.common_term]
        || !has_term
        || this.variables.length < 2) {
        this.common_term = false;
        return;
    }
    for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
        var v = this.variables[i];
        var vv = this.variables[i + 1];
        if (this.freeters[v].length || this.freeters[vv].length) {
            if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters
                || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
                this.common_term = false;
                return;
            }
        }
        if (this.persons[v].length !== this.persons[vv].length) {
            this.common_term = false;
            return;
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j]
                || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
                this.common_term = false;
                return;
            }
        }
    }
};

CSL.NameOutput.prototype._compareNamesets = function (base_nameset, nameset) {
    if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
        return false;
    }
    for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
        for (var j = 0, jlen = CSL.NAME_PARTS.length; j < jlen; j += 1) {
            var part = CSL.NAME_PARTS[j];
            if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
                return false;
            }
        }
    }
    return true;
};

/*global CSL: true */

CSL.NameOutput.prototype.constrainNames = function () {
    // figure out how many names to include, in light of the disambig params
    //
    this.names_count = 0;
    //var pos = 0;
    var pos;
    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        pos = this.nameset_base + i;
        // Constrain independent authors here
        if (this.freeters[v].length) {
            this.state.tmp.names_max.push(this.freeters[v].length, "literal");
            this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
            this.names_count += this.freeters[v].length;
        }

        // Constrain institutions here
        if (this.institutions[v].length) {
            this.state.tmp.names_max.push(this.institutions[v].length, "literal");
            this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.names_count += this.institutions[v].length;
        }

        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            // Constrain affiliated authors here
            if (this.persons[v][j].length) {
                this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
                this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
                this.names_count += this.persons[v][j].length;
            }
        }
    }
};

CSL.NameOutput.prototype._imposeNameConstraints = function (lst, count, key, pos) {
    // display_names starts as the original length of this list of names.
    var display_names = lst[key];
    var discretionary_names_length = this.state.tmp["et-al-min"];
    
    // Mappings, to allow existing disambiguation machinery to
    // remain untouched.
    if (this.state.tmp.suppress_decorations) {
        if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
            // Oh. Trouble.
            // state.tmp.nameset_counter is the number of the nameset
            // in the disambiguation try-sequence. Ouch.
            discretionary_names_length = this.state.tmp.disambig_request.names[pos];
        } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
        }
    } else {
        if (this.state.tmp.disambig_request 
            && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {

            if (count[key] < this.etal_min) {
                discretionary_names_length = count[key];
            } else {
                discretionary_names_length = this.state.tmp.disambig_request.names[pos];
            }
        } else if (count[key] >= this.etal_min) {
            //discretionary_names_length = this.state.tmp["et-al-use-first"];
            discretionary_names_length = this.etal_use_first;
        }
        // XXXX: This is a workaround. Under some conditions.
        // Where namesets disambiguate on one of the two names
        // dropped here, it is possible for more than one
        // in-text citation to be close (and indistinguishable)
        // matches to a single bibliography entry.
        //
        // 
        if (this.etal_use_last && discretionary_names_length > (this.etal_min - 2)) {
            discretionary_names_length = this.etal_min - 2;
        }
    }
    var sane = this.etal_min >= this.etal_use_first;
    var overlength = count[key] > discretionary_names_length;
    // This var is used to control contextual join, and
    // lies about the number of names when forceEtAl is true,
    // unless normalized.
    if (discretionary_names_length > count[key]) {

        // Use actual truncated list length, to avoid overrun.
        discretionary_names_length = display_names.length;
    }
    // forceEtAl is relevant when the author list is
    // truncated to eliminate clutter.
    if (sane && overlength) {
        if (this.etal_use_last) {
            lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
        } else {
            lst[key] = display_names.slice(0, discretionary_names_length);
        }
    }
    this.state.tmp.disambig_settings.names[pos] = lst[key].length;
    this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
    

    // ???
    //if (!this.state.tmp.disambig_request) {
    //    this.state.tmp.disambig_settings.givens[pos] = [];
    //}
};

// Disambiguate names (the number of names is controlled externally, by successive
// runs of the processor).

/*global CSL: true */

CSL.NameOutput.prototype.disambigNames = function () {
    var pos;
    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        pos = this.nameset_base + i;
        if (this.freeters[v].length) {
            this._runDisambigNames(this.freeters[v], pos);
        }
        // Is this even necessary???
        if (this.institutions[v].length) {
            if ("undefined" === typeof this.state.tmp.disambig_settings.givens[pos]) {
                this.state.tmp.disambig_settings.givens[pos] = [];
            }
            for (var j=0,jlen=this.institutions[v].length;j<jlen;j+=1) {
                if ("undefined" === typeof this.state.tmp.disambig_settings.givens[pos][j]) {
                    this.state.tmp.disambig_settings.givens[pos].push(2);
                }
            }
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
                this._runDisambigNames(this.persons[v][j], pos);
            }
        }
    }
};

CSL.NameOutput.prototype._runDisambigNames = function (lst, pos) {
    var chk, myform, myinitials, param, i, ilen, paramx;
    //if (this.state.tmp.root === "bibliography") {
    //    return;
    //}
    for (i = 0, ilen = lst.length; i < ilen; i += 1) {
        //
        // register the name in the global names disambiguation
        // registry

        if (!lst[i].given && !lst[i].family) {
            continue;
        }

        myinitials = this.state.inheritOpt(this.name, "initialize-with");
        this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
        chk = this.state.tmp.disambig_settings.givens[pos];
        if ("undefined" === typeof chk) {
            // Holes can appear in the list, probably due to institutional
            // names that this doesn't touch. Maybe. This fills them up.
            for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
                if (!this.state.tmp.disambig_settings.givens[j]) {
                    this.state.tmp.disambig_settings.givens[j] = [];
                }
            }
        }
        chk = this.state.tmp.disambig_settings.givens[pos][i];
        //if ("undefined" !== typeof chk && this.state.tmp.root === 'citation') {
            //this.state.tmp.disambig_settings.givens[pos] = [];
            //chk = undefined;
        //}
        if ("undefined" === typeof chk) {
            myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
            param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
            this.state.tmp.disambig_settings.givens[pos].push(param);
        }
        //
        // set the display mode default for givennames if required
        myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
        paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
        // this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
        if (this.state.tmp.disambig_request) {
            //
            // fix a request for initials that makes no sense.
            // can't do this in disambig, because the availability
            // of initials is not a global parameter.
            var val = this.state.tmp.disambig_settings.givens[pos][i];
            // This is limited to by-cite disambiguation.
            // 2012-09-13: added lst[i].given check to condition
            if (val === 1 && 
                this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && 
                ("undefined" === typeof this.state.inheritOpt(this.name, "initialize-with")
                 || "undefined" === typeof lst[i].given)) {
                val = 2;
            }
            param = val;
            // 2012-09-13: lst[i].given check protects against personal names
            // that have no first name element. These were causing an infinite loop,
            // this prevents that.
            if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
                param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
            }
        } else {
            //
            // it clicks.  here is where we will put the
            // call to the names register, to get the floor value
            // for an individual name.
            //
            param = paramx;
        }
        // Need to save off the settings based on subsequent
        // form, when first cites are rendered.
        if (!this.state.tmp.just_looking && this.item && this.item.position === CSL.POSITION_FIRST) {
            if (paramx > param) {
                param = paramx;
            }
        }
        if (!this.state.tmp.sort_key_flag) {
            this.state.tmp.disambig_settings.givens[pos][i] = param;
            if ("string" === typeof myinitials
                && ("undefined" === typeof this.name.strings["initialize"]
                    || true === this.name.strings["initialize"])) {

                this.state.tmp.disambig_settings.use_initials = true;
            }
        }
    }
    //this.state.registry.registry[this.Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
};

/*global CSL: true */

CSL.NameOutput.prototype.getEtAlConfig = function () {
    var item = this.item;
    this["et-al"] = {};

    this.state.output.append(this.etal_term, this.etal_style, true);
    this["et-al"].single = this.state.output.pop();
    this["et-al"].single.strings.suffix = this.etal_suffix;
    this["et-al"].single.strings.prefix = this.etal_prefix_single;
    
    this.state.output.append(this.etal_term, this.etal_style, true);
    this["et-al"].multiple = this.state.output.pop();
    this["et-al"].multiple.strings.suffix = this.etal_suffix;
    this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;

    // Et-al style parameters (may be sidestepped by disambiguation
    // in util_names_constraints.js)
    if ("undefined" === typeof item) {
        item = {};
    }
    //print("== getEtAlConfig() == "+this.state.tmp.area);

    if (item.position) {
        if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
            // XX
            this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
        } else {
            // XX
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
        }
        if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
            // XX
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
        } else {
            // XX
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
        }
    } else {
        if (this.state.tmp["et-al-min"]) {
            this.etal_min = this.state.tmp["et-al-min"];
        } else {
            // XX
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
        }
        if (this.state.tmp["et-al-use-first"]) {
            this.etal_use_first = this.state.tmp["et-al-use-first"];
        } else {
            // XX
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
        }
        if ("boolean" === typeof this.state.tmp["et-al-use-last"]) {
            //print("  etal_use_last from tmp: "+this.state.tmp["et-al-use-last"]);
            this.etal_use_last = this.state.tmp["et-al-use-last"];
        } else {
            //print("  etal_use_last from name: "+this.name.strings["et-al-use-last"]);
            // XX
            this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
        }
        //print("  etal_use_last: "+this.etal_use_last);
    }
    // Provided for use as the starting level for disambiguation.
    if (!this.state.tmp["et-al-min"]) {
        this.state.tmp["et-al-min"] = this.etal_min;
    }
};

/*global CSL: true */

CSL.NameOutput.prototype.setEtAlParameters = function () {
    var i, ilen, j, jlen;
    for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        if ("undefined" === typeof this.etal_spec[v]) {
            this.etal_spec[v] = {freeters:0,institutions:0,persons:[]};
        }
        this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
        if (this.freeters[v].length) {
            this._setEtAlParameter("freeters", v);
        }
        for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if ("undefined" === typeof this.etal_spec[v][j]) {
                this.etal_spec[v].persons[j] = 0;
            }
            this._setEtAlParameter("persons", v, j);
        }
        if (this.institutions[v].length) {
            this._setEtAlParameter("institutions", v);
        }
    }
};

CSL.NameOutput.prototype._setEtAlParameter = function (type, v, j) {
    var lst, count;
    if (type === "persons") {
        lst = this.persons[v][j];
        count = this.persons_count[v][j];
    } else {
        lst = this[type][v];
        count = this[type + "_count"][v];
    }
    if (lst.length < count && !this.state.tmp.sort_key_flag) {
        if (this.etal_use_last) {
            if (type === "persons") {
                this.etal_spec[v].persons[j] = 2;
            } else {
                this.etal_spec[v][type] = 2;
            }
        } else {
            if (type === "persons") {
                this.etal_spec[v].persons[j] = 1;
            } else {
                this.etal_spec[v][type] = 1;
            }
        }
    } else {
        if (type === "persons") {
            this.etal_spec[v].persons[j] = 0;
        } else {
            this.etal_spec[v][type] = 0;
        }
    }
};

/*global CSL: true */

CSL.NameOutput.prototype.renderAllNames = function () {
    // Note that et-al/ellipsis parameters are set on the basis
    // of rendering order through the whole cite.
    var pos;
    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];

        if (this.freeters[v].length || this.institutions[v].length) {
            if (!this.state.tmp.group_context.tip.condition) {
                this.state.tmp.just_did_number = false;
            }
        }
        
        pos = this.nameset_base + i;
        if (this.freeters[v].length) {
            this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
        }
        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
        }
    }
    this.renderInstitutionNames();
};

CSL.NameOutput.prototype.renderInstitutionNames = function () {
    // Institutions are split to string list as
    // this.institutions[v]["long"] and this.institutions[v]["short"]
    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            var institution;

            var name = this.institutions[v][j];

            

            // XXX Start here for institutions
            // Figure out the three segments: primary, secondary, tertiary
            var j, jlen, localesets;
            if (this.state.tmp.extension) {
                localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
                // Will never hit this in this function, but preserving
                // in case we factor this out.
                localesets = this.state.opt['cite-lang-prefs'].institutions;
            } else {
                localesets = this.state.opt['cite-lang-prefs'].persons;
            }

            var slot = {primary:'locale-orig',secondary:false,tertiary:false};
	        if (localesets) {
		        var slotnames = ["primary", "secondary", "tertiary"];
		        for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
			        if (localesets.length - 1 <  k) {
				        break;
			        }
                    if (localesets[k]) {
			            slot[slotnames[k]] = 'locale-' + localesets[k];
                    }
		        }
	        } else {
		        slot.primary = 'locale-translat';
	        }
	        if (this.state.tmp.area !== "bibliography"
		        && !(this.state.tmp.area === "citation"
			         && this.state.opt.xclass === "note"
			         && this.item && !this.item.position)) {
                
		        slot.secondary = false;
		        slot.tertiary = false;
	        }
            // Get normalized name object for a start.
            // true invokes fallback
            this.setRenderedName(name);

            // XXXX FROM HERE (instututions)
            var institution = this._renderInstitutionName(v, name, slot, j);

            //this.institutions[v][j] = this._join(institution, "");
            this.institutions[v][j] = institution;
        }
    }
};

CSL.NameOutput.prototype._renderInstitutionName = function (v, name, slot, j) {
    var secondary, tertiary, long_style, short_style, institution, institution_short, institution_long;
    var res = this.getName(name, slot.primary, true);
    var primary = res.name;
    var usedOrig = res.usedOrig;
    if (primary) {
        //print("primary, v, j = "+primary+", "+v+", "+j);
        primary = this.fixupInstitution(primary, v, j);
    }
	secondary = false;
	if (slot.secondary) {
        res = this.getName(name, slot.secondary, false, usedOrig);
        var secondary = res.name;
        usedOrig = res.usedOrig;
        if (secondary) {
			secondary = this.fixupInstitution(secondary, v, j);
        }
	}
    //Zotero.debug("XXX [2] secondary: "+secondary["long"].literal+", slot.secondary: "+slot.secondary);
	tertiary = false;
	if (slot.tertiary) {
        res = this.getName(name, slot.tertiary, false, usedOrig);
        tertiary = res.name;
        if (tertiary) {
			tertiary = this.fixupInstitution(tertiary, v, j);
        }
	}
    var n = {
        l: {
            pri: false,
            sec: false,
            ter: false
        },
        s: {
            pri: false,
            sec: false,
            ter: false
        }
    };
    if (primary) {
        n.l.pri = primary["long"];
        n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
    }
    if (secondary) {
        n.l.sec = secondary["long"];
        n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
    }
    if (tertiary) {
        n.l.ter = tertiary["long"];
        n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
    }
    switch (this.institution.strings["institution-parts"]) {
    case "short":
        // No multilingual for pure short form institution names.
        if (primary["short"].length) {
            short_style = this._getShortStyle();
            institution = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
        } else {
            // Fail over to long.
            long_style = this._getLongStyle(primary, v, j);
            institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
        }
        break;
    case "short-long":
        long_style = this._getLongStyle(primary, v, j);
        short_style = this._getShortStyle();
        institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
        // true is to include multilingual supplement
        institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
        institution = [institution_short, institution_long];
        break;
    case "long-short":
        long_style = this._getLongStyle(primary, v, j);
        short_style = this._getShortStyle();
        institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
        // true is to include multilingual supplement
        institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
        institution = [institution_long, institution_short];
        break;
    default:
        long_style = this._getLongStyle(primary, v, j);
        // true is to include multilingual supplement
        institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
        break;
    }
    var blob = this._join(institution, " ");
    if (blob) {
        blob.isInstitution = true;
    }
    this.state.tmp.name_node.children.push(blob);
    return blob;
};

CSL.NameOutput.prototype._composeOneInstitutionPart = function (names, slot, style) {
    var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
    if (names[0]) {
        primary_tok = CSL.Util.cloneToken(style);
        if (this.state.opt.citeAffixes[slot.primary]){
            if ("<i>" === this.state.opt.citeAffixes.institutions[slot.primary].prefix) {
                var hasItalic = false;
                for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                    if (style.decorations[i][0] === "@font-style"
                        && primary_tok.decorations[i][1] === "italic") {
                        hasItalic = true;
                    }
                }
                if (!hasItalic) {
                    primary_tok.decorations.push(["@font-style", "italic"]);
                }
            }
        }
        primary = this._renderOneInstitutionPart(names[0], primary_tok);
     }
    if (names[1]) {
        secondary = this._renderOneInstitutionPart(names[1], style);
    }
    if (names[2]) {
        tertiary = this._renderOneInstitutionPart(names[2], style);
    }
    // Compose
    var institutionblob;
    if (secondary || tertiary) {
        this.state.output.openLevel("empty");

        this.state.output.append(primary);

        secondary_tok = CSL.Util.cloneToken(style);
        if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
            // Add a space if empty
            if (!secondary_tok.strings.prefix) {
                secondary_tok.strings.prefix = " ";
            }
        }
        var secondary_outer = new CSL.Token();
        secondary_outer.decorations.push(["@font-style", "normal"]);
        secondary_outer.decorations.push(["@font-weight", "normal"]);
        this.state.output.openLevel(secondary_outer);
        this.state.output.append(secondary, secondary_tok);
        this.state.output.closeLevel();

        tertiary_tok = CSL.Util.cloneToken(style);
        if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
            // Add a space if empty
            if (!tertiary_tok.strings.prefix) {
                tertiary_tok.strings.prefix = " ";
            }
        }
        var tertiary_outer = new CSL.Token();
        tertiary_outer.decorations.push(["@font-style", "normal"]);
        tertiary_outer.decorations.push(["@font-weight", "normal"]);
        this.state.output.openLevel(tertiary_outer);
        this.state.output.append(tertiary, tertiary_tok);
        this.state.output.closeLevel();

        this.state.output.closeLevel();

        institutionblob = this.state.output.pop();
    } else {
        institutionblob = primary;
    }
    return institutionblob;
};

CSL.NameOutput.prototype._renderOneInstitutionPart = function (blobs, style) {
    for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
        if (blobs[i]) {
            var str = blobs[i];
            // XXXXX Cut-and-paste code in multiple locations. This code block should be
            // collected in a function.
            // Tag: strip-periods-block
            if (this.state.tmp.strip_periods) {
                str = str.replace(/\./g, "");
            } else {
                for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
                    if ("@strip-periods" === style.decorations[j][0] && "true" === style.decorations[j][1]) {
                        str = str.replace(/\./g, "");
                        break;
                    }
                }
            }
            //this.state.output.append(blobs[i], style, true);
            this.state.tmp.group_context.tip.variable_success = true;
            this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
            if (str === "!here>>>") {
                blobs[i] = false;
            } else {
                this.state.output.append(str, style, true);
                blobs[i] = this.state.output.pop();
            }
        }
    }
    if ("undefined" === typeof this.institution.strings["part-separator"]) {
        this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
    }
    return this._join(blobs, this.institution.strings["part-separator"]);
};

CSL.NameOutput.prototype._renderNames = function (v, values, pos, j) {
    //
    var ret = false;
    if (values.length) {
        var names = [];
        for (var i = 0, ilen = values.length; i < ilen; i += 1) {
            var name = values[i];
            
            // XXX We'll start here with attempts.
            // Figure out the three segments: primary, secondary, tertiary
            var ret, localesets;
            
            if (this.state.tmp.extension) {
                localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
                // Will never hit this in this function, but preserving
                // in case we factor this out.
                localesets = this.state.opt['cite-lang-prefs'].institutions;
            } else {
                localesets = this.state.opt['cite-lang-prefs'].persons;
            }
            var slot = {primary:'locale-orig',secondary:false,tertiary:false};
	        if (localesets) {
		        var slotnames = ["primary", "secondary", "tertiary"];
		        for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
			        if (localesets.length - 1 <  k) {
				        break;
			        }
			        slot[slotnames[k]] = 'locale-' + localesets[k];
		        }
	        } else {
		        slot.primary = 'locale-translat';
	        }
	        if (this.state.tmp.sort_key_flag || (this.state.tmp.area !== "bibliography"
		        && !(this.state.tmp.area === "citation"
			         && this.state.opt.xclass === "note"
			         && this.item && !this.item.position))) {
                
		        slot.secondary = false;
		        slot.tertiary = false;
	        }

            // primary
            // true is for fallback
            this.setRenderedName(name);

            if (!name.literal && !name.isInstitution) {
                var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
                var nameToken = CSL.Util.cloneToken(this.name);
                this.state.output.append(nameBlob, nameToken, true);
                names.push(this.state.output.pop());
            } else {
                names.push(this._renderInstitutionName(v, name, slot, j));
            }
        }
        //ret = this._join(names, "");
        ret = this.joinPersons(names, pos, j);
    }
    return ret;
};


CSL.NameOutput.prototype._renderPersonalName = function (v, name, slot, pos, i, j) {
    // XXXX FROM HERE (persons)

    var res = this.getName(name, slot.primary, true);
    var primary = this._renderOnePersonalName(res.name, pos, i, j);
	var secondary = false;
	if (slot.secondary) {
        res = this.getName(name, slot.secondary, false, res.usedOrig);
        if (res.name) {
			secondary = this._renderOnePersonalName(res.name, pos, i, j);
        }
	}
	var tertiary = false;
	if (slot.tertiary) {
        res = this.getName(name, slot.tertiary, false, res.usedOrig);
        if (res.name) {
			tertiary = this._renderOnePersonalName(res.name, pos, i, j);
        }
	}
    // Now compose them to a unit
    var personblob;
    if (secondary || tertiary) {

        this.state.output.openLevel("empty");

        this.state.output.append(primary);

        var secondary_tok = new CSL.Token();
        if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
            // Add a space if empty
            if (!secondary_tok.strings.prefix) {
                secondary_tok.strings.prefix = " ";
            }
        }
        this.state.output.append(secondary, secondary_tok);

        var tertiary_tok = new CSL.Token();
        if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
            // Add a space if empty
            if (!tertiary_tok.strings.prefix) {
                tertiary_tok.strings.prefix = " ";
            }
        }
        this.state.output.append(tertiary, tertiary_tok);

        this.state.output.closeLevel();

        personblob = this.state.output.pop();
    } else {
        personblob = primary;
    }
    return personblob;
};

CSL.NameOutput.prototype._isRomanesque = function (name) {
    // 0 = entirely non-romanesque
    // 1 = mixed content
    // 2 = pure romanesque
    var ret = 2;
    if (!name.family.replace(/\"/g, '').match(CSL.ROMANESQUE_REGEXP)) {
        ret = 0;
    }
    if (!ret && name.given && name.given.match(CSL.STARTSWITH_ROMANESQUE_REGEXP)) {
        ret = 1;
    }
    var top_locale;
    if (ret == 2) {
        if (name.multi && name.multi.main) {
            top_locale = name.multi.main.slice(0, 2);
        } else if (this.Item.language) {
            top_locale = this.Item.language.slice(0, 2);
        }
        if (["ja", "zh"].indexOf(top_locale) > -1) {
            ret = 1;
        }
    }
    //print("name: "+name.given+", multi: "+name.multi+", ret: "+ret);
    return ret;
};

CSL.NameOutput.prototype._renderOnePersonalName = function (value, pos, i, j) {
    var name = value;
    var dropping_particle = this._droppingParticle(name, pos, j);
    var family = this._familyName(name);
    var non_dropping_particle = this._nonDroppingParticle(name);
    var givenInfo = this._givenName(name, pos, i);
    var given = givenInfo.blob;
    var suffix = this._nameSuffix(name);
    if (given === false) {
        dropping_particle = false;
        suffix = false;
    }
    var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
    if (!sort_sep) {
        sort_sep = "";
    }
    var suffix_sep;
    if (name["comma-suffix"]) {
        suffix_sep = ", ";
    } else {
        suffix_sep = " ";
    }
    var romanesque = this._isRomanesque(name);
    function hasJoiningPunctuation(blob) {
        if (!blob) {
            return false;
        } else if ("string" === typeof blob.blobs) {
            if (["\u2019", "\'", "-", " "].indexOf(blob.blobs.slice(-1)) > -1) {
                return true;
            } else {
                return false;
            }
        } else {
            return hasJoiningPunctuation(blob.blobs[blob.blobs.length-1]);
        }
    }
    
    var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);

    var nbspace;
    if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
        nbspace = "\u00a0";
    } else {
        nbspace = " ";
    }

    var blob, merged, first, second;
    if (romanesque === 0) {
        // XXX handle affixes for given and family
        blob = this._join([non_dropping_particle, family, given], "");
    } else if (romanesque === 1 || name["static-ordering"]) { // entry likes sort order
        merged = this._join([non_dropping_particle, family], nbspace);
        blob = this._join([merged, given], " ");
    } else if (name["reverse-ordering"]) { // entry likes reverse order
        merged = this._join([non_dropping_particle, family], nbspace);
        blob = this._join([given, merged], " ");
    } else if (this.state.tmp.sort_key_flag) {
        // ok with no affixes here
        if (this.state.opt["demote-non-dropping-particle"] === "never") {
            merged = this._join([non_dropping_particle, family], nbspace);
            merged = this._join([merged, dropping_particle], " ");
            merged = this._join([merged, given], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
        } else {
            second = this._join([given, dropping_particle, non_dropping_particle], " ");
            merged = this._join([family, second], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
        }
    } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || (this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || "undefined" === typeof j))) {
        //
        // Discretionary sort ordering and inversions
        //
        if (["Lord", "Lady"].indexOf(name.given) > -1) {
            sort_sep = ", ";
        }

        // XXX Needs a more robust solution than this
        // XXX See https://forums.zotero.org/discussion/30974/any-idea-why-an-a-author-comes-last-in-the-bibliography/#Item_30

        //if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1 && !has_hyphenated_non_dropping_particle) {
        if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
            // Drop non-dropping particle
            //second = this._join([given, dropping_particle, non_dropping_particle], " ");
            second = this._join([given, dropping_particle], (name["comma-dropping-particle"] + " "));
        
            // This would be a problem with al-Ghazali. Avoided by has_hyphenated_non_dropping_particle check above.
            second = this._join([second, non_dropping_particle], " ");
            if (second && this.given) {
                second.strings.prefix = this.given.strings.prefix;
                second.strings.suffix = this.given.strings.suffix;
            }
            if (family && this.family) {
                family.strings.prefix = this.family.strings.prefix;
                family.strings.suffix = this.family.strings.suffix;
            }
            merged = this._join([family, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
        } else {
            // Don't drop particle.
            // Don't do this
            //if (this.state.tmp.area === "bibliography" && !this.state.tmp.term_predecessor && non_dropping_particle) {
            //    if (!has_hyphenated_non_dropping_particle) {
            //        non_dropping_particle.blobs = CSL.Output.Formatters["capitalize-first"](this.state, non_dropping_particle.blobs)
            //    }
            //}
            if (has_hyphenated_non_dropping_particle) {
                first = this._join([non_dropping_particle, family], "");
            } else {
                first = this._join([non_dropping_particle, family], nbspace);
            }
            if (first && this.family) {
                first.strings.prefix = this.family.strings.prefix;
                first.strings.suffix = this.family.strings.suffix;
            }

            second = this._join([given, dropping_particle], (name["comma-dropping-particle"] + " "));
            //second = this._join([given, dropping_particle], " ");
            if (second && this.given) {
                second.strings.prefix = this.given.strings.prefix;
                second.strings.suffix = this.given.strings.suffix;
            }

            merged = this._join([first, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
        }
        blob.isInverted = true;
    } else { // plain vanilla
        if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
            var dp = name["dropping-particle"];
            var apostrophes = ["'","\u02bc","\u2019","-"];
            if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
                family = this._join([dropping_particle, family], "");
                dropping_particle = false;
            }
        }

        if (has_hyphenated_non_dropping_particle) {
            second = this._join([non_dropping_particle, family], "");
            second = this._join([dropping_particle, second], nbspace);
        } else {
            second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
        }
        second = this._join([second, suffix], suffix_sep);
        if (second && this.family) {
            second.strings.prefix = this.family.strings.prefix;
            second.strings.suffix = this.family.strings.suffix;
        }
        if (given && this.given) {
            given.strings.prefix = this.given.strings.prefix;
            given.strings.suffix = this.given.strings.suffix;
        }
        if (second.strings.prefix) {
            name["comma-dropping-particle"] = "";
        }

        var space;
        if (this.state.inheritOpt(this.name, "initialize-with")
            && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/)
            && givenInfo.initializationLevel === 1) {
            
            space = nbspace;
        } else {
            space = " ";
        }
        blob = this._join([given, second], (name["comma-dropping-particle"] + space));
    }
    // XXX Just generally assume for the present that personal names render something
    this.state.tmp.group_context.tip.variable_success = true;
    this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
    this.state.tmp.term_predecessor = true;
    // notSerious
    //this.state.output.append(blob, "literal", true);
    //var ret = this.state.output.pop();
    this.state.tmp.name_node.children.push(blob);
    return blob;
};

/*
        // Do not include given name, dropping particle or suffix in strict short form of name

        // initialize if appropriate
*/

// Input names should be touched by _normalizeNameInput()
// exactly once: this is not idempotent.
CSL.NameOutput.prototype._normalizeNameInput = function (value) {
    var name = {
        literal:value.literal,
        family:value.family,
        isInstitution:value.isInstitution,
        given:value.given,
        suffix:value.suffix,
        "comma-suffix":value["comma-suffix"],
        "non-dropping-particle":value["non-dropping-particle"],
        "dropping-particle":value["dropping-particle"],
        "static-ordering":value["static-ordering"],
        "static-particles":value["static-particles"],
        "reverse-ordering":value["reverse-ordering"],
        "full-form-always": value["full-form-always"],
        "parse-names":value["parse-names"],
        "comma-dropping-particle": "",
        block_initialize:value.block_initialize,
        multi:value.multi
    };
    this._parseName(name);
    return name;
};

// _transformNameset() replaced with enhanced transform.name().

CSL.NameOutput.prototype._stripPeriods = function (tokname, str) {
    var decor_tok = this[tokname + "_decor"];
    if (str) {
        if (this.state.tmp.strip_periods) {
            str = str.replace(/\./g, "");
        } else  if (decor_tok) {
            for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
                if ("@strip-periods" === decor_tok.decorations[i][0] && "true" === decor_tok.decorations[i][1]) {
                    str = str.replace(/\./g, "");
                    break;
                }
            }
        }
    }
    return str;
};

CSL.NameOutput.prototype._nonDroppingParticle = function (name) {
    var ndp = name["non-dropping-particle"];
    if (ndp && this.state.tmp.sort_key_flag) {
        ndp = ndp.replace(/[\'\u2019]/, "");
    }
    var str = this._stripPeriods("family", ndp);
    if (this.state.output.append(str, this.family_decor, true)) {
        return this.state.output.pop();
    }
    return false;
};

CSL.NameOutput.prototype._droppingParticle = function (name, pos, j) {
    var dp = name["dropping-particle"];
    if (dp && this.state.tmp.sort_key_flag) {
        dp = dp.replace(/[\'\u2019]/, "");
    }
    var str = this._stripPeriods("given", dp);
    if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
        if (this.state.inheritOpt(this.name, "et-al-use-last")) {
            if ("undefined" === typeof j) { 
                this.etal_spec[pos].freeters = 2;
            } else {
                this.etal_spec[pos].persons = 2;
            }
        } else {
            if ("undefined" === typeof j) { 
                this.etal_spec[pos].freeters = 1;
            } else {
                this.etal_spec[pos].persons = 1;
            }
        }
        name["comma-dropping-particle"] = "";
    } else if (this.state.output.append(str, this.given_decor, true)) {
        return this.state.output.pop();
    }
    return false;
};

CSL.NameOutput.prototype._familyName = function (name) {
    var str = this._stripPeriods("family", name.family);
    if (this.state.output.append(str, this.family_decor, true)) {
        return this.state.output.pop();
    }
    return false;
};

CSL.NameOutput.prototype._givenName = function (name, pos, i) {
    var ret;
    // citation
    //   use disambig as-is
    // biblography
    //   use disambig only if it boosts over the default
    //   SO WHAT IS THE DEFAULT?
    //   A: If "form" is short, it's 0.
    //      If "form" is long, initialize-with exists (and initialize is not false) it's 1
    //      If "form" is long, and initialize_with does not exist, it's 2.
    var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
    var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
    var hasInitializeWith = "string" === typeof this.state.inheritOpt(this.name, "initialize-with") && !name.block_initialize;
    var defaultLevel;
    var useLevel;
    if (name["full-form-always"]) {
        useLevel = 2;
    } else {
        if (formIsShort) {
            defaultLevel = 0;
        } else if (hasInitializeWith) {
            defaultLevel = 1;
        } else {
            defaultLevel = 2;
        }
        var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
        if (requestedLevel > defaultLevel) {
            useLevel = requestedLevel;
        } else {
            useLevel = defaultLevel;
        }
    }
    var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
   if (gdropt && gdropt.slice(-14) === "-with-initials") {
        hasInitializeWith = true;
    }
    if (name.family && useLevel === 1) {
        if (hasInitializeWith) {
            var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
            name.given = CSL.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
        } else {
            name.given = CSL.Util.Names.unInitialize(this.state, name.given);
        }
    } else if (useLevel === 0) {
        return {
            blob: false
        }
    } else if (useLevel === 2) {
        name.given = CSL.Util.Names.unInitialize(this.state, name.given);
    }

    var str = this._stripPeriods("given", name.given);
    var rendered = this.state.output.append(str, this.given_decor, true);
    if (rendered) {
        ret = this.state.output.pop();
	    return {
            blob: ret,
            initializationLevel: useLevel
        };
    }
    return {
        blob: false
    };
};

CSL.NameOutput.prototype._nameSuffix = function (name) {

    var str = name.suffix, ret;

    if ("string" === typeof this.state.inheritOpt(this.name, "initialize-with")) {
        str = CSL.Util.Names.initializeWith(this.state, name.suffix, this.state.inheritOpt(this.name, "initialize-with"), true);
    }

    str = this._stripPeriods("family", str);
    var toSuffix = '';
    if (str && str.slice(-1) === '.') {
	str = str.slice(0, -1);
	toSuffix = '.';
    }
    var rendered = this.state.output.append(str, "empty", true);
    if (rendered) {
        ret = this.state.output.pop();
	ret.strings.suffix = toSuffix + ret.strings.suffix;
	return ret;
    }
    return false;
};

CSL.NameOutput.prototype._getLongStyle = function (name) {
    var long_style;
    if (name["short"].length) {
        if (this.institutionpart["long-with-short"]) {
            long_style = this.institutionpart["long-with-short"];
        } else {
            long_style = this.institutionpart["long"];
        }
    } else {
        long_style = this.institutionpart["long"];
    }
    if (!long_style) {
        long_style = new CSL.Token();
    }
    return long_style;
};

CSL.NameOutput.prototype._getShortStyle = function () {
    var short_style;
    if (this.institutionpart["short"]) {
        short_style = this.institutionpart["short"];
    } else {
        short_style = new CSL.Token();
    }
    return short_style;
};

CSL.NameOutput.prototype._parseName = function (name) {
    if (!name["parse-names"] && "undefined" !== typeof name["parse-names"]) {
        return name;
    }
    if (name.family && !name.given && name.isInstitution) {
        name.literal = name.family;
        name.family = undefined;
        name.isInstitution = undefined;
    }
    var noparse;
    if (name.family 
        && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"')
        || (!name["parse-names"] && "undefined" !== typeof name["parse-names"])) {

        name.family = name.family.slice(1, -1);
        noparse = true;
        name["parse-names"] = 0;
    } else {
        noparse = false;
    }
    if (this.state.opt.development_extensions.parse_names) {
        if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
            if (!name["static-particles"]) {
                CSL.parseParticles(name, true);
            }
        }
    }
};

/*
 * Return a single name object
  */

// The interface is a mess, but this should serve.

CSL.NameOutput.prototype.getName = function (name, slotLocaleset, fallback, stopOrig) {

    // Needs to tell us whether we used orig or not.
    
    if (stopOrig && slotLocaleset === 'locale-orig') {
        return {name:false,usedOrig:stopOrig};
    }

    // Normalize to string
    if (!name.family) {
        name.family = "";
    }
    if (!name.given) {
        name.given = "";
    }

    // Recognized params are:
    //  block-initialize
    //  transliterated
    //  static-ordering
    //  full-form-always
    // All default to false, except for static-ordering, which is initialized
    // with a sniff.
    var name_params = {};
    // Determines the default static-order setting based on the characters
    // used in the headline field. Will be overridden by locale-based
    // parameters evaluated against explicit lang tags set on the (sub)field.
    name_params["static-ordering"] = this.getStaticOrder(name);

    var foundTag = true;
    var langTag;
    if (slotLocaleset !== 'locale-orig') {
        foundTag = false;
        if (name.multi) {
            var langTags = this.state.opt[slotLocaleset];
            for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
                langTag = langTags[i];
                if (name.multi._key[langTag]) {
                    foundTag = true;
                    var isInstitution = name.isInstitution;
                    name = name.multi._key[langTag];
                    name.isInstitution = isInstitution;
                    // Set name formatting params
                    name_params = this.getNameParams(langTag);
                    name_params.transliterated = true;
                    break;
                }
            }
        }
    }

    if (!foundTag) {
        langTag = false;
        if (name.multi && name.multi.main) {
            langTag = name.multi.main;
        } else if (this.Item.language) {
            langTag = this.Item.language;
        }
        if (langTag) {
            name_params = this.getNameParams(langTag);
        }
    }

    if (!fallback && !foundTag) {
        return {name:false,usedOrig:stopOrig};
    }
    
    // Normalize to string (again)
    if (!name.family) {
        name.family = "";
    }
    if (!name.given) {
        name.given = "";
    }
    if (name.literal) {
        delete name.family;
        delete name.given;
    }
    // var clone the item before writing into it
    name = {
        family:name.family,
        given:name.given,
        "non-dropping-particle":name["non-dropping-particle"],
        "dropping-particle":name["dropping-particle"],
        suffix:name.suffix,
        "static-ordering":name_params["static-ordering"],
        "static-particles":name["static-particles"],
        "reverse-ordering":name_params["reverse-ordering"],
        "full-form-always": name_params["full-form-always"],
        "parse-names":name["parse-names"],
        "comma-suffix":name["comma-suffix"],
        "comma-dropping-particle":name["comma-dropping-particle"],
        transliterated: name_params.transliterated,
        block_initialize: name_params["block-initialize"],
        literal:name.literal,
        isInstitution:name.isInstitution,
        multi:name.multi
    };
    
    if (!name.literal && (!name.given && name.family && name.isInstitution)) {
        name.literal = name.family;
    }
    if (name.literal) {
        delete name.family;
        delete name.given;
    }
    name = this._normalizeNameInput(name);
    var usedOrig;
    if (stopOrig) {
        usedOrig = stopOrig;
    } else {
        usedOrig = !foundTag;
    }
    return {name:name,usedOrig:usedOrig};
};

CSL.NameOutput.prototype.getNameParams = function (langTag) {
    var ret = {};
    var langspec = CSL.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
    var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
    var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
    var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
    var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
    var field_lang_bare = langTag.split("-")[0];
    if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
        ret["static-ordering"] = true;
        ret["reverse-ordering"] = false;
    }
    if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
        ret["reverse-ordering"] = true;
        ret["static-ordering"] = false;
    }
    if (name_never_short && name_never_short[field_lang_bare]) {
        ret["full-form-always"] = true;
    }
    
    if (ret["static-ordering"]) {
        ret["block-initialize"] = true;
    }
    return ret;
};

CSL.NameOutput.prototype.setRenderedName = function (name) {
    if (this.state.tmp.area === "bibliography") {
        var strname = "";
        for (var j=0,jlen=CSL.NAME_PARTS.length;j<jlen;j+=1) {
            if (name[CSL.NAME_PARTS[j]]) {
                strname += name[CSL.NAME_PARTS[j]];
            }
        }
        this.state.tmp.rendered_name.push(strname);
    }
};

CSL.NameOutput.prototype.fixupInstitution = function (name, varname, listpos) {
    if (!name.literal && name.family) {
        name.literal = name.family;
        delete name.family;
    }
    var longNameStr = name.literal;
    var shortNameStr = longNameStr;
    var ret = {
        "long": longNameStr.split(/\s*\|\s*/),
        "short": shortNameStr.split(/\s*\|\s*/),
    };
    if (this.state.sys.getAbbreviation) {
        // Normalize longNameStr and shortNameStr
        if (this.institution.strings.form === "short") {
            let jurisdiction = this.Item.jurisdiction;
            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-entire", longNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr]) {
                longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr];
            } else {
                jurisdiction = this.Item.jurisdiction;
                jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", abbrevKey, this.Item.language);
                if (this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr]) {
                    longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr];
                }
            }
            longNameStr = this._quashChecks(jurisdiction, longNameStr);
        }
        if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            let jurisdiction = this.Item.jurisdiction;
            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", shortNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr]) {
                shortNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr];
            }
            shortNameStr = this._quashChecks(jurisdiction, shortNameStr);
            if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
                if (shortNameStr === longNameStr) {
                    shortNameStr = "";
                }
            }
        }
        // Split abbreviated strings
        // For pure long, split and we're done.
        ret["long"] = longNameStr.split(/\s*\|\s*/);
        // For short, split and then try abbrev with institution-part on each element
        ret["short"] = shortNameStr.split(/\s*\|\s*/);
        if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            for (var j=ret["short"].length-1; j>-1; j--) {
                let jurisdiction = this.Item.jurisdiction;
                var abbrevKey = ret["short"][j];
                jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", abbrevKey, this.Item.language);
                if (this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey]) {
                    ret["short"][j] = this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey];
                }
                if (ret["short"][j].indexOf("|") > -1) {
                    let retShort = ret["short"];
                    let splitShort = retShort[j].split(/\s*\|\s*/);
                    ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j+1));
                }
            }
        }
        if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
            ret["short"].reverse();
        }
        ret["short"] = this._trimInstitution(ret["short"]);
        if (this.institution.strings["reverse-order"]) {
            ret["short"].reverse();
        }
        // trimmer is not available in getAmbiguousCite
        if (!this.state.tmp.just_looking) {
            if (this.Item.jurisdiction) {
                let jurisdiction = this.Item.jurisdiction;
                var trimmer = this.state.tmp.abbrev_trimmer;
                if (trimmer && trimmer[jurisdiction] && trimmer[jurisdiction][varname]) {
                    for (var i=0,ilen=ret["short"].length;i<ilen;i++) {
                        var frag = ret["short"][i];
                        ret["short"][i] = frag.replace(trimmer[jurisdiction][varname], "").trim();
                    }
                }
            }
        }
    }
    if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
        ret["long"].reverse();
    }
    ret["long"] = this._trimInstitution(ret["long"]);
    if (this.institution.strings["reverse-order"]) {
        ret["long"].reverse();
    }

    return ret;
};


CSL.NameOutput.prototype.getStaticOrder = function (name, refresh) {
    var static_ordering_val = false;
    if (!refresh && name["static-ordering"]) {
        static_ordering_val = true;
    } else if (this._isRomanesque(name) === 0) {
        static_ordering_val = true;
    } else if ((!name.multi || !name.multi.main) && this.Item.language && ['vi', 'hu'].indexOf(this.Item.language) > -1) {
        static_ordering_val = true;
    } else if (name.multi && name.multi.main && ['vi', 'hu'].indexOf(name.multi.main.slice(0,2)) > -1) {
        static_ordering_val = true;
    } else {
        if (this.state.opt['auto-vietnamese-names']
            && (CSL.VIETNAMESE_NAMES.exec(name.family + " " + name.given)
                && CSL.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
            
            static_ordering_val = true;
        }
    }
    return static_ordering_val;
};

CSL.NameOutput.prototype._quashChecks = function (jurisdiction, str) {
    var str = this.state.transform.quashCheck(jurisdiction, str);
    // If the abbreviation has date cut-offs, find the most recent
    // abbreviation within scope.
    var lst = str.split(/>>[0-9]{4}>>/);
    var m = str.match(/>>([0-9]{4})>>/);
    str = lst.pop();
    var date = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
    if (date) {
        date = parseInt(date.year, 10);
        date = isNaN(date) ? false : date;
    }
    if (date) {
        if (lst.length > 0) {
            for (var k=m.length-1; k>0; k--) {
                if (date >= parseInt(m[k], 10)) {
                    break;
                }
                str = lst.pop();
            }
        }
        str = str.replace(/\s*\|\s*/g, "|");
    }
    return str;
};

CSL.NameOutput.prototype._trimInstitution = function (subunits) {
	// Oh! Good catch in the tests. This happens before abbrevs.
    // Won't work that way. Need to do abbrev substitute first,
    // and apply this separately to long and to short.
    var use_first = false;
    var stop_last = false;
    var use_last = false;
    var stop_first = false;
    var s = subunits.slice();
    if (this.institution) {
        // If use_first, apply stop_last, then apply use_first;
        // If use_last, apply stop_first, then apply use_last;
        if ("undefined" !== typeof this.institution.strings["use-first"]) {
            // this.state.sys.print("use-first OK");
            use_first = this.institution.strings["use-first"];
        }
        if ("undefined" !== typeof this.institution.strings["use-last"]) {
            // this.state.sys.print("use-last OK");
            use_last = this.institution.strings["use-last"];
        }
        if ("undefined" !== typeof this.institution.strings["stop-first"]) {
            // this.state.sys.print("stop-first OK");
            stop_first = this.institution.strings["stop-first"];
        }
        if ("undefined" !== typeof this.institution.strings["stop-last"]) {
            stop_last = this.institution.strings["stop-last"];
        }

        if (use_first) {
            if (stop_last) {
                s = s.slice(0, stop_last * -1);
            }
            s = s.slice(0, use_first);
        }
        
        if (use_last) {
            var ss = subunits.slice();
            if (use_first) {
                stop_first = use_first;
            } else {
                s = [];
            }
            if (stop_first) {
                ss = ss.slice(stop_first);
            }
            ss = ss.slice(use_last * -1);
            s = s.concat(ss);
        }
        subunits = s;
    }
    return subunits;
};

/*global CSL: true */

CSL.PublisherOutput = function (state, group_tok) {
    this.state = state;
    this.group_tok = group_tok;
    this.varlist = [];
};

CSL.PublisherOutput.prototype.render = function () {
    this.clearVars();
    this.composeAndBlob();
    this.composeElements();
    this.composePublishers();
    this.joinPublishers();
};


// XXX Figure out how to adapt this to the House of Lords / House of Commons
// joint committee case

// name_delimiter
// delimiter_precedes_last
// and

CSL.PublisherOutput.prototype.composeAndBlob = function () {
    this.and_blob = {};
    var and_term = false;
    if (this.group_tok.strings.and === "text") {
        and_term = this.state.getTerm("and");
    } else if (this.group_tok.strings.and === "symbol") {
        and_term = "&";
    }
    var tok = new CSL.Token();
    tok.strings.suffix = " ";
    tok.strings.prefix = " ";
    this.state.output.append(and_term, tok, true);
    var no_delim = this.state.output.pop();

    tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
    this.state.output.append(and_term, tok, true);
    var with_delim = this.state.output.pop();
    
    this.and_blob.single = false;
    this.and_blob.multiple = false;
    if (and_term) {
        if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
            this.and_blob.single = with_delim;
        } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = no_delim;
        } else {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = with_delim;
        }
    }
};


CSL.PublisherOutput.prototype.composeElements = function () {
    for (var i = 0, ilen = 2; i < ilen; i += 1) {
        var varname = ["publisher", "publisher-place"][i];
        for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
            var str = this[varname + "-list"][j];
            var tok = this[varname + "-token"];
            // notSerious
            this.state.output.append(str, tok, true);
            this[varname + "-list"][j] = this.state.output.pop();
        }
    }
};


CSL.PublisherOutput.prototype.composePublishers = function () {
    var blobs;
    for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
        blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
        this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
    }
};


CSL.PublisherOutput.prototype.joinPublishers = function () {
    var blobs = this["publisher-list"];
    var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
    this.state.output.append(publishers, "literal");
};


// blobs, delimiter, single, multiple, tokenname
// Tokenname is a key at top level of this object.
CSL.PublisherOutput.prototype._join = CSL.NameOutput.prototype._join;
CSL.PublisherOutput.prototype._getToken = CSL.NameOutput.prototype._getToken;


CSL.PublisherOutput.prototype.clearVars = function () {
    this.state.tmp["publisher-list"] = false;
    this.state.tmp["publisher-place-list"] = false;
    this.state.tmp["publisher-group-token"] = false;
    this.state.tmp["publisher-token"] = false;
    this.state.tmp["publisher-place-token"] = false;
};

/*global CSL: true */

CSL.evaluateLabel = function (node, state, Item, item) {
    var myterm;
    if ("locator" === node.strings.term) {
        if (item && item.label) {
            if (item.label === "sub verbo") {
                myterm = "sub-verbo";
            } else {
                myterm = item.label;
            }
        }
        if (!myterm) {
            myterm = "page";
        }
    } else {
        myterm = node.strings.term;
    }
    
    // Plurals detection.
    var plural = node.strings.plural;
    if ("number" !== typeof plural) {
        // (node, ItemObject, variable, type)
        var theItem = (item && node.strings.term === "locator") ? item : Item;
        if (theItem[node.strings.term]) {
            state.processNumber(false, theItem, node.strings.term, Item.type);
            plural = state.tmp.shadow_numbers[node.strings.term].plural;
            if (!state.tmp.shadow_numbers[node.strings.term].labelForm
                && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
                if (node.strings.form) {
                    state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
                } else if (state.tmp.group_context.tip.label_form) {
                    state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
                }
                state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
                state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
            }
            
            if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
                myterm = state.tmp.shadow_numbers[node.strings.term].label;
            }
            if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
                node.decorations.reverse();
                node.decorations.push(["@showid","true", node.cslid]);
                node.decorations.reverse();
            }
        }
    }
    return CSL.castLabel(state, node, myterm, plural, CSL.TOLERANT);
};

CSL.castLabel = function (state, node, term, plural, mode) {
    var label_form = node.strings.form;
    var label_capitalize_if_first = node.strings.capitalize_if_first;
    if (state.tmp.group_context.tip.label_form) {
        if (label_form === "static") {
            state.tmp.group_context.tip.label_static = true;
        } else {
            label_form = state.tmp.group_context.tip.label_form;
        }
    }

    if (state.tmp.group_context.tip.label_capitalize_if_first) {
        label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
    }
    var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
    if (label_capitalize_if_first) {
        ret = CSL.Output.Formatters["capitalize-first"](state, ret);
    }
    // XXXXX Cut-and-paste code in multiple locations. This code block should be
    // collected in a function.
    // Tag: strip-periods-block
    if (state.tmp.strip_periods) {
        ret = ret.replace(/\./g, "");
    } else {
        for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
            if ("@strip-periods" === node.decorations[i][0] && "true" === node.decorations[i][1]) {
                ret = ret.replace(/\./g, "");
                break;
            }
        }
    }
    return ret;
};

/*global CSL: true */

CSL.Node.name = {
    build: function (state, target) {
        var func;
        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {
            var oldTmpRoot;
            if ("undefined" === typeof state.tmp.root) {
                oldTmpRoot = undefined;
                state.tmp.root = "citation";
            } else {
                oldTmpRoot = state.tmp.root;
            }
            // Many CSL styles set et-al-[min|use-first]
            // and et-al-subsequent-[min|use-first] to the same
            // value.
            // Set state.opt.update_mode = CSL.POSITION if
            // et-al-subsequent-min or et-al-subsequent-use-first
            // are set AND their value differs from their plain
            // counterparts.
            if (state.inheritOpt(this, "et-al-subsequent-min")
                && (state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min"))) {
                
                state.opt.update_mode = CSL.POSITION;
            }
            if (state.inheritOpt(this, "et-al-subsequent-use-first")
                && (state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first"))) {
                
                state.opt.update_mode = CSL.POSITION;
            }

            state.tmp.root = oldTmpRoot;

            func = function (state) {
                // Et-al (onward processing in node_etal.js and node_names.js)
                // XXXXX Why is this necessary? This is available on this.name, right?
                state.tmp.etal_term = "et-al";

                // Use default delimiter as fallback, in a way that allows explicit
                // empty strings.
                state.tmp.name_delimiter = state.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                state.tmp["delimiter-precedes-et-al"] = state.inheritOpt(this, "delimiter-precedes-et-al");
                
                // And
                if ("text" === state.inheritOpt(this, "and")) {
                    this.and_term = state.getTerm("and", "long", 0);
                } else if ("symbol" === state.inheritOpt(this, "and")) {
                    if (state.opt.development_extensions.expect_and_symbol_form) {
                        this.and_term = state.getTerm("and", "symbol", 0);
                    } else {
                        this.and_term = "&";
                    }
                }
                state.tmp.and_term = this.and_term;
                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                    this.and_prefix_single = " ";
                    this.and_prefix_multiple = ", ";
                    // Workaround to allow explicit empty string
                    // on cs:name delimiter.
                    if ("string" === typeof state.tmp.name_delimiter) {
                        this.and_prefix_multiple = state.tmp.name_delimiter;
                    }
                    this.and_suffix = " ";

                    // Really can't inspect these values in the build phase. Sorry.
                    //state.build.name_delimiter = this.strings.delimiter;

                } else {
                    this.and_prefix_single = "";
                    this.and_prefix_multiple = "";
                    this.and_suffix = "";
                }
                if (state.inheritOpt(this, "delimiter-precedes-last") === "always") {
                    this.and_prefix_single = state.tmp.name_delimiter;
                } else if (state.inheritOpt(this, "delimiter-precedes-last") === "never") {
                    // Slightly fragile: could test for charset here to make
                    // this more certain.
                    if (this.and_prefix_multiple) {
                        this.and_prefix_multiple = " ";
                    }
                } else if (state.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
                    if (this.and_prefix_single) {
                        this.and_prefix_single = state.tmp.name_delimiter;
                    }
                    if (this.and_prefix_multiple) {
                        this.and_prefix_multiple = " ";
                    }
                }

                this.and = {};
                if (state.inheritOpt(this, "and")) {
                    state.output.append(this.and_term, "empty", true);
                    this.and.single = state.output.pop();
                    this.and.single.strings.prefix = this.and_prefix_single;
                    this.and.single.strings.suffix = this.and_suffix;
                    state.output.append(this.and_term, "empty", true);
                    this.and.multiple = state.output.pop();
                    this.and.multiple.strings.prefix = this.and_prefix_multiple;
                    this.and.multiple.strings.suffix = this.and_suffix;
                } else if (state.tmp.name_delimiter) {
                    // This is a little weird, but it works.
                    this.and.single = new CSL.Blob(state.tmp.name_delimiter);
                    this.and.single.strings.prefix = "";
                    this.and.single.strings.suffix = "";
                    this.and.multiple = new CSL.Blob(state.tmp.name_delimiter);
                    this.and.multiple.strings.prefix = "";
                    this.and.multiple.strings.suffix = "";
                }

                this.ellipsis = {};
                if (state.inheritOpt(this, "et-al-use-last")) {
                    // We use the dedicated Unicode ellipsis character because
                    // it is recommended by some editors, and can be more easily
                    // identified for find and replace operations.
                    // Source: http://en.wikipedia.org/wiki/Ellipsis#Computer_representations
                    //
                    
                    // Eventually, this should be localized as a term in CSL, with some
                    // mechanism for triggering appropriate punctuation handling around
                    // the ellipsis placeholder (Polish is a particularly tough case for that).
                    this.ellipsis_term = "\u2026";
                    // Similar treatment to "and", above, will be needed
                    // here when this becomes a locale term.
                    this.ellipsis_prefix_single = " ";
                    this.ellipsis_prefix_multiple =  state.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                    this.ellipsis_suffix = " ";
                    this.ellipsis.single = new CSL.Blob(this.ellipsis_term);
                    this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
                    this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
                    this.ellipsis.multiple = new CSL.Blob(this.ellipsis_term);
                    this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
                    this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
                }

                // et-al parameters are annoyingly incomprehensible
                // again.
                //
                // Explanation probably just adds a further layer of
                // irritation, but what's INTENDED here is that
                // the state.tmp et-al variables are set from the
                // cs:key element when composing sort keys, and a
                // macro containing a name can be called from cs:key.
                // So when cs:key sets et-al attributes, they are
                // set on state.tmp, and when the key is finished
                // processing, the state.tmp variables are reset to
                // undefined. IN THEORY the state.tmp et-al variables
                // will not be used in other contexts. I hope.
                //
                // Anyway, the current tests now seem to pass.
                if ("undefined" === typeof state.tmp["et-al-min"]) {
                    state.tmp["et-al-min"] = state.inheritOpt(this, "et-al-min");
                }
                if ("undefined" === typeof state.tmp["et-al-use-first"]) {
                    state.tmp["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
                }
                if ("undefined" === typeof state.tmp["et-al-use-last"]) {
                    //print("  setting et-al-use-last from name: "+this.strings["et-al-use-last"]);
                    state.tmp["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                }

                state.nameOutput.name = this;
            };
            
            state.build.name_flag = true;

            this.execs.push(func);
        }
        target.push(this);
    }
};



/*global CSL: true */

CSL.Node["name-part"] = {
    build: function (state) {
        state.build[this.strings.name] = this;
    }
};

/*global CSL: true */

CSL.Node.names = {
    build: function (state, target) {
        var func;
        // CSL.debug = print;

        if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
            CSL.Util.substituteStart.call(this, state, target);
            state.build.substitute_level.push(1);
        }
        
        if (this.tokentype === CSL.SINGLETON) {
            state.build.names_variables[state.build.names_variables.length-1].concat(this.variables);
            for (var i in this.variables) {
                var variable = this.variables[i];
                var name_labels = state.build.name_label[state.build.name_label.length-1];
                if (Object.keys(name_labels).length) {
                    name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
                }
            }
            func = function (state) {
                state.nameOutput.reinit(this, this.variables_real[0]);
            };
            this.execs.push(func);
        }

        if (this.tokentype === CSL.START) {

            state.build.names_flag = true;
            state.build.name_flag = false;
            state.build.names_level += 1;
            state.build.names_variables.push(this.variables);
            state.build.name_label.push({});
            // init can substitute
            // init names
            func = function (state) {
                state.tmp.can_substitute.push(true);
                state.tmp.name_node = {};
                state.tmp.name_node.children = [];
                state.nameOutput.init(this);
            };
            this.execs.push(func);

        }
        
        if (this.tokentype === CSL.END) {

            // Set/reset name blobs if they exist, for processing
            // by namesOutput()
            for (var i = 0, ilen = 3; i < ilen; i += 1) {
                var key = ["family", "given", "et-al"][i];
                this[key] = state.build[key];
                if (state.build.names_level === 1) {
                    state.build[key] = undefined;
                }
            }
            // Labels, if any
            this.label = state.build.name_label[state.build.name_label.length-1];
            state.build.names_level += -1;
            state.build.names_variables.pop();
            state.build.name_label.pop();

            // The with term. This isn't the right place
            // for this, but it's all hard-wired at the
            // moment.

            // "and" and "ellipsis" are set in node_name.js
            func = function (state) {
                // Et-al (strings only)
                // Blob production has to happen inside nameOutput()
                // since proper escaping requires access to the output
                // queue.
                if (state.tmp.etal_node) {
                    this.etal_style = state.tmp.etal_node;
                } else {
                    this.etal_style = "empty";
                }

                this.etal_term = state.getTerm(state.tmp.etal_term, "long", 0);
                this.etal_prefix_single = " ";
                // Should be name delimiter, not hard-wired.
                this.etal_prefix_multiple = state.tmp.name_delimiter;
                if (state.tmp["delimiter-precedes-et-al"] === "always") {
                    this.etal_prefix_single = state.tmp.name_delimiter;
                } else if (state.tmp["delimiter-precedes-et-al"] === "never") {
                    this.etal_prefix_multiple = " ";
                } else if (state.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
                    this.etal_prefix_single = state.tmp.name_delimiter;
                    this.etal_prefix_multiple = " ";
                }
                this.etal_suffix = "";
                if (!CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
                    // Not sure what the correct treatment is here, but we should not suppress
                    // a comma-space.
                    // https://forums.zotero.org/discussion/76679/delimiter-precedes-et-al-always-dose-not-work-in-locale-zh-cn
                    if (this.etal_prefix_single === " ") {
                        this.etal_prefix_single = "";
                    }
                    if (this.etal_prefix_multiple === " ") {
                        this.etal_prefix_multiple = "";
                    }
                    if (this.etal_suffix === " ") {
                        this.etal_suffix = "";
                    }
                }
                // et-al affixes are further adjusted in nameOutput(),
                // after the term (possibly changed in cs:et-al) is known.


                for (var i = 0, ilen = 3; i < ilen; i += 1) {
                    var key = ["family", "given"][i];
                    state.nameOutput[key] = this[key];
                }
                state.nameOutput["with"] = this["with"];

                // REMOVE THIS
                var mywith = "with";
                var with_default_prefix = "";
                var with_suffix = "";
                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
                    with_default_prefix = " ";
                    with_suffix = " ";
                }
                var thewith = {};
                thewith.single = new CSL.Blob(mywith);
                thewith.single.strings.suffix = with_suffix;
                thewith.multiple = new CSL.Blob(mywith);
                thewith.multiple.strings.suffix = with_suffix;
                if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "always") {
                    thewith.single.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                    thewith.multiple.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                } else if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "contextual") {
                    thewith.single.strings.prefix = with_default_prefix;
                    thewith.multiple.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                } else if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
                    thewith.single.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                    thewith.multiple.strings.prefix = with_default_prefix;
                } else {
                    thewith.single.strings.prefix = with_default_prefix;
                    thewith.multiple.strings.prefix = with_default_prefix;
                }
                state.nameOutput["with"] = thewith;


                // XXX label style should be set per variable, since they may differ
                // XXX with full-form nested names constructs
                state.nameOutput.label = this.label;

                state.nameOutput.etal_style = this.etal_style;
                state.nameOutput.etal_term = this.etal_term;
                state.nameOutput.etal_prefix_single = this.etal_prefix_single;
                state.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
                state.nameOutput.etal_suffix = this.etal_suffix;
                state.nameOutput.outputNames();
                state.tmp["et-al-use-first"] = undefined;
                state.tmp["et-al-min"] = undefined;
                state.tmp["et-al-use-last"] = undefined;
            };
            this.execs.push(func);

            // unsets
            func = function (state) {
                if (!state.tmp.can_substitute.pop()) {
                    state.tmp.can_substitute.replace(false, CSL.LITERAL);
                }
                
                // For posterity ...
                //
                // This was enough to fix the issue reported here:
                //
                //   http://forums.zotero.org/discussion/25223/citeproc-bug-substitute-doesnt-work-correctly-for-title-macro/
                //
                // The remainder of the changes applied in the same patch
                // relate to a label assignments, which were found to be
                // buggy while working on the issue. The test covering
                // both problems is here:
                //
                //   https://bitbucket.org/bdarcus/citeproc-test/src/ab136a6aa8f2/processor-tests/humans/substitute_SuppressOrdinaryVariable.txt
                if (state.tmp.can_substitute.mystack.length === 1) {
                    state.tmp.can_block_substitute = false;
                }
            };
            this.execs.push(func);

            state.build.name_flag = false;
        }
        target.push(this);

        if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
            state.build.substitute_level.pop();
            CSL.Util.substituteEnd.call(this, state, target);
        }
    }
};

/*global CSL: true */

CSL.Node.number = {
    build: function (state, target) {
        var func;
        CSL.Util.substituteStart.call(this, state, target);
        //
        // This should push a rangeable object to the queue.
        //
        if (this.strings.form === "roman") {
            this.formatter = state.fun.romanizer;
        } else if (this.strings.form === "ordinal") {
            this.formatter = state.fun.ordinalizer;
        } else if (this.strings.form === "long-ordinal") {
            this.formatter = state.fun.long_ordinalizer;
        }
        if ("undefined" === typeof this.successor_prefix) {
            this.successor_prefix = state[state.build.area].opt.layout_delimiter;
        }
        if ("undefined" === typeof this.splice_prefix) {
            this.splice_prefix = state[state.build.area].opt.layout_delimiter;
        }
        // is this needed?
        //if ("undefined" === typeof this.splice_prefix){
        //    this.splice_prefix = state[state.tmp.area].opt.layout_delimiter;
        //}
        //
        // Whether we actually stick a number object on
        // the output queue depends on whether the field
        // contains a pure number.
        //
        // push number or text
        func = function (state, Item, item) {
            // NOTE: this works because this is the ONLY function in this node.
            // If further functions are added, they need to start with the same
            // abort condition.
            if (this.variables.length === 0) {
                return;
            }
            var varname;
            varname = this.variables[0];
            if ("undefined" === typeof item) {
                var item = {};
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
                if (state.tmp.just_looking) {
                    return;
                }
                if (!item[varname]) {
                    return;
                }
            } else {
                if (!Item[varname]) {
                    return;
                }
            }

            if (varname === 'collection-number' && Item.type === 'legal_case') {
                state.tmp.renders_collection_number = true;
            }
            
            // For bill or legislation items that have a label-form
            // attribute set on the cs:number node rendering the locator,
            // the form and pluralism of locator terms are controlled
            // separately from those of the initial label. Form is
            // straightforward: the label uses the value set on
            // the cs:label node that renders it, and the embedded
            // labels use the value of label-form set on the cs:number
            // node. Both default to "long".
            //
            // Pluralism is more complicated. For embedded labels,
            // pluralism is evaluated using a simple heuristic that
            // can be found below (it just looks for comma, ampersand etc).
            // The item.label rendered independently via cs:label
            // defaults to singular. It is always singular if embedded
            // labels exist that (when expanded to their valid CSL
            // value) do not match the value of item.label. Otherwise,
            // if one or more matching embedded labels exist, the
            // cs:label is set to plural.
            //
            // The code that does all this is divided between this module,
            // util_static_locator.js, and util_label.js. It's not easy
            // to follow, but seems to do the job. Let's home for good
            // luck out there in the wild.
            
            var node = this;

            if (state.tmp.group_context.tip.force_suppress) {
                return false;
            }

            if (["locator", "locator-extra"].indexOf(varname) > -1) {
                // amazing that we reach this. should abort sooner if no content?
                state.processNumber.call(state, node, item, varname, Item.type);
            } else {
                if (!state.tmp.group_context.tip.condition && Item[varname]) {
                    state.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
                }
                // UPDATE_GROUP_CONTEXT_CONDITION is run by processNumber
                state.processNumber.call(state, node, Item, varname, Item.type);
            }

            if (this.substring) {
                var val = Item[varname].slice(this.substring);
                state.output.append(val, node);
            } else {
                CSL.Util.outputNumericField(state, varname, Item.id);
            }

            if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1
               && !state.tmp.just_looking) {
                state.tmp.done_vars.push(this.variables_real[0]);
                state.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
            }
        };
        this.execs.push(func);
        target.push(this);
        
        CSL.Util.substituteEnd.call(this, state, target);
    }
};

/*global CSL: true */

/*
 * Yikes, these functions were running out of scope for yonks.
 * now that they are set in the correct token list,
 * they might be useful for things.
 * FB 2013.11.09
*/

CSL.Node.sort = {
    build: function (state, target) {
        target = state[state.build.root + "_sort"].tokens;
        if (this.tokentype === CSL.START) {
            if (state.build.area === "citation") {
                state.opt.sort_citations = true;
            }
            state.build.area = state.build.root + "_sort";
            state.build.extension = "_sort";
            
            var func = function (state, Item) {
                //state.tmp.area = state.tmp.root + "_sort";
                //state.tmp.extension = "_sort";
                if (state.opt.has_layout_locale) {
                    var langspec = CSL.localeResolve(Item.language, state.opt["default-locale"][0]);
                    var sort_locales = state[state.tmp.area.slice(0,-5)].opt.sort_locales;
                    var langForItem;
                    for (var i=0,ilen=sort_locales.length;i<ilen;i+=1) {
                        langForItem = sort_locales[i][langspec.bare];
                        if (!langForItem) {
                            langForItem = sort_locales[i][langspec.best];
                        }
                        if (langForItem) {
                            break;
                        }
                    }
                    if (!langForItem) {
                        langForItem = state.opt["default-locale"][0];
                    }
                    state.tmp.lang_sort_hold = state.opt.lang;
                    state.opt.lang = langForItem;
                }
            };
            this.execs.push(func);
            
        }
        if (this.tokentype === CSL.END) {
            state.build.area = state.build.root;
            state.build.extension = "";
            var func = function (state) {
                if (state.opt.has_layout_locale) {
                    state.opt.lang = state.tmp.lang_sort_hold;
                    delete state.tmp.lang_sort_hold;
                }
                //state.tmp.area = state.tmp.root;
                //state.tmp.extension = "";
            };
            this.execs.push(func);
            /*
            var func = function (state, Item) {
                state.tmp.area = state.tmp.root;
                state.tmp.extension = "";
            }
            this.execs.push(func);
            */
        }
        target.push(this);
    }
};



/*global CSL: true */

CSL.Node.substitute = {
    build: function (state, target) {
        var func;
        if (this.tokentype === CSL.START) {
            /* */
            // set conditional
            var choose_start = new CSL.Token("choose", CSL.START);
            CSL.Node.choose.build.call(choose_start, state, target);
            var if_singleton = new CSL.Token("if", CSL.SINGLETON);
            func = function() {
                if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                    return true;
                }
                return false;
            };
            if_singleton.tests = [func];
            if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
            target.push(if_singleton);

            func = function (state) {
                state.tmp.can_block_substitute = true;
                if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                    state.tmp.can_substitute.replace(false, CSL.LITERAL);
                }
                state.tmp.common_term_match_fail = false;
            };
            this.execs.push(func);
            target.push(this);
            /* */
        }
        if (this.tokentype === CSL.END) {
            //var if_end = new CSL.Token("if", CSL.END);
            //CSL.Node["if"].build.call(if_end, state, target);
            /* */
            target.push(this);
            var choose_end = new CSL.Token("choose", CSL.END);
            CSL.Node.choose.build.call(choose_end, state, target);
            /* */
        }
    }
};



/*global CSL: true */

CSL.Node.text = {
    build: function (state, target) {
        var func, form, plural, id, num, number, formatter, firstoutput, specialdelimiter, label, suffix;
        if (this.postponed_macro) {
            var group_start = CSL.Util.cloneToken(this);
            group_start.name = "group";
            group_start.tokentype = CSL.START;
            CSL.Node.group.build.call(group_start, state, target);

            CSL.expandMacro.call(state, this, target);

            var group_end = CSL.Util.cloneToken(this);
            group_end.name = "group";
            group_end.tokentype = CSL.END;
            if (this.postponed_macro === 'juris-locator-label') {
                group_end.isJurisLocatorLabel = true;
            }
            CSL.Node.group.build.call(group_end, state, target);

        } else {
            CSL.Util.substituteStart.call(this, state, target);
            // ...
            //
            // Do non-macro stuff
            
            // Guess again. this.variables is ephemeral, adjusted by an initial
            // function set on the node via @variable attribute setup.
            //variable = this.variables[0];
            
            if (!this.variables_real) {
                this.variables_real = [];
            }
            if (!this.variables) {
                this.variables = [];
            }

            form = "long";
            plural = 0;
            if (this.strings.form) {
                form = this.strings.form;
            }
            if (this.strings.plural) {
                plural = this.strings.plural;
            }
            if ("citation-number" === this.variables_real[0] || "year-suffix" === this.variables_real[0] || "citation-label" === this.variables_real[0]) {
                //
                // citation-number and year-suffix are super special,
                // because they are rangeables, and require a completely
                // different set of formatting parameters on the output
                // queue.
                if (this.variables_real[0] === "citation-number") {

                    if (state.build.root === "citation") {
                        state.opt.update_mode = CSL.NUMERIC;
                    }
                    if (state.build.root === "bibliography") {
                        state.opt.bib_mode = CSL.NUMERIC;
                    }
                    //this.strings.is_rangeable = true;
                    if ("citation-number" === state[state.tmp.area].opt.collapse) {
                        this.range_prefix = state.getTerm("citation-range-delimiter");
                    }
                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                    this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                    func = function (state, Item, item) {

                        id = "" + Item.id;
                        if (!state.tmp.just_looking) {
                            if (state.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                                if (state.tmp.area === "bibliography_sort") {
                                    state.tmp.group_context.tip.done_vars.push("citation-number");
                                }
                                if (state.tmp.area === "citation_sort" && state.bibliography_sort.tmp.citation_number_map) {
                                    var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];
                                } else {
                                    var num = state.registry.registry[Item.id].seq;
                                }
                                if (num) {
                                    // Code currently in util_number.js
                                    num = CSL.Util.padding("" + num);
                                }
                                state.output.append(num, this);
                                return;
                            }
                            if (item && item["author-only"]) {
                                state.tmp.element_trace.replace("suppress-me");
                            }
                            if (state.tmp.area !== "bibliography_sort" && state.bibliography_sort.tmp.citation_number_map && state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
                                num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[id].seq];
                            } else {
                                num = state.registry.registry[id].seq;
                            }
                            if (state.opt.citation_number_slug) {
                                state.output.append(state.opt.citation_number_slug, this);
                            } else {
                                number = new CSL.NumericBlob(false, num, this, Item.id);
                                if (state.tmp.in_cite_predecessor) {
                                    number.suppress_splice_prefix = true;
                                }
                                state.output.append(number, "literal");
                            }
                        }
                    };
                    this.execs.push(func);
                } else if (this.variables_real[0] === "year-suffix") {

                    state.opt.has_year_suffix = true;

                    if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                        //this.range_prefix = "-";
                        this.range_prefix = state.getTerm("citation-range-delimiter");
                    }
                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                    if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                        this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
                    }
                    func = function (state, Item) {
                        if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.just_looking) {
                            //state.output.append(state.registry.registry[Item.id].disambig[2],this);
                            num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);

                            //if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                            //    //this.range_prefix = "-";
                            //    this.range_prefix = state.getTerm("citation-range-delimiter");
                            //}
                            //this.successor_prefix = state[state.tmp.area].opt.layout_delimiter;
                            if (state[state.tmp.area].opt.cite_group_delimiter) {
                                this.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;
                            }
                            number = new CSL.NumericBlob(false, num, this, Item.id);
                            formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
                            number.setFormatter(formatter);
                            state.output.append(number, "literal");
                            firstoutput = false;
                            // XXX Can we do something better for length here?
                            for (var i=0,ilen=state.tmp.group_context.mystack.length; i<ilen; i++) {
                                var flags = state.tmp.group_context.mystack[i];
                                if (!flags.variable_success && (flags.variable_attempt || (!flags.variable_attempt && !flags.term_intended))) {
                                    firstoutput = true;
                                    break;
                                }
                            }
                            specialdelimiter = state[state.tmp.area].opt["year-suffix-delimiter"];
                            if (firstoutput && specialdelimiter && !state.tmp.sort_key_flag) {
                                state.tmp.splice_delimiter = state[state.tmp.area].opt["year-suffix-delimiter"];
                            }
                        }
                    };
                    this.execs.push(func);
                } else if (this.variables_real[0] === "citation-label") {
                    if (state.build.root === "bibliography") {
                        state.opt.bib_mode = CSL.TRIGRAPH;
                    }
                    state.opt.has_year_suffix = true;
                    func = function (state, Item) {
                        label = Item["citation-label"];
                        if (!label) {
                            label = state.getCitationLabel(Item);
                        }
                        if (!state.tmp.just_looking) {
                            suffix = "";
                            if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false) {
                                num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);
                                suffix = state.fun.suffixator.format(num);
                            }
                            label += suffix;
                        }
                        state.output.append(label, this);
                    };
                    this.execs.push(func);
                }
            } else {
                if (this.strings.term) {
                    
                    // printterm
                    func = function (state, Item) {
                        var gender = state.opt.gender[Item.type];
                        var term = this.strings.term;
                        term = state.getTerm(term, form, plural, gender, CSL.TOLERANT, this.default_locale);
                        var myterm;
                        // if the term is not an empty string, say
                        // that we rendered a term
                        if (term !== "") {
                            state.tmp.group_context.tip.term_intended = true;
                        }
                        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, term, null, this);
                        
                        // capitalize the first letter of a term, if it is the
                        // first thing rendered in a citation (or if it is
                        // being rendered immediately after terminal punctuation,
                        // I guess, actually).
                        if (!state.tmp.term_predecessor && !(state.opt["class"] === "in-text" && state.tmp.area === "citation")) {
                            myterm = CSL.Output.Formatters["capitalize-first"](state, term);
                            //CSL.debug("Capitalize");
                        } else {
                            myterm = term;
                        }
                        
                        // XXXXX Cut-and-paste code in multiple locations. This code block should be
                        // collected in a function.
                        // Tag: strip-periods-block
                        if (state.tmp.strip_periods) {
                            myterm = myterm.replace(/\./g, "");
                        } else {
                            for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                                if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                                    myterm = myterm.replace(/\./g, "");
                                    break;
                                }
                            }
                        }
                        state.output.append(myterm, this);
                        if (state.tmp.can_block_substitute) {
                            // Black magic here. This causes the cs:substitution condition to pass,
                            // blocking further rendering within its scope. 
                            state.tmp.can_substitute.replace(false, CSL.LITERAL);
                        }
                    };
                    this.execs.push(func);
                    state.build.term = false;
                    state.build.form = false;
                    state.build.plural = false;
                } else if (this.variables_real.length) {
                    func = function (state, Item) {

                        // If some text variable is rendered, we're not collapsing.
                        if (this.variables_real[0] !== "locator") {
                            state.tmp.have_collapsed = false;
                        }

                        if (!state.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                            state.tmp.just_did_number = false;
                        }
                        var val = Item[this.variables[0]];
                        if (val && !state.tmp.group_context.tip.condition) {
                            if (("" + val).slice(-1).match(/[0-9]/)) {
                                state.tmp.just_did_number = true;
                            } else {
                                state.tmp.just_did_number = false;
                            }
                        }
                    };
                    this.execs.push(func);

                    // plain string fields

                    // Deal with multi-fields and ordinary fields separately.
                    if (CSL.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1
                        || this.variables_real[0].indexOf("-main") > -1
                        || this.variables_real[0].indexOf("-sub") > -1
                        || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1
                       ) {

                        // multi-fields
                        // Initialize transform factory according to whether
                        // abbreviation is desired.
                        var abbrevfam = this.variables[0];
                        var abbrfall = false;
                        var altvar = false;
                        var transfall = false;
                        if (form === "short") {
                            if (this.variables_real[0].slice(-6) !== "-short") {
                                altvar = this.variables_real[0] + "-short";
                            }
                        } else {
                            abbrevfam = false;
                        }
                        if (state.build.extension) {
                            // multi-fields for sorting get a sort transform,
                            // (abbreviated if the short form was selected)
                            transfall = true;
                        } else {
                            transfall = true;
                            abbrfall = true;
						}

                        func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                    } else {
                        // ordinary fields
                        if (CSL.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                            // per-cite fields are read from item, rather than Item
                            func = function (state, Item, item) {
                                if (item && item[this.variables[0]]) {
                                    // Code copied to page variable as well; both
                                    // become cs:number in MLZ extended schema
                                    
                                    // If locator, use cs:number. Otherwise, render
                                    // normally.

                                    // XXX The code below is pretty-much copied from
                                    // XXX node_number.js. Should be a common function.
                                    // XXX BEGIN
                                    state.processNumber(this, item, this.variables[0], Item.type);
                                    CSL.Util.outputNumericField(state, this.variables[0], Item.id);
                                    // XXX END

                                    if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1
                                       && !state.tmp.just_looking) { 
                                        state.tmp.done_vars.push(this.variables_real[0]);
                                    }
                                }
                            };
                        } else  if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                            // page gets mangled with the correct collapsing
                            // algorithm
                            func = function(state, Item) {
                                state.processNumber(this, Item, this.variables[0], Item.type);
                                CSL.Util.outputNumericField(state, this.variables[0], Item.id);
                            };
                        } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                            func = function (state, Item) {
                                var value;
                                if (this.variables[0]) {
                                    value = state.getVariable(Item, this.variables[0], form);
                                    if (value) {
                                        if (this.variables[0] === "URL" && form === "short") {
                                            value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                                            if (value.match(/\/\/www\./)) {
                                                value = value.replace(/https?:\/\//, "");
                                            }
                                        }
                                        // true is for non-suppression of periods
                                        if (state.opt.development_extensions.wrap_url_and_doi) {
                                            if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                                                // Special-casing to fix https://github.com/Juris-M/citeproc-js/issues/57
                                                // clone current token, to avoid collateral damage
                                                var clonetoken = CSL.Util.cloneToken(this);
                                                // cast a group blob
                                                var groupblob = new CSL.Blob(null, null, "url-wrapper");
                                                // set the DOI decoration on the blob
                                                groupblob.decorations.push(["@DOI", "true"]);
                                                if (this.variables_real[0] === "DOI") {
                                                    // strip a proper DOI prefix
                                                    var prefix;
                                                    if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                                        value = value.replace(/^https?:\/\/doi\.org\//, "");
                                                        if (value.match(/^https?:\/\//)) {
                                                            // Do not tamper with another protocol + domain if already set in field value
                                                            prefix = "";
                                                        } else {
                                                            // Otherwise https + domain
                                                            prefix = "https://doi.org/";
                                                        }
                                                        // set any string prefix on the clone
                                                        clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length-16);
                                                    }
                                                    // cast a text blob
                                                    // set the prefix as the content of the blob
                                                    var prefixblob = new CSL.Blob(prefix);
                                                    // cast another text blob
                                                    // set the value as the content of the second blob
                                                    var valueblob = new CSL.Blob(value);
                                                    // append new text token and clone to group token
                                                    groupblob.push(prefixblob);
                                                    groupblob.push(valueblob);
                                                    // append group token to output
                                                    state.output.append(groupblob, clonetoken, false, false, true);
                                                } else {
                                                    var valueblob = new CSL.Blob(value);
                                                    // append new text token and clone to group token
                                                    groupblob.push(valueblob);
                                                    // append group token to output
                                                    //this.decorations = [["@" + this.variables[0], "true"]].concat(this.decorations);
                                                    state.output.append(groupblob, clonetoken, false, false, true);
                                                }
                                            } else {
                                                state.output.append(value, this, false, false, true);
                                            }
                                        } else {
                                            // This is totally unnecessary, isn't it?
                                            if (this.decorations.length) {
                                                for (var i=this.decorations.length-1; i>-1; i--) {
                                                    if (this.decorations[i][0] === "@" + this.variables[0]) {
                                                        this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i+1));
                                                    }
                                                }
                                            }
                                            state.output.append(value, this, false, false, true);
                                        }
                                    }
                                }
                            };
                        } else if (this.variables_real[0] === "section") {
                            // Sections for statutes are special. This is an uncommon
                            // variable, so we save the cost of the runtime check
                            // unless it's being used.
                            func = function (state, Item) {
                                var value;
                                value = state.getVariable(Item, this.variables[0], form);
                                if (value) {
                                    state.output.append(value, this);
                                }
                            };
                        } else if (this.variables_real[0] === "hereinafter") {
                            func = function (state, Item) {
                                var value = state.transform.abbrevs["default"]["hereinafter"][Item.id];
                                if (value) {
                                    state.output.append(value, this);
                                    state.tmp.group_context.tip.variable_success = true;
                                }
                            };
                        } else {
                            // anything left over just gets output in the normal way.
                            func = function (state, Item) {
                                var value;
                                if (this.variables[0]) {
                                    value = state.getVariable(Item, this.variables[0], form);
                                    if (value) {
                                        value = "" + value;
                                        value = value.split("\\").join("");
                                        state.output.append(value, this);
                                    }
                                }
                            };
                        }
                    }
                    this.execs.push(func);
                } else if (this.strings.value) {
                    // for the text value attribute.
                    func = function (state) {
                        state.tmp.group_context.tip.term_intended = true;
                        // true flags that this is a literal-value term
                        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, this.strings.value, true, this);
                        state.output.append(this.strings.value, this);
                        if (state.tmp.can_block_substitute) {
                            // Black magic here. This causes the cs:substitution condition to pass,
                            // blocking further rendering within its scope. 
                            state.tmp.can_substitute.replace(false, CSL.LITERAL);
                        }
                    };
                    this.execs.push(func);
                    // otherwise no output
                }
            }
            target.push(this);
            CSL.Util.substituteEnd.call(this, state, target);
        }
    }
};



/*global CSL: true */

CSL.Node.intext = {
    build: function (state, target) {
        if (this.tokentype === CSL.START) {

            state.build.area = "intext";
            state.build.root = "intext";
            state.build.extension = "";

            var func = function(state, Item) {
                state.tmp.area = "intext";
                state.tmp.root = "intext";
                state.tmp.extension = "";
            };
            this.execs.push(func);
        }
        if (this.tokentype === CSL.END) {

            // Do whatever cs:citation does with sorting.
            state.intext_sort = {
                opt: {
                    sort_directions: state.citation_sort.opt.sort_directions
                }
            };
            state.intext.srt = state.citation.srt;
        }
        target.push(this);
    }
};


/*global CSL: true */

CSL.Attributes = {};

CSL.Attributes["@disambiguate"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    if (arg === "true") {
        state.opt.has_disambiguate = true;
        var func = function (Item) {
            if (state.tmp.area === "bibliography") {
                if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
                    state.tmp.disambiguate_count += 1;
                    return true;
                }
            } else {
                state.tmp.disambiguate_maxMax += 1;
                if (state.tmp.disambig_settings.disambiguate
                    && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
                    state.tmp.disambiguate_count += 1;
                    return true;
                }
            }
            return false;
        };
        this.tests.push(func);
    } else if (arg === "check-ambiguity-and-backreference") {
        var func = function (Item) {
            if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
                return true;
            }
            return false;
        };
        this.tests.push(func);
    }
};

CSL.Attributes["@is-numeric"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var variables = arg.split(/\s+/);
    var maketest = function(variable) {
        return function (Item, item) {
            var myitem = Item;
            if (item && ["locator","locator-extra"].indexOf(variable) > -1) {
                myitem = item;
            }
            if (!myitem[variable]) {
                return false;
            }
            if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                if (!state.tmp.shadow_numbers[variable]) {
                    state.processNumber(false, myitem, variable, Item.type);
                }
                if (state.tmp.shadow_numbers[variable].numeric) {
                    return true;
                }
            } else if (["title","version"].indexOf(variable) > -1) {
                if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
                    return true;
                }
            }
            return false;
        };
    };
    for (var i=0; i<variables.length; i+=1) {
        this.tests.push(maketest(variables[i]));
    }
};


CSL.Attributes["@is-uncertain-date"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var variables = arg.split(/\s+/);
    // Strip off any boolean prefix.
    var maketest = function (myvariable) {
        return function(Item) {
            if (Item[myvariable] && Item[myvariable].circa) {
                return true;
            } else {
                return false;
            }
        };
    };
    for (var i=0,ilen=variables.length;i<ilen;i+=1) {
        this.tests.push(maketest(variables[i]));
    }
};


CSL.Attributes["@locator"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trylabels = arg.replace("sub verbo", "sub-verbo");
    trylabels = trylabels.split(/\s+/);
    // Strip off any boolean prefix.
    var maketest = function (trylabel) {
        return function(Item, item) {
            var label;
            state.processNumber(false, item, "locator");
            label = state.tmp.shadow_numbers.locator.label;
            if (label && trylabel === label) {
                return true;
            } else {
                return false;
            }
        };
    };
    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
        this.tests.push(maketest(trylabels[i]));
    }
};


CSL.Attributes["@position"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var tryposition;
    state.opt.update_mode = CSL.POSITION;
    var trypositions = arg.split(/\s+/);
    var testSubsequentNear = function (Item, item) {
        if (item && CSL.POSITION_MAP[item.position] >= CSL.POSITION_MAP[CSL.POSITION_SUBSEQUENT] && item["near-note"]) {
            return true;
        }
        return false;
    };
    var testSubsequentNotNear = function (Item, item) {
        if (item && CSL.POSITION_MAP[item.position] == CSL.POSITION_MAP[CSL.POSITION_SUBSEQUENT] && !item["near-note"]) {
            return true;
        }
        return false;
    };
    var maketest = function(tryposition) {
        return function (Item, item) {
            if (state.tmp.area === "bibliography") {
                return false;
            }
            if (item && "undefined" === typeof item.position) {
                item.position = 0;
            }
            if (item && typeof item.position === "number") {
                if (item.position === 0 && tryposition === 0) {
                    return true;
                } else if (tryposition > 0 && CSL.POSITION_MAP[item.position] >= CSL.POSITION_MAP[tryposition]) {
                    return true;
                }
            } else if (tryposition === 0) {
                return true;
            }
            return false;
        };
    };
    for (var i=0,ilen=trypositions.length;i<ilen;i+=1) {
        var tryposition = trypositions[i];
        if (tryposition === "first") {
            tryposition = CSL.POSITION_FIRST;
        } else if (tryposition === "container-subsequent") {
            tryposition = CSL.POSITION_CONTAINER_SUBSEQUENT;
        } else if (tryposition === "subsequent") {
            tryposition = CSL.POSITION_SUBSEQUENT;
        } else if (tryposition === "ibid") {
            tryposition = CSL.POSITION_IBID;
        } else if (tryposition === "ibid-with-locator") {
            tryposition = CSL.POSITION_IBID_WITH_LOCATOR;
        }
        if ("near-note" === tryposition) {
            this.tests.push(testSubsequentNear);
        } else if ("far-note" === tryposition) {
            this.tests.push(testSubsequentNotNear);
        } else {
            this.tests.push(maketest(tryposition));
        }
    }
};

CSL.Attributes["@type"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    // XXX This is ALWAYS composed as an "any" match
    var types = arg.split(/\s+/);
    // Strip off any boolean prefix.
    var maketest = function (mytype) {
        return function(Item) {
            var ret = (Item.type === mytype);
            if (ret) {
                return true;
            } else {
                return false;
            }
        };
    };
    var tests = [];
    for (var i=0,ilen=types.length;i<ilen;i+=1) {
        tests.push(maketest(types[i]));
    }
    this.tests.push(state.fun.match.any(this, state, tests));
};

CSL.Attributes["@variable"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var func;
    this.variables = arg.split(/\s+/);
    this.variables_real = this.variables.slice();

    // First the non-conditional code.
    if ("label" === this.name && this.variables[0]) {
        this.strings.term = this.variables[0];
    } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
        //
        // An oddity of variable handling is that this.variables
        // is actually ephemeral; the full list of variables is
        // held in the variables_real var, and pushed into this.variables
        // conditionally in order to suppress repeat renderings of
        // the same item variable.  [STILL FUNCTIONAL? 2010.01.15]
        //
        // set variable names
        func = function (state, Item, item) {
            // Clear this.variables in place
            for (var i = this.variables.length - 1; i > -1; i += -1) {
                this.variables.pop();
            }
            for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {
                // set variable name if not quashed, and if not the title of a legal case w/suppress-author
                if (state.tmp.done_vars.indexOf(this.variables_real[i]) === -1 
// This looks nuts. Why suppress a case name if not required by context?
//                    && !(item && Item.type === "legal_case" && item["suppress-author"] && this.variables_real[i] === "title")
                   ) {
                    this.variables.push(this.variables_real[i]);
                }
                if (state.tmp.can_block_substitute) {
                    state.tmp.done_vars.push(this.variables_real[i]);
                }
            }
        };
        this.execs.push(func);

        // check for output
        func = function (state, Item, item) {
            var output = false;
            for (var i=0,ilen=this.variables.length;i<ilen;i++) {
                var variable = this.variables[i];
                if (["authority", "committee"].indexOf(variable) > -1
                    && "string" === typeof Item[variable]
                    && "names" === this.name) {

                    // Great! So for each of these, we split.
                    // And we only recombine everything if the length
                    // of all the splits matches.
                    
                    // Preflight
                    var isValid = true;
                    var rawNames = Item[variable].split(/\s*;\s*/);
                    var rawMultiNames = {};
                    if (Item.multi && Item.multi._keys[variable]) {
                        for (var langTag in Item.multi._keys[variable]) {
                            rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                            if (rawMultiNames[langTag].length !== rawNames.length) {
                                isValid = false;
                                break;
                            }
                        }
                    }
                    if (!isValid) {
                        rawNames = [Item[variable]];
                        rawMultiNames = Item.multi._keys[variable];
                    }
                    for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                        var creatorParent = {
                            literal:rawNames[j],
                            multi:{
                                _key:{}
                            }
                        };
                        for (var langTag in rawMultiNames) {
                            var creatorChild = {
                                literal:rawMultiNames[langTag][j]
                            };
                            creatorParent.multi._key[langTag] = creatorChild;
                        }
                        rawNames[j] = creatorParent;
                    }
                    Item[variable] = rawNames;
                }
                if (this.strings.form === "short" && !Item[variable]) {
                    if (variable === "title") {
                        variable = "title-short";
                    } else if (variable === "container-title") {
                        variable = "container-title-short";
                    }
                }
                if (variable === "year-suffix") {
                    // year-suffix always signals that it produces output,
                    // even when it doesn't. This permits it to be used with
                    // the "no date" term inside a group used exclusively
                    // to control formatting.
                    output = true;
                    break;
                } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {
                    if (state.opt.development_extensions.locator_date_and_revision && "locator-date" === variable) {
                        // If locator-date is set, it's valid.
                        output = true;
                        break;
                    }
                    if (Item[variable]) {
                        for (var key in Item[variable]) {
                            if (this.dateparts.indexOf(key) === -1 && "literal" !== key) {
                                continue;
                            }
                            if (Item[variable][key]) {
                                output = true;
                                break;
                            }
                        }
                        if (output) {
                            break;
                        }
                    }
                } else if ("locator" === variable) {
                    if (item && item.locator) {
                        output = true;
                    }
                    break;
                } else if ("locator-extra" === variable) {
                    if (item && item["locator-extra"]) {
                        output = true;
                    }
                    break;
                } else if (["citation-number","citation-label"].indexOf(variable) > -1) {
                    output = true;
                    break;
                } else if ("first-reference-note-number" === variable) {
                    if (item && item["first-reference-note-number"]) {
                        output = true;
                    }
                    break;
                } else if ("first-container-reference-note-number" === variable) {
                    if (item && item["first-container-reference-note-number"]) {
                        output = true;
                    }
                    break;
                } else if ("hereinafter" === variable) {
                    if (state.transform.abbrevs["default"].hereinafter[Item.id]
                        && state.sys.getAbbreviation
                        && Item.id) {
						
                        output = true;
                    }
                    break;
                } else if ("object" === typeof Item[variable]) {
                    break;
                } else if ("string" === typeof Item[variable] && Item[variable]) {
                    output = true;
                    break;
                } else if ("number" === typeof Item[variable]) {
                    output = true;
                    break;
                }
                if (output) {
                    break;
                }
            }
            //print("-- VAR: "+variable);
            //flag = state.tmp.group_context.tip;
            if (output) {
                for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {
                    var variable = this.variables_real[i];
                    if (variable !== "citation-number" || state.tmp.area !== "bibliography") {
                        state.tmp.cite_renders_content = true;
                    }
                    //print("  setting [2] to true based on: " + arg);
                    state.tmp.group_context.tip.variable_success = true;
                    // For util_substitute.js, subsequent-author-substitute
                    if (state.tmp.can_substitute.value() 
                        && state.tmp.area === "bibliography"
                        && "string" === typeof Item[variable]) {

                        state.tmp.name_node.top = state.output.current.value();
                        state.tmp.rendered_name.push(Item[variable]);
                    }
                }
                state.tmp.can_substitute.replace(false,  CSL.LITERAL);
            } else {
                //print("  setting [1] to true based on: " + arg);
                state.tmp.group_context.tip.variable_attempt = true;
            }
            //state.tmp.group_context.replace(flag);
        };
        this.execs.push(func);
    } else if (["if",  "else-if", "condition"].indexOf(this.name) > -1) {
        // Strip off any boolean prefix.
        // Now the conditionals.
        var maketest = function (variable) {
            return function(Item,item){
                var myitem = Item;
                if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
                    myitem = item;
                }
                // We don't run loadAbbreviation() here; it is run by the application-supplied
                // retrieveItem() if hereinafter functionality is to be used, so this key will
                // always exist in memory, possibly with a nil value.
                if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
                    if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                        return true;
                    }
                } else if (myitem[variable]) {
                    if ("number" === typeof myitem[variable] || "string" === typeof myitem[variable]) {
                        return true;
                    } else if ("object" === typeof myitem[variable]) {
                        //
                        // this will turn true only for hash objects
                        // that have at least one attribute, or for a
                        // non-zero-length list
                        //
                        for (var key in myitem[variable]) {
                            if (myitem[variable][key]) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            };
        };
        for (var i=0,ilen=this.variables.length;i<ilen;i+=1) {
            this.tests.push(maketest(this.variables[i]));
        }
    }
};


CSL.Attributes["@page"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trylabels = arg.replace("sub verbo", "sub-verbo");
    trylabels = trylabels.split(/\s+/);
    // Strip off any boolean prefix.
    var maketest = function (trylabel) {
        return function(Item) {
            var label;
            state.processNumber(false, Item, "page", Item.type);
            if (!state.tmp.shadow_numbers.page.label) {
                label = "page";
            } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
                label = "sub-verbo";
            } else {
                label = state.tmp.shadow_numbers.page.label;
            }
            if (state.tmp.shadow_numbers.page.values.length > 0) {
                if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
                    state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
                }
            }
            if (trylabel === label) {
                return true;
            } else {
                return false;
            }
        };
    };
    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
        this.tests.push(maketest(trylabels[i]));
    }
};


// a near duplicate of code above
CSL.Attributes["@number"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trylabels = arg.split(/\s+/);
    var maketest = function(trylabel) {
        return function (Item) {
            var label;
            state.processNumber(false, Item, "number", Item.type);
            if (!state.tmp.shadow_numbers.number.label) {
                label = "number";
            } else {
                label = state.tmp.shadow_numbers.number.label;
            }
            if (trylabel === label) {
                return true;
            } else {
                return false;
            }
        };
    };
    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
        this.tests.push(maketest(trylabels[i]));
    }
};

CSL.Attributes["@jurisdiction"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var tryjurisdictions = arg.split(/\s+/);
    
    // This forces a match=any method, similar to @type
    var maketests = function (tryjurisdictions) {
        return function(Item) {
            if (!Item.jurisdiction) {
                return false;
            }
            var jurisdiction = Item.jurisdiction;
            for (var i=0,ilen=tryjurisdictions.length;i<ilen;i++) {
                if (jurisdiction === tryjurisdictions[i]) {
                    return true;
                }
            }
            return false;
        };
    };
    this.tests.push(maketests(tryjurisdictions));
};

CSL.Attributes["@country"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trycountries = arg.split(/\s+/);
    
    // This forces a match=any method, similar to @type
    var maketests = function (trycountries) {
        return function(Item) {
            if (!Item.country) {
                return false;
            }
            var country = Item.country;
            for (var i=0,ilen=trycountries.length;i<ilen;i++) {
                if (country === trycountries[i]) {
                    return true;
                }
            }
            return false;
        };
    };
    this.tests.push(maketests(trycountries));
};

CSL.Attributes["@context"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var func = function () {
        if (["bibliography", "citation"].indexOf(arg) > -1) {
		    var area = state.tmp.area.slice(0, arg.length);
		    if (area === arg) {
			    return true;
		    }
		    return false;
        } else if ("alternative" === arg) {
            return !!state.tmp.abort_alternative;
        }
    };
    this.tests.push(func);
};

CSL.Attributes["@has-year-only"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trydates = arg.split(/\s+/);
    var maketest = function (trydate) {
        return function(Item) {
            var date = Item[trydate];
            if (!date || date.month || date.season) {
                return false;
            } else {
                return true;
            }
        };
    };
    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
        this.tests.push(maketest(trydates[i]));
    }
};

CSL.Attributes["@has-to-month-or-season"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trydates = arg.split(/\s+/);
    var maketest = function (trydate) {
        return function(Item) {
            var date = Item[trydate];
            if (!date || (!date.month && !date.season) || date.day) {
                return false;
            } else {
                return true;
            }
        };
    };
    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
        this.tests.push(maketest(trydates[i]));
    }
};

CSL.Attributes["@has-day"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var trydates = arg.split(/\s+/);
    var maketest = function (trydate) {
        return function(Item) {
            var date = Item[trydate];
            if (!date || !date.day) {
                return false;
            } else {
                return true;
            }
        };
    };
    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
        this.tests.push(maketest(trydates[i]));
    }
};

CSL.Attributes["@is-plural"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var func = function (Item) {
        var nameList = Item[arg];
        if (nameList && nameList.length) {
            var persons = 0;
            var institutions = 0;
            var last_is_person = false;
            for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
                if (state.opt.development_extensions.spoof_institutional_affiliations
                    && (nameList[i].literal || (nameList[i].isInstitution && nameList[i].family && !nameList[i].given))) {
                    institutions += 1;
                    last_is_person = false;
                } else {
                    persons += 1;
                    last_is_person = true;
                }
            }
            if (persons > 1) {
                return true;
            } else if (institutions > 1) {
                return true;
            } else if (institutions && last_is_person) {
                return true;
            }
        }
        return false;
    };
    this.tests.push(func);
};

CSL.Attributes["@locale"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var langspec, lang, lst, i, ilen;
    // Style default
    var locale_default = state.opt["default-locale"][0];

    if (this.name === "layout") {
        // For layout
        this.locale_raw = arg;
        if (this.tokentype === CSL.START) {
            if (!state.opt.multi_layout) {
                state.opt.multi_layout = [];
            }
            var locale_data = [];
            // Register the primary locale in the set, and others that "map" to it, 
            // so that they can be used when generating sort keys. See node_sort.js.
            // Not idempotent. Only do this once.
            var locales = arg.split(/\s+/);
            var sort_locale = {};
            var localeMaster = CSL.localeResolve(locales[0], locale_default);
            locale_data.push(localeMaster);
            if (localeMaster.generic) {
                sort_locale[localeMaster.generic] = localeMaster.best;
            } else {
                sort_locale[localeMaster.best] = localeMaster.best;
            }
            for (var i=1,ilen=locales.length;i<ilen;i+=1) {
                var localeServant = CSL.localeResolve(locales[i], locale_default);
                locale_data.push(localeServant);
                if (localeServant.generic) {
                    sort_locale[localeServant.generic] = localeMaster.best;
                } else {
                    sort_locale[localeServant.best] = localeMaster.best;
                }

            }
            state[state.build.area].opt.sort_locales.push(sort_locale);
            state.opt.multi_layout.push(locale_data);
        }
        state.opt.has_layout_locale = true;
    } else {
        // For if and if-else

        // Split argument
        lst = arg.split(/\s+/);

        // Expand each list element
        var locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
            // Parse out language string
            lang = lst[i];
        
            // Analyze the locale
            langspec = CSL.localeResolve(lang, locale_default);
            if (lst[i].length === 2) {
                // For fallback
                locale_bares.push(langspec.bare);
            }
            // Load the locale terms etc.
            // (second argument causes immediate return if locale already exists)
            state.localeConfigure(langspec, true);
            
            // Replace string with locale spec object
            lst[i] = langspec;
        }
        // Locales to test
        var locale_list = lst.slice();

        // check for variable value
        // Closure probably not necessary here.
        var maketest = function (locale_list, locale_default,locale_bares) {
            return function (Item) {
                var res;
                res = false;
                var langspec = false;

                var lang;
                if (!Item.language) {
                    lang = locale_default;
                } else {
                    lang = Item.language;
                }
                langspec = CSL.localeResolve(lang, locale_default);
                for (i = 0, ilen = locale_list.length; i < ilen; i += 1) {
                    if (langspec.best === locale_list[i].best) {
                        state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                        state.tmp.condition_lang_val_arr.push(state.opt.lang);
                        state.opt.lang = locale_list[0].best;
                        res = true;
                        break;
                    }
                }
                if (!res && locale_bares.indexOf(langspec.bare) > -1) {
                    state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                    state.tmp.condition_lang_val_arr.push(state.opt.lang);
                    state.opt.lang = locale_list[0].best;
                    res = true;
                }
                return res;
            };
        };
        this.tests.push(maketest(locale_list,locale_default,locale_bares));
    }
};

CSL.Attributes["@alternative-node-internal"] = function (state) {
    if (!this.tests) {this.tests = []; }    var maketest = function () {
        return function() {
            return !state.tmp.abort_alternative;
        };
    };
    this.tests.push(maketest());
};

CSL.Attributes["@locale-internal"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var langspec, lang, lst, i, ilen;
        // For if and if-else

        // Split argument
        lst = arg.split(/\s+/);

        // Expand each list element
        this.locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
            // Parse out language string
            lang = lst[i];
        
            // Analyze the locale
            langspec = CSL.localeResolve(lang, state.opt["default-locale"][0]);
            if (lst[i].length === 2) {
                // For fallback
                this.locale_bares.push(langspec.bare);
            }
            // Load the locale terms etc.
            state.localeConfigure(langspec);
            
            // Replace string with locale spec object
            lst[i] = langspec;
        }
        // Set locale tag on node
        this.locale_default = state.opt["default-locale"][0];
        // The locale to set on node children if match is successful
        this.locale = lst[0].best;
        // Locales to test
        this.locale_list = lst.slice();
        
        // check for variable value
        // Closure probably not necessary here.
        var maketest = function (me) {
            return function (Item) {
                var res;
                res = false;
                var langspec = false;
                if (Item.language) {
                    lang = Item.language;
                    langspec = CSL.localeResolve(lang, state.opt["default-locale"][0]);
                    if (langspec.best === state.opt["default-locale"][0]) {
                        langspec = false;
                    }
                }
                if (langspec) {
                    // We attempt to match a specific locale from the
                    // list of parameters.  If that fails, we fall back
                    // to the base locale of the first element.  The
                    // locale applied is always the first local 
                    // in the list of parameters (or base locale, for a 
                    // single two-character language code) 
                    for (i = 0, ilen = me.locale_list.length; i < ilen; i += 1) {
                        if (langspec.best === me.locale_list[i].best) {
                            state.opt.lang = me.locale;
                            state.tmp.last_cite_locale = me.locale;
                            // Set empty group open tag with locale set marker
                            state.output.openLevel("empty");
                            state.output.current.value().new_locale = me.locale;
                            res = true;
                            break;
                        }
                    }
                    if (!res && me.locale_bares.indexOf(langspec.bare) > -1) {
                        state.opt.lang = me.locale;
                        state.tmp.last_cite_locale = me.locale;
                        // Set empty group open tag with locale set marker
                        state.output.openLevel("empty");
                        state.output.current.value().new_locale = me.locale;
                        res = true;
                    }
                }
                return res;
            };
        };
        var me = this;
        this.tests.push(maketest(me));
};


CSL.Attributes["@court-class"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }	var tryclasses = arg.split(/\s+/);
    var maketest = function (tryclass) {
        return function(Item) {
            var cls = CSL.GET_COURT_CLASS(state, Item);
            if (cls === tryclass) {
                return true;
            } else {
                return false;
            }
        };
    };
    for (var i=0,ilen=tryclasses.length; i<ilen; i++) {
        this.tests.push(maketest(tryclasses[i]));
    }
};

CSL.Attributes["@container-multiple"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }	var retval = "true" === arg ? true : false;
    var maketest = function (retval) {
        return function(Item) {
            if (!state.tmp.container_item_count[Item.container_id]) {
                return !retval;
            } else if (state.tmp.container_item_count[Item.container_id] > 1) {
                return retval;
            }
            return !retval;
        };
    };
    this.tests.push(maketest(retval));
};

CSL.Attributes["@container-subsequent"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }	var retval = "true" === arg ? true : false;
    var maketest = function (retval) {
        return function(Item) {
            if (state.tmp.container_item_pos[Item.container_id] > 1) {
                return retval;
            }
            return !retval;
        };
    };
    this.tests.push(maketest(retval));
};

CSL.Attributes["@has-subunit"] = function (state, arg) {
    if (!this.tests) {this.tests = []; }    var maketest = function(namevar) {
        return function (Item) {
            var subunit_count = 0;
            for (var i in Item[namevar]) {
                var name = Item[namevar][i];
                if (!name.given) {
                    var institution = name.literal ? name.literal : name.family;
                    var length = institution.split("|").length;
                    if (subunit_count === 0 || length < subunit_count) {
                        subunit_count = length;
                    }
                }
            }
            return (subunit_count > 1);
        };
    };
    this.tests.push(maketest(arg));
};

CSL.Attributes["@disable-duplicate-year-suppression"] = function (state, arg) {
	state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
};

CSL.Attributes["@consolidate-containers"] = function (state, arg) {
    CSL.Attributes["@track-containers"](state, arg);
    var args = arg.split(/\s+/);
    state.bibliography.opt.consolidate_containers = args;
};

CSL.Attributes["@track-containers"] = function (state, arg) {
    var args = arg.split(/\s+/);
    if (!state.bibliography.opt.track_container_items) {
        state.bibliography.opt.track_container_items = [];
    }
    if (!state.bibliography.opt.consolidate_containers) {
        state.bibliography.opt.consolidate_containers = [];
    }
    state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
};

// These are not evaluated as conditions immediately: they only
// set parameters that are picked up during processing.
CSL.Attributes["@parallel-first"] = function (state, arg) {
    state.opt.parallel.enable = true;
    var vars = arg.split(/\s+/);
    if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
    }
    this.parallel_first = {};
    for (var i in vars) {
        var v = vars[i];
        this.parallel_first[v] = true;
        state.opt.track_repeat[v] = true;
    }
};
CSL.Attributes["@parallel-last"] = function (state, arg) {
    state.opt.parallel.enable = true;
    var vars = arg.split(/\s+/);
    if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
    }
    this.parallel_last = {};
    for (var i in vars) {
        var v = vars[i];
        this.parallel_last[v] = true;
        state.opt.track_repeat[v] = true;
    }
};
CSL.Attributes["@parallel-last-to-first"] = function (state, arg) {
    var vars = arg.split(/\s+/);
    this.parallel_last_to_first = {};
    for (var i=0,ilen=vars.length;i<ilen;i++) {
        this.parallel_last_to_first[vars[i]] = true;
    }
};
CSL.Attributes["@parallel-delimiter-override"] = function (state, arg) {
    this.strings.set_parallel_delimiter_override = arg;
};
CSL.Attributes["@parallel-delimiter-override-on-suppress"] = function (state, arg) {
    this.strings.set_parallel_delimiter_override_on_suppress = arg;
};
CSL.Attributes["@no-repeat"] = function (state, arg) {
    state.opt.parallel.enable = true;
    var vars = arg.split(/\s+/);
    if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
    }
    this.non_parallel = {};
    for (var i in vars) {
        var v = vars[i];
        this.non_parallel[v] = true;
        state.opt.track_repeat[v] = true;
    }
};

CSL.Attributes["@require"] = function (state, arg) {
    state.opt.use_context_condition = true;
    this.strings.require = arg;

    // Introduced to constrain rendering of the group with a
    // requirement that it either render an alpha term via cs:label or
    // cs:text at least once, or render without any label. That
    // behaviour is invoked with "label-empty-or-alpha" as arg.

    // This attribute is a complement to @label-form and modular
    // jurisdiction support, as it makes macros that adapt to shifting
    // local term definitions possible.
};

CSL.Attributes["@reject"] = function (state, arg) {
    state.opt.use_context_condition = true;
    this.strings.reject = arg;

    // Introduced to constrain rendering of the group with a
    // requirement that it render some label via cs:label or cs:text,
    // and that it NOT be alpha. That behaviour is invoked with
    // "label-empty-or-alpha" as arg.

    // This attribute is a complement to @label-form and modular
    // jurisdiction support, as it makes macros that adapt to shifting
    // local term definitions possible.
};

CSL.Attributes["@require-comma-on-symbol"] = function (state, arg) {
    state.opt.require_comma_on_symbol = arg;
};

CSL.Attributes["@gender"] = function (state, arg) {
    this.gender = arg;
};

CSL.Attributes["@cslid"] = function (state, arg) {
    // @cslid is a noop
    // The value set on this attribute is used to
    // generate reverse lookup wrappers on output when 
    // this.development_extensions.csl_reverse_lookup_support is
    // set to true in state.js (there is no runtime option,
    // it must be set in state.js)
    //
    // See the @showid method in the html output
    // section of formats.js for the function that
    // renders the wrappers.
    this.cslid = parseInt(arg, 10);
};

CSL.Attributes["@capitalize-if-first"] = function (state, arg) {
    this.strings.capitalize_if_first_override = arg;
};

CSL.Attributes["@label-capitalize-if-first"] = function (state, arg) {
    this.strings.label_capitalize_if_first_override = arg;
};

CSL.Attributes["@label-form"] = function (state, arg) {
    this.strings.label_form_override = arg;
};

CSL.Attributes["@part-separator"] = function (state, arg) {
    this.strings["part-separator"] = arg;
};

CSL.Attributes["@leading-noise-words"] = function (state, arg) {
    this["leading-noise-words"] = arg;
};

CSL.Attributes["@name-never-short"] = function (state, arg) {
    this["name-never-short"] = arg;
};

CSL.Attributes["@class"] = function (state, arg) {
    state.opt["class"] = arg;
};

CSL.Attributes["@version"] = function (state, arg) {
    state.opt.version = arg;
};

/**
 * Store the value attribute on the token.
 * @name CSL.Attributes.@value
 * @function
 */
CSL.Attributes["@value"] = function (state, arg) {
    this.strings.value = arg;
};


/**
 * Store the name attribute (of a macro or term node)
 * on the state object.
 * <p>For reference when the closing node of a macro
 * or locale definition is encountered.</p>
 * @name CSL.Attributes.@name
 * @function
 */
CSL.Attributes["@name"] = function (state, arg) {
    this.strings.name = arg;
};

/**
 * Store the form attribute (of a term node) on the state object.
 * <p>For reference when the closing node of a macro
 * or locale definition is encountered.</p>
 * @name CSL.Attributes.@form
 * @function
 */
CSL.Attributes["@form"] = function (state, arg) {
    this.strings.form = arg;
};

CSL.Attributes["@date-parts"] = function (state, arg) {
    this.strings["date-parts"] = arg;
};

CSL.Attributes["@range-delimiter"] = function (state, arg) {
    this.strings["range-delimiter"] = arg;
};

/**
 * Store macro tokens in a buffer on the state object.
 * <p>For reference when the enclosing text token is
 * processed.</p>
 * @name CSL.Attributes.@macro
 * @function
 */
CSL.Attributes["@macro"] = function (state, arg) {
    this.postponed_macro = arg;
};

/*
 * CSL.Attributes["@prefer-jurisdiction"] = function (state, arg) {
 *    this.prefer_jurisdiction = true;
 * };
 */

CSL.Attributes["@term"] = function (state, arg) {
    if (arg === "sub verbo") {
        this.strings.term = "sub-verbo";
    } else {
        this.strings.term = arg;
    }
};


/*
 * Ignore xmlns attribute.
 * <p>This should always be <p>http://purl.org/net/xbiblio/csl</code>
 * anyway.  At least for the present we will blindly assume
 * that it is.</p>
 * @name CSL.Attributes.@xmlns
 * @function
 */
CSL.Attributes["@xmlns"] = function () {};


/*
 * Store language attribute to a buffer field.
 * <p>Will be placed in the appropriate location
 * when the element is processed.</p>
 * @name CSL.Attributes.@lang
 * @function
 */
CSL.Attributes["@lang"] = function (state, arg) {
    if (arg) {
        state.build.lang = arg;
    }
};


// Used as a flag during dates processing
CSL.Attributes["@lingo"] = function () {};

// Used as a flag during dates processing
CSL.Attributes["@macro-has-date"] = function () {
    this["macro-has-date"] = true;
};

/*
 * Store suffix string on token.
 * @name CSL.Attributes.@suffix
 * @function
 */
CSL.Attributes["@suffix"] = function (state, arg) {
    this.strings.suffix = arg;
};


/*
 * Store prefix string on token.
 * @name CSL.Attributes.@prefix
 * @function
 */
CSL.Attributes["@prefix"] = function (state, arg) {
    this.strings.prefix = arg;
};


/*
 * Store delimiter string on token.
 * @name CSL.Attributes.@delimiter
 * @function
 */
CSL.Attributes["@delimiter"] = function (state, arg) {
    this.strings.delimiter = arg;
};


/*
 * Store match evaluator on token.
 */
CSL.Attributes["@match"] = function (state, arg) {
    this.match = arg;
};


CSL.Attributes["@names-min"] = function (state, arg) {
    var val = parseInt(arg, 10);
    if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
    }
    this.strings["et-al-min"] = val;
};

CSL.Attributes["@names-use-first"] = function (state, arg) {
    this.strings["et-al-use-first"] = parseInt(arg, 10);
};

CSL.Attributes["@names-use-last"] = function (state, arg) {
    if (arg === "true") {
        this.strings["et-al-use-last"] = true;
    } else {
        this.strings["et-al-use-last"] = false;
    }
};

CSL.Attributes["@sort"] = function (state, arg) {
    if (arg === "descending") {
        this.strings.sort_direction = CSL.DESCENDING;
    }
};

CSL.Attributes["@plural"] = function (state, arg) {
    // Accepted values of plural attribute differ on cs:text
    // and cs:label nodes.
    if ("always" === arg || "true" === arg) {
        this.strings.plural = 1;
    } else if ("never" === arg || "false" === arg) {
        this.strings.plural = 0;
    } else if ("contextual" === arg) {
        this.strings.plural = false;
    }
};

CSL.Attributes["@has-publisher-and-publisher-place"] = function () {
    this.strings["has-publisher-and-publisher-place"] = true;
};

CSL.Attributes["@publisher-delimiter-precedes-last"] = function (state, arg) {
    this.strings["publisher-delimiter-precedes-last"] = arg;
};

CSL.Attributes["@publisher-delimiter"] = function (state, arg) {
    this.strings["publisher-delimiter"] = arg;
};

CSL.Attributes["@publisher-and"] = function (state, arg) {
    this.strings["publisher-and"] = arg;
};

CSL.Attributes["@givenname-disambiguation-rule"] = function (state, arg) {
    if (CSL.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
        state.citation.opt["givenname-disambiguation-rule"] = arg;
    }
};

CSL.Attributes["@collapse"] = function (state, arg) {
    // only one collapse value will be honoured.
    if (arg) {
        state[this.name].opt.collapse = arg;
    }
};

CSL.Attributes["@cite-group-delimiter"] = function (state, arg) {
    if (arg) {
        state[state.tmp.area].opt.cite_group_delimiter = arg;
    }
};



CSL.Attributes["@names-delimiter"] = function (state, arg) {
    state.setOpt(this, "names-delimiter", arg);
};

CSL.Attributes["@name-form"] = function (state, arg) {
    state.setOpt(this, "name-form", arg);
};

CSL.Attributes["@subgroup-delimiter"] = function (state, arg) {
    this.strings["subgroup-delimiter"] = arg;
};

CSL.Attributes["@subgroup-delimiter-precedes-last"] = function (state, arg) {
    this.strings["subgroup-delimiter-precedes-last"] = arg;
};


CSL.Attributes["@name-delimiter"] = function (state, arg) {
    state.setOpt(this, "name-delimiter", arg);
};

CSL.Attributes["@et-al-min"] = function (state, arg) {
    var val = parseInt(arg, 10);
    if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
    }
    state.setOpt(this, "et-al-min", val);
};

CSL.Attributes["@et-al-use-first"] = function (state, arg) {
    state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
};

CSL.Attributes["@et-al-use-last"] = function (state, arg) {
    if (arg === "true") {
        state.setOpt(this, "et-al-use-last", true);
    } else {
        state.setOpt(this, "et-al-use-last", false);
    }
};

CSL.Attributes["@et-al-subsequent-min"] = function (state, arg) {
    var val = parseInt(arg, 10);
    if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
    }
    state.setOpt(this, "et-al-subsequent-min", val);
};

CSL.Attributes["@et-al-subsequent-use-first"] = function (state, arg) {
    state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
};

CSL.Attributes["@suppress-min"] = function (state, arg) {
    this.strings["suppress-min"] = parseInt(arg, 10);
};

CSL.Attributes["@suppress-max"] = function (state, arg) {
    this.strings["suppress-max"] = parseInt(arg, 10);
};


CSL.Attributes["@and"] = function (state, arg) {
    state.setOpt(this, "and", arg);
};

CSL.Attributes["@delimiter-precedes-last"] = function (state, arg) {
    state.setOpt(this, "delimiter-precedes-last", arg);
};

CSL.Attributes["@delimiter-precedes-et-al"] = function (state, arg) {
    state.setOpt(this, "delimiter-precedes-et-al", arg);
};

CSL.Attributes["@initialize-with"] = function (state, arg) {
    state.setOpt(this, "initialize-with", arg);
};

CSL.Attributes["@initialize"] = function (state, arg) {
    if (arg === "false") {
        state.setOpt(this, "initialize", false);
    }
};

CSL.Attributes["@name-as-reverse-order"] = function (state, arg) {
    this["name-as-reverse-order"] = arg;
};

CSL.Attributes["@name-as-sort-order"] = function (state, arg) {
    if (this.name === "style-options") {
        this["name-as-sort-order"] = arg;
    } else {
        state.setOpt(this, "name-as-sort-order", arg);
    }
};

CSL.Attributes["@sort-separator"] = function (state, arg) {
    state.setOpt(this, "sort-separator", arg);
};

CSL.Attributes["@require-match"] = function (state, arg) {
    if (arg === "true") {
        this.requireMatch = true;
    }
};

CSL.Attributes["@exclude-types"] = function (state, arg) {
    state.bibliography.opt.exclude_types = arg.split(/\s+/);
};

CSL.Attributes["@exclude-with-fields"] = function (state, arg) {
    state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
};


CSL.Attributes["@year-suffix-delimiter"] = function (state, arg) {
    state[this.name].opt["year-suffix-delimiter"] = arg;
};

CSL.Attributes["@after-collapse-delimiter"] = function (state, arg) {
    state[this.name].opt["after-collapse-delimiter"] = arg;
};

CSL.Attributes["@subsequent-author-substitute"] = function (state, arg) {
    state[this.name].opt["subsequent-author-substitute"] = arg;
};

CSL.Attributes["@subsequent-author-substitute-rule"] = function (state, arg) {
    state[this.name].opt["subsequent-author-substitute-rule"] = arg;
};

CSL.Attributes["@disambiguate-add-names"] = function (state, arg) {
    if (arg === "true") {
        state.opt["disambiguate-add-names"] = true;
    }
};

CSL.Attributes["@disambiguate-add-givenname"] = function (state, arg) {
    if (arg === "true") {
        state.opt["disambiguate-add-givenname"] = true;
    }
};

CSL.Attributes["@disambiguate-add-year-suffix"] = function (state, arg) {
    if (arg === "true" && state.opt.xclass !== "numeric") {
        state.opt["disambiguate-add-year-suffix"] = true;
    }
};


CSL.Attributes["@second-field-align"] = function (state, arg) {
    if (arg === "flush" || arg === "margin") {
        state[this.name].opt["second-field-align"] = arg;
    }
};


CSL.Attributes["@hanging-indent"] = function (state, arg) {
    if (arg === "true") {
        if (state.opt.development_extensions.hanging_indent_legacy_number) {
            state[this.name].opt.hangingindent = 2;
	    } else {
            state[this.name].opt.hangingindent = true;
	    }
    }
};


CSL.Attributes["@line-spacing"] = function (state, arg) {
    if (arg && arg.match(/^[.0-9]+$/)) {
        state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
    }
};


CSL.Attributes["@entry-spacing"] = function (state, arg) {
    if (arg && arg.match(/^[.0-9]+$/)) {
        state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
    }
};


CSL.Attributes["@near-note-distance"] = function (state, arg) {
    state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
};

CSL.Attributes["@substring"] = function (state, arg) {
    this.substring = parseInt(arg, 10);
};

CSL.Attributes["@text-case"] = function (state, arg) {
    var func = function (state, Item) {
        if (arg === "normal") {
            this.text_case_normal = true;
        } else {
            this.strings["text-case"] = arg;
            if (arg === "title") {
                if (Item.jurisdiction) {
                    this.strings["text-case"] = "passthrough";
                }
            }
        }
    };
    this.execs.push(func);
};


CSL.Attributes["@page-range-format"] = function (state, arg) {
    state.opt["page-range-format"] = arg;
};


CSL.Attributes["@year-range-format"] = function (state, arg) {
    state.opt["year-range-format"] = arg;
};


CSL.Attributes["@default-locale"] = function (state, arg) {
    if (this.name === 'style') {
        var lst, len, pos, m, ret;
        //
        // Workaround for Internet Exploder 6 (doesn't recognize
        // groups in str.split(/something(braced-group)something/)
        //
        var m = arg.match(/-x-(sort|translit|translat)-/g);
        if (m) {
            for (pos = 0, len = m.length; pos < len; pos += 1) {
                m[pos] = m[pos].replace(/^-x-/, "").replace(/-$/, "");
            }
        }
        lst = arg.split(/-x-(?:sort|translit|translat)-/);
        ret = [lst[0]];
        for (pos = 1, len = lst.length; pos < len; pos += 1) {
            ret.push(m[pos - 1]);
            ret.push(lst[pos]);
        }
        lst = ret.slice();
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
            state.opt[("locale-" + lst[pos])].push(lst[(pos + 1)].replace(/^\s*/g, "").replace(/\s*$/g, ""));
        }
        if (lst.length) {
            state.opt["default-locale"] = lst.slice(0, 1);
        } else {
            state.opt["default-locale"] = ["en"];
        }
    } else if (arg === "true") {
        this.default_locale = true;
    }
};

CSL.Attributes["@default-locale-sort"] = function (state, arg) {
    state.opt["default-locale-sort"] = arg;
};

CSL.Attributes["@demote-non-dropping-particle"] = function (state, arg) {
    state.opt["demote-non-dropping-particle"] = arg;
};

CSL.Attributes["@initialize-with-hyphen"] = function (state, arg) {
    if (arg === "false") {
        state.opt["initialize-with-hyphen"] = false;
    }
};

CSL.Attributes["@institution-parts"] = function (state, arg) {
    this.strings["institution-parts"] = arg;
};

CSL.Attributes["@if-short"] = function (state, arg) {
    if (arg === "true") {
        this.strings["if-short"] = true;
    }
};

CSL.Attributes["@substitute-use-first"] = function (state, arg) {
    this.strings["substitute-use-first"] = parseInt(arg, 10);
};

CSL.Attributes["@use-first"] = function (state, arg) {
    this.strings["use-first"] = parseInt(arg, 10);
};

CSL.Attributes["@use-last"] = function (state, arg) {
    this.strings["use-last"] = parseInt(arg, 10);
};

CSL.Attributes["@stop-first"] = function (state, arg) {
    this.strings["stop-first"] = parseInt(arg, 10);
};

CSL.Attributes["@stop-last"] = function (state, arg) {
    this.strings["stop-last"] = parseInt(arg, 10) * -1;
};


CSL.Attributes["@reverse-order"] = function (state, arg) {
    if ("true" === arg) {
        this.strings["reverse-order"] = true;
    }
};

CSL.Attributes["@display"] = function (state, arg) {
    if (state.bibliography.tokens.length === 2) {
        state.opt.using_display = true;
    }
    this.strings.cls = arg;
};


/*global CSL: true */


/**
 * String stack object.
 * <p>Numerous string stacks are used to track nested
 * parameters at runtime.  This class provides methods
 * that remove some of the aggravation of managing
 * them.</p>
 * @class
 */
CSL.Stack = function (val, literal) {
    this.mystack = [];
    if (literal || val) {
        this.mystack.push(val);
    }
    this.tip = this.mystack[0];
};

/**
 * Push a value onto the stack.
 * <p>This just does what it says.</p>
 */
CSL.Stack.prototype.push = function (val, literal) {
    if (literal || val) {
        this.mystack.push(val);
    } else {
        this.mystack.push("");
    }
    this.tip = this.mystack[this.mystack.length - 1];
};

/**
 * Clear the stack
 */
CSL.Stack.prototype.clear = function () {
    this.mystack = [];
    this.tip = {};
};

/**
 * Replace the top value on the stack.
 * <p>This removes some ugly syntax from the
 * main code.</p>
 */
CSL.Stack.prototype.replace = function (val, literal) {
    //
    // safety fix after a bug was chased down.  Rhino
    // JS will process a negative index without error (!).
    if (this.mystack.length === 0) {
        CSL.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
    }
    if (literal || val) {
        this.mystack[(this.mystack.length - 1)] = val;
    } else {
        this.mystack[(this.mystack.length - 1)] = "";
    }
    this.tip = this.mystack[this.mystack.length - 1];
};


/**
 * Remove the top value from the stack.
 * <p>Just does what it says.</p>
 */
CSL.Stack.prototype.pop = function () {
    var ret = this.mystack.pop();
    if (this.mystack.length) {
        this.tip = this.mystack[this.mystack.length - 1];
    } else {
        this.tip = {};
    }
    return ret;
};


/**
 * Return the top value on the stack.
 * <p>Removes a little hideous complication from
 * the main code.</p>
 */
CSL.Stack.prototype.value = function () {
    return this.mystack.slice(-1)[0];
};


/**
 * Return length (depth) of stack.
 * <p>Used to identify if there is content to
 * be handled on the stack</p>
 */
CSL.Stack.prototype.length = function () {
    return this.mystack.length;
};

/*global CSL: true */

/**
 * Initializes the parallel cite tracking arrays
 */
CSL.Parallel = function (state) {
    this.state = state;
};

CSL.Parallel.prototype.StartCitation = function (sortedItems, out) {
    // This array carries the repeat markers used in rendering the cite.
    this.state.tmp.suppress_repeats = [];
    if (sortedItems.length < 2) return;
    var idxEnd = 0;
    var parallelMatchList = false;
    var siblingRanges = [];

    for (var i=0,ilen=sortedItems.length-1;i<ilen;i++) {
        var currItem = sortedItems[i][0];
        var nextItem = sortedItems[i+1][0];
        var freshMatchList = false;
        var info = {};
        if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
            freshMatchList = true;
            parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
            var tempMatchList = parallelMatchList.slice();
            var remainder = sortedItems.slice(i);
            remainder[0][1].parallel = "first";
            for (var j=0,jlen=remainder.length;j<jlen;j++) {
                var itemID = remainder[j][0].id;
                var ididx = tempMatchList.indexOf(itemID);
                idxEnd = false;
                if (ididx === -1) {
                    idxEnd = (i+j-1);
                } else if ((i+j) === (sortedItems.length-1)) {
                    idxEnd = (i+j);
                }
                if (idxEnd) {
                    siblingRanges.push([i, idxEnd]);
                    break;
                } else {
                    tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx+1));
                }
            }
        }
        // parallelMatchList/freshMatchList relate only to parallels.
        // no-repeat non-parallels are handled in a separate block.
        if (i > 0 && freshMatchList) {
            this.state.tmp.suppress_repeats[i-1].START = true;
            freshMatchList = false;
        }
        for (var varname in this.state.opt.track_repeat) {
            if (!currItem[varname] || !nextItem[varname]) {
                // Go ahead and render any value with an empty partner
                info[varname] = false;
            } else if ("string" === typeof nextItem[varname] || "number" === typeof nextItem[varname]) {
                // Simple comparison of string values
                if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
                    var currVal = currItem["title-short"];
                    var nextVal = nextItem["title-short"];
                } else {
                    var currVal = currItem[varname];
                    var nextVal = nextItem[varname];
                }
                if (currVal == nextVal) {
                    info[varname] = true;
                } else {
                    info[varname] = false;
                }
            } else if ("undefined" === typeof currItem[varname].length) {
                // If a date, use only the year
                info[varname] = false;
                var currYear = currItem[varname].year;
                var nextYear = nextItem[varname].year;
                if (currYear && nextYear) {
                    if (currYear == nextYear) {
                        info[varname] = true;
                    }
                }
            } else {
                // If a creator value, kludge it
                var currVal = JSON.stringify(currItem[varname]);
                var nextVal = JSON.stringify(nextItem[varname]);
                if (currVal === nextVal) {
                    info[varname] = true;
                } else {
                    info[varname] = false;
                }
            }
        }
        if (!parallelMatchList) {
            info.ORPHAN = true;
        }
        if (idxEnd === i) {
            info.END = true;
            parallelMatchList = false;
        }
        this.state.tmp.suppress_repeats.push(info);
    }
    
    // if (!this.state.tmp.just_looking) {
    //     this.state.sys.print(`${JSON.stringify(this.state.tmp.suppress_repeats, null, 2)}`);
    // }
    
    // Set no-repeat info here?
    for (var j=0,jlen=siblingRanges.length;j<jlen;j++) {
        var masterID = sortedItems[siblingRanges[j][0]][0].id;
        this.state.registry.registry[masterID].master = true;
        this.state.registry.registry[masterID].siblings = [];
        var start = siblingRanges[j][0];
        var end = siblingRanges[j][1];
        for (var k=start; k<end; k++) {
            this.state.tmp.suppress_repeats[k].SIBLING = true;
            var siblingID = sortedItems[k+1][0].id;
            sortedItems[k+1][1].parallel = "other";
            this.state.registry.registry[masterID].siblings.push(siblingID);
        }
    }
    // this.state.sys.print(JSON.stringify(this.state.tmp.suppress_repeats, null, 2));
};

CSL.Parallel.prototype.checkRepeats = function(params) {
    var idx = this.state.tmp.cite_index;
    if (this.state.tmp.suppress_repeats) {
        if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.parallel_first) {
                if (!arr[idx][varname] || arr[idx].START) {
                    // true --> suppress the entry
                    // Test here evaluates as "all", not "any"
                    ret = false;
                }
            }
            return ret;
        }
        if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
            var arr = this.state.tmp.suppress_repeats.concat([{}]);
            var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
            for (var varname in params.parallel_last) {
                if (!arr[idx][varname] || arr[idx].END) {
                    // "all" match, as above.
                    ret = false;
                }
            }
            return ret;
        }
        if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.non_parallel) {
                if (!arr[idx][varname]) {
                    ret = false;
                }
            }
            return ret;
        }
    }
    return false;
};

/*global CSL: true */


CSL.Util = {};

CSL.Util.Match = function () {

    this.any = function (token, state, tests) {
        return function (Item, item) {
            for (var i=0, ilen=tests.length; i < ilen; i += 1) {
                var result = tests[i](Item, item);
                if (result) {
                    return true;
                }
            }
            return false;
        };
    };

    this.none = function (token, state, tests) {
        return function (Item, item) {
            for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                var result = tests[i](Item,item);
                if (result) {
                    return false;
                }
            }
            return true;
        };
    };

    this.all = function (token, state, tests) {
        return function (Item, item) {
            for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                var result = tests[i](Item,item);
                if (!result) {
                    return false;
                }
            }
            return true;
        };
    };

    this[undefined] = this.all;

    this.nand = function (token, state, tests) {
        return function (Item, item) {
            for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                var result = tests[i](Item,item);
                if (!result) {
                    return true;
                }
            }
            return false;
        };
    };

};

/*global CSL: true */

/*
 * Fields can be transformed by translation/transliteration, or by
 * abbreviation.  Transformations are performed in that order.
 *
 * Renderings of original, translated or transliterated content
 * (followed by abbreviation if requested) are placed in the primary
 * output slot or the (implicitly punctuated) secondary and tertiary
 * output slots according to the settings registered in the
 * state.opt['cite-lang-prefs'] arrays. The array has six segments:
 * 'persons', 'institutions', 'titles', 'journals', 'publishers', and
 * 'places'. Each segment always contains at least one item, and may
 * hold values 'orig', 'translit' or 'translat'. The array defaults to
 * a single item 'orig'.
 *
 * All multilingual variables are associated with segments,
 * with the exception of 'edition' and 'genre'. These two
 * exceptions are always rendered with the first matching
 * language form found in state.opt['locale-translit'] or, if
 * composing a sort key, state.opt['locale-sort']. No secondary
 * slot rendering is performed for this two variables.
 *
 * The balance of multilingual variables are rendered with
 * the first matching value in the transform locales spec
 * (no transform, state.opt['locale-translit'], or 
 * state.opt['locale-translat']) mapped to the target
 * slot.
 *
 * Full primary+secondary+tertiary rendering is performed only in
 * note-style citations and the bibliography.  In-text citations are
 * rendered in the primary output slot only, following the same spec
 * parameters.
 *
 *   Optional setters:
 *     .setAbbreviationFallback(); fallback flag
 *       (if true, a failed abbreviation will fallback to long)
 *
 *     .setAlternativeVariableName(): alternative variable name in Item,
 *       for use as a fallback abbreviation source
 *
 * Translation/transliteration
 *
 *   Optional setter:
 *     .setTransformFallback():
 *       default flag (if true, the original field value will be used as a fallback)
 *
 * The getTextSubField() method may be used to obtain a string transform
 * of a field, without abbreviation, as needed for setting sort keys
 * (for example).
 *
 */

CSL.Transform = function (state) {
    // Abbreviation families
    this.abbrevs = {};
    this.abbrevs["default"] = new state.sys.AbbreviationSegments();

    function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
        var value = "";
        if (state.sys.getHumanForm) {
            if (variable === "country") {
                value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
                value = value.split("|")[0];
            } else if (variable === "jurisdiction") {
                value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
                if (!quashCountry) {
                    value = value.split("|").slice(1).join(", ");
                } else {
                    // Bare country name is rendered by "country", not "jurisdiction"
                    value = "";
                }
            }
	    }
	    return value;
    }
    
    // Internal function
    function abbreviate(state, tok, Item, altvar, basevalue, family_var, use_field) {

        var value = "";
        var myabbrev_family = CSL.FIELD_CATEGORY_REMAP[family_var];
        var preferredJurisdiction;
        if (!myabbrev_family) {
            return basevalue;
        }

        var variable = family_var;
        var normalizedKey = basevalue;

        if (state.sys.normalizeAbbrevsKey) {
            normalizedKey = state.sys.normalizeAbbrevsKey(family_var, basevalue);
        }
        var quashCountry = false;
        if (variable === "jurisdiction" && normalizedKey) {
            quashCountry = normalizedKey.indexOf(":") === -1;
        }
        // Fix up jurisdiction codes
        if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
            normalizedKey = basevalue.toUpperCase();
        }
        
        
        // Lazy retrieval of abbreviations.
        if (state.sys.getAbbreviation) {

            if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
                preferredJurisdiction = "default";
            } else if (Item.jurisdiction) {
                preferredJurisdiction = Item.jurisdiction;
            } else {
                preferredJurisdiction = "default";
            }
            var jurisdiction = state.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);

            // Some rules:
            // # variable === "country"
            // (1) If an abbreviation is associated with the code, then:
            //     (a) return the abbreviated form if form="short"
            // (2) Otherwise:
            //     (a) return the human-readable country name, or whatever is there if it's not a code
            // # variable === "jurisdiction"
            // (1) If !!getHumanForm(jurisdictionID, false, false):
            //     (a) If the code is top-level (i.e. a country):
            //         (i) return nothing -- this is what the "country" variable is for.
            //     (b) otherwise:
            //         (i) If an abbreviation is associated with the code, then:
            //             (A) return the abbreviated form
            //         (ii) Otherwise
            //             (A) return the human-readable form, with the country name & code removed from the front
            // (2) Otherwise:
            //     (a) abbreviate as per normal.
            // # other variables
            // (1) Abbreviate as per normal.

            if (state.transform.abbrevs[jurisdiction][myabbrev_family] && normalizedKey) {
                // Safe to test presence of abbrev against raw object in this block
                var abbrev = state.transform.abbrevs[jurisdiction][myabbrev_family][normalizedKey];
                if (tok.strings.form === "short" && abbrev) {
                    if (quashCountry) {
                        value = "";
                    } else {
                        value = abbrev;
                    }
                } else {
	                value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
                }
            }
        }
        
        // Was for: 
        if (!value 
            && (!state.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== 'legal_case') 
            && altvar && Item[altvar] && use_field) {
            value = Item[altvar];
        }
        if (!value && !state.sys.getAbbreviation && state.sys.getHumanForm) {
	        value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
	    }
        if (!value && !quashCountry && (!state.sys.getHumanForm || variable !== "jurisdiction")) {
            value = basevalue;
        }
        if (state.opt.development_extensions.force_title_abbrev_fallback) {
            if (variable === "title" && value === basevalue && Item["title-short"]) {
                value = Item["title-short"];
            }
        }
        return value;
    }

    function getFieldLocale(Item,field) {
        var ret = state.opt["default-locale"][0].slice(0, 2);
        var localeRex;
        if (state.opt.development_extensions.strict_text_case_locales) {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
        } else {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
        }
        if (Item.language) {
            var m = ("" + Item.language).match(localeRex);
            if (m) {
                ret = m[1];
            } else {
                // Set garbage to "Klingon".
                ret = "tlh";
            }
        }
        if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
            ret = Item.multi.main[field];
        }
        if (!state.opt.development_extensions.strict_text_case_locales
            || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {

            ret = ret.toLowerCase();
        }
        return ret;
    }

    // Internal functions
    function getTextSubField (Item, field, locale_type, use_default, stopOrig, family_var) {
        var opt, o, ret, opts;
        var usedOrig = stopOrig;
        var usingOrig = false;

        if (!Item[field]) {
            return {
                name:"",
                usedOrig:stopOrig,
                token: CSL.Util.cloneToken(this)
            };
        }
        // If form="short" is selected ("family_var" is a misnomer
        // here, it means short-form requested), and the variable
        // has a short-form partner (i.e. it is in array
        // VARIABLES_WITH_SHORT_FORM), then it is run here as *-short".
        var stickyLongForm = false;
        if (CSL.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1
            && family_var) {

            field = field + "-short";
            stickyLongForm = true;
        }
        var breakMe = false;
        var firstValue = null;
        var fieldsToTry = [];
        if (field.slice(-6) === "-short") {
            fieldsToTry.push(field);
            fieldsToTry.push(field.slice(0, -6));
        } else {
            fieldsToTry.push(field);
        }

        for (var h=0,hlen=fieldsToTry.length; h<hlen; h++) {
            var variantMatch = false;
            var field = fieldsToTry[h];

            ret = {name:"", usedOrig:stopOrig,locale:getFieldLocale(Item,field)};

            opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
            var hasVal = false;

            if (locale_type === 'locale-orig') {
                if (!stopOrig) {
                    ret.name = Item[field];
                    ret.usedOrig = false;
                }
                hasVal = true;
                usingOrig = true;
            } else if (use_default && ("undefined" === typeof opts || opts.length === 0)) {
                // If we want the original, or if we don't have any specific guidance and we 
                // definitely want output, just return the original value.
                ret.name = Item[field];
                ret.usedOrig = true;
                hasVal = true;
                usingOrig = true;
            }

            if (!hasVal) {
                for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
                    opt = opts[i];
                    o = opt.split(/[\-_]/)[0];
                    if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                        ret.name = Item.multi._keys[field][opt];
                        ret.locale = opt;
                        hasVal = true;
                        variantMatch = true;
                        usingOrig = false;
                        break;
                    } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                        ret.name = Item.multi._keys[field][o];
                        ret.locale = o;
                        hasVal = true;
                        variantMatch = true;
                        usingOrig = false;
                        break;
                    }
                }
                if (!ret.name && use_default) {
                    ret = {name:Item[field], usedOrig:true, locale:getFieldLocale(Item,field)};
                    usingOrig = true;
                }
            }
            ret.token = CSL.Util.cloneToken(this);
            if (h === 0) {
                if (variantMatch) {
                    ret.found_variant_ok = true;
                }
                firstValue = ret;
                if (!stickyLongForm && ("undefined" === typeof opts || opts.length === 0)) {
                    breakMe = true;
                }
                if (variantMatch) {
                    breakMe = true;
                }
            } else {
                if (!stickyLongForm && !variantMatch && firstValue) {
                    ret = firstValue;
                    field = fieldsToTry[0];
                } else if (variantMatch) {
                    ret.found_variant_ok = true;
                }
            }
            if (["title", "container-title"].indexOf(field) > -1) {
                if (!usedOrig
                    && (!ret.token.strings["text-case"]
                        || ret.token.strings["text-case"] === "sentence"
                        || ret.token.strings["text-case"] === "normal")) {
                    var locale = state.opt.lang;
                    var lang;
                    if (usingOrig) {
                        lang = false;
                    } else {
                        lang = ret.locale;
                    }
                    var seg = field.slice(0,-5);
                    var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
                    ret.name = CSL.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
                    delete ret.token.strings["text-case"];
                }
            }
            if (breakMe) {
                break;
            }
        }
        return ret;
    }
    this.getTextSubField = getTextSubField;
    
    // Setter for abbreviation lists
    // This initializes a single abbreviation based on known
    // data.
    function loadAbbreviation(jurisdiction, category, orig, lang) {
        if (!jurisdiction) {
            jurisdiction = "default";
        }
        var country = jurisdiction.split(":")[0];
        var domain = CSL.getAbbrevsDomain(state, country, lang);
        if (domain) {
            jurisdiction += ("@" + domain);
        }
        if (!orig) {
            if (!state.transform.abbrevs[jurisdiction]) {
                state.transform.abbrevs[jurisdiction] = new state.sys.AbbreviationSegments();
            }
            if (!state.transform.abbrevs[jurisdiction][category]) {
                state.transform.abbrevs[jurisdiction][category] = {};
            }
            return jurisdiction;
        }
        // The getAbbreviation() function should check the
        // external DB for the content key. If a value exists
        // in this[category] and no value exists in DB, the entry
        // in memory is left untouched. If a value does exist in
        // DB, the memory value is created.
        //
        // See testrunner_stdrhino.js for an example.
        if (state.sys.getAbbreviation) {
            jurisdiction = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction, category, orig);
            if (!jurisdiction) {
                jurisdiction = "default";
                if (domain) {
                    jurisdiction += ("@" + domain);
                }
            }
        }
        return jurisdiction;
    }
    this.loadAbbreviation = loadAbbreviation;

    function publisherCheck (tok, Item, primary, family_var) {
        var varname = tok.variables[0];
        if (state.publisherOutput && primary) {
            if (["publisher","publisher-place"].indexOf(varname) === -1) {
                return false;
            } else {
                // In this case, the publisher bundle will be rendered
                // at the close of the group, by the closing group node.
                state.publisherOutput[varname + "-token"] = tok;
                state.publisherOutput.varlist.push(varname);
                var lst = primary.split(/;\s*/);
                if (lst.length === state.publisherOutput[varname + "-list"].length) {
                    state.publisherOutput[varname + "-list"] = lst;
                }
                // Abbreviate each of the items in the list here!
                for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
                }
                state.tmp[varname + "-token"] = tok;
                return true;
            }
        }
        return false;
    }


    // The name transform code is placed here to keep similar things
    // in one place.  Obviously this module could do with a little
    // tidying up.
    function quashCheck(jurisdiction, value) {
        var m = value.match(/^!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*)>>>/);
        if (m) {
            var fields = m[1].split(",");
            value = value.slice(m[0].length);
            for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
                var rawField = fields[i];
                var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
                var field = mm[1];
                // trimmer is not available in getAmbiguousCite
                var trimmer = state.tmp.abbrev_trimmer;
                if (mm[2]) {
                    if (trimmer && jurisdiction) {
                        if (!trimmer[jurisdiction]) {
                            trimmer[jurisdiction] = {};
                        }
                        trimmer[jurisdiction][field] = mm[2];
                    }
                } else if (state.tmp.done_vars.indexOf(field) === -1) {
                    if (trimmer && jurisdiction) {
                        if (!trimmer.QUASHES[jurisdiction]) {
                            trimmer.QUASHES[jurisdiction] = {};
                        }
                        trimmer.QUASHES[jurisdiction][field] = true;
                    }
                    state.tmp.done_vars.push(field);
                }
            }
        }
        return value;
    }
    this.quashCheck = quashCheck;

    // Return function appropriate to selected options
    function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
        // var mytoken;

        // Set the primary_locale and secondary_locale lists appropriately.
        // No instance helper function for this; everything can be derived
        // from processor settings and rendering context.

        var localesets;
        var langPrefs = CSL.LangPrefsMap[variables[0]];
        if (!langPrefs) {
            localesets = false;
        } else {
            localesets = state.opt['cite-lang-prefs'][langPrefs];
        }

        return function (state, Item, item) {
            var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
            if (!variables[0] || (!Item[variables[0]] && !Item[alternative_varname])) {
                return null;
            }
            //
            // Exploring the edges here.
            // "suppress-author" for string variables (mostly titles).
            //
            if (!state.tmp.just_looking && item && item["suppress-author"]) {
                if (!state.tmp.probably_rendered_something && state.tmp.can_substitute.length() > 1) {
                    return null;
                }
            }
            var slot = {primary:false, secondary:false, tertiary:false};
            if (state.tmp.area.slice(-5) === "_sort") {
                slot.primary = 'locale-sort';
            } else {
                if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
                    slot.primary = "locale-orig";
                    localesets = false;
                } else if (localesets && !state.tmp.multi_layout) {
                    var slotnames = ["primary", "secondary", "tertiary"];
                    for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                        if (localesets.length - 1 <  i) {
                            break;
                        }
                        if (localesets[i]) {
                            slot[slotnames[i]] = 'locale-' + localesets[i];
                        }
                    }
                } else {
                    slot.primary = 'locale-orig';
                }
            }
            
            if (variables[0] === "title-short" 
                || (state.tmp.area !== "bibliography"
                    && !(state.tmp.area === "citation"
                         && state.opt.xclass === "note"
                         && item && !item.position))) {
                
                slot.secondary = false;
                slot.tertiary = false;
            }

            if (state.tmp.multi_layout) {
                slot.secondary = false;
                slot.tertiary = false;
            }
            
            // Problem for multilingual: we really should be
            // checking for sanity on the basis of the output
            // strings to be actually used. (also below)
            if (state.tmp["publisher-list"]) {
                if (variables[0] === "publisher") {
                    state.tmp["publisher-token"] = this;
                } else if (variables[0] === "publisher-place") {
                    state.tmp["publisher-place-token"] = this;
                }
                return null;
            }
            
            // tmp.lang_array carries the current locale IDs of the style
            // and the item. Field-level locale IDs are added here, so
            // we clone it to allow reset.
            var oldLangArray = state.tmp.lang_array.slice();

            // True is for transform fallback
            var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
            primary = res.name;
            primary_locale = res.locale;
            var primary_tok = res.token;
            var primaryUsedOrig = res.usedOrig;
            if (family_var && !res.found_variant_ok) {
                primary = abbreviate(state, primary_tok, Item, alternative_varname, primary, family_var, true);
                // Suppress subsequent use of another variable if requested by
                // hack syntax in this abbreviation short form.
                if (primary) {
                    // The abbreviate() function could use a cleanup, after Zotero correct to use title-short
                    if (!state.tmp.just_looking) {
                        primary = quashCheck(Item.jurisdiction, primary);
                    }
                }
            }
            if (publisherCheck(this, Item, primary, family_var)) {
                state.tmp.lang_array = oldLangArray;
                return null;
            }

            // No fallback for secondary and tertiary
            secondary = false;
            tertiary = false;
            var secondary_tok;
            var tertiary_tok;
            if (slot.secondary) {
                res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
                secondary = res.name;
                secondary_locale = res.locale;
                secondary_tok = res.token;
                if (family_var && !res.found_variant_ok) {
                    if (secondary) {
                        // The abbreviate() function could use a cleanup, after Zotero correct to use title-short
                        secondary = abbreviate(state, secondary_tok, Item, false, secondary, family_var, true);
                    }
                }
                //print("XXX secondary_locale: "+secondary_locale);
            }
            if (slot.tertiary) {
                res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
                tertiary = res.name;
                tertiary_locale = res.locale;
                tertiary_tok = res.token;
                if (family_var && !res.found_variant_ok) {
                    if (tertiary) {
                        // The abbreviate() function could use a cleanup, after Zotero correct to use title-short
                        tertiary = abbreviate(state, tertiary_tok, Item, false, tertiary, family_var, true);
                    }
                }
                //print("XXX tertiary_locale: "+tertiary_locale);
            }
            
            // Decoration of primary (currently translit only) goes here
            var primaryPrefix;
            if (slot.primary === "locale-translit") {
                primaryPrefix = state.opt.citeAffixes[langPrefs][slot.primary].prefix;
            }                
            // XXX This should probably protect against italics at higher
            // levels.

            if (primaryPrefix === "<i>" && variables[0] === 'title' && !primaryUsedOrig) {
                var hasItalic = false;
                for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                    if (primary_tok.decorations[i][0] === "@font-style"
                        && primary_tok.decorations[i][1] === "italic") {
                        
                        hasItalic = true;
                    }
                }
                if (!hasItalic) {
                    primary_tok.decorations.push(["@font-style", "italic"]);
                }
            }

            //print("XXX "+primary_tok.strings["text-case"]);
            if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
                primary_tok.strings["text-case"] = "passthrough";
            }
            
            if ("title" === variables[0]) {
                primary = CSL.demoteNoiseWords(state, primary, this["leading-noise-words"]);
            }
            if (secondary || tertiary) {

                state.output.openLevel("empty");

                // A little too aggressive maybe.
                primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/,"");
                if (primary_locale) {
                    state.tmp.lang_array = [primary_locale].concat(oldLangArray);
                }
                CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, null, null, primary_tok, primary_tok.strings.prefix + primary);
                state.output.append(primary, primary_tok);
                state.tmp.probably_rendered_something = true;

                if (primary === secondary) {
                    secondary = false;
                }
                if (secondary) {
                    secondary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.secondary].prefix;
                    secondary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.secondary].suffix;
                    // Add a space if empty
                    if (!secondary_tok.strings.prefix) {
                        secondary_tok.strings.prefix = " ";
                    }
                    // Remove quotes
                    for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                        if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(secondary_tok.decorations[i].join('/')) > -1) {
                            secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                        }
                    }
                    if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                        secondary_tok.strings["text-case"] = "passthrough";
                    }
                    if (secondary_locale) {
                        state.tmp.lang_array = [secondary_locale].concat(oldLangArray);
                    }
                    var secondary_outer = new CSL.Token();
                    secondary_outer.decorations.push(["@font-style", "normal"]);
                    secondary_outer.decorations.push(["@font-weight", "normal"]);
                    state.output.openLevel(secondary_outer);
                    state.output.append(secondary, secondary_tok);
                    state.output.closeLevel();

                    var blob_obj = state.output.current.value();
                    var blobs_pos = state.output.current.value().blobs.length - 1;
                    // Suppress supplementary multilingual info on subsequent
                    // partners of a parallel cite?
                }
                if (primary === tertiary) {
                    tertiary = false;
                }
                
                if (tertiary) {
                    tertiary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
                    tertiary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
                    // Add a space if empty
                    if (!tertiary_tok.strings.prefix) {
                        tertiary_tok.strings.prefix = " ";
                    }
                    // Remove quotes
                    for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                        if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(tertiary_tok.decorations[i].join('/')) > -1) {
                            tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                        }
                    }
                    if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                        tertiary_tok.strings["text-case"] = "passthrough";
                    }
                    if (tertiary_locale) {
                        state.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
                    }
                    var tertiary_outer = new CSL.Token();
                    tertiary_outer.decorations.push(["@font-style", "normal"]);
                    tertiary_outer.decorations.push(["@font-weight", "normal"]);
                    state.output.openLevel(tertiary_outer);
                    state.output.append(tertiary, tertiary_tok);
                    state.output.closeLevel();

                    var blob_obj = state.output.current.value();
                    var blobs_pos = state.output.current.value().blobs.length - 1;
                    // Suppress supplementary multilingual info on subsequent
                    // partners of a parallel cite?
                    // See note above.
                }

                state.output.closeLevel();
            } else {
                if (primary_locale) {
                    state.tmp.lang_array = [primary_locale].concat(oldLangArray);
                }
                CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, null, null, primary_tok, primary_tok.strings.prefix + primary);
                state.output.append(primary, primary_tok);
                state.tmp.probably_rendered_something = true;
            }

            state.tmp.lang_array = oldLangArray;
                
            if (state.tmp.can_block_substitute) {
                state.tmp.name_node.children.push(state.output.current.value());
            }
            return null;
        };
    }
    this.getOutputFunction = getOutputFunction;
};

/*global CSL: true */

/**
 * Style token.
 * <p>This class provides the tokens that define
 * the runtime version of the style.  The tokens are
 * instantiated by {@link CSL.Core.Build}, but the token list
 * must be post-processed with
 * {@link CSL.Core.Configure} before it can be used to generate
 * citations.</p>
 * @param {String} name The node name represented by this token.
 * @param {Int} tokentype A flag indicating whether this token
 * marks the start of a node, the end of a node, or is a singleton.
 * @class
 */
CSL.Token = function (name, tokentype, conditional) {
    /**
     * Name of the element.
     * <p>This corresponds to the element name of the
     * relevant tag in the CSL file.
     */
    this.name = name;
    /**
     * Strings and other static content specific to the element.
     */
    this.strings = {};
    this.strings.delimiter = undefined;
    this.strings.prefix = "";
    this.strings.suffix = "";
    /**
     * Formatting parameters.
     * <p>This is a placeholder at instantiation.  It is
     * replaced by the result of {@link CSL.setDecorations}
     * when the tag is created and configured during {@link CSL.Core.Build}
     * by {@link CSL.XmlToToken}.  The parameters for particular
     * formatting attributes are stored as string arrays, which
     * map to formatting functions at runtime,
     * when the output format is known.  Note that the order in which
     * parameters are registered is fixed by the constant
     * {@link CSL.FORMAT_KEY_SEQUENCE}.
     */
    this.decorations = [];
    this.variables = [];
    /**
     * Element functions.
     * <p>Functions implementing the styling behaviour of the element
     * are pushed into this array in the {@link CSL.Core.Build} phase.
     */
    this.execs = [];
    /**
     * Token type.
     * <p>This is a flag constant indicating whether the token represents
     * a start tag, an end tag, or is a singleton.</p>
     */
    this.tokentype = tokentype;

    // Conditional attributes added to bare tokens at runtime
    
    /**
     * Condition evaluator.
     * <p>This is a placeholder that receives a single function, and is
     * only relevant for a conditional branching tag (<code>if</code> or
     * <code>else-if</code>).  The function implements the argument to
     * the <code>match=</code> attribute (<code>any</code>, <code>all</code>
     * or <code>none</code>), by executing the functions registered in the
     * <code>tests</code> array (see below), and reacting accordingly.  This
     * function is invoked by the execution wrappers found in
     * {@link CSL.Engine}.</p>
     */
    // this.evaluator = false;
    /**
     * Conditions.
     * <p>Functions that evaluate to true or false, implementing
     * various posisble attributes to the conditional branching tags,
     * are registered here during {@link CSL.Core.Build}.
     * </p>
     */
    // this.tests = [];
    /**
     * Jump point on success.
     * <p>This holds the list jump point to be used when the
     * <code>evaluator</code> function of a conditional tag
     * returns true (success).  The jump index value is set during the
     * back-to-front token pass performed during {@link CSL.Core.Configure}.
     * </p>
     */
    // this.succeed = false;
    /**
     * Jump point on failure.
     * <p>This holds the list jump point to be used when the
     * <code>evaluator</code> function of a conditional tag
     * returns false (failure).  Jump index values are set during the
     * back-to-front token pass performed during {@link CSL.Core.Configure}.
     * </p>
     */
    // this.fail = false;
    /**
     * Index of next token.
     * <p>This holds the index of the next token in the
     * token list, which is the default "jump-point" for ordinary
     * processing.  Jump index values are set during the
     * back-to-front token pass performed during {@link CSL.Core.Configure}.
     * </p>
     */
    // this.next = false;
};

// Have needed this for yonks
CSL.Util.cloneToken = function (token) {
    var newtok, key, pos, len;
    if ("string" === typeof token) {
        return token;
    }
    newtok = new CSL.Token(token.name, token.tokentype);
    for (var key in token.strings) {
        if (token.strings.hasOwnProperty(key)) {
            newtok.strings[key] = token.strings[key];
        }
    }
    if (token.decorations) {
        newtok.decorations = [];
        for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
            newtok.decorations.push(token.decorations[pos].slice());
        }
    }
    if (token.variables) {
        newtok.variables = token.variables.slice();
    }
    // Probably overkill; this is only used for cloning formatting
    // tokens.
    if (token.execs) {
        newtok.execs = token.execs.slice();
        if (token.tests) {
            newtok.tests = token.tests.slice();
        }
    }
    return newtok;
};

/*global CSL: true */

/**
 * Ambiguous Cite Configuration Object
 * @class
 */
CSL.AmbigConfig = function () {
    this.maxvals = [];
    this.minval = 1;
    this.names = [];
    this.givens = [];
    this.year_suffix = false;
    this.disambiguate = 0;
};

/*global CSL: true */

CSL.Blob = function (str, token, levelname) {
    var len, pos, key;
    this.levelname = levelname;
    //print(levelname);
    if (token) {
        this.strings = {"prefix":"","suffix":""};
        for (var key in token.strings) {
            if (token.strings.hasOwnProperty(key)) {
                this.strings[key] = token.strings[key];
            }
        }
        this.decorations = [];
        if (token.decorations === undefined) {
            len = 0;
        } else {
            len = token.decorations.length;
        }
        for (pos = 0; pos < len; pos += 1) {
            this.decorations.push(token.decorations[pos].slice());
        }
    } else {
        this.strings = {};
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.strings.delimiter = "";
        this.decorations = [];
    }
    if ("string" === typeof str) {
        this.blobs = str;
    } else if (str) {
        this.blobs = [str];
    } else {
        this.blobs = [];
    }
    this.alldecor = [this.decorations];
};


CSL.Blob.prototype.push = function (blob) {
    if ("string" === typeof this.blobs) {
        CSL.error("Attempt to push blob onto string object");
    } else if (false !== blob) {
        blob.alldecor = blob.alldecor.concat(this.alldecor);
        this.blobs.push(blob);
    }
};

/*global CSL: true */

/**
 * An output instance object representing a number or a range
 *
 * with attributes next and start, and
 * methods isRange(), renderStart(), renderEnd() and renderRange().
 * At render time, the output queue will perform optional
 * collapsing of these objects in the queue, according to
 * configurable options, and apply any decorations registered
 * in the object to the output elements.
 * @namespace Range object and friends.
 */

CSL.NumericBlob = function (particle, num, mother_token, id) {
    // item id is used to assure that prefix delimiter is invoked only
    // when joining blobs across items
    this.id = id;
    this.alldecor = [];
    this.num = num;
    this.particle = particle;
    this.blobs = num.toString();
    this.status = CSL.START;
    this.strings = {};
    if (mother_token) {
        this.gender = mother_token.gender;
        this.decorations = mother_token.decorations;
        this.strings.prefix = mother_token.strings.prefix;
        this.strings.suffix = mother_token.strings.suffix;
        this.strings["text-case"] = mother_token.strings["text-case"];
        this.successor_prefix = mother_token.successor_prefix;
        this.range_prefix = mother_token.range_prefix;
        this.splice_prefix = mother_token.splice_prefix;
        this.formatter = mother_token.formatter;
        if (!this.formatter) {
            this.formatter =  new CSL.Output.DefaultFormatter();
        }
        if (this.formatter) {
            this.type = this.formatter.format(1);
        }
    } else {
        this.decorations = [];
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.successor_prefix = "";
        this.range_prefix = "";
        this.splice_prefix = "";
        this.formatter = new CSL.Output.DefaultFormatter();
    }
};


CSL.NumericBlob.prototype.setFormatter = function (formatter) {
    this.formatter = formatter;
    this.type = this.formatter.format(1);
};


CSL.Output.DefaultFormatter = function () {};

CSL.Output.DefaultFormatter.prototype.format = function (num) {
    return num.toString();
};

CSL.NumericBlob.prototype.checkNext = function (next,start) {
    if (start) {
        this.status = CSL.START;
        if ("object" === typeof next) {
            if (next.num === (this.num + 1)) {
                next.status = CSL.SUCCESSOR;
            } else {
                next.status = CSL.SEEN;
            }
        }
    } else if (! next || !next.num || this.type !== next.type || next.num !== (this.num + 1)) {
        if (this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {
            this.status = CSL.END;
        }
        if ("object" === typeof next) { 
           next.status = CSL.SEEN;
        }
    } else { // next number is in the sequence
        if (this.status === CSL.START || this.status === CSL.SEEN) {
            next.status = CSL.SUCCESSOR;
        } else if (this.status === CSL.SUCCESSOR || this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {
            if (this.range_prefix) {
                next.status = CSL.SUCCESSOR_OF_SUCCESSOR;
                this.status = CSL.SUPPRESS;
            } else {
                next.status = CSL.SUCCESSOR;
            }
        }
        // wakes up the correct delimiter.
        //if (this.status === CSL.SEEN) {
        //    this.status = CSL.SUCCESSOR;
        //}
    }
};


CSL.NumericBlob.prototype.checkLast = function (last) {
    // Used to adjust final non-range join
    if (this.status === CSL.SEEN 
    || (last.num !== (this.num - 1) && this.status === CSL.SUCCESSOR)) {
        this.status = CSL.SUCCESSOR;
        return true;
    }
    return false;
};

/*global CSL: true */

CSL.Util.fixDateNode = function (parent, pos, node) {
    var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;
    
    var lingo = this.cslXml.getAttributeValue(node, "lingo");

    var default_locale = this.cslXml.getAttributeValue(node, "default-locale");

    // Raise date flag, used to control inclusion of year-suffix key in sorts
    // This may be a little reckless: not sure what happens on no-date conditions
    this.build.date_key = true;

    form = this.cslXml.getAttributeValue(node, "form");
    var lingo;
    if (default_locale) {
        lingo = this.opt["default-locale"][0];
    } else {
        lingo = this.cslXml.getAttributeValue(node, "lingo");
    }

    if (!this.getDate(form, default_locale)) {
        return parent;
    }

    var dateparts = this.cslXml.getAttributeValue(node, "date-parts");

    variable = this.cslXml.getAttributeValue(node, "variable");
    prefix = this.cslXml.getAttributeValue(node, "prefix");
    suffix = this.cslXml.getAttributeValue(node, "suffix");
    display = this.cslXml.getAttributeValue(node, "display");
    cslid = this.cslXml.getAttributeValue(node, "cslid");

    //
    // Xml: Copy a node
    //
    datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
    this.cslXml.setAttribute(datexml, 'lingo', this.opt.lang);
    this.cslXml.setAttribute(datexml, 'form', form);
    this.cslXml.setAttribute(datexml, 'date-parts', dateparts);
    this.cslXml.setAttribute(datexml, "cslid", cslid);
    //
    // Xml: Set attribute
    //
    this.cslXml.setAttribute(datexml, 'variable', variable);
    this.cslXml.setAttribute(datexml, 'default-locale', default_locale);
    //
    // Xml: Set flag
    //
    if (prefix) {
        //
        // Xml: Set attribute
        //
        this.cslXml.setAttribute(datexml, "prefix", prefix);
    }
    if (suffix) {
        //
        // Xml: Set attribute
        //
        this.cslXml.setAttribute(datexml, "suffix", suffix);
    }
    if (display) {
        //
        // Xml: Set attribute
        //
        this.cslXml.setAttribute(datexml, "display", display);
    }
    //
    // Step through any date-part children of the layout date node,
    // and lay their attributes onto the corresponding node in the
    // locale template node copy.
    //
    // tests: language_BaseLocale
    // tests: date_LocalizedTextInStyleLocaleWithTextCase
    //
    children = this.cslXml.children(datexml);
    for (var key in children) {
        subnode = children[key];
        if ("date-part" === this.cslXml.nodename(subnode)) {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            if (default_locale) {
                this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
            }
        }
    }

    children = this.cslXml.children(node);
    for (var key in children) {
        subnode = children[key];
        if ("date-part" === this.cslXml.nodename(subnode)) {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            subchildren = this.cslXml.attributes(subnode);
            for (attr in subchildren) {
                if ("@name" === attr) {
                    continue;
                }
                if (lingo && lingo !== this.opt.lang) {
                    if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                        continue;
                    }
                }
                val = subchildren[attr];
                this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
            }
        }
    }
    
    if ("year" === this.cslXml.getAttributeValue(node, "date-parts")) {

        //
        // Xml: Find one node by attribute and delete
        //
        this.cslXml.deleteNodeByNameAttribute(datexml, 'month');
        //
        // Xml: Find one node by attribute and delete
        //
        this.cslXml.deleteNodeByNameAttribute(datexml, 'day');
        
    } else if ("year-month" === this.cslXml.getAttributeValue(node, "date-parts")) {
        //
        // Xml: Find one node by attribute and delete
        //
        this.cslXml.deleteNodeByNameAttribute(datexml, 'day');
    } else if ("month-day" === this.cslXml.getAttributeValue(node, "date-parts")) {
        //
        // Xml: Get child nodes
        //
        var childNodes = this.cslXml.children(datexml);
        for (var i=1,ilen=this.cslXml.numberofnodes(childNodes);i<ilen;i++) {
            //
            // Xml: Get attribute value (for string comparison)
            //
            if (this.cslXml.getAttributeValue(childNodes[i], 'name') === "year") {
                //
                // Xml: Set attribute value
                //
                this.cslXml.setAttribute(childNodes[i-1], "suffix", "");
                break;
            }
        }
        //
        // Xml: Find one node by attribute and delete
        //
        this.cslXml.deleteNodeByNameAttribute(datexml, 'year');
    }
    return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
};

/*global CSL: true */

CSL.dateMacroAsSortKey = function (state, Item) {
    CSL.dateAsSortKey.call(this, state, Item, true);
};


CSL.dateAsSortKey = function (state, Item, isMacro) {
    var dp, elem, value, e, yr, prefix, i, ilen;
    var variable = this.variables[0];
    var macroFlag = "empty";
    if (isMacro && state.tmp.extension) {
        macroFlag = "macro-with-date";
    }
    dp = Item[variable];
    if ("undefined" === typeof dp) {
        dp = {"date-parts": [[0]] };
        if (!dp.year) {
            state.tmp.empty_date = true;
        }
    }
    if ("undefined" === typeof this.dateparts) {
        this.dateparts = ["year", "month", "day"];
    }
    if (dp.raw) {
        dp = state.fun.dateparser.parseDateToArray(dp.raw);
    } else if (dp["date-parts"]) {
        dp = state.dateParseArray(dp);
    }
    if ("undefined" === typeof dp) {
        dp = {};
    }
    for (i = 0, ilen = CSL.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
        elem = CSL.DATE_PARTS_INTERNAL[i];
        value = 0;
        e = elem;
        if (e.slice(-4) === "_end") {
            e = e.slice(0, -4);
        }
        if (dp[elem] && this.dateparts.indexOf(e) > -1) {
            value = dp[elem];
        }
        if (elem.slice(0, 4) === "year") {
            yr = CSL.Util.Dates[e].numeric(state, value);
            var prefix = "Y";
            if (yr[0] === "-") {
                prefix = "X";
                yr = yr.slice(1);
                yr = 9999 - parseInt(yr, 10);
            }
            state.output.append(CSL.Util.Dates[elem.slice(0, 4)].numeric(state, (prefix + yr)), macroFlag);
        } else {
            value = CSL.Util.Dates[e]["numeric-leading-zeros"](state, value);
            // Ugh.
            if (!value) {
                value = "00";
            }
            state.output.append(value, macroFlag);
        }
    }
};

CSL.Engine.prototype.dateParseArray = function (date_obj) {
    var ret, field, dp, exts;
    ret = {};
    for (field in date_obj) {
        if (field === "date-parts") {
            dp = date_obj["date-parts"];
            if (dp.length > 1) {
                if (dp[0].length !== dp[1].length) {
                    CSL.error("CSL data error: element mismatch in date range input.");
                }
            }
            exts = ["", "_end"];
            for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
                for (var j = 0, jlen = CSL.DATE_PARTS.length; j < jlen; j += 1) {
                    if (isNaN(parseInt(dp[i][j], 10))) {
                        ret[(CSL.DATE_PARTS[j] + exts[i])] = undefined;
                    } else {
                        ret[(CSL.DATE_PARTS[j] + exts[i])] = parseInt(dp[i][j], 10);
                    }
                }
            }
        } else if (date_obj.hasOwnProperty(field)) {

            // XXXX: temporary workaround

            if (field === "literal" && "object" === typeof date_obj.literal && "string" === typeof date_obj.literal.part) {
                CSL.debug("Warning: fixing up weird literal date value");
                ret.literal = date_obj.literal.part;
            } else {
                ret[field] = date_obj[field];
            }
        }
    }
    return ret;
};

/*global CSL: true */

CSL.Util.Names = {};

CSL.Util.Names.compareNamesets = CSL.NameOutput.prototype._compareNamesets;

/**
 * Un-initialize a name (quash caps after first character)
 */
CSL.Util.Names.unInitialize = function (state, name) {
    var i, ilen, namelist, punctlist, ret;
    if (!name) {
        return "";
    }
    namelist = name.split(/(?:\-|\s+)/);
    punctlist = name.match(/(\-|\s+)/g);
    ret = "";
    for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
        // if (CSL.ALL_ROMANESQUE_REGEXP.exec(namelist[i].slice(0,-1)) 
        //    && namelist[i] 
        //    && namelist[i] !== namelist[i].toUpperCase()) {

            // More or less like this, to address the following fault report:
            // http://forums.zotero.org/discussion/17610/apsa-problems-with-capitalization-of-mc-mac-etc/

            // Leaving the name string untouched because name capitalization is varied and wonderful.
            // https://github.com/Juris-M/citeproc-js/issues/43
            
            //namelist[i] = namelist[i].slice(0, 1) + namelist[i].slice(1, 2).toLowerCase() + namelist[i].slice(2);
        // }
        ret += namelist[i];
        if (i < ilen - 1) {
            ret += punctlist[i];
        }
    }
    return ret;
};

/**
 * Initialize a name.
 */
CSL.Util.Names.initializeWith = function (state, name, terminator, normalizeOnly) {
    var i, ilen, mm, lst, ret;
    if (!name) {
        return "";
    }
    if (!terminator) {
        terminator = "";
    }
    if (["Lord", "Lady"].indexOf(name) > -1
        || (!name.match(CSL.STARTSWITH_ROMANESQUE_REGEXP)
            && !terminator.match("%s"))) {
        return name;
    }
    var namelist = name;
    if (state.opt["initialize-with-hyphen"] === false) {
        namelist = namelist.replace(/\-/g, " ");
    }

    // Oh boy.
    // We need to suss out what is a set of initials or abbreviation,
    // so that they can be selectively normalized. Steps might be:
    //   (1) Split the string
    //   (2) Step through the string, deleting periods and, if initalize="false", then
    //       (a) note abbreviations and initials (separately).
    //   (3) If initialize="false" then:
    //       (a) Do the thing below, but only pushing terminator; or else
    //       (b) Do the thing below

    // (1) Split the string
    namelist = namelist.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
    namelist = namelist.replace(/-([a-z])/g, "\u2013$1");

    for (var i=namelist.length-2; i>-1; i += -1) {
        if (namelist.slice(i, i+1) === "." && namelist.slice(i+1, i+2) !== " ") {
            namelist = namelist.slice(0, i) + ". " + namelist.slice(i+1);
        }
    }

    // Workaround for Internet Explorer
    //namelist = namelist.split(/(\-|\s+)/);
    // Workaround for Internet Explorer
    mm = namelist.match(/[\-\s]+/g);
    lst = namelist.split(/[\-\s]+/);
    if (mm === null) {
        var mmm = lst[0].match(/[^\.]+$/);
        if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
            lst[0] += ".";
        }
    }

    if (lst.length === 0) {
        // This doesn't make much sense, and may be impossible.
        namelist = mm;
    } else {
        namelist = [lst[0]];
        for (i = 1, ilen = lst.length; i < ilen; i += 1) {
            namelist.push(mm[i - 1]);
            namelist.push(lst[i]);
        }
    }
    lst = namelist;

    // Use doInitializeName or doNormalizeName, depending on requirements.
    if (normalizeOnly) {
        ret = CSL.Util.Names.doNormalize(state, lst, terminator);
    } else {
        ret = CSL.Util.Names.doInitialize(state, lst, terminator);
    }
    ret = ret.replace(/\u2013([a-z])/g, "-$1");
    return ret;
};

CSL.Util.Names.doNormalize = function (state, namelist, terminator) {
    var i, ilen;
    // namelist is a flat list of given-name elements and space-like separators between them
    terminator = terminator ? terminator : "";
    // Flag elements that look like abbreviations
    var isAbbrev = [];
    for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
        if (namelist[i].length > 1 && namelist[i].slice(-1) === ".") {
            namelist[i] = namelist[i].slice(0, -1);
            isAbbrev.push(true);
        } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
            isAbbrev.push(true);
        } else {
            isAbbrev.push(false);
        }
    }
    // Step through the elements of the givenname array
    for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
        // If the element is not an abbreviation, leave it and its trailing spaces alone
        if (isAbbrev[i]) {
            // For all elements but the last
            if (i < namelist.length - 2) {
                // Start from scratch on space-like things following an abbreviation
                namelist[i + 1] = "";

                if (!isAbbrev[i+2]) {
                    namelist[i + 1] = " ";
                }
                
                // Add the terminator to the element
                // If the following element is not a single-character abbreviation, remove a trailing zero-width non-break space, if present
                // These ops may leave some duplicate cruft in the elements and separators. This will be cleaned at the end of the function.
                if (namelist[i + 2].length > 1) {
                    namelist[i] = namelist[i] + terminator.replace(/\ufeff$/, "");
                } else {
                    namelist[i] = namelist[i] + terminator;
                }
            }
            // For the last element (if it is an abbreviation), just append the terminator
            if (i === namelist.length - 1) {
                namelist[i] = namelist[i] + terminator;
            }
        }
    }
    // Remove trailing cruft and duplicate spaces, and return
    return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/,"").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
};

CSL.Util.Names.doInitialize = function (state, namelist, terminator) {
    var i, ilen, m, j, jlen, lst, n;
    for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
        n = namelist[i];
        if (!n) {
            continue;
        }
        m = n.match(CSL.NAME_INITIAL_REGEXP);
        if (!m && (!n.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
            m = n.match(/(.)(.*)/);
        }
        if (m && m[2] && m[3]) {
            m[1] = m[1] + m[2];
            m[2] = "";
        }
        if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {
            var extra = "";
            if (m[2]) {
                var s = "";
                lst = m[2].split("");
                for (j = 0, jlen = lst.length; j < jlen; j += 1) {
                    var c = lst[j];
                    if (c === c.toUpperCase()) {
                        s += c;
                    } else {
                        break;
                    }
                }
                if (s.length < m[2].length) {
                    extra = CSL.toLocaleLowerCase.call(state, s);
                }
            }
            namelist[i] = m[1] + extra;
            if (i < (ilen - 1)) {
                if (terminator.match("%s")) {
                    namelist[i] = terminator.replace("%s", namelist[i]);
                } else {
                    if (namelist[i + 1].indexOf("-") > -1) {
                        namelist[i + 1] = terminator + namelist[i + 1];
                    } else {
                        namelist[i + 1] = terminator;
                    }
                }
            } else {
                if (terminator.match("%s")) {
                    namelist[i] = terminator.replace("%s", namelist[i]);
                } else {
                    namelist.push(terminator);
                }
            }
        } else if (n.match(CSL.ROMANESQUE_REGEXP) && (!m || !m[3])) {
            namelist[i] = " " + n;
        }
    }
    var ret = namelist.join("");
    ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/,"").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
    return ret;
};

CSL.Util.Names.getRawName = function (name) {
    var ret = [];
    if (name.literal) {
        ret.push(name.literal);
    } else {
        if (name.given) {
            ret.push(name.given);
        }
        if (name.family) {
            ret.push(name.family);
        }
    }
    return ret.join(" ");
};

// deleted CSL.Util.Names.initNameSlices()
// no longer used.

// deleted CSL.Util.Names,rescueNameElements()
// apparently not used.



/*global CSL: true */

/**
 * Date mangling functions.
 * @namespace Date construction utilities
 */
CSL.Util.Dates = {};

/**
 * Year manglers
 * <p>short, long</p>
 */
CSL.Util.Dates.year = {};

/**
 * Convert year to long form
 * <p>This just passes the number back as a string.</p>
 */
CSL.Util.Dates.year["long"] = function (state, num) {
    if (!num) {
        if ("boolean" === typeof num) {
            num = "";
        } else {
            num = 0;
        }
    }
    return num.toString();
};

/**
 * Crudely convert to Japanese Imperial form.
 * <p>Returns the result as a string.</p>
 */
CSL.Util.Dates.year.imperial = function (state, num, end) {
    var year = "";
    if (!num) {
        if ("boolean" === typeof num) {
            num = "";
        } else {
            num = 0;
        }
    }
    end = end ? "_end" : "";
    var month = state.tmp.date_object["month" + end];
    month = month ? ""+month : "1";
    while (month.length < 2) {
        month = "0" + month;
    }
    var day = state.tmp.date_object["day" + end];
    day = day ? ""+day : "1";
    while (day.length < 2) {
        day = "0" + day;
    }
    var date = parseInt(num + month + day, 10);
    var label;
    var offset;
    if (date >= 18680908 && date < 19120730) {
        label = '\u660e\u6cbb';
        offset = 1867;
    } else if (date >= 19120730 && date < 19261225) {
        label = '\u5927\u6b63';
        offset = 1911;
    } else if (date >= 19261225 && date < 19890108) {
        label = '\u662d\u548c';
        offset = 1925;
    } else if (date >= 19890108) {
        label = '\u5e73\u6210';
        offset = 1988;
    }
    // This entire "imperial" code block should be cut. Scraped input
    // for this will be too ratty to be useful anyway.
    if (label && offset) {
        var normalizedKey = label;
        if (state.sys.normalizeAbbrevsKey) {
            // The first argument does not need to specify the exact variable
            // name.
            normalizedKey = state.sys.normalizeAbbrevsKey("number", label);
        }
        if (!state.transform.abbrevs['default']['number'][normalizedKey]) {
            // loadAbbreviation normally takes an item as fourth argument.
            // It is not available here, 
            state.transform.loadAbbreviation('default', "number", normalizedKey, null);
        }
        if (state.transform.abbrevs['default']['number'][normalizedKey]) {
            label = state.transform.abbrevs['default']['number'][normalizedKey];
        }
        year = label + (num - offset);
    }
    return year;
};

/**
 * Convert year to short form
 * <p>Just crops any 4-digit year to the last two digits.</p>
 */
CSL.Util.Dates.year["short"] = function (state, num) {
    num = num.toString();
    if (num && num.length === 4) {
        return num.substr(2);
    }
};


/**
 * Convert year to short form
 * <p>Just crops any 4-digit year to the last two digits.</p>
 */
CSL.Util.Dates.year.numeric = function (state, num) {
    var m, pre;
    num = "" + num;
    var m = num.match(/([0-9]*)$/);
    if (m) {
        pre = num.slice(0, m[1].length * -1);
        num = m[1];
    } else {
        pre = num;
        num = "";
    }
    while (num.length < 4) {
        num = "0" + num;
    }
    return (pre + num);
};


/*
 * MONTH manglers
 * normalize
 * long, short, numeric, numeric-leading-zeros
 */
CSL.Util.Dates.normalizeMonth = function (num, useSeason) {
    var ret;
    if (!num) {
        num = 0;
    }
    num = "" + num;
    if (!num.match(/^[0-9]+$/)) {
        num = 0;
    }
    num = parseInt(num, 10);
    if (useSeason) {
        var res = {stub: "month-", num: num};
        if (res.num < 1 || res.num > 24) {
            res.num = 0;
        } else {
            while (res.num > 16) {
                res.num = res.num - 4;
            }
            if (res.num > 12) {
                res.stub = "season-";
                res.num = res.num - 12;
            }
        }
        ret = res;
    } else {
        if (num < 1 || num > 12) {
            num = 0;
        }
        ret = num;
    }
    return ret;
};

CSL.Util.Dates.month = {};

/**
 * Convert month to numeric form
 * <p>This just passes the number back as a string.</p>
 */
CSL.Util.Dates.month.numeric = function (state, num) {
    var num = CSL.Util.Dates.normalizeMonth(num);
    if (!num) {
        num = "";
    }
    return num;
};

/**
 * Convert month to numeric-leading-zeros form
 * <p>This just passes the number back as string padded with zeros.</p>
 */
CSL.Util.Dates.month["numeric-leading-zeros"] = function (state, num) {
    var num = CSL.Util.Dates.normalizeMonth(num);
    if (!num) {
        num = "";
    } else {
        num = "" + num;
        while (num.length < 2) {
            num = "0" + num;
        }
    }
    return num;
};

/**
 * Convert month to long form
 * <p>This passes back the month of the locale in long form.</p>
 */

// Gender is not currently used. Is it needed?

CSL.Util.Dates.month["long"] = function (state, num, gender, forceDefaultLocale) {
    var res = CSL.Util.Dates.normalizeMonth(num, true);
    var num = res.num;
    if (!num) {
        num = "";
    } else {
        num = "" + num;
        while (num.length < 2) {
            num = "0" + num;
        }
        num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
    }
    return num;
};

/**
 * Convert month to long form
 * <p>This passes back the month of the locale in short form.</p>
 */

// See above.

CSL.Util.Dates.month["short"] = function (state, num, gender, forceDefaultLocale) {
    var res = CSL.Util.Dates.normalizeMonth(num, true);
    var num = res.num;
    if (!num) {
        num = "";
    } else {
        num = "" + num;
        while (num.length < 2) {
            num = "0" + num;
        }
        num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
    }
    return num;
};

/*
 * DAY manglers
 * numeric, numeric-leading-zeros, ordinal
 */
CSL.Util.Dates.day = {};

/**
 * Convert day to numeric form
 * <p>This just passes the number back as a string.</p>
 */
CSL.Util.Dates.day.numeric = function (state, num) {
    return num.toString();
};

CSL.Util.Dates.day["long"] = CSL.Util.Dates.day.numeric;

/**
 * Convert day to numeric-leading-zeros form
 * <p>This just passes the number back as a string padded with zeros.</p>
 */
CSL.Util.Dates.day["numeric-leading-zeros"] = function (state, num) {
    if (!num) {
        num = 0;
    }
    num = num.toString();
    while (num.length < 2) {
        num = "0" + num;
    }
    return num.toString();
};

/**
 * Convert day to ordinal form
 * <p>This will one day pass back the number as a string with the
 * ordinal suffix appropriate to the locale.  For the present,
 * it just does what is most of the time right for English.</p>
 */
CSL.Util.Dates.day.ordinal = function (state, num, gender) {
    return state.fun.ordinalizer.format(num, gender);
};

/*global CSL: true */

/**
 * Helper functions for constructing sort keys.
 * @namespace Sort key utilities
 */
CSL.Util.Sort = {};

/**
 * Strip prepositions from a string
 * <p>Used when generating sort keys.</p>
 */
CSL.Util.Sort.strip_prepositions = function (str) {
    var m;
    if ("string" === typeof str) {
        m = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
    }
    if (m) {
        str = str.substr(m[1].length);
    }
    return str;
};

/*global CSL: true */

CSL.Util.substituteStart = function (state, target) {
    var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
    func = function (state, Item, item) {
        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                state.tmp.strip_periods += 1;
                break;
            }
        }
    };
    this.execs.push(func);
    if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
        this.decorations.reverse();
        this.decorations.push(["@showid","true", this.cslid]);
        this.decorations.reverse();
    }
    //
    // Contains body code for both substitute and first-field/remaining-fields
    // formatting.
    //

    nodetypes = ["number", "date", "names"];
    if (("text" === this.name && !this.postponed_macro) || nodetypes.indexOf(this.name) > -1) {
        element_trace = function (state, Item, item) {
            if (state.tmp.element_trace.value() === "author" || "names" === this.name) {
                if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                    if (!state.tmp.probably_rendered_something) ; else {
                        state.tmp.element_trace.push("suppress-me");
                    }
                }
                if (!state.tmp.just_looking && item && item["suppress-author"]) {
                    if (!state.tmp.probably_rendered_something) {
                        state.tmp.element_trace.push("suppress-me");
                    }
                }
            }
            else if ("date" === this.name) {
                if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                    if (state.tmp.probably_rendered_something) {
                        state.tmp.element_trace.push("suppress-me");
                    }
                }
                /*
                if (!state.tmp.just_looking && item && item["suppress-author"]) {
                    if (state.tmp.probably_rendered_something) {
                        //state.tmp.element_trace.push("suppress-me");
                    }
                }
                */
            } else {
                if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                    // XXX can_block_substitute probably is doing nothing here. The value is always true.
                    if (!state.tmp.probably_rendered_something && state.tmp.can_block_substitute) ; else {
                        state.tmp.element_trace.push("suppress-me");
                    }
                } else if (item && item["suppress-author"]) {
                    state.tmp.element_trace.push("do-not-suppress-me");
                }
            }
        };
        this.execs.push(element_trace);
    }
    display = this.strings.cls;
    this.strings.cls = false;
    if (state.build.render_nesting_level === 0) {
        //
        // The markup formerly known as @bibliography/first
        //
        // Separate second-field-align from the generic display logic.
        // There will be some code replication, but not in the
        // assembled style.
        //
        if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first = new CSL.Token("group", CSL.START);
            bib_first.decorations = [["@display", "left-margin"]];
            func = function (state, Item) {
                if (!state.tmp.render_seen) {
                    bib_first.strings.first_blob = Item.id;
                    state.output.startTag("bib_first", bib_first);
                }
            };
            bib_first.execs.push(func);
            target.push(bib_first);
        } else if (CSL.DISPLAY_CLASSES.indexOf(display) > -1) {
            bib_first = new CSL.Token("group", CSL.START);
            bib_first.decorations = [["@display", display]];
            func = function (state, Item) {
                bib_first.strings.first_blob = Item.id;
                state.output.startTag("bib_first", bib_first);
            };
            bib_first.execs.push(func);
            target.push(bib_first);
        }
        state.build.cls = display;
    }
    state.build.render_nesting_level += 1;
    // Should this be render_nesting_level, with the increment
    // below? ... ?
    if (state.build.substitute_level.value() === 1) {
        //
        // All top-level elements in a substitute environment get
        // wrapped in conditionals.  The substitute_level variable
        // is a stack, because spanned names elements (with their
        // own substitute environments) can be nested inside
        // a substitute environment.
        //
        // (okay, we use conditionals a lot more than that.
        // we slot them in for author-only as well...)
        choose_start = new CSL.Token("choose", CSL.START);
        CSL.Node.choose.build.call(choose_start, state, target);
        if_start = new CSL.Token("if", CSL.START);
        //
        // Set a test of the shadow if token to skip this
        // macro if we have acquired a name value.

        // check for variable
        func = function () {
            if (state.tmp.can_substitute.value()) {
                return true;
            }
            return false;
        };
        if_start.tests ? {} : if_start.tests = [];
        if_start.tests.push(func);
        if_start.test = state.fun.match.any(this, state, if_start.tests);
        target.push(if_start);
    }

    if (state.sys.variableWrapper
        && this.variables_real
        && this.variables_real.length) {

        func = function (state, Item, item) {
            if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
                // Attach item data and variable names.
                // Do with them what you will.
                var variable_entry = new CSL.Token("text", CSL.START);
                variable_entry.decorations = [["@showid", "true"]];
                state.output.startTag("variable_entry", variable_entry);
                var position = null;
                if (item) {
                    position = item.position;
                }
                if (!position) {
                    position = 0;
                }
                var positionMap = [
                    "first",
                    "container-subsequent",
                    "subsequent",
                    "ibid",
                    "ibid-with-locator"
                ];
                var noteNumber = 0;
                if (item && item.noteIndex) {
                    noteNumber = item.noteIndex;
                }
                var firstReferenceNoteNumber = 0;
                if (item && item['first-reference-note-number']) {
                    firstReferenceNoteNumber = item['first-reference-note-number'];
                }
                var firstContainerReferenceNoteNumber = 0;
                if (item && item['first-container-reference-note-number']) {
                    firstContainerReferenceNoteNumber = item['first-container-reference-note-number'];
                }
                var citationNumber = 0;
                // XXX Will this EVER happen?
                if (item && item['citation-number']) {
                    citationNumber = item['citation-number'];
                }
                var index = 0;
                if (item && item.index) {
                    index = item.index;
                }
                var params = {
                    itemData: Item,
                    variableNames: this.variables,
                    context: state.tmp.area,
                    xclass: state.opt.xclass,
                    position: positionMap[position],
                    "note-number": noteNumber,
                    "first-reference-note-number": firstReferenceNoteNumber,
                    "first-container-reference-note-number": firstContainerReferenceNoteNumber,
                    "citation-number": citationNumber,
                    "index": index,
                    "mode": state.opt.mode
                };
                state.output.current.value().params = params;
            }
        };
        this.execs.push(func);
    }
};


CSL.Util.substituteEnd = function (state, target) {
    var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;

    if (state.sys.variableWrapper
        && (this.hasVariable || (this.variables_real && this.variables_real.length))) {
        
        func = function (state) {
            if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
                state.output.endTag("variable_entry");
            }
        };
        this.execs.push(func);
    }

    func = function (state) {
        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                state.tmp.strip_periods += -1;
                break;
            }
        }
    };
    this.execs.push(func);

    state.build.render_nesting_level += -1;
    if (state.build.render_nesting_level === 0) {
        if (state.build.cls) {
            func = function (state) {
                state.output.endTag("bib_first");
            };
            this.execs.push(func);
            state.build.cls = false;
        } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first_end = new CSL.Token("group", CSL.END);
            // first func end
            func = function (state) {
                if (!state.tmp.render_seen) {
                    state.output.endTag("bib_first"); // closes bib_first
                }
            };
            bib_first_end.execs.push(func);
            target.push(bib_first_end);
            bib_other = new CSL.Token("group", CSL.START);
            bib_other.decorations = [["@display", "right-inline"]];
            func = function (state) {
                if (!state.tmp.render_seen) {
                    state.tmp.render_seen = true;
                    state.output.startTag("bib_other", bib_other);
                }
            };
            bib_other.execs.push(func);
            target.push(bib_other);
        }
    }
    if (state.build.substitute_level.value() === 1) {
        if_end = new CSL.Token("if", CSL.END);
        target.push(if_end);
        choose_end = new CSL.Token("choose", CSL.END);
        CSL.Node.choose.build.call(choose_end, state, target);
    }

    if ("names" === this.name || ("text" === this.name && this.variables_real !== "title")) {
        author_substitute = new CSL.Token("text", CSL.SINGLETON);
        var substitution_name = this.name;
        func = function (state, Item) {
            if (state.tmp.area !== "bibliography") {
                return;
            }
            if ("string" !== typeof state.bibliography.opt["subsequent-author-substitute"]) {
                return;
            }
            if (this.variables_real && !Item[this.variables_real]) {
                return;
            }
            // The logic of these two is not obvious. The effect is to enable placeholder substitution
            // on a text macro name substitution, without printing both the text macro AND the placeholder.
            // See https://forums.zotero.org/discussion/comment/350407
            if (this.variables_real && substitution_name === "names") {
                return;
            }

            var subrule = state.bibliography.opt["subsequent-author-substitute-rule"];
            var i, ilen;
            //var text_esc = CSL.getSafeEscape(state);
            var printing = !state.tmp.suppress_decorations;
            if (printing && state.tmp.subsequent_author_substitute_ok) {
                if (state.tmp.rendered_name) {
                    if ("partial-each" === subrule || "partial-first" === subrule) {
                        var dosub = true;
                        var rendered_name = [];
                        // This is a wee bit risky, as we're assuming that the name
                        // children and the list of stringified names are congruent.
                        // That *should* always be true, but you never know.
                        for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {
                            var name = state.tmp.rendered_name[i];
                            if (dosub
                                && state.tmp.last_rendered_name && state.tmp.last_rendered_name.length > (i - 1)
                                && name && !name.localeCompare(state.tmp.last_rendered_name[i])) {
                                str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                state.tmp.name_node.children[i].blobs = [str];
                                if ("partial-first" === subrule) {
                                    dosub = false;
                                }
                            } else {
                                dosub = false;
                            }
                            rendered_name.push(name);
                        }
                        // might want to slice this?
                        state.tmp.last_rendered_name = rendered_name;
                    } else if ("complete-each" === subrule) {
                        var rendered_name = state.tmp.rendered_name.join(",");
                        if (rendered_name) {
                            if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {
                                for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {
                                    str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                    state.tmp.name_node.children[i].blobs = [str];
                                }
                            }
                            state.tmp.last_rendered_name = rendered_name;
                        }
                    } else {
                        var rendered_name = state.tmp.rendered_name.join(",");
                        if (rendered_name) {
                            if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {
                                str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                if (state.tmp.label_blob) {
                                    state.tmp.name_node.top.blobs = [str,state.tmp.label_blob];
                                } else if (state.tmp.name_node.top.blobs.length) {
                                    state.tmp.name_node.top.blobs[0].blobs = [str];
                                } else {
                                    state.tmp.name_node.top.blobs = [str];
                                }
                                state.tmp.substituted_variable = substitution_name;
                            }
                            state.tmp.last_rendered_name = rendered_name;
                        }
                    }
                    state.tmp.subsequent_author_substitute_ok = false;
                }
            }
        };
        this.execs.push(func);
    }

    if (("text" === this.name && !this.postponed_macro) || ["number", "date", "names"].indexOf(this.name) > -1) {
        // element trace
        func = function (state, Item) {
            // element_trace is a mess, but it's trying to do something simple.
            // A queue append is done, and element_trace.value() returns "suppress-me"
            // the append is aborted. That's it.
            // It seems only to be used on numeric elements of numeric styles ATM.
            // If used only for that purpose, it could be greatly simplified.
            // If cleaned up, it could do more interesting things, like control
            // the suppression of names set later than first position.
            if (state.tmp.element_trace.mystack.length>1) {
                state.tmp.element_trace.pop();
            }
        };
        this.execs.push(func);
    }
};

/*global CSL: true */

CSL.Util.padding = function (num) {
    var m = num.match(/\s*(-{0,1}[0-9]+)/);
    if (m) {
        num = parseInt(m[1], 10);
        if (num < 0) {
            num = 99999999999999999999 + num;
        }
        num = "" + num;
        while (num.length < 20) {
            num = "0" + num;
        }
    }
    return num;
};

CSL.Util.LongOrdinalizer = function () {};

CSL.Util.LongOrdinalizer.prototype.init = function (state) {
    this.state = state;
};

CSL.Util.LongOrdinalizer.prototype.format = function (num, gender) {
    if (num < 10) {
        num = "0" + num;
    }
    // Argument true means "loose".
    var ret = CSL.Engine.getField(
        CSL.LOOSE, 
        this.state.locale[this.state.opt.lang].terms,
        "long-ordinal-" + num,
        "long", 
        0, 
        gender
    );
    if (!ret) {
        ret = this.state.fun.ordinalizer.format(num, gender);
    }
    // Probably too optimistic -- what if only renders in _sort?
    this.state.tmp.cite_renders_content = true;
    return ret;
};


CSL.Util.Ordinalizer = function (state) {
    this.state = state;
    this.suffixes = {};
};

CSL.Util.Ordinalizer.prototype.init = function () {
    if (!this.suffixes[this.state.opt.lang]) {
        this.suffixes[this.state.opt.lang] = {};
        for (var i = 0, ilen = 3; i < ilen; i += 1) {
            var gender = [undefined, "masculine", "feminine"][i];
            this.suffixes[this.state.opt.lang][gender] = [];
            for (var j = 1; j < 5; j += 1) {
                var ordinal = this.state.getTerm("ordinal-0" + j, "long", false, gender);
                if ("undefined" === typeof ordinal) {
                    delete this.suffixes[this.state.opt.lang][gender];
                    break;
                }
                this.suffixes[this.state.opt.lang][gender].push(ordinal);
            }
        }
    }
};

CSL.Util.Ordinalizer.prototype.format = function (num, gender) {
    var str;
    num = parseInt(num, 10);
    str = "" + num;
    var suffix = "";
    var trygenders = [];
    if (gender) {
        trygenders.push(gender);
    }
    trygenders.push("neuter");
    if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
        suffix = this.state.getTerm("ordinal",false,0,gender);
        var trygender;
        for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
            trygender = trygenders[i];
            var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
            if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender],false,0,gender);
            } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender],false,0,gender);
            } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender],false,0,gender);
            }
            if (suffix) {
                break;
            }
        }
    } else {
        if (!gender) {
            // XXX hack to prevent crash on CSL 1.0 styles.
            // Reported by Carles.
            gender = undefined;
        }
        this.state.fun.ordinalizer.init();
        if ((num / 10) % 10 === 1 || (num > 10 && num < 20)) {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
        } else if (num % 10 === 1 && num % 100 !== 11) {
            suffix = this.suffixes[this.state.opt.lang][gender][0];
        } else if (num % 10 === 2 && num % 100 !== 12) {
            suffix = this.suffixes[this.state.opt.lang][gender][1];
        } else if (num % 10 === 3 && num % 100 !== 13) {
            suffix = this.suffixes[this.state.opt.lang][gender][2];
        } else {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
        }
    }
    str = str += suffix;
    return str;
};

CSL.Util.Romanizer = function () {};

CSL.Util.Romanizer.prototype.format = function (num) {
    var ret, pos, n, numstr, len;
    ret = "";
    if (num < 6000) {
        numstr = num.toString().split("");
        numstr.reverse();
        pos = 0;
        n = 0;
        len = numstr.length;
        for (pos = 0; pos < len; pos += 1) {
            n = parseInt(numstr[pos], 10);
            ret = CSL.ROMAN_NUMERALS[pos][n] + ret;
        }
    }
    return ret;
};


/**
 * Create a suffix formed from a list of arbitrary characters of arbitrary length.
 * <p>This is a <i>lot</i> harder than it seems.</p>
 */
CSL.Util.Suffixator = function (slist) {
    if (!slist) {
        slist = CSL.SUFFIX_CHARS;
    }
    this.slist = slist.split(",");
};

/**
 * The format method.
 * <p>This method is used in generating ranges.  Every numeric
 * formatter (of which Suffixator is one) must be an instantiated
 * object with such a "format" method.</p>
 */

CSL.Util.Suffixator.prototype.format = function (N) {
    // Many thanks to Avram Lyon for this code, and good
    // riddance to the several functions that it replaces.
    var X;
    N += 1;
    var key = "";
    do {
        X = ((N % 26) === 0) ? 26 : (N % 26);
        var key = this.slist[X-1] + key;
        N = (N - X) / 26;
    } while ( N !== 0 );
    return key;
};


CSL.Engine.prototype.processNumber = function (node, ItemObject, variable) {
    //print("** processNumber() ItemObject[variable]="+ItemObject[variable]);
    var val;

    var me = this;

    var realVariable = variable;
    variable = (variable === "page-first") ? "page" : variable;

    var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
    if (this.opt.lang.slice(0, 2) !== "en") {
        fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
    }
    var symbolAnd = "\\s*&\\s*";
    var andRex = new RegExp("^" + symbolAnd+ "$");
    var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
    var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");

    // This guesses whether the symbol form is defined or not.
    // It's the best we can do, because when locales are built, all of the
    // holes are filled explictly with fallback values: the symbol form is never undefined.
    var localeAnd = this.getTerm("and");
    var localeAmpersand = this.getTerm("and", "symbol");
    if (localeAnd === localeAmpersand) {
        localeAmpersand = "&";
    }
    
    // XXXX shadow_numbers should carry an array of objects with
    // XXXX full data for each. The test of a number should be
    // XXXX a separate function, possibly supported by a splitter
    // XXXX method also used here. Keep code for each action in one place,
    // XXXX to prevent debugging from becoming a nightmare.

    // The capture pattern below would apply affixes to all sub-elements,
    // which is not what we want. Sub-elements should nest within, or
    // affixes should be edited. The latter is probably easier to handle.
    
    // values = [
    //   {
    //     label: "sec.",
    //     label-form: "plural",
    //     value: 100,
    //     styling: [object],
    //     numeric: true
    //     joiningSuffix: " & ",
    //   },
    //   {
    //     label: "sec.",
    //     label-form: "none",
    //     value: 103,
    //     styling: [object],
    //     numeric: true,
    //     joiningSuffix: ""
    //   }
    // ]
    
    function normalizeFieldValue(str) {
        str = str.trim();
        var m = str.match(/^([^ ]+)/);
        if (m && !CSL.STATUTE_SUBDIV_STRINGS[m[1]]) {
            var embeddedLabel = null;
            if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
                if (ItemObject.label) {
                    embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
                } else {
                    embeddedLabel = "p.";
                }
            } else {
                embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
            }
            if (embeddedLabel) {
                str = embeddedLabel + " " + str;
            }
        }
        return str;
    }
    

    function composeNumberInfo(origLabel, label, val, joiningSuffix, parsePosition) {
        joiningSuffix = joiningSuffix ? joiningSuffix : "";
        var info = {};

        if (!label && !CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
            label = "var:"+ variable;
        }

        if (label) {
            var m = label.match(/(\s*)([^\s]+)(\s*)/);
            if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m[2]) === -1) {
                info.gotosleepability = true;
                info.labelVisibility = true;
            } else {
                info.labelVisibility = false;
            }
            info.label = m[2];
            info.origLabel = origLabel;
            info.labelSuffix = m[3] ? m[3] : "";
            info.plural = 0;
        }
        
        var m = val.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
        //var m = val.match(/^([0-9]*[a-zA-Z]0*)([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
        if (m) {
            info.particle = m[1] ? m[1] : "";
            info.value = m[2];
        } else {
            info.particle = "";
            info.value = val;
        }
        info.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
        return info;
    }

    function fixupSubsections(elems) {
        // This catches things like p. 12a-c, recombining content to yield
        // numeric true despite the hyphen.
        for (var i=elems.length-2;i>-1;i-=2) {
            if (elems[i] === "-"
               && elems[i-1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/)
               && elems[i+1].match(/^[,a-zA-Z]+$/)) {
                elems[i-1] = elems.slice(i-1,i+2).join("");
                elems = elems.slice(0,i).concat(elems.slice(i+2));
            }
        }
        return elems;
    }

    function parseString(str, defaultLabel) {
        defaultLabel = defaultLabel ? defaultLabel : "";
        
        str = normalizeFieldValue(str);

        var jmrex, jsrex, mystr;
        if (str.indexOf("\\-") > -1) {
            jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
            jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
            var lst = str.split("\\-");
            for (var i=0,ilen=lst.length;i<ilen;i++) {
                lst[i] = lst[i].replace(/\-/g, "\u2013");
            }
            mystr = lst.join("\\-");
            mystr = mystr.replace(/\\/g, "");
        } else {
            jmrex = joinerMatchRex;
            jsrex = joinerSplitRex;
            mystr = str;
        }
        // jmrex = joinerMatchRex;
        // jsrex = joinerSplitRex;
        
        // Split chunks and collate delimiters.
        var elems = [];
        var m = mystr.match(jmrex);
        if (m) {
            var lst = mystr.split(jsrex);
            for (var i=0, ilen=m.length; i<ilen; i++) {
                if (m[i].match(andRex)) {
                    if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                        m[i] = localeAmpersand;
                    } else {
                        m[i] = " " + localeAmpersand + " ";
                    }
                }
            }
            var recombine = false;
            for (var i in lst) {
                if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
                    //recombine = true;
                    break;
                }
            }
            if (recombine) {
                elems = [mystr];
            } else {
                for (var i=0,ilen=lst.length-1; i<ilen; i++) {
                    elems.push(lst[i]);
                    elems.push(m[i]);
                }
                elems.push(lst[lst.length-1]);
                //print("ELEMS: "+elems);
                elems = fixupSubsections(elems);
                //print("  fixup: "+elems);
            }
        } else {
            var elems = [mystr];
        }
        // Split elements within each chunk build list of value objects.
        var values = [];
        var label = defaultLabel;
        var origLabel = "";
        for (var i=0,ilen=elems.length;i<ilen;i += 2) {
            
            // AHA! HERE'S THE CULPRIT!!!
            // Words up to four characters are treated as honorary short-form labels.
            // Some valid labels are longer than four chars, so we stir those in explicitly
            
            var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
            if (m) {
                var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
                // Head off disaster by merging parsed labels on non-numeric values into content
                for (var j=lst.length-1;j>0;j--) {
                    if (lst[j-1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j-1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                        lst[j-1] = lst[j-1] + m[j-1] + lst[j];
                        lst = lst.slice(0,j).concat(lst.slice(j+1));
                        m = m.slice(0,j-1).concat(m.slice(j));
                    }
                }
                // merge bad leading label into content
                if (m.length > 0) {
                    var slug = m[0].trim();
                    var notAlabel = !CSL.STATUTE_SUBDIV_STRINGS[slug]
                        || "undefined" === typeof me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[slug])
                        || (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL.STATUTE_SUBDIV_STRINGS[slug] !== variable);
                    if (notAlabel) {
                        if (i === 0) {
                            m = m.slice(1);
                            lst[0] = lst[0] + " " + slug + " " + lst[1];
                            lst = lst.slice(0,1).concat(lst.slice(2));
                        }
                    } else {
                        origLabel = slug;
                    }
                }

                for (var j=0,jlen=lst.length; j<jlen; j++) {
                    if (lst[j] || j === (lst.length-1)) {
                        var filteredOrigLabel;
                        label = m[j-1] ? m[j-1] : label;
                        if (origLabel === label.trim()) {
                            filteredOrigLabel = "";
                        } else {
                            filteredOrigLabel = origLabel;
                        }
                        //var origLabel = j > 1 ? m[j-1] : "";
                        mystr = lst[j] ? lst[j].trim() : "";
                        if (j === (lst.length-1)) {
                            values.push(composeNumberInfo(filteredOrigLabel, label, mystr, elems[i+1], i));
                        } else {
                            values.push(composeNumberInfo(filteredOrigLabel, label, mystr, null, i));
                        }
                    }
                }
            } else {
                var filteredOrigLabel;
                if (origLabel === label.trim()) {
                    filteredOrigLabel = "";
                } else {
                    filteredOrigLabel = origLabel;
                }
                values.push(composeNumberInfo(filteredOrigLabel, label, elems[i], elems[i+1]));
            }
        }
        return values;
    }

    function setSpaces(values) {
        // Add space joins (is this really right?)
        for (var i=0,ilen=values.length-1;i<ilen;i++) {
            if (!values[i].joiningSuffix && values[i+1].label) {
                values[i].joiningSuffix = " ";
            }
        }
    }

    function fixNumericAndCount(values, i, currentLabelInfo) {
        var master = values[currentLabelInfo.pos];
        var val = values[i].value;
        var isEscapedHyphen = master.joiningSuffix === "\\-";
        if (val.particle && val.particle !== master.particle) {
            currentLabelInfo.collapsible = false;
        }
        var mVal = val.match(/^[0-9]+([-,:a-zA-Z]*)$/);
        var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
        if (!val || !mVal || !mCurrentLabel || isEscapedHyphen) {
            currentLabelInfo.collapsible = false;
            if (!val || !mCurrentLabel) {
                currentLabelInfo.numeric = false;
            }
            if (isEscapedHyphen) {
                currentLabelInfo.count--;
            }
        }
        if ((mVal && mVal[1]) || (mCurrentLabel && mCurrentLabel[1])) {
            currentLabelInfo.collapsible = false;
        }
        if (undefined === values[i].collapsible) {
            for (var j=i,jlen=i+currentLabelInfo.count;j<jlen;j++) {
                if (isNaN(parseInt(values[j].value)) && !values[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
                    values[j].collapsible = false;
                } else {
                    values[j].collapsible = true;
                }
            }
            currentLabelInfo.collapsible = values[i].collapsible;
        }
        var isCollapsible = currentLabelInfo.collapsible;
        for (var j=currentLabelInfo.pos,jlen=(currentLabelInfo.pos + currentLabelInfo.count); j<jlen; j++) {
            if (currentLabelInfo.count > 1 && isCollapsible) {
                values[j].plural = 1;
            }
            values[j].numeric = currentLabelInfo.numeric;
            values[j].collapsible = currentLabelInfo.collapsible;
        }
    }

    function fixLabelVisibility(values, groupStartPos, currentLabelInfo) {
        if (currentLabelInfo.label.slice(0, 4) !== "var:") {
            if (currentLabelInfo.pos === 0) {
                if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
                    // Actually, shouldn't we do this always?
                    if ("undefined" === typeof me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label])) {
                        values[currentLabelInfo.pos].labelVisibility = true;
                    }
                }
                // If there is an explicit
                // label embedded at the start of a field that
                // does not match the context, it should be
                // marked for rendering.
                if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
                    if (CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                        values[0].labelVisibility = true;
                    }
                }
            } else {
                // Also, mark initial mid-field labels for
                // rendering.
                //if (values[i-1].label !== values[i].label && currentLabelInfo.label.slice(0, 4) !== "var:") {
                values[currentLabelInfo.pos].labelVisibility = true;
                //}
            }
        }
    }
    
    function setPluralsAndNumerics(values) {
        if (values.length === 0) {
            return;
        }
        var groupStartPos = 0;
        var groupCount = 1;
        
        for (var i=1,ilen=values.length;i<ilen;i++) {
            var lastVal = values[i-1];
            var thisVal = values[i];
            if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
                groupCount++;
            } else {
                var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));
                currentLabelInfo.pos = groupStartPos;
                currentLabelInfo.count = groupCount;
                currentLabelInfo.numeric = true;
                fixNumericAndCount(values, groupStartPos, currentLabelInfo);
                if (lastVal.label !== thisVal.label) {
                    fixLabelVisibility(values, groupStartPos, currentLabelInfo);
                }
                groupStartPos = i;
                groupCount = 1;
            }
        }
        // Not sure why this repetition is necessary?
        var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));
        currentLabelInfo.pos = groupStartPos;
        currentLabelInfo.count = groupCount;
        currentLabelInfo.numeric = true;
        fixNumericAndCount(values, groupStartPos, currentLabelInfo);
        fixLabelVisibility(values, groupStartPos, currentLabelInfo);
        if (values.length && values[0].numeric && variable.slice(0, 10) === "number-of-") {
            if (parseInt(ItemObject[realVariable], 10) > 1) {
                values[0].plural = 1;
            }
        }
    }        

    function stripHyphenBackslash(joiningSuffix) {
        return joiningSuffix.replace("\\-", "-");
    }

    function setStyling(values) {
        var masterNode = CSL.Util.cloneToken(node);
        var masterStyling = new CSL.Token();
        if (!me.tmp.just_looking) {
            // Per discussion @ https://discourse.citationstyles.org/t/formatting-attributes-and-hyphen/1518
            masterStyling.decorations = masterNode.decorations;
            masterNode.decorations = [];
            //for (var j=masterNode.decorations.length-1;j>-1;j--) {
            //    if (masterNode.decorations[j][0] === "@quotes") {
            //        // Add to styling
            //        masterStyling.decorations = masterStyling.decorations.concat(masterNode.decorations.slice(j, j+1));
            //        // Remove from node
            //        masterNode.decorations = masterNode.decorations.slice(0, j).concat(masterNode.decorations.slice(j+1));
            //    }
            //}
            masterStyling.strings.prefix = masterNode.strings.prefix;
            masterNode.strings.prefix = "";
            masterStyling.strings.suffix = masterNode.strings.suffix;
            masterNode.strings.suffix = "";
        }
        var masterLabel = values.length ? values[0].label : null;
        if (values.length) {
            for (var i=0,ilen=values.length; i<ilen; i++) {
                var val = values[i];
                // Clone node, make styling parameters on each instance sane.
                var newnode = CSL.Util.cloneToken(masterNode);
                newnode.gender = node.gender;
                if (masterLabel === val.label) {
                    newnode.formatter = node.formatter;
                }
                if (val.numeric) {
                    newnode.successor_prefix = val.successor_prefix;
                }
                newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val.joiningSuffix);
                val.styling = newnode;
            }
            if (!me.tmp.just_looking) {
                if (values[0].value.slice(0,1) === "\"" && values[values.length-1].value.slice(-1) === "\"") {
                    values[0].value = values[0].value.slice(1);
                    values[values.length-1].value = values[values.length-1].value.slice(0,-1);
                    masterStyling.decorations.push(["@quotes", true]);
                }
            }
        }
        return masterStyling;
    }

    function checkTerm(variable, val) {
        var ret = true;
        if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
            var label;
            if (val.origLabel) {
                label = val.origLabel;
            } else {
                label = val.label;
            }
            ret = !!me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[label]);
        }
        return ret;
    }

    function checkPage(variable, val) {
        return "page" === variable
            || (["locator", "locator-extra"].indexOf(variable) > -1 && (["p."].indexOf(val.label) > -1 || ["p."].indexOf(val.origLabel) > -1));
    }
    
    function fixupRangeDelimiter(variable, val, rangeDelimiter, isNumeric) {
        var isPage = checkPage(variable, val);
        var hasTerm = checkTerm(variable, val);
        if (hasTerm && rangeDelimiter === "-") {
            if (isNumeric) {
                if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable) > -1) {
                    rangeDelimiter = me.getTerm("page-range-delimiter");
                    if (!rangeDelimiter) {
                        rangeDelimiter = "\u2013";
                    }
                }
                if (variable === "collection-number") {
                    rangeDelimiter = me.getTerm("year-range-delimiter");
                    if (!rangeDelimiter) {
                        rangeDelimiter = "\u2013";
                    }
                }
            }
        }
        //if (rangeDelimiter === "\\-") {
        //    rangeDelimiter = "-";
        //}
        return rangeDelimiter;
    }

    function manglePageNumbers(values, i, currentInfo) {
        if (i<1) {
            return;
        }
        if (currentInfo.count !== 2) {
            return;
        }
        if (values[i-1].particle !== values[i].particle) {
            return;
        }
        if (values[i-1].joiningSuffix !== "-") {
            currentInfo.count = 1;
            return;
        }
        if (!me.opt["page-range-format"] && (parseInt(values[i-1].value, 10) > parseInt(values[i].value, 10))) {
            values[i-1].joiningSuffix = fixupRangeDelimiter(variable, values[i], values[i-1].joiningSuffix, true);
            return;
        }
        var val = values[i];

        var isPage = checkPage(variable, val);
        var str;
        if (isPage && !isNaN(parseInt(values[i-1].value)) && !isNaN(parseInt(values[i].value))) {
            str = values[i-1].particle + values[i-1].value + " - " + values[i].particle + values[i].value;
            str = me.fun.page_mangler(str);
        } else {
            // if (("" + values[i-1].value).match(/[0-9]$/) && ("" + values[i].value).match(/^[0-9]/)) {
            if (("" + values[i-1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
                values[i-1].joiningSuffix = me.getTerm("page-range-delimiter");
            }
            str = values[i-1].value + stripHyphenBackslash(values[i-1].joiningSuffix) + values[i].value;
        }
        var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
        // var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
        if (m) {
            var rangeDelimiter = m[3];
            rangeDelimiter = fixupRangeDelimiter(variable, val, rangeDelimiter, values[i].numeric);
            values[i-1].particle = m[1];
            values[i-1].value = m[2];
            values[i-1].joiningSuffix = rangeDelimiter;
            values[i].particle = m[4];
            values[i].value = m[5];
        }
        currentInfo.count = 0;
    }
    
    function fixRanges(values) {

        if (!node) {
            return;
        }
        if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
            return;
        }

        var currentInfo = {
            count: 0,
            label: null,
            lastHadRangeDelimiter: false
        };

        for (var i=0,ilen=values.length; i<ilen; i++) {
            var val = values[i];
            if (!val.collapsible) {
                currentInfo.count = 0;
                currentInfo.label = null;
                var isNumeric = val.numeric;
                val.joiningSuffix = fixupRangeDelimiter(variable, val, val.joiningSuffix, isNumeric);
            } else if (currentInfo.label === val.label && val.joiningSuffix === "-") {
                // So if there is a hyphen here, and none previous, reset to 1
                currentInfo.count = 1;
            } else if (currentInfo.label === val.label && val.joiningSuffix !== "-") {
                // If there is NO hyphen here, count up
                currentInfo.count++;
                if (currentInfo.count === 2) {
                    manglePageNumbers(values, i, currentInfo);
                }
            } else if (currentInfo.label !== val.label) {
                // If the label doesn't match and count is 2, process
                currentInfo.label = val.label;
                currentInfo.count = 1;
            } else {
                // Safety belt: label doesn't match and count is some other value, so reset to 1
                // This never happens, though.
                currentInfo.count = 1;
                currentInfo.label = val.label;
            }
        }
        // Finally clear, if needed
        if (currentInfo.count === 2) {
            manglePageNumbers(values, values.length-1, currentInfo);
        }
    }

    function setVariableParams(shadow_numbers, realVariable, values) {
        var obj = shadow_numbers[realVariable];
        if (values.length) {
            obj.numeric = values[0].numeric;
            obj.collapsible = values[0].collapsible;
            obj.plural = values[0].plural;
            obj.label = CSL.STATUTE_SUBDIV_STRINGS[values[0].label];
            if (variable === "number" && obj.label === "issue" && me.getTerm("number")) {
                obj.label = "number";
            }
        }
    }

    // Split out the labels and values.

    // short-circuit if object exists: if numeric, set styling, no other action
    if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
        var values = this.tmp.shadow_numbers[realVariable].values;
        fixRanges(values);
        //if (!this.tmp.shadow_numbers[variable].masterStyling && !this.tmp.just_looking) {
            this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
        //}
        return;
    }

    // info.styling = node;

    // This carries value, pluralization and numeric info for use in other contexts.
    // XXX We used to use one set of params for the entire variable value.
    // XXX Now params are set on individual objects, of which there may be several after parsing.
    if (!this.tmp.shadow_numbers[realVariable]) {
        this.tmp.shadow_numbers[realVariable] = {
            values:[]
        };
    }
    //this.tmp.shadow_numbers[variable].values = [];
    //this.tmp.shadow_numbers[variable].plural = 0;
    //this.tmp.shadow_numbers[variable].numeric = false;
    //this.tmp.shadow_numbers[variable].label = false;

    if (!ItemObject) {
        return;
    }

    // Possibly apply multilingual transform
    var languageRole = CSL.LangPrefsMap[variable];
    if (languageRole) {
        var localeType = this.opt["cite-lang-prefs"][languageRole][0];
        val = this.transform.getTextSubField(ItemObject, realVariable, "locale-"+localeType, true);
        val = val.name;
    } else {
        val = ItemObject[realVariable];
    }

    // XXX HOLDING THIS
    // Apply short form ONLY if first element tests is-numeric=false
    if (val && this.sys.getAbbreviation) {
        // RefMe bug report: print("XX D'oh! (3): "+num);
        // true as the fourth argument suppresses update of the UI

        // No need for this.
        //val = ("" + val).replace(/^\"/, "").replace(/\"$/, "");
        if (this.sys.normalizeAbbrevsKey) {
            var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
        } else {
            var normval = val;
        }
        var jurisdiction = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
        if (this.transform.abbrevs[jurisdiction].number) {
            if (this.transform.abbrevs[jurisdiction].number[normval]) {
                val = this.transform.abbrevs[jurisdiction].number[normval];
            } else {
                
                // *** This is terrible ***
                
                // Strings rendered via cs:number should not be added to the abbreviations
                // UI unless they test non-numeric. The test happens below.
                if ("undefined" !== typeof this.transform.abbrevs[jurisdiction].number[normval]) {
                    delete this.transform.abbrevs[jurisdiction].number[normval];
                }
            }
        }
    }

    //   {
    //     label: "sec.",
    //     labelForm: "plural",
    //     labelVisibility: true,
    //     value: 100,
    //     styling: [object],
    //     numeric: true
    //     joiningSuffix: " & ",
    //   },

    // Process only if there is a value.
    if ("undefined" !== typeof val && ("string" === typeof val || "number" === typeof val)) {
        if ("number" === typeof val) {
            val = "" + val;
        }
        var defaultLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];

        if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
            // XXX
            var values = parseString(val, defaultLabel);

            setSpaces(values);
            //print("setSpaces(): "+JSON.stringify(values, null, 2));

            setPluralsAndNumerics(values);
            //print("setPluralsAndNumerics(): "+JSON.stringify(values, null, 2));

            for (var obj of values) {
                if (!obj.numeric) obj.plural = 0;
            }
            this.tmp.shadow_numbers[realVariable].values = values;
            // me.sys.print(JSON.stringify(values))

            if (node) {
                fixRanges(values);
                
                this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
                // me.sys.print("setStyling(): "+JSON.stringify(values, null, 2));
            }
            setVariableParams(this.tmp.shadow_numbers, realVariable, values);
        }
        
        // hack in support for non-numeric numerics like "91 Civ. 5442 (RPP)|91 Civ. 5471"
        var info = this.tmp.shadow_numbers[realVariable];
        if (variable === "number") {
            if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
                info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
                info.values[0].numeric = true;
                info.values[0].plural = 1;
                info.values[0].collapsible = false;
                info.numeric = true;
                info.plural = 1;
                info.collapsible = false;
            }
        }
        if (info.values.length === 1) {
            if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
                info.values[0].numeric = true;
                info.values[0].plural = 0;
                info.values[0].collapsible = false;
                info.numeric = true;
                info.plural = 0;
                info.collapsible = false;
            }
        }
        if (variable === "page") {
            if (info.values.length > 0) {
                if (info.values[0].gotosleepability) {
                    info.labelForm = "short";
                }
            }
        }
        //this.sys.print("OK "+JSON.stringify(values, ["label", "origLabel", "labelSuffix", "particle", "collapsible", "value", "numeric", "joiningSuffix", "labelVisibility", "plural"], 2));
    }
};

CSL.Util.outputNumericField = function(state, varname, itemID) {

    state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
    var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
    var nums = state.tmp.shadow_numbers[varname].values;
    var masterLabel = nums.length ? nums[0].label : null;
    var labelForm = state.tmp.shadow_numbers[varname].labelForm;
    var tryStatic = state.tmp.group_context.tip.label_static;
    var embeddedLabelForm;
    if (labelForm) {
        embeddedLabelForm = labelForm;
    } else {
        embeddedLabelForm = "short";
        //labelForm = "short";
    }
    var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
    var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
    var lastLabelName = null;

    for (var i=0,ilen=nums.length;i<ilen;i++) {
        var num = nums[i];
        var label = "";
        var labelName;
        if (num.label) {
            if ('var:' === num.label.slice(0,4)) {
                labelName = num.label.slice(4);
            } else {
                labelName = CSL.STATUTE_SUBDIV_STRINGS[num.label];
            }
            if (labelName) {
                // Simplify this some day.
                if (num.label === masterLabel) {
                    if (tryStatic) {
                        label = state.getTerm(labelName, "static", num.plural);
                        if (label.indexOf("%s") === -1) {
                            label = "";
                        }
                    }
                    if (!label) {
                        label = state.getTerm(labelName, labelForm, num.plural);
                    }
                } else {
                    if (tryStatic) {
                        label = state.getTerm(labelName, "static", num.plural);
                        if (label.indexOf("%s") === -1) {
                            label = "";
                        }
                    }
                    if (!label) {
                        label = state.getTerm(labelName, embeddedLabelForm, num.plural);
                    }
                }
                if (labelCapitalizeIfFirst) {
                    label = CSL.Output.Formatters["capitalize-first"](state, label);
                }
            }
        }
        var labelPlaceholderPos = -1;
        if (label) {
            labelPlaceholderPos = label.indexOf("%s");
        }
        var numStyling = CSL.Util.cloneToken(num.styling);
        numStyling.formatter = num.styling.formatter;
        numStyling.type = num.styling.type;
        numStyling.num = num.styling.num;
        numStyling.gender = num.styling.gender;
        
        if (labelPlaceholderPos > 0 && labelPlaceholderPos < (label.length-2)) {
            numStyling.strings.prefix += label.slice(0,labelPlaceholderPos);
            numStyling.strings.suffix = label.slice(labelPlaceholderPos+2) + numStyling.strings.suffix;
        } else if (num.labelVisibility) {
            if (!label) {
                label = num.label;
                labelName = num.label;
            }
            if (labelPlaceholderPos > 0) {
                var prefixLabelStyling = new CSL.Token();
                prefixLabelStyling.decorations = labelDecorations;
                state.output.append(label.slice(0,labelPlaceholderPos), prefixLabelStyling);
            } else if (labelPlaceholderPos === (label.length-2) || labelPlaceholderPos === -1) {
                // And add a trailing delimiter.
                state.output.append(label+num.labelSuffix, "empty");
            }
        }
        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
        if (num.collapsible) {
            var blob;
            if (num.value.match(/^[1-9][0-9]*$/)) {
                blob = new CSL.NumericBlob(num.particle, parseInt(num.value, 10), numStyling, itemID);
            } else {
                blob = new CSL.NumericBlob(num.particle, num.value, numStyling, itemID);
            }
            if ("undefined" === typeof blob.gender) {
                blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
            }
            state.output.append(blob, "literal");
        } else {
            state.output.append(num.particle + num.value, numStyling);
        }
        if (labelPlaceholderPos === 0 && labelPlaceholderPos < (label.length-2)) {
            // Only and always if this is the last entry of this label
            if (lastLabelName === null) {
                lastLabelName = labelName;
            }
            if (labelName !== lastLabelName || i === (nums.length-1)) {
                var suffixLabelStyling = new CSL.Token();
                suffixLabelStyling.decorations = labelDecorations;
                state.output.append(label.slice(labelPlaceholderPos+2), suffixLabelStyling);
            }
        }
        lastLabelName = labelName;
        state.tmp.term_predecessor = true;
    }
    state.output.closeLevel();
};

/*global CSL: true */

CSL.Util.PageRangeMangler = {};

CSL.Util.PageRangeMangler.getFunction = function (state, rangeType) {
    var rangerex, pos, len, stringify, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;
    
    var range_delimiter = state.getTerm(rangeType + "-range-delimiter");

    rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;

    stringify = function (lst) {
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
            if ("object" === typeof lst[pos]) {
                lst[pos] = lst[pos].join("");
            }
        }
        var ret = lst.join("");
        ret = ret.replace(/([^\\])\-/g, "$1"+state.getTerm(rangeType + "-range-delimiter"));
        return ret;
    };

    listify = function (str) {
        var m, lst, ret;
        // Normalized delimiter form, for use in regexps
        var hyphens = "\\s+\\-\\s+";
        // Normalize delimiters to hyphen wrapped in single spaces
        var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
        var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
        str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
        // Workaround for Internet Explorer
        //var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+)?[0-9]+" + hyphens + "(?:[0-9]*[a-zA-Z]+)?[0-9]+)", "g");
        //var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+)?[0-9]+" + hyphens + "(?:[0-9]*[a-zA-Z]+)?[0-9]+");
        var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
        var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
        m = str.match(rexm);
        lst = str.split(rexlst);
        if (lst.length === 0) {
            ret = m;
        } else {
            ret = [lst[0]];
            for (pos = 1, len = lst.length; pos < len; pos += 1) {
                ret.push(m[pos - 1].replace(/\s*\-\s*/g, "-"));
                ret.push(lst[pos]);
            }
        }
        return ret;
    };

    expand = function (str) {
        str = "" + str;
        lst = listify(str);
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
            m = lst[pos].match(rangerex);
            if (m) {
                if (!m[3] || m[1] === m[3]) {
                    if (m[4].length < m[2].length) {
                        m[4] = m[2].slice(0, (m[2].length - m[4].length)) + m[4];
                    }
                    if (parseInt(m[2], 10) < parseInt(m[4], 10)) {
                        m[3] = range_delimiter + (m[1] ? m[1] : "");
                        lst[pos] = m.slice(1);
                    }
                }
            }
            if ("string" === typeof lst[pos]) {
                lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
            }
        }
        return lst;
    };

    minimize = function (lst, minchars, isyear) {
        len = lst.length;
        for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
            if ("object" === typeof lst[i]) {
                lst[i][3] = minimize_internal(lst[i][1], lst[i][3], minchars, isyear);
                if (lst[i][2].slice(1) === lst[i][0]) {
                    lst[i][2] = range_delimiter;
                }
            }
        }
        return stringify(lst);
    };

    minimize_internal = function (begin, end, minchars, isyear) {
        if (!minchars) {
            minchars = 0;
        }
        b = ("" + begin).split("");
        e = ("" + end).split("");
        ret = e.slice();
        ret.reverse();
        if (b.length === e.length) {
            for (var i = 0, ilen = b.length; i < ilen; i += 1) {
                if (b[i] === e[i] && ret.length > minchars) {
                    ret.pop();
                } else {
                    if (minchars && isyear && ret.length === 3) {
                        var front = b.slice(0, i);
                        front.reverse();
                        ret = ret.concat(front);
                    }
                    break;
                }
            }
        }
        ret.reverse();
        return ret.join("");
    };

    chicago = function (lst) {
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
            if ("object" === typeof lst[pos]) {
                m = lst[pos];
                begin = parseInt(m[1], 10);
                end = parseInt(m[3], 10);
                if (begin > 100 && begin % 100 && parseInt((begin / 100), 10) === parseInt((end / 100), 10)) {
                    m[3] = "" + (end % 100);
                } else if (begin >= 10000) {
                    m[3] = "" + (end % 1000);
                }
            }
            if (m[2].slice(1) === m[0]) {
                m[2] = range_delimiter;
            }
        }
        return stringify(lst);
    };

    //
    // The top-level option handlers.
    //
    var sniff = function (str, func, minchars, isyear) {
        var ret;
		str = "" + str;
		var lst = expand(str);
        var ret = func(lst, minchars, isyear);
        return ret;
    };
    if (!state.opt[rangeType + "-range-format"]) {
        ret_func = function (str) {
            //return str.replace("-", "\u2013", "g");
            return sniff(str, stringify);
        };
    } else if (state.opt[rangeType + "-range-format"] === "expanded") {
        ret_func = function (str) {
            return sniff(str, stringify);
        };
    } else if (state.opt[rangeType + "-range-format"] === "minimal") {
        ret_func = function (str) {
            return sniff(str, minimize);
        };
    } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
        ret_func = function (str, isyear) {
            return sniff(str, minimize, 2, isyear);
        };
    } else if (state.opt[rangeType + "-range-format"] === "chicago") {
        ret_func = function (str) {
            return sniff(str, chicago);
        };
    }

    return ret_func;
};


/*global CSL: true */

// Use a state machine

// Okay, good!
// Needs some tweaks:
// 1. First pass: quotes only
//    Special: Convert all sandwiched single-quote markup to apostrophe
// 2. Second pass: tags

CSL.Util.FlipFlopper = function(state) {
    
    /**
     * INTERNAL
     */

    var _nestingState = [];

    var _nestingData = {
        "<span class=\"nocase\">": {
            type: "nocase",
            opener: "<span class=\"nocase\">",
            closer: "</span>",
            attr: null,
            outer: null,
            flipflop: null
        },
        "<span class=\"nodecor\">": {
            type: "nodecor",
            opener: "<span class=\"nodecor\">",
            closer: "</span>",
            attr: "@class",
            outer: "nodecor",
            flipflop: {
                "nodecor": "nodecor"
            }
        },
        "<span style=\"font-variant:small-caps;\">": {
            type: "tag",
            opener: "<span style=\"font-variant:small-caps;\">",
            closer: "</span>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
                "small-caps": "normal",
                "normal": "small-caps"
            }
        },
        "<sc>": {
            type: "tag",
            opener: "<sc>",
            closer: "</sc>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
                "small-caps": "normal",
                "normal": "small-caps"
            }
        },
        "<i>": {
            type: "tag",
            opener: "<i>",
            closer: "</i>",
            attr: "@font-style",
            outer: "italic",
            flipflop: {
                "italic": "normal",
                "normal": "italic"
            }
        },
        "<b>": {
            type: "tag",
            opener: "<b>",
            closer: "</b>",
            attr: "@font-weight",
            outer: "bold",
            flipflop: {
                "bold": "normal",
                "normal": "bold"
            }
        },
        "<sup>": {
            type: "tag",
            opener: "<sup>",
            closer: "</sup>",
            attr: "@vertical-align",
            outer: "sup",
            flipflop: {
                "sub": "sup",
                "sup": "sup"
            }
        },
        "<sub>": {
            type: "tag",
            opener: "<sub>",
            closer: "</sub>",
            attr: "@vertical-align",
            outer: "sub",
            flipflop: {
                "sup": "sub",
                "sub": "sub"
            }
        },
        " \"": {
            type: "quote",
            opener: " \"",
            closer: "\"",
            attr: "@quotes",
            outer: "true",
            flipflop: {
                "true": "inner",
                "inner": "true",
                "false": "true"
            }
        },
        " \'": {
            type: "quote",
            opener: " \'",
            closer: "\'",
            attr: "@quotes",
            outer: "inner",
            flipflop: {
                "true": "inner",
                "inner": "true",
                "false": "true"
            }
        }
    };

    _nestingData["(\""] = _nestingData[" \""];
    _nestingData["(\'"] = _nestingData[" \'"];

    var localeOpenQuote = state.getTerm("open-quote");
    var localeCloseQuote = state.getTerm("close-quote");
    var localeOpenInnerQuote = state.getTerm("open-inner-quote");
    var localeCloseInnerQuote = state.getTerm("close-inner-quote");

    // If locale uses straight quotes, do not register them. All will be well.
    // Otherwise, clone straight-quote data, and adjust.
    if (localeOpenQuote && localeCloseQuote && [" \""," \'","\"","\'"].indexOf(localeOpenQuote) === -1) {
        _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[" \""]));
        _nestingData[localeOpenQuote].opener = localeOpenQuote;
        _nestingData[localeOpenQuote].closer = localeCloseQuote;
    }
    
    if (localeOpenInnerQuote && localeCloseInnerQuote && [" \""," \'","\"","\'"].indexOf(localeOpenInnerQuote) === -1) {
        _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" \'"]));
        _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
        _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
    }
    
    function _setOuterQuoteForm(quot) {
        var flip = {
            " \'": " \"",
            " \"": " \'",
            "(\"": "(\'",
            "(\'": "(\""
        };
        _nestingData[quot].outer = "true";
        _nestingData[flip[quot]].outer = "inner";
    }
    
    function _getNestingOpenerParams(opener) {
        var openers = [];
        var keys = Object.keys(_nestingData);
        for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
                openers.push(key);
            }
        }
        var ret = _nestingData[opener];
        ret.opener = new RegExp("^(?:" + openers.map(function(str){
            return str.replace("(", "\\(");
        }).join("|") + ")");
        return ret;
    }

    var _nestingParams = (function() {
        var ret = {};
        var keys = Object.keys(_nestingData);
        for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            ret[key] = _getNestingOpenerParams(key);
        }
        return ret;
    }());

    var _tagRex = (function() {
        var openers = [];
        var closers = [];
        var vals = {};
        for (var opener in _nestingParams) {
            openers.push(opener);
            vals[_nestingParams[opener].closer] = true;
        }
        var keys = Object.keys(vals);
        for (var i = 0, l = keys.length; i < l; i++) {
            var closer = keys[i];
            closers.push(closer);
        }

        var all = openers.concat(closers).map(function(str){
            return str.replace("(", "\\(");
        }).join("|");

        return {
            matchAll: new RegExp("((?:" + all + "))", "g"),
            splitAll: new RegExp("(?:" + all + ")", "g"),
            open: new RegExp("(^(?:" + openers.map(function(str){
                return str.replace("(", "\\(");
            }).join("|") + ")$)"),
            close: new RegExp("(^(?:" + closers.join("|") + ")$)"),
        };
    }());

    function _tryOpen(tag, pos) {
        var params = _nestingState[_nestingState.length - 1];
        if (!params || tag.match(params.opener)) {
            _nestingState.push({
                type: _nestingParams[tag].type,
                opener: _nestingParams[tag].opener,
                closer: _nestingParams[tag].closer,
                pos: pos
            });
            return false;
        } else {
            _nestingState.pop();
            _nestingState.push({
                type: _nestingParams[tag].type,
                opener: _nestingParams[tag].opener,
                closer: _nestingParams[tag].closer,
                pos: pos
            });
            return {
                fixtag: params.pos
            };
        }
    }
    
    function _tryClose(tag, pos) {
        var params = _nestingState[_nestingState.length - 1];
        if (params && tag === params.closer) {
            _nestingState.pop();
            if (params.type === "nocase") {
                return {
                    nocase: {
                        open: params.pos,
                        close: pos
                    }
                };
            } else {
                return false;
            }
        } else {
            if (params) {
                return {
                    fixtag: params.pos
                };
            } else {
                return {
                    fixtag: pos
                };
            }
        }
    }
    
    function _pushNestingState(tag, pos) {
        if (tag.match(_tagRex.open)) {
            return _tryOpen(tag, pos);
        } else {
            return _tryClose(tag, pos);
        }
    }
    
    function _doppelString(str) {
        var forcedSpaces = [];
        // Normalize markup
        str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, "$1 $2$3;\"$4");
        str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");

        var match = str.match(_tagRex.matchAll);
        if (!match) {
            return {
                tags: [],
                strings: [str],
                forcedSpaces: []
            };
        }
        var split = str.split(_tagRex.splitAll);

        for (var i=0,ilen=match.length-1;i<ilen;i++) {
            if (_nestingData[match[i]]) {
                if (split[i+1] === "" && ["\"", "'"].indexOf(match[i+1]) > -1) {
                    match[i+1] = " " + match[i+1];
                    forcedSpaces.push(true);
                } else {
                    forcedSpaces.push(false);
                }
            }
        }
        return {
            tags: match,
            strings: split,
            forcedSpaces: forcedSpaces
        };
    }

    var TagReg = function(blob) {
        var _stack = [];
        this.set = function (tag) {
            var attr = _nestingData[tag].attr;
            var decor = null;
            for (var i=_stack.length-1;i>-1;i--) {
                var _decor = _stack[i];
                if (_decor[0] === attr) {
                    decor = _decor;
                    break;
                }
            }
            if (!decor) {
                var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
                outer:
                for (var i=allTheDecor.length-1;i>-1;i--) {
                    var decorset = allTheDecor[i];
                    if (!decorset) {
                        continue;
                    }
                    for (var j=decorset.length-1;j>-1;j--) {
                        var _decor = decorset[j];
                        if (_decor[0] === attr) {
                            decor = _decor;
                            break outer;
                        }
                    }
                }
            }
            if (!decor) {
                decor = [attr, _nestingData[tag].outer];
            } else {
                decor = [attr, _nestingData[tag].flipflop[decor[1]]];
            }
            _stack.push(decor);
        };
        this.pair = function () {
            return _stack[_stack.length-1];
        };
        this.pop = function () {
            _stack.pop();
        };
    };
    
    function _apostropheForce(tag, str) {
        if (tag === "\'") {
            if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
                return "\u2019";
            }
        } else if (tag === " \'" && str && str.match(/^[\ ]/)) {
            return " \u2019";
        }
        return false;
    }

    function _undoppelToQueue(blob, doppel, leadingSpace) {
        var firstString = true;
        var tagReg = new TagReg(blob);
        blob.blobs = [];
        function Stack (blob) {
            this.stack = [blob];
            this.latest = blob;
            this.addStyling = function(str, decor) {
                if (firstString) {
                    if (str.slice(0, 1) === " ") {
                        str = str.slice(1);
                    }
                    if (str.slice(0, 1) === " ") {
                        str = str.slice(1);
                    }
                    firstString = false;
                }
                this.latest = this.stack[this.stack.length-1];
                if (decor) {
                    if ("string" === typeof this.latest.blobs) {
                        var child = new CSL.Blob();
                        child.blobs = this.latest.blobs;
                        child.alldecor = this.latest.alldecor.slice();
                        this.latest.blobs = [child];
                    }
                    var tok = new CSL.Token();
                    var newblob = new CSL.Blob(null, tok);
                    newblob.alldecor = this.latest.alldecor.slice();
                    
                    // AHA! Bad naming. There is _decorset from the list, and
                    // there WAS decorset that we are building. Dumb. Fix the
                    // names and fix it up.
                    
                    if (decor[0] === "@class" && decor[1] === "nodecor") {
                        var newdecorset = [];
                        var seen = {};
                        var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                        for (var i=allTheDecor.length-1;i>-1;i--) {
                            var _decorset = allTheDecor[i];
                            if (!_decorset) {
                                continue;
                            }
                            for (var j=_decorset.length-1;j>-1;j--) {
                                var _olddecor = _decorset[j];
                                if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1
                                    && !seen[_olddecor[0]]) {
                                    
                                    if (decor[1] !== "normal") {
                                        newblob.decorations.push([_olddecor[0], "normal"]);
                                        newdecorset.push([_olddecor[0], "normal"]);
                                    }
                                    seen[_olddecor[0]] = true;
                                }
                            }
                        }
                        newblob.alldecor.push(newdecorset);
                        
                    } else {
                        newblob.decorations.push(decor);
                        newblob.alldecor.push([decor]);
                    }
                    this.latest.blobs.push(newblob);
                    this.stack.push(newblob);
                    this.latest = newblob;
                    if (str) {
                        var tok = new CSL.Token();
                        var newblob = new CSL.Blob(null, tok);
                        newblob.blobs = str;
                        newblob.alldecor = this.latest.alldecor.slice();
                        this.latest.blobs.push(newblob);
                    }
                } else {
                    if (str) {
                        var child = new CSL.Blob();
                        child.blobs = str;
                        child.alldecor = this.latest.alldecor.slice();
                        this.latest.blobs.push(child);
                    }
                }
            };
            this.popStyling = function() {
                this.stack.pop();
            };
        }
        var stack = new Stack(blob);
        if (doppel.strings.length) {
            var str = doppel.strings[0];
            if (leadingSpace) {
                str = " " + str;
            }
            stack.addStyling(str);
        }
        for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i+1];
            if (tag.match(_tagRex.open)) {
                tagReg.set(tag);
                stack.addStyling(str, tagReg.pair());
            } else {
                tagReg.pop();
                stack.popStyling();
                stack.addStyling(str);
            }
        }
    }

    /**
     * PUBLIC
     */

    this.processTags = function (blob) {
        var str = blob.blobs;
        var leadingSpace = false;
        if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
            leadingSpace = true;
        }
        var rex = new RegExp("(" + CSL.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL.ROMANESQUE_REGEXP.source + ")", "g");
        var str = " " + str.replace(rex, "$1\'$2");
        var doppel = _doppelString(str);
        if (doppel.tags.length === 0) {
            return;
        }
        var quoteFormSeen = false;
        
    	for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i+1];
            var apostrophe = _apostropheForce(tag, str);
            if (apostrophe) {
                doppel.strings[i+1] = apostrophe + doppel.strings[i+1];
                doppel.tags[i] = "";
            } else {
                var tagInfo;
                while (true) {
                    tagInfo = _pushNestingState(tag, i);
                    if (tagInfo) {
                        if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                            if (tag.match(_tagRex.close)
                                && tag === "\'") {
                                
                                doppel.strings[i+1] = "\u2019" + doppel.strings[i+1];
                                doppel.tags[i] = "";
                            } else {
                                var failedTag = doppel.tags[tagInfo.fixtag];
                                if (doppel.forcedSpaces[tagInfo.fixtag-1]) {
                                    failedTag = failedTag.slice(1);
                                }
                                doppel.strings[tagInfo.fixtag+1] = failedTag + doppel.strings[tagInfo.fixtag+1];
                                doppel.tags[tagInfo.fixtag] = "";
                            }
                            if (_nestingState.length > 0) {
                                if (tag !== "\'") {
                                    _nestingState.pop();
                                } else {
                                    break;
                                }
                            } else {
                                break;
                            }
                        } else if (tagInfo.nocase) {
                            doppel.tags[tagInfo.nocase.open] = "";
                            doppel.tags[tagInfo.nocase.close] = "";
                            break;
                        } else {
                            break;
                        }
                    } else {
                        break;
                    }
                }
                if (tagInfo && (tagInfo.fixtag|| tagInfo.fixtag === 0)) {
                    doppel.strings[i+1] = doppel.tags[i] + doppel.strings[i+1];
                    doppel.tags[i] = "";
                }
            }
        }
        // Stray tags are neutralized here
        for (var i=_nestingState.length-1;i>-1;i--) {
            var tagPos = _nestingState[i].pos;
            var tag = doppel.tags[tagPos];
            if (tag === " \'" || tag === "\'") {

                doppel.strings[tagPos+1] = " \u2019" + doppel.strings[tagPos+1];
            } else {
                doppel.strings[tagPos+1] = doppel.tags[tagPos] + doppel.strings[tagPos+1];
            }
            doppel.tags[tagPos] = "";
            _nestingState.pop();
        }
        for (var i=doppel.tags.length-1;i>-1;i--) {
            if (!doppel.tags[i]) {
                doppel.tags = doppel.tags.slice(0,i).concat(doppel.tags.slice(i+1));
                doppel.strings[i] = doppel.strings[i] + doppel.strings[i+1];
                doppel.strings = doppel.strings.slice(0,i+1).concat(doppel.strings.slice(i+2));
            }
        }
        // Sniff initial (outer) quote form (single or double) and configure parser
        // Also add leading spaces.
        for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
            var tag = doppel.tags[i];
            var forcedSpace = doppel.forcedSpaces[i-1];
            if ([" \"", " \'", "(\"", "(\'"].indexOf(tag) > -1) {
                if (!quoteFormSeen) {
                    _setOuterQuoteForm(tag);
                    quoteFormSeen = true;
                }
                if (!forcedSpace) {
                    doppel.strings[i] += tag.slice(0, 1);
                }
            }
        }
        //print(JSON.stringify(doppel, null, 2))
        //print(_undoppelString(doppel));
        _undoppelToQueue(blob, doppel, leadingSpace);
    };
};

/*global CSL: true */

CSL.Output.Formatters = (function () {
    var rexStr = "(?:\u2018|\u2019|\u201C|\u201D| \"| \'|\"|\'|[-\u2013\u2014\/.,;?!:]|\\[|\\]|\\(|\\)|<span style=\"font-variant: small-caps;\">|<span class=\"no(?:case|decor)\">|<\/span>|<\/?(?:i|sc|b|sub|sup)>)";
    var tagDoppel = new CSL.Doppeler(rexStr, function(str) {
        return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
    });
    
    var wordDoppel = new CSL.Doppeler("(?:[\u0020\u00A0\u2000-\u200B\u205F\u3000]+)");
    
    /**
     * INTERNAL
     */

    var _tagParams = {
        "<span style=\"font-variant: small-caps;\">": "</span>",
        "<span class=\"nocase\">": "</span>",
        "<span class=\"nodecor\">": "</span>",
        "<sc>": "</sc>",
        "<sub>": "</sub>",
        "<sup>": "</sup>"
    };

    function _capitalise (word) {
        // Weird stuff is (.) transpiled with regexpu
        //   https://github.com/mathiasbynens/regexpu
        var m = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
        // Do not uppercase lone Greek letters
        // (No case transforms in Greek citations, but chars used in titles to science papers)
        if (m && !(m[2].match(/^[\u0370-\u03FF]$/) && !m[3])) {
            return m[1] + CSL.toLocaleUpperCase.call(this, m[2]) + m[3];
        }
        return word;
    }

    function _textcaseEngine(config, string) {
        if (!string) {
            return "";
        }
        config.doppel = tagDoppel.split(string);
        var quoteParams = {
            " \"": {
                opener: " \'",
                closer: "\""
            },
            " \'": {
                opener: " \"",
                closer: "\'"
            },
            "\u2018": {
                opener: "\u2018",
                closer: "\u2019"
            },
            "\u201C": {
                opener: "\u201C",
                closer: "\u201D"
            },
        };
        function tryOpen(tag, pos) {
            if (config.quoteState.length === 0 || tag === config.quoteState[config.quoteState.length - 1].opener) {
                config.quoteState.push({
                    opener: quoteParams[tag].opener,
                    closer: quoteParams[tag].closer,
                    pos: pos
                });
                return false;
            } else {
                var prevPos = config.quoteState[config.quoteState.length-1].pos;
                config.quoteState.pop();
                config.quoteState.push({
                    opener: quoteParams[tag].opener,
                    closer: quoteParams[tag].closer,
                    positions: pos
                });
                return prevPos;
            }
        }
        function tryClose(tag, pos) {
            if (config.quoteState.length > 0 && tag === config.quoteState[config.quoteState.length - 1].closer) {
                config.quoteState.pop();
            } else {
                return pos;
            }
        }
        function pushQuoteState(tag, pos) {
            var isOpener = ["\u201C", "\u2018", " \"", " \'"].indexOf(tag) > -1 ? true : false;
            if (isOpener) {
                return tryOpen(tag, pos);
            } else {
                return tryClose(tag, pos);
            }
        }
        function quoteFix (tag, positions) {
            var m = tag.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
            if (m) {
                return pushQuoteState(m[1], positions);
            }
        }
        // Run state machine
        if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
            config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
        }

    	for (var i=0,ilen=config.doppel.tags.length;i<ilen;i++) {
            var tag = config.doppel.tags[i];
            var str = config.doppel.strings[i+1];

            if (config.tagState !== null) {
                // Evaluate tag state for current string
                if (_tagParams[tag]) {
                    config.tagState.push(_tagParams[tag]);
                } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
                    config.tagState.pop();
                }
            }

            if (config.afterPunct !== null) {
                // Evaluate punctuation state of current string
                if (tag.match(/[\!\?\:]$/)) {
                    config.afterPunct = true;
                }
            }

            // Process if outside tag scope, else noop for upper-casing
            if (config.tagState.length === 0) {
                config.doppel.strings[i+1] = config.capitaliseWords(str, i+1, config.doppel,config.doppel.tags[i+1]);
                
            } else if (config.doppel.strings[i+1].trim()) {
                config.lastWordPos = null;
            }
            
            if (config.quoteState !== null) {
                // Evaluate quote state of current string and fix chars that have flown
                var quotePos = quoteFix(tag, i);
                if (quotePos || quotePos === 0) {
                    var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);
                    config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);
                    config.lastWordPos = null;
                }
            }

            // If there was a printable string, unset first-word and after-punctuation
            if (config.isFirst) {
                if (str.trim()) {
                    config.isFirst = false;
                }
            }
            if (config.afterPunct) {
                if (str.trim()) {
                    config.afterPunct = false;
                }
            }
        }
        if (config.quoteState) {
            for (var i=0,ilen=config.quoteState.length;i<ilen;i++) {
                var quotePos = config.quoteState[i].pos;
                // Test for quotePos avoids a crashing error:
                //   https://github.com/citation-style-language/test-suite/blob/master/processor-tests/humans/flipflop_OrphanQuote.txt
                if (typeof quotePos !== 'undefined') {
                    var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);
                    config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);
                }
            }
        }
        // Specially capitalize the last word if necessary (invert stop-word list)
        if (config.lastWordPos) {
            var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
            var lastWord = lastWords.strings[config.lastWordPos.words];
            if (lastWord.length > 1 && CSL.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
                lastWord = _capitalise.call(this, lastWord);
                lastWords.strings[config.lastWordPos.words] = lastWord;
            }
            config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
        }

        // Recombine the string
        return tagDoppel.join(config.doppel);
    }

    /**
     * PUBLIC
     */

    /**
     * A noop that just delivers the string.
     */
    function passthrough (state, str) {
        return str;
    }

    /**
     * Force all letters in the string to lowercase, skipping nocase spans
     */
    function lowercase(state, string) {
        var config = {
            quoteState: null,
            capitaliseWords: function(str) {
                var words = str.split(" ");
                for (var i=0,ilen=words.length;i<ilen;i++) {
                    var word = words[i];
                    if (word) {
                        words[i] = CSL.toLocaleLowerCase.call(state, word);
                    }
                }
                return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
    }

    /**
     * Force all letters in the string to uppercase.
     */
    function uppercase(state, string) {
        var config = {
            quoteState: null,
            capitaliseWords: function(str) {
                var words = str.split(" ");
                for (var i=0,ilen=words.length;i<ilen;i++) {
                    var word = words[i];
                    if (word) {
                        // Okay.
                        // So we need to pick up an array of locales from state.tmp.
                        // This function is invoked in the context of queue.js, so
                        // the item is not available here. Three levels to be included
                        // in the array:
                        // 1. Field language tag, if any
                        // 2. Item language tag, if any
                        // 3. Value of state.opt.lang
                        words[i] = CSL.toLocaleUpperCase.call(state, word);
                    }
                }
                return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
    }

    /**
     * Similar to <b>capitalize_first</b>, but force the
     * subsequent characters to lowercase.
     */
    function sentence(state, string) {
        var config = {
            quoteState: [],
            capitaliseWords: function(str) {
                var words = str.split(" ");
                for (var i=0,ilen=words.length;i<ilen;i++) {
                    var word = words[i];
                    if (word) {
                        if (config.isFirst) {
                            words[i] = _capitalise.call(state, word);
                            config.isFirst = false;
                        } else {
                            words[i] = CSL.toLocaleLowerCase.call(state, word);
                        }
                    }
                }
                return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
    }

    function title(state, string) {
        var config = {
            quoteState: [],
            capitaliseWords: function(str, i, followingTag) {
                if (str.trim()) {
                    var words = str.split(/[ \u00A0]+/);
                    var wordle = wordDoppel.split(str);
                    var words = wordle.strings;
                    for (var j=0,jlen=words.length;j<jlen;j++) {
                        var word = words[j];
                        if (!word) {
                            continue;
                        }
                        if (word.length > 1 && !CSL.toLocaleLowerCase.call(state, word).match(config.skipWordsRex)) {
                            // Capitalize every word that is not a stop-word
                            words[j] = _capitalise.call(state, words[j]);
                        } else if (j === (words.length - 1) && followingTag === "-") {
                            words[j] = _capitalise.call(state, words[j]);
                        } else if (config.isFirst) {
                            // Capitalize first word, even if a stop-word
                            words[j] = _capitalise.call(state, words[j]);
                        } else if (config.afterPunct) {
                            // Capitalize after punctuation
                            words[j] = _capitalise.call(state, words[j]);
                        }
                        config.afterPunct = false;
                        config.isFirst = false;
                        config.lastWordPos = {
                            strings: i,
                            words: j
                        };
                    }
                    str = wordDoppel.join(wordle);
                }
                return str;
            },
            skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
            tagState: [],
            afterPunct: false,
            isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
    }
    
    
    /**
     * Force capitalization of the first letter in the string, leave
     * the rest of the characters untouched.
     */
    function capitalizeFirst(state, string) {
        var config = {
            quoteState: [],
            capitaliseWords: function(str) {
                var words = str.split(" ");
                for (var i=0,ilen=words.length;i<ilen;i++) {
                    var word = words[i];
                    if (word) {
                        if (config.isFirst) {
                            words[i] = _capitalise.call(state, word);
                            config.isFirst = false;
                            break;
                        }
                    }
                }
                return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
    }

    /**
     * Force the first letter of each space-delimited
     * word in the string to uppercase, and leave the remainder
     * of the string untouched.  Single characters are forced
     * to uppercase.
     */
    function capitalizeAll (state, string) {
        var config = {
            quoteState: [],
            capitaliseWords: function(str) {
                var words = str.split(" ");
                for (var i=0,ilen=words.length;i<ilen;i++) {
                    var word = words[i];
                    if (word) {
                        words[i] = _capitalise.call(state, word);
                    }
                }
                return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
    }
    return {
        passthrough: passthrough,
        lowercase: lowercase,
        uppercase: uppercase,
        sentence: sentence,
        title: title,
        "capitalize-first": capitalizeFirst,
        "capitalize-all": capitalizeAll
    };
}());

/*global CSL: true */


/**
 * Output specifications.
 * @class
 */
CSL.Output.Formats = function () {};

/**
 * HTML output format specification.
 * <p>The headline says it all.  The source code for this
 * object can be used as a template for producing other
 * output modes.</p>
 */
CSL.Output.Formats.prototype.html = {
    //
    // text_escape: Format-specific function for escaping text destined
    // for output.  Takes the text to be escaped as sole argument.  Function
    // will be run only once across each portion of text to be escaped, it
    // need not be idempotent.
    //
    "text_escape": function (text) {
        // Numeric entities, in case the output is processed as
        // xml in an environment in which HTML named entities are
        // not declared.
        if (!text) {
            text = "";
        }
        return text.replace(/&/g, "&#38;")
            .replace(/</g, "&#60;")
            .replace(/>/g, "&#62;")
            .replace(/\s\s/g, "\u00A0 ")
            .replace(CSL.SUPERSCRIPTS_REGEXP,
                     function(aChar) {
                         // return "&#60;sup&#62;" + CSL.SUPERSCRIPTS[aChar] + "&#60;/sup&#62;";
                         return "<sup>" + CSL.SUPERSCRIPTS[aChar] + "</sup>";
                     });
    },
    "bibstart": "<div class=\"csl-bib-body\">\n",
    "bibend": "</div>",
    "@font-style/italic": "<i>%%STRING%%</i>",
    "@font-style/oblique": "<em>%%STRING%%</em>",
    "@font-style/normal": "<span style=\"font-style:normal;\">%%STRING%%</span>",
    "@font-variant/small-caps": "<span style=\"font-variant:small-caps;\">%%STRING%%</span>",
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-variant/normal": "<span style=\"font-variant:normal;\">%%STRING%%</span>",
    "@font-weight/bold": "<b>%%STRING%%</b>",
    "@font-weight/normal": "<span style=\"font-weight:normal;\">%%STRING%%</span>",
    "@font-weight/light": false,
    "@text-decoration/none": "<span style=\"text-decoration:none;\">%%STRING%%</span>",
    "@text-decoration/underline": "<span style=\"text-decoration:underline;\">%%STRING%%</span>",
    "@vertical-align/sup": "<sup>%%STRING%%</sup>",
    "@vertical-align/sub": "<sub>%%STRING%%</sub>",
    "@vertical-align/baseline": "<span style=\"baseline\">%%STRING%%</span>",
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            //
            // Mostly right by being wrong (for apostrophes)
            //
            return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
    },
    "@quotes/false": false,
    //"@bibliography/body": function (state,str){
    //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
    //},
    "@cite/entry": function (state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
	},
    "@bibliography/entry": function (state, str) {
        // Test for this.item_id to add decorations to
        // bibliography output of individual entries.
        //
        // Full item content can be obtained from
        // state.registry.registry[id].ref, using
        // CSL variable keys.
        //
        // Example:
        //
        //   print(state.registry.registry[this.item_id].ref["title"]);
        //
        // At present, for parallel citations, only the
        // id of the master item is supplied on this.item_id.
        var insert = "";
        if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
        }
        return "  <div class=\"csl-entry\">" + str + "</div>\n" + insert;
    },
    "@display/block": function (state, str) {
        return "\n\n    <div class=\"csl-block\">" + str + "</div>\n";
    },
    "@display/left-margin": function (state, str) {
        return "\n    <div class=\"csl-left-margin\">" + str + "</div>";
    },
    "@display/right-inline": function (state, str) {
        return "<div class=\"csl-right-inline\">" + str + "</div>\n  ";
    },
    "@display/indent": function (state, str) {
        return "<div class=\"csl-indent\">" + str + "</div>\n  ";
    },
    "@showid/true": function (state, str, cslid) {
        if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {
            if (cslid) {
                return "<span class=\"" + state.opt.nodenames[cslid] + "\" cslid=\"" + cslid + "\">" + str + "</span>";
            } else if (this.params && "string" === typeof str) {
                var prePunct = "";
                if (str) {
                    var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                    prePunct = m[1];
                    str = m[2];
                }
                var postPunct = "";
                if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                    postPunct = str.slice(-1);
                    str = str.slice(0,-1);
                }
                return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
            } else {
                return str;
            }
        } else {
            return str;
        }
    },
    "@URL/true": function (state, str) {
        return "<a href=\"" + str + "\">" + str + "</a>";
    },
    "@DOI/true": function (state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
        }
        return "<a href=\"" + doiurl + "\">" + str + "</a>";
    }
};

/**
 * Plain text output specification.
 *
 * (Code contributed by Simon Kornblith, Center for History and New Media,
 * George Mason University.)
 */
CSL.Output.Formats.prototype.text = {
    //
    // text_escape: Format-specific function for escaping text destined
    // for output.  Takes the text to be escaped as sole argument.  Function
    // will be run only once across each portion of text to be escaped, it
    // need not be idempotent.
    //
    "text_escape": function (text) {
        if (!text) {
            text = "";
        }
        return text;
    },
    "bibstart": "",
    "bibend": "",
    "@font-style/italic": false,
    "@font-style/oblique": false,
    "@font-style/normal": false,
    "@font-variant/small-caps": false,
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-variant/normal": false,
    "@font-weight/bold": false,
    "@font-weight/normal": false,
    "@font-weight/light": false,
    "@text-decoration/none": false,
    "@text-decoration/underline": false,
    "@vertical-align/baseline": false,
    "@vertical-align/sup": false,
    "@vertical-align/sub": false,
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            //
            // Mostly right by being wrong (for apostrophes)
            //
            return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
    },
    "@quotes/false": false,
    //"@bibliography/body": function (state,str){
    //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
    //},
    "@cite/entry": function (state, str) {
		return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
	},
    "@bibliography/entry": function (state, str) {
        return str+"\n";
    },
    "@display/block": function (state, str) {
        return "\n"+str;
    },
    "@display/left-margin": function (state, str) {
        return str;
    },
    "@display/right-inline": function (state, str) {
        return str;
    },
    "@display/indent": function (state, str) {
        return "\n    "+str;
    },
    "@showid/true": function (state, str) {
        return str;
    },
    "@URL/true": function (state, str) {
        return str;
    },
    "@DOI/true": function (state, str) {
        return str;
    }
};

/**
 * Plain text output specification.
 *
 * (Code contributed by Simon Kornblith, Center for History and New Media,
 * George Mason University.)
 */
CSL.Output.Formats.prototype.rtf = {
    //
    // text_escape: Format-specific function for escaping text destined
    // for output.  Takes the text to be escaped as sole argument.  Function
    // will be run only once across each portion of text to be escaped, it
    // need not be idempotent.
    //
    "text_escape": function (text) {
        if (!text) {
            text = "";
        }
        return text
        .replace(/([\\{}])/g, "\\$1")
        .replace(CSL.SUPERSCRIPTS_REGEXP,
                 function(aChar) {
                     return "\\super " + CSL.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
                 })
        .replace(/[\u007F-\uFFFF]/g,
                 function(aChar) { return "\\uc0\\u"+aChar.charCodeAt(0).toString()+"{}"; })
        .split("\t").join("\\tab{}");
    },
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-style/italic":"{\\i{}%%STRING%%}",
    "@font-style/normal":"{\\i0{}%%STRING%%}",
    "@font-style/oblique":"{\\i{}%%STRING%%}",
    "@font-variant/small-caps":"{\\scaps %%STRING%%}",
    "@font-variant/normal":"{\\scaps0{}%%STRING%%}",
    "@font-weight/bold":"{\\b{}%%STRING%%}",
    "@font-weight/normal":"{\\b0{}%%STRING%%}",
    "@font-weight/light":false,
    "@text-decoration/none":false,
    "@text-decoration/underline":"{\\ul{}%%STRING%%}",
    "@vertical-align/baseline":false,
    "@vertical-align/sup":"\\super %%STRING%%\\nosupersub{}",
    "@vertical-align/sub":"\\sub %%STRING%%\\nosupersub{}",
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
        }
        return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            return CSL.Output.Formats.rtf.text_escape("\u2019");
        }
        return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
    },
    "@quotes/false": false,
    "bibstart":"{\\rtf ",
    "bibend":"}",
    "@display/block": "\\line{}%%STRING%%\\line\r\n",
    "@cite/entry": function (state, str) {
        // If wrapCitationEntry does not exist, cite/entry 
        // is not applied.
		return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
	},
    "@bibliography/entry": function(state,str){
        return str;
    },
    "@display/left-margin": function(state,str){
        return str+"\\tab ";
    },
    "@display/right-inline": function (state, str) {
        return str+"\r\n";
    },
    "@display/indent": function (state, str) {
        return "\n\\tab "+str+"\\line\r\n";
    },
    "@showid/true": function (state, str) {
        if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {
            var prePunct = "";
            if (str) {
                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
            }
            var postPunct = "";
            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0,-1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
            return str;
        }
    },
    "@URL/true": function (state, str) {
        return str;
    },
    "@DOI/true": function (state, str) {
        return str;
    }
};

/*

    This does not seem to work in Zotero plugins. For some reason the scope of the link does not
    close when interpreted by the LibreOffice. Perhaps this creates a field within a field,
    and that is not allowed?

    "@URL/true": function (state, str) {
        return "\\field{\\*\\fldinst{HYPERLINK \"" + str + "\"}}{\\fldrslt{"+ str +"}}";
    },
    "@DOI/true": function (state, str) {
        return "\\field{\\*\\fldinst{HYPERLINK \"https://doi.org/" + str + "\"}}{\\fldrslt{"+ str +"}}";
    }
*/

/**
 * AsciiDoc output specification.
 *
 * See http://asciidoc.org/ or https://asciidoctor.org/
 */
CSL.Output.Formats.prototype.asciidoc = {
    "text_escape": function (text) {
        if (!text) {
            text = "";
        }
        return text.replace("*", "pass:[*]", "g")
            .replace("_", "pass:[_]", "g")
            .replace("#", "pass:[#]", "g")
            .replace("^", "pass:[^]", "g")
            .replace("~", "pass:[~]", "g")
            .replace("[[", "pass:[[[]", "g")
            .replace("  ", "&#160; ", "g")
            .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {
                return "^" + CSL.SUPERSCRIPTS[aChar] + "^";
            });
    },
    "bibstart": "",
    "bibend": "",
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-style/italic": "__%%STRING%%__",
    "@font-style/oblique": "__%%STRING%%__",
    "@font-style/normal": false,
    "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
    "@font-variant/normal": false,
    "@font-weight/bold": "**%%STRING%%**",
    "@font-weight/normal": false,
    "@font-weight/light": false,
    "@text-decoration/none": false,
    "@text-decoration/underline": "[underline]##%%STRING%%##",
    "@vertical-align/sup": "^^%%STRING%%^^",
    "@vertical-align/sub": "~~%%STRING%%~~",
    "@vertical-align/baseline": false,
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return "``";
        }
        return "``" + str + "''";
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            return "`";
        }
        return "`" + str + "'";
    },
    "@quotes/false": false,
    "@cite/entry": function (state, str) {
        // if wrapCitationEntry does not exist, cite/entry is not applied
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
    "@bibliography/entry": function (state, str) {
        return str + "\n";
    },
    "@display/block": function (state, str) {
        return str;
    },
    "@display/left-margin": function (state, str) {
        return str;
    },
    "@display/right-inline": function (state, str) {
        return " " + str;
    },
    "@display/indent": function (state, str) {
        return " " + str;
    },
    "@showid/true": function (state, str) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && "string" === typeof str) {
            var prePunct = "";
            if (str) {
                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
            }
            var postPunct = "";
            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0,-1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
            return str;
        }
    },
    "@URL/true": function (state, str) {
        // AsciiDoc renders URLs automatically as links
        return str;
    },
    "@DOI/true": function (state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
        }
        return doiurl + "[" + str + "]";
    }
};

/**
 * Output specification for XSL-FO (Extensible Stylesheet
 * Language - Formatting Objects)
 *
 * See https://www.w3.org/TR/xsl11/#fo-section
 */
CSL.Output.Formats.prototype.fo = {
    "text_escape": function (text) {
        if (!text) {
            text = "";
        }
        return text.replace(/&/g, "&#38;")
            .replace(/</g, "&#60;")
            .replace(/>/g, "&#62;")
            .replace("  ", "&#160; ", "g")
            .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {
                return "<fo:inline vertical-align=\"super\">" + CSL.SUPERSCRIPTS[aChar] + "</fo:inline>";
            });
    },
    "bibstart": "",
    "bibend": "",
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-style/italic": "<fo:inline font-style=\"italic\">%%STRING%%</fo:inline>",
    "@font-style/oblique": "<fo:inline font-style=\"oblique\">%%STRING%%</fo:inline>",
    "@font-style/normal": "<fo:inline font-style=\"normal\">%%STRING%%</fo:inline>",
    "@font-variant/small-caps": "<fo:inline font-variant=\"small-caps\">%%STRING%%</fo:inline>",
    "@font-variant/normal": "<fo:inline font-variant=\"normal\">%%STRING%%</fo:inline>",
    "@font-weight/bold": "<fo:inline font-weight=\"bold\">%%STRING%%</fo:inline>",
    "@font-weight/normal": "<fo:inline font-weight=\"normal\">%%STRING%%</fo:inline>",
    "@font-weight/light": "<fo:inline font-weight=\"lighter\">%%STRING%%</fo:inline>",
    "@text-decoration/none": "<fo:inline text-decoration=\"none\">%%STRING%%</fo:inline>",
    "@text-decoration/underline": "<fo:inline text-decoration=\"underline\">%%STRING%%</fo:inline>",
    "@vertical-align/sup": "<fo:inline vertical-align=\"super\">%%STRING%%</fo:inline>",
    "@vertical-align/sub": "<fo:inline vertical-align=\"sub\">%%STRING%%</fo:inline>",
    "@vertical-align/baseline": "<fo:inline vertical-align=\"baseline\">%%STRING%%</fo:inline>",
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
    },
    "@quotes/false": false,
    "@cite/entry": function (state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
    "@bibliography/entry": function (state, str) {
        var indent = "";
        if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
            var hi = state.bibliography.opt.hangingindent;
            indent = " start-indent=\"" + hi +"em\" text-indent=\"-" + hi + "em\"";
        }
        var insert = "";
        if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
        }
        return "<fo:block id=\"" + this.system_id + "\"" + indent + ">" + str + "</fo:block>\n" + insert;
    },
    "@display/block": function (state, str) {
        return "\n  <fo:block>" + str + "</fo:block>\n";
    },
    "@display/left-margin": function (state, str) {
        return "\n  <fo:table table-layout=\"fixed\" width=\"100%\">\n    " +
                "<fo:table-column column-number=\"1\" column-width=\"$$$__COLUMN_WIDTH_1__$$$\"/>\n    " +
                "<fo:table-column column-number=\"2\" column-width=\"proportional-column-width(1)\"/>\n    " +
                "<fo:table-body>\n      " +
                    "<fo:table-row>\n        " +
                        "<fo:table-cell>\n          " +
                            "<fo:block>" + str + "</fo:block>\n        " +
                        "</fo:table-cell>\n        ";
    },
    "@display/right-inline": function (state, str) {
        return "<fo:table-cell>\n          " +
                "<fo:block>" + str + "</fo:block>\n        " +
            "</fo:table-cell>\n      " +
            "</fo:table-row>\n    " +
            "</fo:table-body>\n  " +
            "</fo:table>\n";
    },
    "@display/indent": function (state, str) {
        return "<fo:block margin-left=\"2em\">" + str + "</fo:block>\n";
    },
    "@showid/true": function (state, str) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && "string" === typeof str) {
            var prePunct = "";
            if (str) {
                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
            }
            var postPunct = "";
            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0,-1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
            return str;
        }
    },
    "@URL/true": function (state, str) {
        return "<fo:basic-link external-destination=\"url('" + str + "')\">" + str + "</fo:basic-link>";
    },
    "@DOI/true": function (state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
        }
        return "<fo:basic-link external-destination=\"url('" + doiurl + "')\">" + str + "</fo:basic-link>";
    }
};

/**
 * LaTeX .bbl output.
 *
 * (Code contributed by Egon Willighagen, based on the prototype.text code.)
 */
CSL.Output.Formats.prototype.latex = {
    "text_escape": function (text) {
        if (!text) {
            text = "";
        }
        return text;
    },
    "bibstart": "\\begin{thebibliography}{4}",
    "bibend": "\end{thebibliography}",
    "@font-style/italic": "{\\em %%STRING%%}",
    "@font-style/oblique": false,
    "@font-style/normal": false,
    "@font-variant/small-caps": false,
    "@passthrough/true": CSL.Output.Formatters.passthrough,
    "@font-variant/normal": false,
    "@font-weight/bold": "{\\bf %%STRING%%}",
    "@font-weight/normal": false,
    "@font-weight/light": false,
    "@text-decoration/none": false,
    "@text-decoration/underline": false,
    "@vertical-align/baseline": false,
    "@vertical-align/sup": false,
    "@vertical-align/sub": false,
    "@strip-periods/true": CSL.Output.Formatters.passthrough,
    "@strip-periods/false": CSL.Output.Formatters.passthrough,
    "@quotes/true": function (state, str) {
        if ("undefined" === typeof str) {
            return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
    },
    "@quotes/inner": function (state, str) {
        if ("undefined" === typeof str) {
            //
            // Mostly right by being wrong (for apostrophes)
            //
            return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
    },
    "@quotes/false": false,
    //"@bibliography/body": function (state,str){
    //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
    //},
    "@cite/entry": function (state, str) {
		return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
	},
    "@bibliography/entry": function (state, str) {
        return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
    },
    "@display/block": function (state, str) {
        return "\n"+str;
    },
    "@display/left-margin": function (state, str) {
        return str;
    },
    "@display/right-inline": function (state, str) {
        return str;
    },
    "@display/indent": function (state, str) {
        return "\n    "+str;
    },
    "@showid/true": function (state, str, cslid) {
        return str;
    },
    "@URL/true": function (state, str) {
        return str;
    },
    "@DOI/true": function (state, str) {
        return str;
    }
};

CSL.Output.Formats = new CSL.Output.Formats();

/*global CSL: true */


//
// Time for a rewrite of this module.
//
// Simon has pointed out that list and hash behavior can
// be obtained by ... just using a list and a hash.  This
// is faster for batched operations, because sorting is
// greatly optimized.  Since most of the interaction
// with plugins at runtime will involve batches of
// references, there will be solid gains if the current,
// one-reference-at-a-time approach implemented here
// can be replaced with something that leverages the native
// sort method of the Array() type.
//
// That's going to take some redesign, but it will simplify
// things in the long run, so it might as well happen now.
//
// We'll keep makeCitationCluster and makeBibliography as
// simple methods that return a string.  Neither should
// have any effect on internal state.  This will be a change
// in behavior for makeCitationCluster.
//
// A new updateItems command will be introduced, to replace
// insertItems.  It will be a simple list of IDs, in the
// sequence of first reference in the document.
//
// The calling application should always invoke updateItems
// before makeCitationCluster.
//

//
// should allow batched registration of items by
// key.  should behave as an update, with deletion
// of items and the tainting of disambiguation
// partner sets affected by a deletes and additions.
//
//
// we'll need a reset method, to clear the decks
// in the citation area and start over.

/**
 * Registry of cited items.
 * <p>This is a persistent store of disambiguation and
 * sort order information relating to individual items
 * for which rendering is requested.  Item data is stored
 * in a hash, with the item key as hash key, for quick
 * retrieval.  A virtual sequence within the hashed store
 * is maintained on the fly as items are added to the
 * store, using <code>*_next</code> and <code>*_prev</code>
 * attributes on each item.  A separate hash of items
 * based on their undisambiguated cite form is
 * maintained, and the item id list and disambiguation
 * level for each set of disambiguation partners is shared
 * through the registry item.</p>
 * @class
 */
CSL.Registry = function (state) {
    this.debug = false;
    this.state = state;
    this.registry = {};
    this.reflist = [];
    this.refhash = {};
    this.namereg = new CSL.Registry.NameReg(state);
    this.citationreg = new CSL.Registry.CitationReg(state);
    // See CSL.NameOutput.prototype.outputNames
    // and CSL.Registry.prototype.doinserts
    this.authorstrings = {};
    
    // for parallel delimiter support
    this.masterMap = {};
    
    //
    // shared scratch vars
    this.mylist = [];
    this.myhash = {};
    this.deletes = [];
    this.inserts = [];
    this.uncited = {};
    this.refreshes = {};
    this.akeys = {};
    this.oldseq = {};
    this.return_data = {};
    //
    // each ambig is a list of the ids of other objects
    // that have the same base-level rendering
    this.ambigcites = {};
    this.ambigresets = {};
    this.sorter = new CSL.Registry.Comparifier(state, "bibliography_sort");
    //this.modes = CSL.getModes.call(this.state);
    //this.checkerator = new CSL.Checkerator();

    this.getSortedIds = function () {
        var ret = [];
        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push("" + this.reflist[i].id);
        }
        return ret;
    };

    this.getSortedRegistryItems = function () {
        var ret = [];
        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push(this.reflist[i]);
        }
        return ret;
    };
};

//
// Here's the sequence of operations to be performed on
// update:
//
//  1.  (o) [init] Receive list as function argument, store as hash and as list.
//  2.  (o) [init] Initialize refresh list.  Never needs sorting, only hash required.

//  3.  (o) [dodeletes] Delete loop.
//  3a. (o) [dodeletes] Delete names in items to be deleted from names reg.
//  3b. (o) [dodeletes] Complement refreshes list with items affected by
//      possible name changes.  We'll actually perform the refresh once
//      all of the necessary data and parameters have been established
//      in the registry.
//  3c. (o) [dodeletes] Delete all items to be deleted from their disambig pools.
//  3d. (o) [dodeletes] Delete all items in deletion list from hash.

//  4.  (o) [doinserts] Insert loop.
//  4a. (o) [doinserts] Retrieve entries for items to insert.
//  4b. (o) [doinserts] Generate ambig key.
//  4c. (o) [doinserts] Add names in items to be inserted to names reg
//      (implicit in getAmbiguousCite).
//  4d. (o) [doinserts] Record ambig pool key on akey list (used for updating further
//      down the chain).
//  4e. (o) [doinserts] Create registry token.
//  4f. (o) [doinserts] Add item ID to hash.
//  4g. (o) [doinserts] Set and record the base token to hold disambiguation
//      results ("disambig" in the object above).
//  5.  (o) [rebuildlist] Create "new" list of hash pointers, in the order given
//          in the argument to the update function.
//  6.  (o) [rebuildlist] Apply citation numbers to new list.
//  7.  (o) [dorefreshes] Refresh items requiring update.



//  5. (o) [delnames] Delete names in items to be deleted from names reg, and obtain IDs
//         of other items that would be affected by changes around that surname.
//  6. (o) [delnames] Complement delete and insert lists with items affected by
//         possible name changes.
//  7. (o) [delambigs] Delete all items to be deleted from their disambig pools.
//  8. (o) [delhash] Delete all items in deletion list from hash.

//  9. (o) [addtohash] Retrieve entries for items to insert.
// 10. (o) [addtohash] Add items to be inserted to their disambig pools.
// 11. (o) [addtohash] Add names in items to be inserted to names reg
//         (implicit in getAmbiguousCite).
// 12. (o) [addtohash] Create registry token for each item to be inserted.
// 13. (o) [addtohash] Add items for insert to hash.

// 14. (o) [buildlist] Create "new" list of hash pointers, in the order given in the argument
//         to the update function.
// 15. (o) [renumber] Apply citation numbers to new list.
// 16. (o) [setdisambigs] Set disambiguation parameters on each inserted item token.
// 17. (o) [setsortkeys] Set sort keys on each item token.
// 18. (o) [sorttokens] Resort token list
// 19. (o) [renumber] Reset citation numbers on list items
//

CSL.Registry.prototype.init = function (itemIDs, uncited_flag) {
    var i, ilen;
    this.oldseq = {};
    //  1. Receive list as function argument, store as hash and as list.
    //
    // Result:
    //   this.mylist: a list of all itemIDs of referenced items, cited and uncited.
    //   this.myhash: a hash of index positions in this.mylist.
    //   this.uncited: hash of uncited itemIDs.
    //
    // Proceed as follows.
    //
    if (uncited_flag) {
        // If uncited_flag is non-nil, add any missing itemIDs to this.mylist
        // from itemIDs input list, and set the itemIDs in itemIDs on this.uncited.
        this.uncited = {};
        for (var i=0,ilen=itemIDs.length;i<ilen; i += 1) {
            if (!this.myhash[itemIDs[i]]) {
                this.mylist.push("" + itemIDs[i]);
            }
            this.uncited[itemIDs[i]] = true;
            this.myhash[itemIDs[i]] = true;
        }
    } else {
        // If uncited_flag is nil, remove duplicate itemIDs from itemIDs input
        // list, set the result on this.mylist, and add missing itemIDs to
        // this.mylist from itemIDs input list.
        for (var key in this.uncited) {
            itemIDs.push(key);
        }
        var myhash = {};
        for (i=itemIDs.length-1;i>-1; i += -1) {
            if (myhash[itemIDs[i]]) {
                itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
            } else {
                myhash[itemIDs[i]] = true;
            }
        }
        this.mylist = itemIDs;
        this.myhash = myhash;
    }
    //
    //  2. Initialize refresh list.  Never needs sorting, only hash required.
    //
    this.refreshes = {};
    this.touched = {};
    this.ambigsTouched = {};
    this.ambigresets = {};
};

CSL.Registry.prototype.dopurge = function (myhash) {
    // Remove any uncited items not in myhash
    for (var i=this.mylist.length-1;i>-1;i+=-1) {
        // Might not want to be quite this restrictive.
        if (this.citationreg.citationsByItemId) {
            if (!this.citationreg.citationsByItemId[this.mylist[i]] && !myhash[this.mylist[i]]) {
                delete this.myhash[this.mylist[i]];
                this.mylist = this.mylist.slice(0,i).concat(this.mylist.slice(i+1));
            }
        }
    }
    this.dodeletes(this.myhash);
};

CSL.Registry.prototype.dodeletes = function (myhash) {
    var otheritems, key, ambig, pos, len, items, kkey, mypos, id;
    if ("string" === typeof myhash) {
        var key = myhash;
        myhash = {};
        myhash[key] = true;
    }
    //
    //  3. Delete loop.
    //
    for (var key in this.registry) {
        if (!myhash[key]) {
            // skip items explicitly marked as uncited
            if (this.uncited[key]) {
                continue;
            }
            //
            //  3a. Delete names in items to be deleted from names reg.
            //
            otheritems = this.namereg.delitems(key);
            //
            //  3b. Complement refreshes list with items affected by
            //      possible name changes.  We'll actually perform the refresh once
            //      all of the necessary data and parameters have been established
            //      in the registry.
            //
            for (kkey in otheritems) {
                this.refreshes[kkey] = true;
            }
            //
            //  3c. Delete all items to be deleted from their disambig pools.
            //
            ambig = this.registry[key].ambig;
            mypos = this.ambigcites[ambig].indexOf(key);
            if (mypos > -1) {
                items = this.ambigcites[ambig].slice();
                this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos+1, items.length));
                this.ambigresets[ambig] = this.ambigcites[ambig].length;
            }
            //
            // XX. What we've missed is to provide an update of all
            // items sharing the same ambig  += -1 the remaining items in
            // ambigcites.  So let's do that here, just in case the
            // names update above doesn't catch them all.
            //
            len = this.ambigcites[ambig].length;
            for (pos = 0; pos < len; pos += 1) {
                id = "" + this.ambigcites[ambig][pos];
                this.refreshes[id] = true;
            }
            //
            // 3d-0. Remove parallel id references and realign
            // parallel ID refs.
            //
            if (this.registry[key].siblings) {
                if (this.registry[key].siblings.length == 1) {
                    var loneSiblingID = this.registry[key].siblings[0];
                    if (this.registry[loneSiblingID].siblings) {
                        this.registry[loneSiblingID].siblings.pop();
                        this.registry[loneSiblingID].master = true;
                        // this.registry[loneSiblingID].parallel = false;
                    }
                } else if (this.registry[key].siblings.length > 1) {
                    var removeIDs = [key];
                    if (this.registry[key].master) {
                        var newmasterID = this.registry[key].siblings[0];
                        var newmaster = this.registry[newmasterID];
                        newmaster.master = true;
                        // newmaster.parallel_delimiter is set externally, if at all
                        // newmaster.parallel = false;
                        removeIDs.push(newmasterID);
                        // for (var k = 0, klen = this.registry[key].siblings.length; k < klen; k += 1) {
                        //     this.registry[this.registry[key].siblings[k]].parallel = newmasterID;
                        // }
                    }
                    var buffer = [];
                    for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                        var siblingID = this.registry[key].siblings.pop();
                        if (removeIDs.indexOf(siblingID) === -1) {
                            buffer.push(siblingID);
                        }
                    }
                    for (var k = buffer.length - 1; k > -1; k += -1) {
                        this.registry[key].siblings.push(buffer[k]);
                    }
                }
            }
            //
            // 3d-1. Remove item from reflist
            for (var i=this.reflist.length-1;i>-1;i--) {
                if (this.reflist[i].id === key) {
                    this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));
                }
            }
            //
            //  3d. Delete all items in deletion list from hash.
            //
            delete this.registry[key];
            delete this.refhash[key];

            // For processCitationCluster()
            this.return_data.bibchange = true;
        }
    }
    // Disabled.  See formats.js for code.
    // this.state.fun.decorate.items_delete( this.state.output[this.state.opt.mode].tmp, myhash );
};

CSL.Registry.prototype.doinserts = function (mylist) {
    var item, Item, akey, newitem, abase, i, ilen;
    if ("string" === typeof mylist) {
        mylist = [mylist];
    }
    //
    //  4. Insert loop.
    //
    for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
        item = mylist[i];
        if (!this.registry[item]) {
            //
            //  4a. Retrieve entries for items to insert.
            //
            Item = this.state.retrieveItem(item);

            //
            //  4b. Generate ambig key.
            //
            // AND
            //
            //  4c. Add names in items to be inserted to names reg
            //      (implicit in getAmbiguousCite).
            //
            akey = CSL.getAmbiguousCite.call(this.state, Item);
            this.ambigsTouched[akey] = true;
            //
            //  4d. Record ambig pool key on akey list (used for updating further
            //      down the chain).
            //
            if (!Item.legislation_id) {
                this.akeys[akey] = true;
            }
            //
            //  4e. Create registry token.
            //
            newitem = {
                "id": "" + item,
                "seq": 0,
                "offset": 0,
                "sortkeys": false,
                "ambig": false,
                "rendered": false,
                "disambig": false,
                "ref": Item,
                "newItem": true
            };
            //
            //
            //  4f. Add item ID to hash.
            //
            this.registry[item] = newitem;
            //
            //  4f(a). Add first reference note number
            //         (this may be redundant)
            if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
                this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
            }

            //
            //  4g. Set and record the base token to hold disambiguation
            //      results ("disambig" in the object above).
            //
            abase = CSL.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, item, abase);

            //if (!this.ambigcites[akey]){
            //    this.ambigcites[akey] = [];
            //}
            //CSL.debug("Run: "+item+"("+this.ambigcites[akey]+")");
            //if (this.ambigcites[akey].indexOf(item) === -1){
            //    CSL.debug("  Add: "+item);
            //    this.ambigcites[akey].push(item);
            //}
            //
            //  4h. Make a note that this item needs its sort keys refreshed.
            //
            this.touched[item] = true;
            // For processCitationCluster()
            this.return_data.bibchange = true;
        }
    }
    // Disabled.  See formats.js for code.
    // this.state.fun.decorate.items_add( this.state.output[this.state.opt.mode].tmp, mylist );
};

/*
// No longer required.
CSL.Registry.prototype.douncited = function () {
    var pos, len;
    var cited_len = this.mylist.length - this.uncited.length;
    for (pos = 0, len = cited_len; pos < len; pos += 1) {
        this.registry[this.mylist[pos]].uncited = false;
    }
    for (pos = cited_len, len = this.mylist.length; pos < len; pos += 1) {
        this.registry[this.mylist[pos]].uncited = true;
    }
};
*/

CSL.Registry.prototype.rebuildlist = function (nosort) {
    var len, pos, item, Item;
    //
    //  5. Create "new" list of hash pointers, in the order given in the argument
    //     to the update function.
    //
    //
    // XXX Keep reflist in place.
    //
    if (!nosort) {
        this.reflist_inserts = [];
        //
        //  6. Apply citation numbers to new list,
        //     saving off old sequence numbers as we go.
        //
        // XXX Just memo inserts -- actual insert happens below, at last "sort"
        //
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
                this.reflist_inserts.push(Item);
            }
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = (pos + 1);
        }
    } else {
        this.reflist = [];
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.reflist.push(Item);
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = (pos + 1);
        }
    }
};

/*
 * Okay, at this point we should have a numbered list
 * of registry tokens in the notional order requested,
 * with sequence numbers to reconstruct the ordering
 * if the list is remangled.  So far so good.
 */

CSL.Registry.prototype.dorefreshes = function () {
    var key, regtoken, Item, akey, abase;
    //
    //  7. Refresh items requiring update.
    //
    // It looks like we need to do four things on each cite for refresh:
    // (1) Generate the akey for the cite.
    // (2) Register it on the ambig token.
    // (3) Register the akey in this.akeys
    // (4) Register the item ID in this.touched
    //
    for (var key in this.refreshes) {
        regtoken = this.registry[key];
        if (!regtoken) {
            continue;
        }
        regtoken.sortkeys = undefined;
        Item = this.state.refetchItem(key);
        var akey = regtoken.ambig;

        if ("undefined" === typeof akey) {
            this.state.tmp.disambig_settings = false;
            akey = CSL.getAmbiguousCite.call(this.state, Item);
            abase = CSL.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, key, abase);
        }
        for (var akkey in this.ambigresets) {
            if (this.ambigresets[akkey] === 1) {
                var loneKey = this.ambigcites[akey][0];
                var Item = this.state.refetchItem(loneKey);
                this.registry[loneKey].disambig = new CSL.AmbigConfig();
                this.state.tmp.disambig_settings = false;
                var akey = CSL.getAmbiguousCite.call(this.state, Item);
                var abase = CSL.getAmbigConfig.call(this.state);
                this.registerAmbigToken(akey, loneKey, abase);
            }
        }
        this.state.tmp.taintedItemIDs[key] = true;
        this.ambigsTouched[akey] = true;
        if (!Item.legislation_id) {
            this.akeys[akey] = true;
        }
        this.touched[key] = true;
    }
};

/*
 * Main disambiguation  += -1 can everything for disambiguation be
 * crunched into this function?
 */
CSL.Registry.prototype.setdisambigs = function () {
    //
    // Okay, more changes.  Here is where we resolve all disambiguation
    // issues for cites touched by the update.  The this.ambigcites set is
    // based on the complete short form of citations, and is the basis on
    // which names are added and minimal adding of initials or given names
    // is performed.
    //

    //
    //  8.  Set disambiguation parameters on each inserted item token.
    //
    for (var akey in this.ambigsTouched) {
        //
        // Disambiguation is fully encapsulated.
        // Disambiguator will run only if there are multiple
        // items, and at least one disambiguation mode is
        // in effect.
        this.state.disambiguate.run(akey);
    }
    this.ambigsTouched = {};
    this.akeys = {};
};



CSL.Registry.prototype.renumber = function () {
    var len, pos, item;
    //
    // 19. Reset citation numbers on list items
    //
    if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
        this.state.bibliography_sort.tmp.citation_number_map = {};
    }
    len = this.reflist.length;
    for (pos = 0; pos < len; pos += 1) {
        item = this.reflist[pos];
        // save the overhead of rerenderings if citation-number is not
        // used in the style.
        item.seq = (pos + 1);
        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
            this.state.bibliography_sort.tmp.citation_number_map[item.seq] = (this.reflist.length - item.seq + 1);
        }
        // update_mode is set to CSL.NUMERIC if citation-number is rendered
        // in citations.
        if (this.state.opt.update_mode === CSL.NUMERIC && item.seq != this.oldseq[item.id]) {
            this.state.tmp.taintedItemIDs[item.id] = true;
        }
        if (item.seq != this.oldseq[item.id]) {
            this.return_data.bibchange = true;
        }
    }
};

CSL.Registry.prototype.setsortkeys = function () {
    var key;
    //
    // 17. Set sort keys on each item token.
    //
    for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
        var key = this.mylist[i];
        // The last of these conditions may create some thrashing on styles that do not require sorting.
        if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
            this.registry[key].sortkeys = CSL.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
        }
    }
};

CSL.Registry.prototype._insertItem = function(element, array) {
    array.splice(this._locationOf(element, array) + 1, 0, element);
    return array;
};

CSL.Registry.prototype._locationOf = function(element, array, start, end) {
    if (array.length === 0) {
        return -1;
    }
    start = start || 0;
    end = end || array.length;
    var pivot = (start + end) >> 1;  // should be faster than dividing by 2
    
    var c = this.sorter.compareKeys(element, array[pivot]);
    if (end - start <= 1) {
        return c == -1 ? pivot - 1 : pivot;
    }
    switch (c) {
        case -1: return this._locationOf(element, array, start, pivot);
        case 0: return pivot;
        case 1: return this._locationOf(element, array, pivot, end);
    }
};

CSL.Registry.prototype.sorttokens = function (nosort) {
    var len, item, Item, pos;
    //
    // 18. Resort token list.
    //
    if (!nosort) {
        this.reflist_inserts = [];
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
                this.reflist_inserts.push(Item);
            }
        }
        // There is a thin possibility that tainted items in a sorted list
        // will change position due to disambiguation. We cover for that here.
        for (var key in this.state.tmp.taintedItemIDs) {
            if (this.registry[key] && !this.registry[key].newItem) {
                // Move tainted items from reflist to reflist_inserts
                for (var i=this.reflist.length-1;i>-1;i--) {
                    if (this.reflist[i].id === key) {
                        this.reflist_inserts.push(this.reflist[i]);
                        this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));
                    }
                }
            }
        }
        for (var i=0,ilen=this.reflist_inserts.length;i<ilen;i++) {
            var Item = this.reflist_inserts[i];
            delete Item.newItem;
            this.reflist = this._insertItem(Item, this.reflist);
        }
        for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.registry[item].seq = (pos + 1);
        }
    }
};

/**
 * Compare two sort keys
 * <p>Nested, because keys are an array.</p>
 */
CSL.Registry.Comparifier = function (state, keyset) {
    var sort_directions, len, pos, compareKeys;
    var sortCompare = CSL.getSortCompare.call(state, state.opt["default-locale-sort"]);
    sort_directions = state[keyset].opt.sort_directions;
    this.compareKeys = function (a, b) {
        len = a.sortkeys ? a.sortkeys.length : 0;
        for (pos = 0; pos < len; pos += 1) {
            //
            // for ascending sort 1 uses 1, -1 uses -1.
            // For descending sort, the values are reversed.
            //
            // Need to handle undefined values.  No way around it.
            // So have to screen .localeCompare (which is also
            // needed) from undefined values.  Everywhere, in all
            // compares.
            //
            var cmp = 0;
            if (a.sortkeys[pos] === b.sortkeys[pos]) {
                cmp = 0;
            } else if ("undefined" === typeof a.sortkeys[pos]) {
                cmp = sort_directions[pos][1];
            } else if ("undefined" === typeof b.sortkeys[pos]) {
                cmp = sort_directions[pos][0];
            } else {
                // cmp = a.sortkeys[pos].localeCompare(b.sortkeys[pos]);
                cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);
            }
            if (0 < cmp) {
                return sort_directions[pos][1];
            } else if (0 > cmp) {
                return sort_directions[pos][0];
            }
        }
        if (a.seq > b.seq) {
            return 1;
        } else if (a.seq < b.seq) {
            return -1;
        }
        return 0;
    };
    compareKeys = this.compareKeys;
    this.compareCompositeKeys = function (a, b) {
        return compareKeys(a[1], b[1]);
    };
};


/**
 * Compare two disambiguation tokens by their registry sort order
 * <p>Disambiguation lists need to be sorted this way, to
 * obtain the correct year-suffix when that's used.</p>
 */
CSL.Registry.prototype.compareRegistryTokens = function (a, b) {
    if (a.seq > b.seq) {
        return 1;
    } else if (a.seq < b.seq) {
        return -1;
    }
    return 0;
};

CSL.Registry.prototype.registerAmbigToken = function (akey, id, ambig_config) {
    //SNIP-START
    if (!this.registry[id]) {
        CSL.debug("Warning: unregistered item: itemID=("+id+"), akey=("+akey+")");
    }
    //SNIP-END
    // Taint if number of names to be included has changed
    if (this.registry[id] && this.registry[id].disambig && this.registry[id].disambig.names) {
        for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
            var new_names_params = ambig_config.names[i];
            var old_names_params = this.registry[id].disambig.names[i];
            if (new_names_params !== old_names_params) {
                this.state.tmp.taintedItemIDs[id] = true;
            } else if (ambig_config.givens[i]) {
                // Compare givenses only if the number of names is aligned.
                for (var j=0,jlen=ambig_config.givens[i].length;j<jlen;j+=1) {
                    var new_gnames_params = ambig_config.givens[i][j];
                    var old_gnames_params = this.registry[id].disambig.givens[i][j];
                    if (new_gnames_params !== old_gnames_params) {
                        this.state.tmp.taintedItemIDs[id] = true;
                    }
                }
            }
        }
    }

    if (!this.ambigcites[akey]) {
        this.ambigcites[akey] = [];
    }
    if (this.ambigcites[akey].indexOf("" + id) === -1) {
        this.ambigcites[akey].push("" + id);
    }
    this.registry[id].ambig = akey;
    this.registry[id].disambig = CSL.cloneAmbigConfig(ambig_config);
};


/**
 * Get the sort key of an item, without decorations
 * <p>This is used internally by the Registry.</p>
 */
CSL.getSortKeys = function (Item, key_type) {
    var area, root, extension, strip_prepositions, len, pos;
    //SNIP-END
    area = this.tmp.area;
    root = this.tmp.root;
    extension = this.tmp.extension;
    strip_prepositions = CSL.Util.Sort.strip_prepositions;
    this.tmp.area = key_type;
    // Gawdawful, this.
    this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0,-5) : key_type;
    this.tmp.extension = "_sort";
    this.tmp.disambig_override = true;
    this.tmp.disambig_request = false;
    this.tmp.suppress_decorations = true;
    CSL.getCite.call(this, Item);
    this.tmp.suppress_decorations = false;
    this.tmp.disambig_override = false;
    len = this[key_type].keys.length;
    for (pos = 0; pos < len; pos += 1) {
        this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
    }
    //SNIP-END
    
    this.tmp.area = area;
    this.tmp.root = root;
    this.tmp.extension = extension;
    return this[key_type].keys;
};


/*global CSL: true */

CSL.Registry.NameReg = function (state) {
    var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
    this.state = state;
    this.namereg = {};
    this.nameind = {};
    // used for restoring state following preview
    this.nameindpkeys = {};
    //
    // family, initials form, fullname (with given stripped of periods)
    //
    // keys registered, indexed by ID
    this.itemkeyreg = {};

    strip_periods = function (str) {
        if (!str) {
            str = "";
        }
        return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/,"");
    };

    set_keys = function (state, itemid, nameobj) {
        pkey = strip_periods(nameobj.family);
        skey = strip_periods(nameobj.given);
        // Drop lowercase suffixes (such as et al.) from given name field
        // for disambiguation purposes.
        var m = skey.match(/[,\!]* ([^,]+)$/);
        if (m && m[1] === m[1].toLowerCase()) {
            skey = skey.replace(/[,\!]* [^,]+$/, "");
        }
        // The %s terminator enables normal initialization behavior
        // with non-Byzantine names.
        ikey = CSL.Util.Names.initializeWith(state, skey, "%s");
        if (state.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            pkey = "" + itemid + pkey;
        }
    };

    evalname = function (item_id, nameobj, namenum, request_base, form, initials) {
        var param;
        // XXX THIS CAN NO LONGER HAPPEN
        if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
            if ("string" === typeof initials) {
                return 1;
            } else {
                return 2;
            }
        }
        var res = state.nameOutput.getName(nameobj, "locale-translit", true);
        nameobj = res.name;
        set_keys(this.state, "" + item_id, nameobj);
        //
        // possible options are:
        //
        // <option disambiguate-add-givenname value="true"/> (a)
        // <option disambiguate-add-givenname value="all-names"/> (a)
        // <option disambiguate-add-givenname value="all-names-with-initials"/> (b)
        // <option disambiguate-add-givenname value="primary-name"/> (d)
        // <option disambiguate-add-givenname value="primary-name-with-initials"/> (e)
        // <option disambiguate-add-givenname value="by-cite"/> (g)
        //
        param = 2;
        dagopt = state.opt["disambiguate-add-givenname"];
        gdropt = state.citation.opt["givenname-disambiguation-rule"];
        var gdropt_orig = gdropt;
        if (gdropt === "by-cite") {
            gdropt = "all-names";
        }
        //
        // set initial value
        //
        if ("short" === form) {
            param = 0;
        } else if ("string" === typeof initials) {
            param = 1;
        }
        //
        // give literals a pass
        if ("undefined" === typeof this.namereg[pkey] || "undefined" === typeof this.namereg[pkey].ikey[ikey]) {
            return param;
        }
        //
        // adjust value upward if appropriate -- only if running
        // a non-names-global disambiguation strategy
        //
        if (gdropt_orig === "by-cite" && param <= request_base) {
            //param = request_base;
            return request_base;
        }
        if (!dagopt) {
            return param;
        }
        if ("string" === typeof gdropt && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
            return param;
        }
        //
        // the last composite condition is for backward compatibility
        //
        if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
            if (this.namereg[pkey].count > 1) {
                param = 1;
            }
            if ((this.namereg[pkey].ikey 
                 && this.namereg[pkey].ikey[ikey].count > 1)
                || (this.namereg[pkey].count > 1 
                    && "string" !== typeof initials)) {

                param = 2;
            }
        } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
            if (this.namereg[pkey].count > 1) {
                param = 1;
            } else {
                param = 0;
            }
        }
        if (!state.registry.registry[item_id]) {
            if (form == "short") {
                return 0;
            } else if ("string" == typeof initials) {
                return 1;
            }
        } else {
            return param;
        }
    };

    //
    // The operation of this function does not show up in the
    // standard test suite, but it has been hand-tested with
    // a print trace, and seems to work okay.
    //
    delitems = function (ids) {
        var pos, len, posB, id, fullkey;
        if ("string" === typeof ids || "number" === typeof ids) {
            ids = ["" + ids];
        }
        // ret carries the IDs of other items using this name.
        var ret = {};
        len = ids.length;
        for (pos = 0; pos < len; pos += 1) {
            id = "" + ids[pos];
            if (!this.nameind[id]) {
                continue;
            }
            for (fullkey in this.nameind[id]) {
                if (this.nameind[id].hasOwnProperty(fullkey)) {
                    var key = fullkey.split("::");
                    pkey = key[0];
                    ikey = key[1];
                    skey = key[2];
                    // Skip names that have been deleted already.
                    // Needed to clear integration DisambiguateAddGivenname1.txt
                    // and integration DisambiguateAddGivenname2.txt
                    if ("undefined" === typeof this.namereg[pkey]) {
                        continue;
                    }

                    // ????
                    //posA = this.namereg[pkey].items.indexOf(posA);

                    items = this.namereg[pkey].items;
                    // This was really, really unperceptive. They key elements
                    // have absolutely nothing to do with whether there was ever
                    // a registration at each key level.
                    if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                        myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                        posB = myitems.indexOf("" + id);
                        if (posB > -1) {
                            this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([(posB + 1)]));
                        }
                        if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                            delete this.namereg[pkey].ikey[ikey].skey[skey];
                            this.namereg[pkey].ikey[ikey].count += -1;
                            if (this.namereg[pkey].ikey[ikey].count < 2) {
                                for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                                    state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                                }
                            }
                        }
                    }
                    if (ikey && this.namereg[pkey].ikey[ikey]) {
                        posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id);
                        if (posB > -1) {
                            items = this.namereg[pkey].ikey[ikey].items.slice();
                            this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                        }
                        if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                            delete this.namereg[pkey].ikey[ikey];
                            this.namereg[pkey].count += -1;
                            if (this.namereg[pkey].count < 2) {
                                for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                                    state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                                }
                            }
                        }
                    }
                    if (pkey) {
                        posB = this.namereg[pkey].items.indexOf("" + id);
                        if (posB > -1) {
                            items = this.namereg[pkey].items.slice();
                            this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                        }
                        if (this.namereg[pkey].items.length < 2) {
                            delete this.namereg[pkey];
                        }
                    }
                    delete this.nameind[id][fullkey];
                }
            }
            delete this.nameind[id];
            delete this.nameindpkeys[id];
        }
        return ret;
    };
    //
    // Run ALL
    // renderings with disambiguate-add-givenname set to a value
    // with the by-cite behaviour, and then set the names-based
    // expanded form when the final makeCitationCluster rendering
    // is output.  This could be done with a single var set on
    // the state object in the execution wrappers that run the
    // style.
    //
    addname = function (item_id, nameobj, pos) {
        var i, ilen;
        var res = state.nameOutput.getName(nameobj, "locale-translit", true);
        nameobj = res.name;

        if (state.citation.opt["givenname-disambiguation-rule"]
            && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-"
            && pos !== 0) {
                return;
        }
        
        // A hack. Safe if the name object is used only here, for disambiguation purposes.
        if (state.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
            nameobj["family"] = nameobj["non-dropping-particle"] + " " + nameobj["family"];
        }
        
        //CSL.debug("INS");
        set_keys(this.state, "" + item_id, nameobj);
        // pkey, ikey and skey should be stored in separate cascading objects.
        // there should also be a kkey, on each, which holds the item ids using
        // that form of the name.
        //
        // (later note: well, we seem to have slipped a notch here.
        // Adding lists of IDs all over the place here makes no sense;
        // the lists need to include _only_ the items currently rendered
        // at the given level, and the place to do that is in evalname,
        // and in delnames, not here.)
        if (pkey) {
            if ("undefined" === typeof this.namereg[pkey]) {
                this.namereg[pkey] = {};
                this.namereg[pkey].count = 0;
                this.namereg[pkey].ikey = {};
                this.namereg[pkey].items = [item_id];
            } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
                this.namereg[pkey].items.push(item_id);
            }
//            if (this.namereg[pkey].items.indexOf(item_id) === -1) {
//                this.namereg[pkey].items.push(item_id);
//            }
        }
        if (pkey && ikey) {
            if ("undefined" === typeof this.namereg[pkey].ikey[ikey]) {
                this.namereg[pkey].ikey[ikey] = {};
                this.namereg[pkey].ikey[ikey].count = 0;
                this.namereg[pkey].ikey[ikey].skey = {};
                this.namereg[pkey].ikey[ikey].items = [item_id];
                this.namereg[pkey].count += 1;
                if (this.namereg[pkey].count === 2) {
                    for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                    }
                }
            } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
                this.namereg[pkey].ikey[ikey].items.push(item_id);
            }
//            if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
//                this.namereg[pkey].ikey[ikey].items.push(item_id);
//            }
        }
        if (pkey && ikey && skey) {
            if ("undefined" === typeof this.namereg[pkey].ikey[ikey].skey[skey]) {
                this.namereg[pkey].ikey[ikey].skey[skey] = {};
                this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
                this.namereg[pkey].ikey[ikey].count += 1;
                if (this.namereg[pkey].ikey[ikey].count === 2) {
                    for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                    }
                }
            } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
                this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
            }
//            if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
//                this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
//            }
        }
        if ("undefined" === typeof this.nameind[item_id]) {
            this.nameind[item_id] = {};
            this.nameindpkeys[item_id] = {};
        }
        //CSL.debug("INS-A: [" + pkey + "] [" + ikey + "] [" + skey + "]");
        if (pkey) {
            this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
            this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
        }
        //CSL.debug("INS-B");
    };
    this.addname = addname;
    this.delitems = delitems;
    this.evalname = evalname;
};

/*global CSL: true */

CSL.Registry.CitationReg = function () {
    this.citationById = {};
    this.citationByIndex = [];
};

/*global CSL: true */

CSL.Disambiguation = function (state) {
    this.state = state;
    this.sys = this.state.sys;
    this.registry = state.registry.registry;
    this.ambigcites = state.registry.ambigcites;
    this.configModes();
    this.debug = false;
};

CSL.Disambiguation.prototype.run = function(akey) {
    if (!this.modes.length) {
        return;
    }
    //SNIP-START
    if (this.debug) {
        print("[A] === RUN ===");
    }
    //SNIP-END
    this.akey = akey;
    if (this.initVars(akey)) {
        this.runDisambig();
    }

};

CSL.Disambiguation.prototype.runDisambig = function () {
    var ismax;
    //SNIP-START
    if (this.debug) {
        print("[C] === runDisambig() ===");
    }
    //SNIP-END
    this.initGivens = true;
    //
    // Length of list may change during processing
    while (this.lists.length) {
        this.gnameset = 0;
        this.gname = 0;
        this.clashes = [1, 0];
        // each list is scanned repeatedly until all
        // items either succeed or ultimately fail.
        while(this.lists[0][1].length) {
            this.listpos = 0;
            if (!this.base) {
                this.base = this.lists[0][0];
            }
            ismax = this.incrementDisambig();
            this.scanItems(this.lists[0]);
            this.evalScan(ismax);
        }
        this.lists = this.lists.slice(1);
    }
};

CSL.Disambiguation.prototype.scanItems = function (list) {
    var pos, len, otherItem;
    //SNIP-START
    if (this.debug) {
        print("[2] === scanItems() ===");
    }
    //SNIP-END

    this.Item = list[1][0];
    this.ItemCite = CSL.getAmbiguousCite.call(this.state, this.Item, this.base, true);

    this.scanlist = list[1];
    this.partners = [];
    this.partners.push(this.Item);
    this.nonpartners = [];
    var clashes = 0;

    for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
        otherItem = list[1][pos];
        var otherItemCite = CSL.getAmbiguousCite.call(this.state, otherItem, this.base, true);
        //SNIP-START
        if (this.debug) {
            if (pos > 1) {
                print("  -----------");
            }
        }
        //SNIP-END
        if (this.ItemCite === otherItemCite) {
            //SNIP-START
            if (this.debug) {
                print("  [CLASH]--> "+this.Item.id+": "+this.ItemCite);
                print("             "+otherItem.id+": "+otherItemCite);
            }
            //SNIP-END
            clashes += 1;
            this.partners.push(otherItem);
        } else {
            //SNIP-START
            if (this.debug) {
                print("  [clear]--> "+this.Item.id+": "+this.ItemCite);
                print("             "+otherItem.id+": "+otherItemCite);
            }
            //SNIP-END
            this.nonpartners.push(otherItem);
        }
    }
    this.clashes[0] = this.clashes[1];
    this.clashes[1] = clashes;
};

CSL.Disambiguation.prototype.evalScan = function (maxed) {
    this[this.modes[this.modeindex]](maxed);
    if (maxed) {
        if (this.modeindex < this.modes.length - 1) {
            this.modeindex += 1;
        } else {
            this.lists[this.listpos + 1] = [this.base, []];
        }
    }
};

CSL.Disambiguation.prototype.disNames = function (ismax) {
    var i, ilen;
    
    //SNIP-START
    if (this.debug) {
        print("[3] == disNames() ==");
        //print("       partners: "+[this.partners[i].id for (i in this.partners)].join(", "));
        //print("    nonpartners: "+[this.nonpartners[i].id for (i in this.nonpartners)].join(", "));
    }
    //SNIP-END

    // New design
    // this.base is a forward-only counter. Values are never
    // reduced, and the counter object is never overwritten.
    // It is methodically pushed forward in single-unit increments
    // in incrementDisambig() until disNames() wipes out the list.

    // this.betterbase is cloned from this.base exactly once,
    // at the start of a disambiguation run. Whenever an operation
    // results in improvement, the just-incremented elements
    // identified as this.base.names[this.gnameset] (number of
    // names)and as this.base.givens[this.gnameset][this.gname]
    // (level of given name) are copied from this.base.

    // The this.base object is used to control disambiguation
    // renderings. These will be more fully expanded than the final
    // text, but the flip side of the fact that the extra data does
    // not contribute anything to disambiguation is that leaving
    // it in does no harm -- think of it as the Cold Dark Matter of
    // disambiguation.

    if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
        this.captureStepToBase();
        //SNIP-START
        if (this.debug) {
            print("  ** RESOLUTION [a]: lone partner, one nonpartner");
            print("  registering "+this.partners[0].id+" and "+this.nonpartners[0].id);
        }
        //SNIP-END
        this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
        this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
        this.lists[this.listpos] = [this.betterbase, []];
    } else if (this.clashes[1] === 0) {
        this.captureStepToBase();
        //SNIP-START
        if (this.debug) {
            print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
            print("  registering "+this.partners[0].id);
        }
        //SNIP-END
        this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
        this.lists[this.listpos] = [this.betterbase, this.nonpartners];
        if (this.nonpartners.length) {
            this.initGivens = true;
        }
    } else if (this.nonpartners.length === 1) {
        this.captureStepToBase();
        //SNIP-START
        if (this.debug) {
            print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
            print("  registering "+this.nonpartners[0].id);
        }
        //SNIP-END
        this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
        //this.lists[this.listpos] = [this.betterbase, this.partners];
        this.lists[this.listpos] = [this.betterbase, this.partners];
    } else if (this.clashes[1] < this.clashes[0]) {
        this.captureStepToBase();
        //SNIP-START
        if (this.debug) {
            print("  ** RESOLUTION [d]: better result, but no entries safe to register");
        }
        //SNIP-END
        this.lists[this.listpos] = [this.betterbase, this.partners];
        this.lists.push([this.betterbase, this.nonpartners]);
    } else {
        //SNIP-START
        if (this.debug) {
            print("  ** RESOLUTION [e]: no improvement, and clashes remain");
        }
        //SNIP-END
        if (ismax) {
            this.lists[this.listpos] = [this.betterbase, this.nonpartners];
            this.lists.push([this.betterbase, this.partners]);
            if (this.modeindex === this.modes.length - 1) {
                //SNIP-START
                if (this.debug) {
                    print("     (registering clashing entries because we've run out of options)");
                }
                //SNIP-END
                for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
                    this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
                }
                this.lists[this.listpos] = [this.betterbase, []];
            }
        }
    }
};

CSL.Disambiguation.prototype.disExtraText = function () {
    //SNIP-START
    if (this.debug) {
        print("[3] === disExtraText ==");
    }
    //SNIP-END
    
    var done = false;

    if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
        done = true;
    }

    // If first encounter in this cycle and multiple modes are
    // available, decrement mode and reset base
    if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
        // Rerun everything on each subcycle? This doesn't work currently.
        //this.initVars(this.akey)
        this.modeindex = 0;
        this.base.disambiguate = this.state.tmp.disambiguate_count;
        this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
        if (!this.base.disambiguate) {
            // Evaluate here?
            this.initGivens = true;
            // If disambiguate is false set to true
            this.base.disambiguate = 1;
            // There may be changes
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            }
        } else {
            this.disNames();
        }
    } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
        if (done || this.modeindex === this.modes.length - 1) {
            // If this is the end, disambiguation failed.
            // Discard disambiguate=true (?) and set parameters
            var base = this.lists[this.listpos][0];
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
                this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
            this.lists[this.listpos] = [this.betterbase, []];
        } else {
            // If this is followed by year-suffix, keep
            // parameters and set disambiguate=true since it MIGHT
            // include the date, needed for year-suffix.
            // This may be a bit over-aggressive for cases in which the
            // disambiguate condition does not add the date
            this.modeindex = this.modes.length - 1;
            var base = this.lists[this.listpos][0];
            base.disambiguate = true;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                // Always tainting here might be a little over-aggressive, but a taint may be required.
                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
                this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
        }
    }
};

CSL.Disambiguation.prototype.disYears = function () {
    var pos, len, tokens, token;
    //SNIP-START
    if (this.debug) {
        print("[3] === disYears ==");
    }
    //SNIP-END
    tokens = [];
    var base = this.lists[this.listpos][0];
    if (this.clashes[1]) {
        // That is, if the initial increment on the ambigs group returns no
        // clashes, don't apply suffix. The condition is a necessary failsafe.
		// In original submission order
		for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
			var origid = this.state.registry.mylist[i];
			for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
				var token = this.lists[this.listpos][1][j];
				// Warning: token.id can be number. This should be fixed at a higher level in citeproc-js if poss.
				if (token.id == origid) {
					tokens.push(this.registry[token.id]);
					break;
				}
			}
		}
    }
    tokens.sort(this.state.registry.sorter.compareKeys);
    for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
        base.year_suffix = ""+pos;
        var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
        this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
        if (CSL.ambigConfigDiff(oldBase,base)) {
            this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
        }
    }
    this.lists[this.listpos] = [this.betterbase, []];
};

CSL.Disambiguation.prototype.incrementDisambig = function () {
    //SNIP-START
    if (this.debug) {
        print("\n[1] === incrementDisambig() ===");
    }
    //SNIP-END
    if (this.initGivens) {
        this.initGivens = false;
        return false;
    }
    var maxed = false;
    var increment_names = true;
    if ("disNames" === this.modes[this.modeindex]) {
        // this.gnameset: the index pos of the current nameset
        // this.gname: the index pos of the current name w/in the current nameset
        
        // Stages:
        // - Increment givenname (optional)
        // - Add a name (optional)
        // - Move to next nameset

        // Incrementing is done forward-only on this.base. Values
        // that improve disambiguation results are copied to
        // this.betterbase, which is used to set the disambig parameters
        // in the processor registry.
        

        // Increment
        // Max val is always true if a level is inactive.
        increment_names = false;
        if ("number" !== typeof this.givensMax) {
            increment_names = true;
        }
        var increment_namesets = false;
        if ("number" !== typeof this.namesMax) {
            increment_namesets = true;
        }
        if ("number" === typeof this.givensMax) {
            if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
                this.base.givens[this.gnameset][this.gname] += 1;
            } else {
                increment_names = true;
            }
        }
        if ("number" === typeof this.namesMax 
            && increment_names) {
            if (this.state.opt["disambiguate-add-names"]) {
                increment_namesets = false;
                if (this.gname < this.namesMax) {
                    this.base.names[this.gnameset] += 1;
                    this.gname += 1;
                } else {
                    increment_namesets = true;
                }
            } else {
                increment_namesets = true;
            }
        }
        if ("number" === typeof this.namesetsMax && increment_namesets) {
            if (this.gnameset < this.namesetsMax) {
                this.gnameset += 1;
                this.base.names[this.gnameset] = 1;
                this.gname = 0;
            }
        }
        //SNIP-START
        if (this.debug) {
            print("    ------------------");
            print("    incremented values");
            print("    ------------------");
            print("    | gnameset: "+this.gnameset);
            print("    | gname: "+this.gname);
            print("    | names value: "+this.base.names[this.gnameset]);
            if (this.base.givens.length) {
                print("    | givens value: "+this.base.givens[this.gnameset][this.gname]);
            } else {
                print("    | givens value: nil");
            }
            print("    | namesetsMax: "+this.namesetsMax);
            print("    | namesMax: "+this.namesMax);
            print("    | givensMax: "+this.givensMax);
        }
        //SNIP-END
        if (("number" !== typeof this.namesetsMax || this.namesetsMax === -1 || this.gnameset === this.namesetsMax)
            && (!this.state.opt["disambiguate-add-names"] || "number" !== typeof this.namesMax || this.gname === this.namesMax)
            && ("number" != typeof this.givensMax || "undefined" === typeof this.base.givens[this.gnameset] || "undefined" === typeof this.base.givens[this.gnameset][this.gname] || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
  

            maxed = true;
            //SNIP-START
            if (this.debug) {
                print("    MAXED");
            }
            //SNIP-END
        }
    } else if ("disExtraText" === this.modes[this.modeindex]) {
        this.base.disambiguate += 1;
        this.betterbase.disambiguate += 1;
    }
    return maxed;
};

CSL.Disambiguation.prototype.initVars = function (akey) {
    var i, ilen, myIds, myItemBundles, myItems;
    //SNIP-START
    if (this.debug) {
        print("[B] === initVars() ===");
    }
    //SNIP-END
    this.lists = [];
    this.base = false;
    this.betterbase = false;
    this.akey = akey;

    this.maxNamesByItemId = {};


    myItemBundles = [];
    myIds = this.ambigcites[akey];
    if (!myIds || !myIds.length) {
        return false;
    }
    var myItem = this.state.refetchItem("" + myIds[0]);
    this.getCiteData(myItem);
    this.base = CSL.getAmbigConfig.call(this.state);
    if (myIds && myIds.length > 1) {
        myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
        // Build a composite list of Items and associated
        // max names. This is messy, but it's the only
        // way to get the items sorted by the number of names
        // to be disambiguated. If they are in descending order
        // with name expansions, the processor will hang.
        for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
            myItem = this.state.refetchItem("" + myIds[i]);
            this.getCiteData(myItem, this.base);
            myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
        }
        myItemBundles.sort(
            function (a, b) {
                if (a[0] > b[0]) {
                    return 1;
                } else if (a[0] < b[0]) {
                    return -1;
                } else {
                    if (a[1].id > b[1].id) {
                        return 1;
                    } else if (a[1].id < b[1].id) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            }
        );
        myItems = [];
        for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
            myItems.push(myItemBundles[i][1]);
        }
        this.lists.push([this.base, myItems]);
        this.Item = this.lists[0][1][0];
    } else {
        this.Item = this.state.refetchItem("" + myIds[0]);
    }

    this.modeindex = 0;
    if (this.state.citation.opt["disambiguate-add-names"] || true) {
        this.namesMax = this.maxNamesByItemId[this.Item.id][0];
    } else {
        var namesMax = this.base.names[0];
        for (var i=1,ilen=this.base.names.length;i<ilen;i+=1){
            namesMax = Math.max(namesMax,this.base.names.names[i]);
        }
    }


    this.padBase(this.base);
    this.padBase(this.betterbase);
    this.base.year_suffix = false;
    this.base.disambiguate = false;
    this.betterbase.year_suffix = false;
    this.betterbase.disambiguate = false;
    if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite"
       && this.state.opt["disambiguate-add-givenname"]) {
        this.givensMax = 2;
    }
    return true;
};


CSL.Disambiguation.prototype.padBase = function (base) {
    for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
        if (!base.givens[i]) {
            base.givens[i] = [];
        }
        for (var j=0,jlen=base.names[i];j<jlen;j+=1) {
            if (!base.givens[i][j]) {
                base.givens[i][j] = 0;
            }
        }
    }
};

/**
 * Set available modes for disambiguation
 */
CSL.Disambiguation.prototype.configModes = function () {
    var dagopt, gdropt;
    // Modes are function names prototyped to this instance.
    this.modes = [];
    dagopt = this.state.opt["disambiguate-add-givenname"];
    gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
    if (this.state.opt['disambiguate-add-names'] || (dagopt && gdropt === "by-cite")) {
        this.modes.push("disNames");
    }

    if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
        if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
        }
        if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
        }
    } else {
        if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
        }
        if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
        }
    }
};

CSL.Disambiguation.prototype.getCiteData = function(Item, base) {
    // Initialize base if first set item seen
    if (!this.maxNamesByItemId[Item.id]) {
        CSL.getAmbiguousCite.call(this.state, Item, base);
        base = CSL.getAmbigConfig.call(this.state);
        this.maxNamesByItemId[Item.id] = CSL.getMaxVals.call(this.state);
        this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
        // Slice the nested lists as well. Without this, disambiguate_YearSuffixFiftyTwoEntriesByCite fails.
        for (var i=0,ilen=this.state.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {
            this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
        }
        this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
        if (!this.base) {
            this.base = base;
            this.betterbase = CSL.cloneAmbigConfig(base);
        }
        if (base.names.length < this.base.names.length) {
            // I don't know what would happen with discrepancies in the number
            // of namesets rendered on items, so we use the fewer of the two
            // and limit the other to that size.
            this.base = base;
        }
        // Padding. Within namesets, we use the longer of the two throughout.
        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
            if (base.names[i] > this.base.names[i]) {
                // XXX The old must have been wrong surely. The new, I'm not sure.
                //this.base.givens[i] = this.base.givens[i].concat(this.base.givens[i].slice(this.base.names[i]));
                this.base.givens[i] = base.givens[i].slice();
                this.base.names[i] = base.names[i];
                this.betterbase.names = this.base.names.slice();
                this.betterbase.givens = this.base.givens.slice();
                this.padBase(this.base);
                this.padBase(this.betterbase);
            }
        }
        // This shouldn't be necessary
        // getAmbiguousCite() should return a valid and complete
        // givens segment under all conditions, but it does not
        // do so for institution authors, so we clean up after it
        // here.
        // Relevant test: sort_ChicagoYearSuffix2
        this.betterbase.givens = this.base.givens.slice();
        for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
            this.betterbase.givens[j] = this.base.givens[j].slice();
        }
    }
};

CSL.Disambiguation.prototype.captureStepToBase = function() {
    // Be paranoid about the presence of givens
    if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite"
        && this.base.givens && this.base.givens.length) {
        if ("undefined" !== typeof this.base.givens[this.gnameset][this.gname]) {
            if (this.betterbase.givens.length < this.base.givens.length) {
                this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
            }
            this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
        }
    }
    this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
};

CSL.Engine.prototype.getJurisdictionList = function (jurisdiction) {
    var jurisdictionList = [];
    var jurisdictionElems = jurisdiction.split(":");
    for (var j=jurisdictionElems.length;j>0;j--) {
        var composedID = jurisdictionElems.slice(0,j).join(":");
        jurisdictionList.push(composedID);
        if (this.opt.jurisdiction_fallbacks[composedID]) {
            var fallback = this.opt.jurisdiction_fallbacks[composedID];
            jurisdictionList.push(fallback);
        }
    }
    if (jurisdictionList.indexOf("us") === -1) {
        jurisdictionList.push("us");
    }
    return jurisdictionList;
};

CSL.Engine.prototype.loadStyleModule = function (jurisdiction, xmlSource, skipFallback) {
    var myFallback = null;
    this.juris[jurisdiction] = {};
    var myXml = CSL.setupXml(xmlSource);
    myXml.addMissingNameNodes(myXml.dataObj);
    myXml.addInstitutionNodes(myXml.dataObj);
    myXml.insertPublisherAndPlace(myXml.dataObj);
    myXml.flagDateMacros(myXml.dataObj);
    var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
    for (var i=0,ilen=myNodes.length;i<ilen;i++) {
        var myTypes = myXml.getAttributeValue(myNodes[i],"types");
        if (myTypes) {
            this.juris[jurisdiction].types = {};
            myTypes =  myTypes.split(/\s+/);
            for (var j=0,jlen=myTypes.length;j<jlen;j++) {
                this.juris[jurisdiction].types[myTypes[j]] = true;
            }
        }
        if (!skipFallback) {
            myFallback = myXml.getAttributeValue(myNodes[i],"fallback");
            if (myFallback) {
                if (jurisdiction !== "us") {
                    this.opt.jurisdiction_fallbacks[jurisdiction] = myFallback;
                }
            }
        }
    }
    var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
    CSL.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
    
    if (!this.juris[jurisdiction].types) {
        this.juris[jurisdiction].types = CSL.MODULE_TYPES;
    }
    var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
    for (var i=0,ilen=myNodes.length;i<ilen;i++) {
        var myName = myXml.getAttributeValue(myNodes[i], "name");
        if (!CSL.MODULE_MACROS[myName]) {
            CSL.debug("CSL: skipping non-modular macro name \"" + myName + "\" in module context");
            continue;
        }
        this.juris[jurisdiction][myName] = [];
        // Must use the same XML parser for style and modules.
        this.buildTokenLists(myNodes[i], this.juris[jurisdiction][myName]);
        this.configureTokenList(this.juris[jurisdiction][myName]);
    }
    //if (macroCount < Object.keys(CSL.MODULE_MACROS).length) {
    //    var missing = [];
    //    throw "CSL ERROR: Incomplete jurisdiction style module for: " + jurisdiction;
    //}
    return myFallback;
};

CSL.Engine.prototype.retrieveAllStyleModules = function (jurisdictionList) {
    var ret = {};
    var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
    preferences = preferences ? preferences : [];
    preferences = [""].concat(preferences);
    for (var i=preferences.length-1;i>-1;i--) {
        var preference = preferences[i];
        for (var j=0,jlen=jurisdictionList.length;j<jlen;j++) {
            var jurisdiction = jurisdictionList[j];
            // If we've "seen" it, we have it already, or we're not going to get it.
            if (this.opt.jurisdictions_seen[jurisdiction]) {
                continue;
            }
            // Try to get the module
            var res = this.sys.retrieveStyleModule(jurisdiction, preference);
            // If we fail and we've run out of preferences, mark as "seen"
            // Otherwise mark as "seen" if we get something.
            if ((!res && !preference) || res) {
                this.opt.jurisdictions_seen[jurisdiction] = true;
            }
            // Don't memo unless get got style code.
            if (!res) {
                continue;
            }
            ret[jurisdiction] = res;
        }
    }
    // Give 'em what we got.
    return ret;
};

CSL.ParticleList = (function() {
	var always_dropping_1 = [[[0,1], null]];
	var always_dropping_3 = [[[0,3], null]];
	var always_non_dropping_1 = [[null, [0,1]]];
	var always_non_dropping_2 = [[null, [0,2]]];
	var always_non_dropping_3 = [[null, [0,3]]];
	var either_1 = [[null, [0,1]],[[0,1],null]];
	var either_2 = [[null, [0,2]],[[0,2],null]];
	var either_1_dropping_best = [[[0,1],null],[null, [0,1]]];
	var either_2_dropping_best = [[[0,2],null],[null, [0,2]]];
	var either_3_dropping_best = [[[0,3],null],[null, [0,3]]];
	var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0,2]], [[0,1], [1,2]]];
	var PARTICLES = [
		["'s", always_non_dropping_1],
		["'s-", always_non_dropping_1],
		["'t", always_non_dropping_1],
		["a", 	always_non_dropping_1],
		["aan 't", always_non_dropping_2],
		["aan de", always_non_dropping_2],
		["aan den", always_non_dropping_2],
		["aan der", always_non_dropping_2],
		["aan het", always_non_dropping_2],
		["aan t", always_non_dropping_2],
		["aan", always_non_dropping_1],
		["ad-", either_1],
		["adh-", either_1],
		["af", either_1],
		["al", either_1],
		["al-", either_1],
		["am de", always_non_dropping_2],
		["am", always_non_dropping_1],
		["an-", either_1],
		["ar-", either_1],
		["as-", either_1],
		["ash-", either_1],
		["at-", either_1],
		["ath-", either_1],
		["auf dem", either_2_dropping_best],
		["auf den", either_2_dropping_best],
		["auf der", either_2_dropping_best],
		["auf ter", always_non_dropping_2],
		["auf", either_1_dropping_best],
		["aus 'm", either_2_dropping_best],
		["aus dem", either_2_dropping_best],
		["aus den", either_2_dropping_best],
		["aus der", either_2_dropping_best],
		["aus m", either_2_dropping_best],
		["aus", either_1_dropping_best],
		["aus'm", either_2_dropping_best],
		["az-", either_1],
		["aš-", either_1],
		["aḍ-", either_1],
		["aḏ-", either_1],
		["aṣ-", either_1],
		["aṭ-", either_1],
		["aṯ-", either_1],
		["aẓ-", either_1],
		["ben", always_non_dropping_1],
		["bij 't", always_non_dropping_2],
		["bij de", always_non_dropping_2],
		["bij den", always_non_dropping_2],
		["bij het", always_non_dropping_2],
		["bij t", always_non_dropping_2],
		["bij", always_non_dropping_1],
		["bin", always_non_dropping_1],
		["boven d", always_non_dropping_2],
		["boven d'", always_non_dropping_2],
		["d", always_non_dropping_1],
		["d'", either_1],
		["da", either_1],
		["dal", always_non_dropping_1],
		["dal'", always_non_dropping_1],
		["dall'", always_non_dropping_1],
		["dalla", always_non_dropping_1],
		["das", either_1],
		["de die le", always_non_dropping_3],
		["de die", always_non_dropping_2],
		["de l", always_non_dropping_2],
		["de l'", always_non_dropping_2],
		["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
		["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
		["de le", always_non_dropping_2],
		["de li", either_2],
		["de van der", always_non_dropping_3],
		["de", either_1],
		["de'", either_1],
		["deca", always_non_dropping_1],
		["degli", either_1],
		["dei", either_1],
		["del", either_1],
		["dela", always_dropping_1],
		["dell'", either_1],
		["della", either_1],
		["delle", either_1],
		["dello", either_1],
		["den", either_1],
		["der", either_1],
		["des", either_1],
		["di", either_1],
		["die le", always_non_dropping_2],
		["do", always_non_dropping_1],
		["don", always_non_dropping_1],
		["dos", either_1],
		["du", either_1],
		["ed-", either_1],
		["edh-", either_1],
		["el", either_1],
		["el-", either_1],
		["en-", either_1],
		["er-", either_1],
		["es-", either_1],
		["esh-", either_1],
		["et-", either_1],
		["eth-", either_1],
		["ez-", either_1],
		["eš-", either_1],
		["eḍ-", either_1],
		["eḏ-", either_1],
		["eṣ-", either_1],
		["eṭ-", either_1],
		["eṯ-", either_1],
		["eẓ-", either_1],
		["het", always_non_dropping_1],
		["i", always_non_dropping_1],
		["il", always_dropping_1],
		["im", always_non_dropping_1],
		["in 't", always_non_dropping_2],
		["in de", always_non_dropping_2],
		["in den", always_non_dropping_2],
		["in der", either_2],
		["in het", always_non_dropping_2],
		["in t", always_non_dropping_2],
		["in", always_non_dropping_1],
		["l", always_non_dropping_1],
		["l'", always_non_dropping_1],
		["la", always_non_dropping_1],
		["las", always_non_dropping_1],
		["le", always_non_dropping_1],
		["les", either_1],
		["lo", either_1],
		["los", always_non_dropping_1],
		["lou", always_non_dropping_1],
		["of", always_non_dropping_1],
		["onder 't", always_non_dropping_2],
		["onder de", always_non_dropping_2],
		["onder den", always_non_dropping_2],
		["onder het", always_non_dropping_2],
		["onder t", always_non_dropping_2],
		["onder", always_non_dropping_1],
		["op 't", always_non_dropping_2],
		["op de", either_2],
		["op den", always_non_dropping_2],
		["op der", always_non_dropping_2],
		["op gen", always_non_dropping_2],
		["op het", always_non_dropping_2],
		["op t", always_non_dropping_2],
		["op ten", always_non_dropping_2],
		["op", always_non_dropping_1],
		["over 't", always_non_dropping_2],
		["over de", always_non_dropping_2],
		["over den", always_non_dropping_2],
		["over het", always_non_dropping_2],
		["over t", always_non_dropping_2],
		["over", always_non_dropping_1],
		["s", always_non_dropping_1],
		["s'", always_non_dropping_1],
		["sen", always_dropping_1],
		["t", always_non_dropping_1],
		["te", always_non_dropping_1],
		["ten", always_non_dropping_1],
		["ter", always_non_dropping_1],
		["tho", always_non_dropping_1],
		["thoe", always_non_dropping_1],
		["thor", always_non_dropping_1],
		["to", always_non_dropping_1],
		["toe", always_non_dropping_1],
		["tot", always_non_dropping_1],
		["uijt 't", always_non_dropping_2],
		["uijt de", always_non_dropping_2],
		["uijt den", always_non_dropping_2],
		["uijt te de", always_non_dropping_3],
		["uijt ten", always_non_dropping_2],
		["uijt", always_non_dropping_1],
		["uit 't", always_non_dropping_2],
		["uit de", always_non_dropping_2],
		["uit den", always_non_dropping_2],
		["uit het", always_non_dropping_2],
		["uit t", always_non_dropping_2],
		["uit te de", always_non_dropping_3],
		["uit ten", always_non_dropping_2],
		["uit", always_non_dropping_1],
		["unter", always_non_dropping_1],
		["v", always_non_dropping_1],
		["v.", always_non_dropping_1],
		["v.d.", always_non_dropping_1],
		["van 't", always_non_dropping_2],
		["van de l", always_non_dropping_3],
		["van de l'", always_non_dropping_3],
		["van de", always_non_dropping_2],
		["van de", always_non_dropping_2],
		["van den", always_non_dropping_2],
		["van der", always_non_dropping_2],
		["van gen", always_non_dropping_2],
		["van het", always_non_dropping_2],
		["van la", always_non_dropping_2],
		["van t", always_non_dropping_2],
		["van ter", always_non_dropping_2],
		["van van de", always_non_dropping_3],
		["van", either_1],
		["vander", always_non_dropping_1],
		["vd", always_non_dropping_1],
		["ver", always_non_dropping_1],
		["vom und zum", always_dropping_3],
		["vom", either_1],
		["von 't", always_non_dropping_2],
		["von dem", either_2_dropping_best],
		["von den", either_2_dropping_best],
		["von der", either_2_dropping_best],
		["von t", always_non_dropping_2],
		["von und zu", either_3_dropping_best],
		["von zu", either_2_dropping_best],
		["von", either_1_dropping_best],
		["voor 't", always_non_dropping_2],
		["voor de", always_non_dropping_2],
		["voor den", always_non_dropping_2],
		["voor in 't", always_non_dropping_3],
		["voor in t", always_non_dropping_3],
		["voor", always_non_dropping_1],
		["vor der", either_2_dropping_best],
		["vor", either_1_dropping_best],
		["z", always_dropping_1],
		["ze", always_dropping_1],
		["zu", either_1_dropping_best],
		["zum", either_1],
		["zur", either_1]
	];
    return PARTICLES;
}());

CSL.parseParticles = (function(){
    function splitParticles(nameValue, firstNameFlag, caseOverride) {
		// Parse particles out from name fields.
		// * nameValue (string) is the field content to be parsed.
		// * firstNameFlag (boolean) parse trailing particles
		//	 (default is to parse leading particles)
		// * caseOverride (boolean) include all but one word in particle set
		//	 (default is to include only words with lowercase first char)
        //   [caseOverride is not used in this application]
		// Returns an array with:
		// * (boolean) flag indicating whether a particle was found
		// * (string) the name after removal of particles
		// * (array) the list of particles found
		var origNameValue = nameValue;
		nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
		var particleList = [];
		var rex;
        var hasParticle;
		if (firstNameFlag) {
			nameValue = nameValue.split("").reverse().join("");
			rex = CSL.PARTICLE_GIVEN_REGEXP;
		} else {
			rex = CSL.PARTICLE_FAMILY_REGEXP;
		}
		var m = nameValue.match(rex);
		while (m) {
			var m1 = firstNameFlag ? m[1].split("").reverse().join("") : m[1];
			var firstChar = m ? m1 : false;
			var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
			hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
			if (!hasParticle) {
                break;
            }
			if (firstNameFlag) {
				particleList.push(origNameValue.slice(m1.length * -1));
				origNameValue = origNameValue.slice(0,m1.length * -1);
			} else {
				particleList.push(origNameValue.slice(0,m1.length));
				origNameValue = origNameValue.slice(m1.length);
			}
			//particleList.push(m1);
			nameValue = m[2];
			m = nameValue.match(rex);
		}
		if (firstNameFlag) {
			nameValue = nameValue.split("").reverse().join("");
			particleList.reverse();
			for (var i=1,ilen=particleList.length;i<ilen;i++) {
				if (particleList[i].slice(0, 1) == " ") {
					particleList[i-1] += " ";
				}
			}
			for (var i=0,ilen=particleList.length;i<ilen;i++) {
				if (particleList[i].slice(0, 1) == " ") {
					particleList[i] = particleList[i].slice(1);
				}
			}
			nameValue = origNameValue.slice(0, nameValue.length);
		} else {
			nameValue = origNameValue.slice(nameValue.length * -1);
		}
		return [hasParticle, nameValue, particleList];
	}
    function trimLast(str) {
        var lastChar = str.slice(-1);
        str = str.trim();
        if (lastChar === " " && ["\'", "\u2019"].indexOf(str.slice(-1)) > -1) {
            str += " ";
        }
        return str;
    }
    function parseSuffix(nameObj) {
        if (!nameObj.suffix && nameObj.given) {
            var m = nameObj.given.match(/(\s*,!*\s*)/);
            if (m) {
                var idx = nameObj.given.indexOf(m[1]);
                var possible_suffix = nameObj.given.slice(idx + m[1].length);
                var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\s*/g, "");
                if (possible_suffix.replace(/\./g, "") === 'et al' && !nameObj["dropping-particle"]) {
                    // This hack covers the case where "et al." is explicitly used in the
                    // authorship information of the work.
                    nameObj["dropping-particle"] = possible_suffix;
                    nameObj["comma-dropping-particle"] = ",";
                } else {
                    if (possible_comma.length === 2) {
                        nameObj["comma-suffix"] = true;
                    }
                    nameObj.suffix = possible_suffix;
                }
                nameObj.given = nameObj.given.slice(0, idx);
            }
        }
    }
    return function(nameObj) {
        // Extract and set non-dropping particle(s) from family name field
        var res = splitParticles(nameObj.family);
        var lastNameValue = res[1];
        var lastParticleList = res[2];
        nameObj.family = lastNameValue;
        var nonDroppingParticle = trimLast(lastParticleList.join(""));
        if (nonDroppingParticle) {
            nameObj['non-dropping-particle'] = nonDroppingParticle;
        }
        // Split off suffix first of all
        parseSuffix(nameObj);
        // Extract and set dropping particle(s) from given name field
        var res = splitParticles(nameObj.given, true);
        var firstNameValue = res[1];
        var firstParticleList = res[2];
        nameObj.given = firstNameValue;
        var droppingParticle = firstParticleList.join("").trim();
        if (droppingParticle) {
            nameObj['dropping-particle'] = droppingParticle;
        }
    };
}());

/**
 * Make it hard to accidentally delete marks by selecting them first. 
 * User must press again to then actually delete the item.
 * Only works for single-cursor selections. If a range of text is 
 * selected, and/or there are multiple selections, we process
 * as usual.
 * @param {*} keyPressed 
 */
function backspaceOrDelete(cm, keyPressed = '') {

  const cursor = cm.getCursor();
  const ranges = cm.listSelections();

  // Are there multiple selections?
  const multipleSelections = ranges.length > 1;

  // Is a range of text selected?
  const textIsSelected =
    ranges[0].head.line !== ranges[0].anchor.line ||
    ranges[0].head.ch !== ranges[0].anchor.ch;

  // If text is selected, process as normal backspace or delete.
  if (multipleSelections || textIsSelected) return CodeMirror.Pass

  // Else, check for and selected any adjacent marks.
  const { line, ch } = ranges[0].head;
  const adjacentMark = cm.doc.findMarksAt({ line, ch })[0];
  if (adjacentMark) {
    // Get `from` and `to` objects
    const { from, to } = adjacentMark.find();
    // Select the adjacent mark
    cm.addSelection(
      { line: from.line, ch: from.ch },
      { line: to.line, ch: to.ch }
    );
  } else {
    return CodeMirror.Pass
  }
}

function wrapText(cm, char) {

  const sels = cm.getSelections();
  for (var i = 0; i < sels.length; i++)
    sels[i] = char + sels[i] + char;
  // sels.forEach((s) => s = 'Texican')
  cm.replaceSelections(sels, "around");
  // sels = cm.listSelections().slice();
}


function autoCloseAsterix(cm) {
  console.log("autoCloseAsterix");
  return CodeMirror.Pass
}


/**
 * Tab performs different actions, depending on the line type
 * - Lists: Indent the list item
 * - Header: Increase the header depth
 */
function tab(cm, shiftKey) {

  // Start by determing what's selected. In order of probability:
  // 1. Single cursor
  // 2. Single selection
  // 3. Multiple selections
  const ranges = cm.listSelections();

  // const isSingleCursor =
  //   ranges.length == 1 &&
  //   ranges[0].anchor.ch == ranges[0].head.ch &&
  //   ranges[0].anchor.line == ranges[0].head.line

  // const isSingleSelection =
  //   ranges.length == 1 &&
  //   ranges[0].anchor.ch !== ranges[0].head.ch ||
  //   ranges[0].anchor.line !== ranges[0].head.line

  // const isMultipleCursorsOrSelections = 
  //   ranges.length > 1

  ranges.forEach((range, index) => {

    // If the selection spans multiple lines and includes a 
    // heterogeneous mix of line types (e.g. header AND list)
    // do nothing (perform the default tab action).
    if (isLineClassesHeterogeneous(cm, range)) {
      // TODO
      // cm.execCommand('defaultTab')
      return CodeMirror.Pass
    }

    // Else, perform the appropriate action, based on line style.

    // Top and bottom lines of the selection
    const { topLine, bottomLine } = getTopAndBottomLines(range);

    // The "main" line class
    let mainLineClass = '';

    // Array of line numbers with the main line class
    let styledLines = [];

    // Populate `lineClass` and `styledLines`
    for (var i = topLine; i <= bottomLine; i++) {
      const lineHandle = cm.getLineHandle(i);
      const lineClasses = getLineClasses(lineHandle);
      if (lineClasses) {
        // lineClasses are formatted like `header h1` and `ol list-1`
        // The "main" style is always the first word.
        // That's the one we want.
        mainLineClass = lineClasses.split(' ')[0];
        styledLines.push(i);
      }
    }

    // For each styled line, apply the appropriate tab action
    styledLines.forEach((line) => {

      const lineHandle = cm.getLineHandle(line);
      const lineClasses = getLineClasses(lineHandle);

      if (mainLineClass == 'header') {

        // Header: Increase or decrease depth
        // Max depth is 6.
        const headerDepth = lineClasses.match(/h(\d)/)[1];
        if (!shiftKey && headerDepth < 6) {
          // Increase
          cm.replaceRange('#', { line, ch: 0 });
        } else if (shiftKey && headerDepth > 0) {
          // Decrease
          cm.replaceRange('',
            { line, ch: 0 },
            { line, ch: 1 },
          );
        }

      } else if (mainLineClass == 'ul' || mainLineClass == 'ol') {

        // List: Indent or un-indent
        if (!shiftKey) {
          indentList(cm);
        } else {
          unindentList(cm);
        }


      }
    });
  });
}


/**
 * Toggle task list item(s). 
 */
function toggleTaskChecked(cm) {
  if (cm.getOption('disableInput')) return CodeMirror.Pass
  const ranges = cm.listSelections();
  // For each selection...
  ranges.forEach((range) => {
    const { topLine, bottomLine } = getTopAndBottomLines(range);
    // For each line selected...
    for (var line = topLine; line <= bottomLine; line++) {
      // If the line is in a task list...
      const lineHandle = cm.getLineHandle(line);
      const lineClasses = getLineClasses(lineHandle);
      const isTaskList = lineClasses.includes('task');
      if (!isTaskList) continue
      // Toggle the open/closed value...
      const spans = getLineSpans(cm, lineHandle);
      const span = spans.find((s) => s.classes.includes('task'));
      cm.replaceRange(
        span.element.isClosed ? ' ' : 'x',
        { line, ch: span.start + 1 },
        { line, ch: span.start + 2 }
      );
    }
  });
  return CodeMirror.Pass
}


/**
 * Select the closest preceding selectable span in the doc.
 */
function tabToPrevElement(cm) {

  // 'from' gets us the position from the left side of the cursor/selection.
  // This lets us tab to spans inside the current selection.
  const cursor = cm.getCursor('from');

  let element = null;

  // Check if the cursor is already inside an element
  // 1) If it's NOT a TextMarker
  // 2) and it contains more (non-formatting) spans to select
  // ...set it as element.
  const surroundingElement = getElementAt(cm, cursor.line, cursor.ch);
  if (surroundingElement && isSingleCursor(cm)) {
    const isNotTextMarker = cm.findMarksAt(cursor).length == 0;
    const hasMoreSpansToSelect = surroundingElement.spans.find((s) => {
      return !s.isFormatting && s.start > cursor.ch
    }) !== undefined;
    if (isNotTextMarker && hasMoreSpansToSelect) {
      element = surroundingElement;
    }
  }

  // Else, find the prev element
  if (!element) {

    for (var i = cursor.line; i >= 0; i--) {
      const lineHandle = cm.getLineHandle(i);
      const elements = getLineElements(cm, lineHandle);
      // Find the prev element on this line, or preceding
      element = elements.reverse().find((e) => {
        const isOnSameLineAndLesserCh =
          e.line == cursor.line &&
          e.end < cursor.ch;
        const isOnPrecedingLine =
          e.line < cursor.line;
        return isOnSameLineAndLesserCh || isOnPrecedingLine
      });
      // Break for loop once we've found the element
      if (element) break
    }
  }

  // If no element found, return
  if (!element) return

  // If there's a textmarker, select it, and return
  const textMarker = cm.findMarksAt({ line: element.line, ch: element.start + 1 })[0];
  if (!window.state.sourceMode && textMarker) {
    textMarker.component.altTabTo();
    return
  }

  // If element has `content` property (as in case of links)
  // try to select that first.
  if (element.content) {
    const contentAlreadySelected =
      cm.getCursor('from').ch == element.content.start &&
      cm.getCursor('to').ch == element.content.end;

    if (!contentAlreadySelected) {
      cm.setSelection(
        { line: element.line, ch: element.content.start },
        { line: element.line, ch: element.content.end }
      );
      return
    }
  }
}

/**
 * Select the next 1) TextMarker, or 2) child span.
 * Do so by finding the next (or surrounding) element. 
 * If it's marked, call its `altTabTo` function.
 * Else, call the next of its child spans.
 */
function tabToNextElement(cm) {

  const cursor = cm.getCursor('anchor');
  let element;

  // Else, find the next element in the doc...
  for (var i = cursor.line; i < cm.lineCount(); i++) {
    const elements = getLineElements(cm, i);
    element = elements.find((e, index) => {

      // If we're inside an element, it's not a TextMarker
      // and it has more child spans to select, after the
      // current cursor position, select it.
      // E.g. Jump between child spans of a link, image, etc.

      const cursorIsInsideAnElement =
        e.line == cursor.line &&
        e.start < cursor.ch &&
        e.end > cursor.ch;

      const elementIsNotMarker =
        !e.mark.isMarkable ||
        window.state.sourceMode;

      const elementHasContentsToSelect =
        e.spans.find((c) => c.start > cursor.ch);

      if (cursorIsInsideAnElement && elementIsNotMarker && elementHasContentsToSelect) {
        return true
      }

      // Else, find next element on same or subsequent line:

      // Skip element if it's already selected
      const alreadySelected =
        e.line == cursor.line &&
        e.start == cursor.ch &&
        e.end == cm.getCursor('to').ch;

      if (alreadySelected) return false

      // Find next element on same line...
      // Edge case check: make sure it's not inside a marked
      // element. E.g. some strong text inside a footnote.
      // Determine by looking for multiple elements at same spot.

      const isOnSameLineAndGreaterCh =
        e.line == cursor.line &&
        e.start >= cursor.ch;

      if (isOnSameLineAndGreaterCh) {
        if (!window.state.sourceMode) {
          const markAt = cm.findMarksAt({ line: e.line, ch: e.start })[0];
          // If there's a mark present at the element start
          // we can tell if _around_ the element by checking the 
          // from and to values.
          const isNestedInsideMark =
            markAt !== undefined && 
            markAt?.find().from.ch < e.start ||
            markAt?.find().to.ch > e.end;
          if (!isNestedInsideMark) return true        
        } else {
          return true
        }
      }

      // Else, find first element on subsequent line...

      const isOnSubsequentLine =
        e.line > cursor.line;

      if (isOnSubsequentLine) return true
    });

    // if (element) console.log(element)
    if (element) break
  }

  if (!element) return

  // If element has a marker, select it and return...
  if (!window.state.sourceMode && element.mark.isMarkable) {
    const textMarker = cm.findMarksAt({ line: element.line, ch: element.start + 1 })[0];
    if (textMarker) {
      textMarker.component.altTabTo();
      return
    }
  }

  // Else, select next child span
  const nextContents = element.spans.find((c) => {

    // If element is on subsequent line, get first content
    const isOnSubsequentLine =
      element.line > cursor.line;
    if (isOnSubsequentLine) return true

    // Else, get next one
    const isOnSameLineAndGreaterCh =
      element.line == cursor.line &&
      c.start > cursor.ch;
    return isOnSameLineAndGreaterCh
  });

  if (nextContents) {
    cm.setSelection(
      { line: element.line, ch: nextContents.start },
      { line: element.line, ch: nextContents.end }
    );
  }
}



/**
 * Toggle header by adding/removing # characters at start of line.
 */
function toggleHeader(cm) {

  const { line, ch } = cm.getCursor();
  const lineHandle = cm.getLineHandle(line);
  const lineIsHeader = getLineClasses(lineHandle).includes('header');

  if (lineIsHeader) {
    /* 
    Remove header characters: 
    */

    // First span is the formatting characters
    // Delete from the `start` to the `end` points.
    const spans = getLineSpans(cm, lineHandle);
    const { start, end } = spans[0];
    cm.replaceRange('',
      { line, ch: start },
      { line, ch: end }
    );
  } else {
    /*
    Make line a header:
    Always match level of preceding header:
    If we toggle header on a line that follows an H3,
    make the toggled line also an H3.
    Exception: There should only be one H1 per doc.
    If toggled line follows H1, make it an H2.
    Else, there is no header in the doc yet, make it H1.
    */

    // Find preceding header depth
    let precedingHeaderDepth = 0;
    for (var i = line; i >= 0; i--) {
      const lineHandle = cm.getLineHandle(i);
      const lineClasses = getLineClasses(lineHandle);
      if (lineClasses.includes('header')) {
        precedingHeaderDepth = lineClasses.match(/h(\d)/)[1];
        precedingHeaderDepth = parseInt(precedingHeaderDepth);
        break
      }
    }

    // Construct characters to insert at start of line:
    // one or more hashes followed by a space.
    let insertAtStartOfLine = '';
    switch (precedingHeaderDepth) {
      case 0:
        insertAtStartOfLine = '# ';
        break
      case 1:
        insertAtStartOfLine = '## ';
        break
      default:
        insertAtStartOfLine = '#'.repeat(precedingHeaderDepth) + ' ';
    }

    // Insert hash(es) and space at start of the line
    cm.replaceRange(insertAtStartOfLine, { line, ch: 0 });
  }
}


/**
 * Toggle unordered list
 */
function toggleUnorderedList(cm) {

  const { line, ch } = cm.getCursor();
  const lineHandle = cm.getLineHandle(line);
  const isUnorderedList = getLineClasses(lineHandle).includes('ul');

  if (isUnorderedList) {

    // Remove list:
    // Find ul characters and whitespace at start of line. E.g. `    * `
    // Regex demo: https://regex101.com/r/HjpoOO/1/
    const numOfCharactersToRemoveFromStart = cm.getLine(line).match(/^[ |\t]*[\*|\-|+][ |\t]+/m)[0].length;
    cm.replaceRange('',
      { line, ch: 0 },
      { line, ch: numOfCharactersToRemoveFromStart }
    );

  } else {

    // Make list:
    // If immediately-previous line was unordered list, continue it 
    // by using that line's bullet list marker (*, -, or +).
    // Else, use *.

    const prevLineHandle = cm.getLineHandle(line - 1);
    const prevLineIsUl = prevLineHandle && getLineClasses(prevLineHandle).includes('ul');

    let charToUse = '*';
    if (prevLineIsUl) {
      // Get bullet character
      // Demo: https://regex101.com/r/jvG3GF/2
      charToUse = cm.getLine(line - 1).match(/^[ |\t]*(\*|\-|\+)/m)[1];
    }

    cm.replaceRange(`${charToUse} `, { line, ch: 0 });
  }
}


/**
 * Open URL when user clicks w/ Cmd button held down,
 * if the click happens on a span with a URL.
 * Does not apply to TexMarkers w/ mark replacements
 * (CodeMirror doesn't get those clicks).
 */
function wasUrlClicked(cm, pos) {

  const element = getElementAt(cm, pos.line, pos.ch);
  if (!element) return CodeMirror.Pass

  switch (element.type) {
    case 'link-inline':
      const span = getSpanAt(cm, pos.line, pos.ch);
      const clickedOnUrl = span.classes.includes('url');
      if (clickedOnUrl && span.string) {
        window.api.send('openUrlInDefaultBrowser', span.string);
        return
      }
      break
    case 'bare-url':
      window.api.send('openUrlInDefaultBrowser', element.markdown);
      return
    case 'email-in-brackets':
      window.api.send('openUrlInDefaultBrowser', `mailto:${element.url.string}`);
      return
    case 'url-in-brackets':
      window.api.send('openUrlInDefaultBrowser', element.url.string);
      return
  }

  // Else
  return CodeMirror.Pass
}


/**
 * Open URL when user keys 'Cmd-Enter', if a span with a url is selected.
 * NOTE: Only works if there is one selection active in the doc.
 * Behind the scenes, we re-use logic from `wasUrlClicked`.
 */
function wasUrlEntered(cm) {

  const activeSelections = cm.listSelections();

  // Return if there are multiple selections, or no selection.
  if (activeSelections.length > 1) return CodeMirror.Pass

  const selectionPos = activeSelections[0].anchor;

  wasUrlClicked(cm, selectionPos);

}

function extend (destination) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (source.hasOwnProperty(key)) destination[key] = source[key];
    }
  }
  return destination
}

function repeat (character, count) {
  return Array(count + 1).join(character)
}

var blockElements = [
  'address', 'article', 'aside', 'audio', 'blockquote', 'body', 'canvas',
  'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',
  'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
  'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',
  'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',
  'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'
];

function isBlock (node) {
  return blockElements.indexOf(node.nodeName.toLowerCase()) !== -1
}

var voidElements = [
  'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',
  'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'
];

function isVoid (node) {
  return voidElements.indexOf(node.nodeName.toLowerCase()) !== -1
}

var voidSelector = voidElements.join();
function hasVoid (node) {
  return node.querySelector && node.querySelector(voidSelector)
}

var rules = {};

rules.paragraph = {
  filter: 'p',

  replacement: function (content) {
    return '\n\n' + content + '\n\n'
  }
};

rules.lineBreak = {
  filter: 'br',

  replacement: function (content, node, options) {
    return options.br + '\n'
  }
};

rules.heading = {
  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],

  replacement: function (content, node, options) {
    var hLevel = Number(node.nodeName.charAt(1));

    if (options.headingStyle === 'setext' && hLevel < 3) {
      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);
      return (
        '\n\n' + content + '\n' + underline + '\n\n'
      )
    } else {
      return '\n\n' + repeat('#', hLevel) + ' ' + content + '\n\n'
    }
  }
};

rules.blockquote = {
  filter: 'blockquote',

  replacement: function (content) {
    content = content.replace(/^\n+|\n+$/g, '');
    content = content.replace(/^/gm, '> ');
    return '\n\n' + content + '\n\n'
  }
};

rules.list = {
  filter: ['ul', 'ol'],

  replacement: function (content, node) {
    var parent = node.parentNode;
    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {
      return '\n' + content
    } else {
      return '\n\n' + content + '\n\n'
    }
  }
};

rules.listItem = {
  filter: 'li',

  replacement: function (content, node, options) {
    content = content
      .replace(/^\n+/, '') // remove leading newlines
      .replace(/\n+$/, '\n') // replace trailing newlines with just a single one
      .replace(/\n/gm, '\n    '); // indent
    var prefix = options.bulletListMarker + '   ';
    var parent = node.parentNode;
    if (parent.nodeName === 'OL') {
      var start = parent.getAttribute('start');
      var index = Array.prototype.indexOf.call(parent.children, node);
      prefix = (start ? Number(start) + index : index + 1) + '.  ';
    }
    return (
      prefix + content + (node.nextSibling && !/\n$/.test(content) ? '\n' : '')
    )
  }
};

rules.indentedCodeBlock = {
  filter: function (node, options) {
    return (
      options.codeBlockStyle === 'indented' &&
      node.nodeName === 'PRE' &&
      node.firstChild &&
      node.firstChild.nodeName === 'CODE'
    )
  },

  replacement: function (content, node, options) {
    return (
      '\n\n    ' +
      node.firstChild.textContent.replace(/\n/g, '\n    ') +
      '\n\n'
    )
  }
};

rules.fencedCodeBlock = {
  filter: function (node, options) {
    return (
      options.codeBlockStyle === 'fenced' &&
      node.nodeName === 'PRE' &&
      node.firstChild &&
      node.firstChild.nodeName === 'CODE'
    )
  },

  replacement: function (content, node, options) {
    var className = node.firstChild.className || '';
    var language = (className.match(/language-(\S+)/) || [null, ''])[1];
    var code = node.firstChild.textContent;

    var fenceChar = options.fence.charAt(0);
    var fenceSize = 3;
    var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');

    var match;
    while ((match = fenceInCodeRegex.exec(code))) {
      if (match[0].length >= fenceSize) {
        fenceSize = match[0].length + 1;
      }
    }

    var fence = repeat(fenceChar, fenceSize);

    return (
      '\n\n' + fence + language + '\n' +
      code.replace(/\n$/, '') +
      '\n' + fence + '\n\n'
    )
  }
};

rules.horizontalRule = {
  filter: 'hr',

  replacement: function (content, node, options) {
    return '\n\n' + options.hr + '\n\n'
  }
};

rules.inlineLink = {
  filter: function (node, options) {
    return (
      options.linkStyle === 'inlined' &&
      node.nodeName === 'A' &&
      node.getAttribute('href')
    )
  },

  replacement: function (content, node) {
    var href = node.getAttribute('href');
    var title = node.title ? ' "' + node.title + '"' : '';
    return '[' + content + '](' + href + title + ')'
  }
};

rules.referenceLink = {
  filter: function (node, options) {
    return (
      options.linkStyle === 'referenced' &&
      node.nodeName === 'A' &&
      node.getAttribute('href')
    )
  },

  replacement: function (content, node, options) {
    var href = node.getAttribute('href');
    var title = node.title ? ' "' + node.title + '"' : '';
    var replacement;
    var reference;

    switch (options.linkReferenceStyle) {
      case 'collapsed':
        replacement = '[' + content + '][]';
        reference = '[' + content + ']: ' + href + title;
        break
      case 'shortcut':
        replacement = '[' + content + ']';
        reference = '[' + content + ']: ' + href + title;
        break
      default:
        var id = this.references.length + 1;
        replacement = '[' + content + '][' + id + ']';
        reference = '[' + id + ']: ' + href + title;
    }

    this.references.push(reference);
    return replacement
  },

  references: [],

  append: function (options) {
    var references = '';
    if (this.references.length) {
      references = '\n\n' + this.references.join('\n') + '\n\n';
      this.references = []; // Reset references
    }
    return references
  }
};

rules.emphasis = {
  filter: ['em', 'i'],

  replacement: function (content, node, options) {
    if (!content.trim()) return ''
    return options.emDelimiter + content + options.emDelimiter
  }
};

rules.strong = {
  filter: ['strong', 'b'],

  replacement: function (content, node, options) {
    if (!content.trim()) return ''
    return options.strongDelimiter + content + options.strongDelimiter
  }
};

rules.code = {
  filter: function (node) {
    var hasSiblings = node.previousSibling || node.nextSibling;
    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;

    return node.nodeName === 'CODE' && !isCodeBlock
  },

  replacement: function (content) {
    if (!content.trim()) return ''

    var delimiter = '`';
    var leadingSpace = '';
    var trailingSpace = '';
    var matches = content.match(/`+/gm);
    if (matches) {
      if (/^`/.test(content)) leadingSpace = ' ';
      if (/`$/.test(content)) trailingSpace = ' ';
      while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';
    }

    return delimiter + leadingSpace + content + trailingSpace + delimiter
  }
};

rules.image = {
  filter: 'img',

  replacement: function (content, node) {
    var alt = node.alt || '';
    var src = node.getAttribute('src') || '';
    var title = node.title || '';
    var titlePart = title ? ' "' + title + '"' : '';
    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''
  }
};

/**
 * Manages a collection of rules used to convert HTML to Markdown
 */

function Rules (options) {
  this.options = options;
  this._keep = [];
  this._remove = [];

  this.blankRule = {
    replacement: options.blankReplacement
  };

  this.keepReplacement = options.keepReplacement;

  this.defaultRule = {
    replacement: options.defaultReplacement
  };

  this.array = [];
  for (var key in options.rules) this.array.push(options.rules[key]);
}

Rules.prototype = {
  add: function (key, rule) {
    this.array.unshift(rule);
  },

  keep: function (filter) {
    this._keep.unshift({
      filter: filter,
      replacement: this.keepReplacement
    });
  },

  remove: function (filter) {
    this._remove.unshift({
      filter: filter,
      replacement: function () {
        return ''
      }
    });
  },

  forNode: function (node) {
    if (node.isBlank) return this.blankRule
    var rule;

    if ((rule = findRule(this.array, node, this.options))) return rule
    if ((rule = findRule(this._keep, node, this.options))) return rule
    if ((rule = findRule(this._remove, node, this.options))) return rule

    return this.defaultRule
  },

  forEach: function (fn) {
    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);
  }
};

function findRule (rules, node, options) {
  for (var i = 0; i < rules.length; i++) {
    var rule = rules[i];
    if (filterValue(rule, node, options)) return rule
  }
  return void 0
}

function filterValue (rule, node, options) {
  var filter = rule.filter;
  if (typeof filter === 'string') {
    if (filter === node.nodeName.toLowerCase()) return true
  } else if (Array.isArray(filter)) {
    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true
  } else if (typeof filter === 'function') {
    if (filter.call(rule, node, options)) return true
  } else {
    throw new TypeError('`filter` needs to be a string, array, or function')
  }
}

/**
 * The collapseWhitespace function is adapted from collapse-whitespace
 * by Luc Thevenard.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * collapseWhitespace(options) removes extraneous whitespace from an the given element.
 *
 * @param {Object} options
 */
function collapseWhitespace (options) {
  var element = options.element;
  var isBlock = options.isBlock;
  var isVoid = options.isVoid;
  var isPre = options.isPre || function (node) {
    return node.nodeName === 'PRE'
  };

  if (!element.firstChild || isPre(element)) return

  var prevText = null;
  var prevVoid = false;

  var prev = null;
  var node = next(prev, element, isPre);

  while (node !== element) {
    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE
      var text = node.data.replace(/[ \r\n\t]+/g, ' ');

      if ((!prevText || / $/.test(prevText.data)) &&
          !prevVoid && text[0] === ' ') {
        text = text.substr(1);
      }

      // `text` might be empty at this point.
      if (!text) {
        node = remove(node);
        continue
      }

      node.data = text;

      prevText = node;
    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE
      if (isBlock(node) || node.nodeName === 'BR') {
        if (prevText) {
          prevText.data = prevText.data.replace(/ $/, '');
        }

        prevText = null;
        prevVoid = false;
      } else if (isVoid(node)) {
        // Avoid trimming space around non-block, non-BR void elements.
        prevText = null;
        prevVoid = true;
      }
    } else {
      node = remove(node);
      continue
    }

    var nextNode = next(prev, node, isPre);
    prev = node;
    node = nextNode;
  }

  if (prevText) {
    prevText.data = prevText.data.replace(/ $/, '');
    if (!prevText.data) {
      remove(prevText);
    }
  }
}

/**
 * remove(node) removes the given node from the DOM and returns the
 * next node in the sequence.
 *
 * @param {Node} node
 * @return {Node} node
 */
function remove (node) {
  var next = node.nextSibling || node.parentNode;

  node.parentNode.removeChild(node);

  return next
}

/**
 * next(prev, current, isPre) returns the next node in the sequence, given the
 * current and previous nodes.
 *
 * @param {Node} prev
 * @param {Node} current
 * @param {Function} isPre
 * @return {Node}
 */
function next (prev, current, isPre) {
  if ((prev && prev.parentNode === current) || isPre(current)) {
    return current.nextSibling || current.parentNode
  }

  return current.firstChild || current.nextSibling || current.parentNode
}

/*
 * Set up window for Node.js
 */

var root = (typeof window !== 'undefined' ? window : {});

/*
 * Parsing HTML strings
 */

function canParseHTMLNatively () {
  var Parser = root.DOMParser;
  var canParse = false;

  // Adapted from https://gist.github.com/1129031
  // Firefox/Opera/IE throw errors on unsupported types
  try {
    // WebKit returns null on unsupported types
    if (new Parser().parseFromString('', 'text/html')) {
      canParse = true;
    }
  } catch (e) {}

  return canParse
}

function createHTMLParser () {
  var Parser = function () {};

  {
    var JSDOM = require('jsdom').JSDOM;
    Parser.prototype.parseFromString = function (string) {
      return new JSDOM(string).window.document
    };
  }
  return Parser
}

var HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();

function RootNode (input) {
  var root;
  if (typeof input === 'string') {
    var doc = htmlParser().parseFromString(
      // DOM parsers arrange elements in the <head> and <body>.
      // Wrapping in a custom element ensures elements are reliably arranged in
      // a single element.
      '<x-turndown id="turndown-root">' + input + '</x-turndown>',
      'text/html'
    );
    root = doc.getElementById('turndown-root');
  } else {
    root = input.cloneNode(true);
  }
  collapseWhitespace({
    element: root,
    isBlock: isBlock,
    isVoid: isVoid
  });

  return root
}

var _htmlParser;
function htmlParser () {
  _htmlParser = _htmlParser || new HTMLParser();
  return _htmlParser
}

function Node (node) {
  node.isBlock = isBlock(node);
  node.isCode = node.nodeName.toLowerCase() === 'code' || node.parentNode.isCode;
  node.isBlank = isBlank(node);
  node.flankingWhitespace = flankingWhitespace(node);
  return node
}

function isBlank (node) {
  return (
    ['A', 'TH', 'TD', 'IFRAME', 'SCRIPT', 'AUDIO', 'VIDEO'].indexOf(node.nodeName) === -1 &&
    /^\s*$/i.test(node.textContent) &&
    !isVoid(node) &&
    !hasVoid(node)
  )
}

function flankingWhitespace (node) {
  var leading = '';
  var trailing = '';

  if (!node.isBlock) {
    var hasLeading = /^\s/.test(node.textContent);
    var hasTrailing = /\s$/.test(node.textContent);
    var blankWithSpaces = node.isBlank && hasLeading && hasTrailing;

    if (hasLeading && !isFlankedByWhitespace('left', node)) {
      leading = ' ';
    }

    if (!blankWithSpaces && hasTrailing && !isFlankedByWhitespace('right', node)) {
      trailing = ' ';
    }
  }

  return { leading: leading, trailing: trailing }
}

function isFlankedByWhitespace (side, node) {
  var sibling;
  var regExp;
  var isFlanked;

  if (side === 'left') {
    sibling = node.previousSibling;
    regExp = / $/;
  } else {
    sibling = node.nextSibling;
    regExp = /^ /;
  }

  if (sibling) {
    if (sibling.nodeType === 3) {
      isFlanked = regExp.test(sibling.nodeValue);
    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {
      isFlanked = regExp.test(sibling.textContent);
    }
  }
  return isFlanked
}

var reduce = Array.prototype.reduce;
var leadingNewLinesRegExp = /^\n*/;
var trailingNewLinesRegExp = /\n*$/;
var escapes = [
  [/\\/g, '\\\\'],
  [/\*/g, '\\*'],
  [/^-/g, '\\-'],
  [/^\+ /g, '\\+ '],
  [/^(=+)/g, '\\$1'],
  [/^(#{1,6}) /g, '\\$1 '],
  [/`/g, '\\`'],
  [/^~~~/g, '\\~~~'],
  [/\[/g, '\\['],
  [/\]/g, '\\]'],
  [/^>/g, '\\>'],
  [/_/g, '\\_'],
  [/^(\d+)\. /g, '$1\\. ']
];

function TurndownService (options) {
  if (!(this instanceof TurndownService)) return new TurndownService(options)

  var defaults = {
    rules: rules,
    headingStyle: 'setext',
    hr: '* * *',
    bulletListMarker: '*',
    codeBlockStyle: 'indented',
    fence: '```',
    emDelimiter: '_',
    strongDelimiter: '**',
    linkStyle: 'inlined',
    linkReferenceStyle: 'full',
    br: '  ',
    blankReplacement: function (content, node) {
      return node.isBlock ? '\n\n' : ''
    },
    keepReplacement: function (content, node) {
      return node.isBlock ? '\n\n' + node.outerHTML + '\n\n' : node.outerHTML
    },
    defaultReplacement: function (content, node) {
      return node.isBlock ? '\n\n' + content + '\n\n' : content
    }
  };
  this.options = extend({}, defaults, options);
  this.rules = new Rules(this.options);
}

TurndownService.prototype = {
  /**
   * The entry point for converting a string or DOM node to Markdown
   * @public
   * @param {String|HTMLElement} input The string or DOM node to convert
   * @returns A Markdown representation of the input
   * @type String
   */

  turndown: function (input) {
    if (!canConvert(input)) {
      throw new TypeError(
        input + ' is not a string, or an element/document/fragment node.'
      )
    }

    if (input === '') return ''

    var output = process$1.call(this, new RootNode(input));
    return postProcess.call(this, output)
  },

  /**
   * Add one or more plugins
   * @public
   * @param {Function|Array} plugin The plugin or array of plugins to add
   * @returns The Turndown instance for chaining
   * @type Object
   */

  use: function (plugin) {
    if (Array.isArray(plugin)) {
      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);
    } else if (typeof plugin === 'function') {
      plugin(this);
    } else {
      throw new TypeError('plugin must be a Function or an Array of Functions')
    }
    return this
  },

  /**
   * Adds a rule
   * @public
   * @param {String} key The unique key of the rule
   * @param {Object} rule The rule
   * @returns The Turndown instance for chaining
   * @type Object
   */

  addRule: function (key, rule) {
    this.rules.add(key, rule);
    return this
  },

  /**
   * Keep a node (as HTML) that matches the filter
   * @public
   * @param {String|Array|Function} filter The unique key of the rule
   * @returns The Turndown instance for chaining
   * @type Object
   */

  keep: function (filter) {
    this.rules.keep(filter);
    return this
  },

  /**
   * Remove a node that matches the filter
   * @public
   * @param {String|Array|Function} filter The unique key of the rule
   * @returns The Turndown instance for chaining
   * @type Object
   */

  remove: function (filter) {
    this.rules.remove(filter);
    return this
  },

  /**
   * Escapes Markdown syntax
   * @public
   * @param {String} string The string to escape
   * @returns A string with Markdown syntax escaped
   * @type String
   */

  escape: function (string) {
    return escapes.reduce(function (accumulator, escape) {
      return accumulator.replace(escape[0], escape[1])
    }, string)
  }
};

/**
 * Reduces a DOM node down to its Markdown string equivalent
 * @private
 * @param {HTMLElement} parentNode The node to convert
 * @returns A Markdown representation of the node
 * @type String
 */

function process$1 (parentNode) {
  var self = this;
  return reduce.call(parentNode.childNodes, function (output, node) {
    node = new Node(node);

    var replacement = '';
    if (node.nodeType === 3) {
      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);
    } else if (node.nodeType === 1) {
      replacement = replacementForNode.call(self, node);
    }

    return join(output, replacement)
  }, '')
}

/**
 * Appends strings as each rule requires and trims the output
 * @private
 * @param {String} output The conversion output
 * @returns A trimmed version of the ouput
 * @type String
 */

function postProcess (output) {
  var self = this;
  this.rules.forEach(function (rule) {
    if (typeof rule.append === 'function') {
      output = join(output, rule.append(self.options));
    }
  });

  return output.replace(/^[\t\r\n]+/, '').replace(/[\t\r\n\s]+$/, '')
}

/**
 * Converts an element node to its Markdown equivalent
 * @private
 * @param {HTMLElement} node The node to convert
 * @returns A Markdown representation of the node
 * @type String
 */

function replacementForNode (node) {
  var rule = this.rules.forNode(node);
  var content = process$1.call(this, node);
  var whitespace = node.flankingWhitespace;
  if (whitespace.leading || whitespace.trailing) content = content.trim();
  return (
    whitespace.leading +
    rule.replacement(content, node, this.options) +
    whitespace.trailing
  )
}

/**
 * Determines the new lines between the current output and the replacement
 * @private
 * @param {String} output The current conversion output
 * @param {String} replacement The string to append to the output
 * @returns The whitespace to separate the current output and the replacement
 * @type String
 */

function separatingNewlines (output, replacement) {
  var newlines = [
    output.match(trailingNewLinesRegExp)[0],
    replacement.match(leadingNewLinesRegExp)[0]
  ].sort();
  var maxNewlines = newlines[newlines.length - 1];
  return maxNewlines.length < 2 ? maxNewlines : '\n\n'
}

function join (string1, string2) {
  var separator = separatingNewlines(string1, string2);

  // Remove trailing/leading newlines and replace with separator
  string1 = string1.replace(trailingNewLinesRegExp, '');
  string2 = string2.replace(leadingNewLinesRegExp, '');

  return string1 + separator + string2
}

/**
 * Determines whether an input can be converted
 * @private
 * @param {String|HTMLElement} input Describe this parameter
 * @returns Describe what it returns
 * @type String|Object|Array|Boolean|Number
 */

function canConvert (input) {
  return (
    input != null && (
      typeof input === 'string' ||
      (input.nodeType && (
        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11
      ))
    )
  )
}

// Turndown options: https://github.com/domchristie/turndown#options
const turndownService = new TurndownService({
  headingStyle: 'atx',
  hr: '---'
});

async function onPaste(cm, evt) {

  console.log('onPaste');

  // console.log(cm.getMode('text/html'))
  // cm.setOption("mode", $(this).val() )

  // Ignore the paste if CM is not focused.
  // If we don't do this, CM takes paste events from Wizard.
  if (!cm.hasFocus()) {
    evt.codemirrorIgnore = true;
    return
  }

  // TODO: Need to determine if meta, shift or alt keys were pressed.
  // Paste unformatted text: ["text/plain"]
  // Paste URL: ["text/plain"]
  // Paste HTML: ["text/plain", "text/html"]
  // Paste from Notes app: ["text/plain", "text/html", "text/rtf"]
  // Paste image from clipboard: ["Files"]
  // Paste image from browser: ["text/html", "Files"]
  // Paste file from OS: ["text/plain", "Files"]

  const types = evt.clipboardData.types;
  const item = evt.clipboardData.items[0];

  const isHtml = types.includes('text/html');
  const isText = types.includes('text/plain') && !isHtml;
  const isFile = types.includes('Files');

  const isMultipleSelections = cm.listSelections();

  if (isHtml) {
    evt.preventDefault();
    const html = evt.clipboardData.getData('text/html');
    const markdown = turndownService.turndown(html);
    cm.replaceSelection(markdown);
    markDoc(cm); // TODO: Can optimize this...
  } else if (isText) ; else if (isFile) {

    // "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null."
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFile
    // const file = item.getAsFile();
    // const fileType = file.types
    window.api.send('saveImageFromClipboard');
  }

  return
}

function onCursorActivity(cm) {

  const allMarks = cm.getAllMarks();
  allMarks.forEach((m) => m.component?.onSelectionChange());

  // Check for outstanding marks.
  // We use bookmark marks to flag elements that need to be
  // marked when the cursor moves outside them. This happens
  // when we create a mark, and the cursor is still inside
  // it. We delay creating the mark until the user cursors
  // outside the bounds.

  const marks = cm.getAllMarks();
  const bookmarks = marks.filter((m) => m.type == 'bookmark' && m.isSpotToMark);
  if (bookmarks) {
    bookmarks.forEach((b) => {
      const { line, ch } = b.find();
      const elementAtBookmark = getElementAt(cm, line, ch);
      const cursor = cm.getCursor();
      const cursorIsOutsideElement = 
        cursor.line !== elementAtBookmark?.line ||
        cursor.ch < elementAtBookmark?.start + 1 ||
        cursor.ch > elementAtBookmark?.end - 1;
      const needsMark = 
        elementAtBookmark?.mark.isMarkable && 
        cursorIsOutsideElement;
      if (needsMark) {
        markElement(cm, elementAtBookmark);
        b.clear();
      }
    });
  }
}

/**
 * "Like the 'change' event, but batched per operation, passing an array containing all the changes that happened in the operation. This event is fired after the operation finished, and display changes it makes will trigger a new operation." — https://codemirror.net/doc/manual.html#event_changes
 */
function onChanges(cm, changes) {


  const isMultipleChanges = changes.length > 1;
  const oneOfChangesSpansMultipleLines = changes.some((change) =>
    change.from.line !== change.to.line ||
    change.origin === '+swapLine'
  );

  // Update `unsavedChanges` on parent panel.
  setUnsavedChanges(cm);

  // Set cursor, if `cm.setCursorAfterChanges` !== null. We use this when want to place the cursor at a specific position _after_ we've changed the text.
  // if (cm.setCursorAfterChanges !== null) {
  //   cm.setCursor(cm.setCursorAfterChanges)
  //   // Reset
  //   cm.setCursorAfterChanges = null
  // }


  // ------ If there are multiple changes, or a multi-line change... ------ //

  // markDoc...
  if (isMultipleChanges || oneOfChangesSpansMultipleLines) {
    markDoc(cm);
    return
  }


  // ------ Else, process as single edit on single line ------ //

  const { from, to, text, removed, origin } = changes[0];
  const lineHandle = cm.getLineHandle(from.line);
  const lineClasses = getLineClasses(lineHandle);
  const textMarkers = cm.findMarks(
    { line: from.line, ch: 0 },
    { line: from.line, ch: cm.getLine(from.line).length }
  );
  const cursor = cm.getCursor();


  // ------ If a reference definition was changed, we re-mark whole doc ------ //

  // Because if reference definitions change, links/images/footnotes
  // that point to them also need to change.

  const isReferenceDefinition = lineClasses.includes('definition');
  if (isReferenceDefinition) {
    markDoc(cm);
    return
  }


  // ------ If change happened inside TextMarker, update it ------ //

  const textMarker = cm.findMarksAt(cursor)[0];
  if (textMarker) {
    textMarker.component.updateDisplayedText();
    return
  }


  // ------ If a new element was created, check if it needs a TextMarker ------ //

  if (!window.state.sourceMode) {
    const elementAtCursor = getElementAt(cm, from.line, from.ch);
    const isMarkable = elementAtCursor?.mark.isMarkable;
    if (elementAtCursor && isMarkable) {
      const isAlreadyMarked = cm.findMarksAt({ line: from.line, ch: from.ch }).length;
      const elementNeedsMark = isMarkable && !isAlreadyMarked;
      const cursorIsInside =
        cursor.ch > elementAtCursor?.start &&
        cursor.ch < elementAtCursor?.end;
      if (elementNeedsMark && !cursorIsInside) {
        markElement(cm, elementAtCursor);
        return
      } else {
        const marks = cm.getAllMarks();
        const alreadyBookmarked = marks.find((m) => m.type == 'bookmark' && m.isSpotToMark);
        if (!alreadyBookmarked) {
          const bookmark = cm.setBookmark(cursor);
          bookmark.isSpotToMark = true;
          console.log(cm.getAllMarks());
        }
        return
      }
    }
  }


  // ------ Else, determine if we should show autocomplete ------ //

  // We never show autocomplete on undo
  const isUndo = changes.some((change) => change.origin == 'undo');
  const changeText = text[0];
  const isSingleChar = changeText.length == 1;
  const isMultipleChar = changeText.length > 2;

  const isEmptyBrackets =
    changeText == '[]' &&
    getPrevChars(cm, 0, 2, cursor) !== '[[' && // local link (open)
    getNextChars(cm, 0, 2, cursor) !== ']]' && // local link (close)
    getPrevChars(cm, 0, 2, cursor) !== '^['; // inline footnote (open)

  const isBracketsAroundSelection =
    changeText.length > 2 &&
    changeText.firstChar() == '[' &&
    changeText.lastChar() == ']' &&
    getPrevChars(cm, 0, 2, cursor) !== '[[' &&
    getNextChars(cm, 0, 2, cursor) !== ']]' &&
    getPrevChars(cm, 0, 2, cursor) !== '^[';

  const showElementsAutocomplete = !isUndo && (isEmptyBrackets || isBracketsAroundSelection);

  if (showElementsAutocomplete) {
    cm.autocomplete.show('elements');
    return
  }

  // ------ Else, if there are TextMarkers, clear and re-mark the line ------ //

  // if (textMarkers.length) {
  //   console.log("clear and re-mark the line")
  //   clearLineMarks(cm, lineHandle)
  //   markLine(cm, lineHandle)
  // }

  return






  // cm.dispatch({ type: 'changes', changes: changes })

  // Focus widget, if `cm.focusWidgetAfterChanges` !== null. We use this when we want to focus a widget after making changes (e.g. creating it in Autocomplete).

  // if (cm.focusWidgetAfterChanges !== null) {
  //   const from = cm.focusWidgetAfterChanges.from
  //   const to = cm.focusWidgetAfterChanges.to
  //   const element = editorState.inlineElements.find(
  //     (e) =>
  //       from.line == e.line &&
  //       from.ch <= e.start &&
  //       to.ch >= e.end &&
  //       e.widget &&
  //       e.widget.editable
  //   )
  //   if (element) element.widget.tabInto()

  //   // Reset
  //   cm.focusWidgetAfterChanges = null
  // }

  // isChangesPending = false
}

async function onDrop(cm, evt) {

  evt.codemirrorIgnore = true;

  const isMove = evt.altKey == false;
  const isCopy = evt.altKey == true;
  const project = window.state.projects.byId[window.id];

  // For each file dragged in...
  for (const [key, file] of Object.entries(evt.dataTransfer.files)) {
    
    const isImage = file.type.includes('image');
    const { wasSuccess, destinationPath } = await window.api.invoke('moveOrCopyFileIntoProject', file.path, project.directory, isCopy);
    
    if (wasSuccess && isImage) {
      cm.replaceRange(`![](${destinationPath})`, cm.getCursor());
    }

  }

  // evt.dataTransfer.files.forEach((file) => {
  //   console.log(file)
  // })

  // const file = evt.dataTransfer.files[0]

  console.log(evt);
  // console.log(file)

  // const isImage = 

  // If type is image, create image element
  // If option is copy-images-to-local, copy image to local, and set relative local url
  // Else, set absolute URL to location on local filesystem

  // Copy file into project. Takes current path, and copies it.
  // If alt is pressed, it's a copy operation.
  // Else, it's a move.

}

function makeEditor(parentElement) {

  // ------ CREATE ------ //

  const cm = CodeMirror(parentElement, {
    // mode: 'gambier',

    // "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll)."
    lineWrapping: true,
    
    // "Whether to show line numbers to the left of the editor."
    lineNumbers: false,

    // "How many spaces a block (whatever that means in the edited 
    // language) should be indented. The default is 2."
    indentUnit: 4,

    // "The width of a tab character. Defaults to 4."
    tabSize: 4,

    // "Whether, when indenting, the first N*tabSize spaces should be 
    // replaced by N tabs. Default is false."
    indentWithTabs: false,

    // "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll)."
    lineWrapping: true,

    // gutters: [{className: 'toby', style: 'background: red;'}],

    // We use `closebracket.js` addon for character-closing behaviour.
    // https://codemirror.net/doc/manual.html#addon_closebrackets
    // https://github.com/codemirror/CodeMirror/blob/master/addon/edit/closebrackets.js
    // We add support for `**` and `__` by copying the default config object from closebrackets.js, and adding `**__` to the pairs property.
    autoCloseBrackets: {
      pairs: '()[]{}\'\'""``',
      closeBefore: ')]}\'":;>',
      triples: '',
      
      // Explode: "...gives the pairs of characters that, when enter is pressed between them, should have the second character also moved to its own line" (I don't fully understand)
      // explode: '[]{}',
    },

    // cursorScrollMargin: 20,
    // Turning on `keyMap: 'sublime'` activates -all- sublime keymaps. We instead want to pick and choose, using `extraKeys`
    // keyMap: 'sublime',
    extraKeys: {
      // 'Alt-T': () => console.log(getElementAt(cm, cm.getCursor().line, cm.getCursor().ch)),
      'Shift-Cmd-K': 'deleteLine',
      'Cmd-L': 'selectLine',
      'Shift-Alt-Down': 'duplicateLine',
      'Cmd-D': 'selectNextOccurrence',
      'Alt-Up': 'swapLineUp',
      'Alt-Down': 'swapLineDown',
      'Shift-Ctrl-Up': 'addCursorToPrevLine',
      'Shift-Ctrl-Down': 'addCursorToNextLine',
      Enter: 'newlineAndIndentContinueMarkdownList',
      'Cmd-LeftClick': (cm, pos) => wasUrlClicked(cm, pos),
      'Shift-8': () => autoCloseAsterix(),
      'Cmd-I': () => wrapText(cm, '_'), // Underscore = Emphasis
      'Shift--': () => wrapText(cm, '_'), // Underscore = Emphasis
      'Shift-Cmd-U': () => toggleTaskChecked(cm),
      'Shift-Cmd-H': () => toggleHeader(cm),
      'Shift-Cmd-L': () => toggleUnorderedList(cm),
      'Cmd-Enter': () => wasUrlEntered(cm),
      'Tab': () => tab(cm, false),
      'Shift-Tab': () => tab(cm, true),
      'Alt-Tab': () => tabToNextElement(cm),
      'Shift-Alt-Tab': () => tabToPrevElement(cm),
      Backspace: () => backspaceOrDelete(cm, 'backspace'),
      Delete: () => backspaceOrDelete(cm, 'delete'),
    },
  });


  // ------ SET PROPERTIES ------ //

  // Set mode
  setMode(cm);

  // Set initial editor theme
  cm.setOption('theme', window.state.theme.editorTheme);

  // 
  cm.panel = {};

  // Add our custom state properties to `cm.state`
  cm.state = { 
    ...cm.state,
    isMetaKeyDown: false,
    unsavedChanges: false,
  };
  

  // ------ CREATE LISTENERS ------ //

  /*
  CodeMirror events fire in the following order:
  - beforeChange 
  - beforeSelectionChange
  - paste
  - change
  - cursorActivity
  - changes
  */

  cm.on('paste', onPaste);
  cm.on('cursorActivity', onCursorActivity);
  cm.on('changes', onChanges); 
  
  cm.on('drop', onDrop);

  // window.api.receive('formatCommand', (cmd) => {
  //   const project = window.state.projects.byId[window.id]
  //   const isFocusedPanel = cm.panel.index == project.focusedPanelIndex
  //   if (isFocusedPanel) actions.wrapText(cm, '_')
  // })

  return cm
}

/**
 * Set `mode` option of the provided CodeMirror instance.
 * We also call this whenever state.markdown options change.
 * Because I don't know how to alter mode options, once set.
 * https://codemirror.net/doc/manual.html#setOption
 */
function setMode(cm) {
  cm.setOption('mode', {
    name: 'gambier',
    markdownOptions: {...window.state.markdown}
  });
}

/**
 * Pass dynamic values to CSS through CSS variables.
 * From: https://www.kirillvasiltsov.com/writing/unlocking-the-power-of-svelte-actions/
 * @param {*} node 
 * @param {*} properties - Name of CSS variable we want to set
 */
function css(node, properties) {
  function setProperties() {
    for (const prop of Object.keys(properties)) {
      node.style.setProperty(`--${prop}`, properties[prop]);
    }
  }

  setProperties();

  return {
    update(newProperties) {
      properties = newProperties;
      setProperties();
    },
  };
}


/**
 * For the given array of values, set the margin on the node (in px).
 * @param {*} values - Array of values. Same format as normal css values. E.g. '5px 0' or '100%'.
 */
function setSize(node, props) {

  function setStyles({ width, height, margin, padding }) {
    node.style.width = width;
    node.style.height = height;
    node.style.margin = margin;
    node.style.padding = padding;  
  }

  setStyles(props);

  return {
    update(newProps) {
      setStyles(newProps);
    },
  };
}

/**
 * 
 * @param {*} node 
 * @param {*} sectionName 
 */
function setLayoutFocus(node, params) {

  let { current, setTo } = params;

  function onClick() {
    if (current !== setTo) {
      window.api.send('dispatch', { type: 'SET_LAYOUT_FOCUS', section: setTo });
    }
  }

  node.addEventListener('click', onClick);

  return {
    update(newParams) {
      current = newParams.current;
      setTo = newParams.setTo;
    },
    destroy() {
      node.removeEventListener('click', onClick);
    }
  }
}

/* src/js/renderer/component/ui/Separator.svelte generated by Svelte v3.30.1 */
const file$4 = "src/js/renderer/component/ui/Separator.svelte";

function add_css$5() {
	var style = element("style");
	style.id = "svelte-m26w37-style";
	style.textContent = "@keyframes svelte-m26w37-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}hr.svelte-m26w37{min-height:1px;border:0;background-color:var(--separatorColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VwYXJhdG9yLnN2ZWx0ZSIsInNvdXJjZXMiOlsiU2VwYXJhdG9yLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBzZXRTaXplIH0gZnJvbSBcIi4vYWN0aW9uc1wiO1xuXG4gIGV4cG9ydCBsZXQgbWFyZ2luID0gJzAnO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG5ociB7XG4gIG1pbi1oZWlnaHQ6IDFweDtcbiAgYm9yZGVyOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZXBhcmF0b3JDb2xvcik7XG59PC9zdHlsZT5cblxuPGhyIHVzZTpzZXRTaXplPXt7bWFyZ2lufX0gLz4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT3dCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxFQUFFLGNBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxHQUFHLENBQ2YsTUFBTSxDQUFFLENBQUMsQ0FDVCxnQkFBZ0IsQ0FBRSxJQUFJLGdCQUFnQixDQUFDLEFBQ3pDLENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$5(ctx) {
	let hr;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			hr = element("hr");
			attr_dev(hr, "class", "svelte-m26w37");
			add_location(hr, file$4, 21, 0, 408);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, hr, anchor);

			if (!mounted) {
				dispose = action_destroyer(setSize_action = setSize.call(null, hr, { margin: /*margin*/ ctx[0] }));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 1) setSize_action.update.call(null, { margin: /*margin*/ ctx[0] });
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(hr);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Separator", slots, []);
	let { margin = "0" } = $$props;
	const writable_props = ["margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Separator> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("margin" in $$props) $$invalidate(0, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({ setSize, margin });

	$$self.$inject_state = $$props => {
		if ("margin" in $$props) $$invalidate(0, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [margin];
}

class Separator extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-m26w37-style")) add_css$5();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { margin: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Separator",
			options,
			id: create_fragment$5.name
		});
	}

	get margin() {
		throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400, easing = identity }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}

/* src/js/renderer/component/ui/FormRow.svelte generated by Svelte v3.30.1 */
const file$5 = "src/js/renderer/component/ui/FormRow.svelte";

function add_css$6() {
	var style = element("style");
	style.id = "svelte-nuuk4o-style";
	style.textContent = "@keyframes svelte-nuuk4o-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.row.svelte-nuuk4o.svelte-nuuk4o{display:flex;align-items:center;max-width:var(--maxWidth)}.row.multiLine.svelte-nuuk4o.svelte-nuuk4o{align-items:start}.items.svelte-nuuk4o.svelte-nuuk4o{display:flex;gap:var(--gap);flex-wrap:nowrap;flex-grow:1}.multiLine.svelte-nuuk4o .items.svelte-nuuk4o{flex-wrap:wrap}.leftColumn.svelte-nuuk4o.svelte-nuuk4o{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;user-select:none;flex-basis:var(--leftColumn);text-align:right;color:var(--labelColor);flex-shrink:0;padding-top:var(--labelTopOffset);padding-right:8px;overflow:hidden;white-space:nowrap}.compact.svelte-nuuk4o .leftColumn.svelte-nuuk4o{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;padding-top:var(--labelTopOffset);padding-right:5px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybVJvdy5zdmVsdGUiLCJzb3VyY2VzIjpbIkZvcm1Sb3cuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNzcywgc2V0U2l6ZSB9IGZyb20gXCIuL2FjdGlvbnNcIjtcbiAgaW1wb3J0IHsgZmFkZSB9IGZyb20gJ3N2ZWx0ZS90cmFuc2l0aW9uJztcbiAgXG4gIGV4cG9ydCBsZXQgbWF4V2lkdGggPSAnMTAwJSdcbiAgZXhwb3J0IGxldCBsZWZ0Q29sdW1uID0gJycgLy8gJzEwMHB4J1xuICBleHBvcnQgbGV0IGxhYmVsVG9wT2Zmc2V0ID0gJzAnXG4gIGV4cG9ydCBsZXQgbWFyZ2luID0gJzAnXG4gIGV4cG9ydCBsZXQgbXVsdGlMaW5lID0gZmFsc2VcbiAgZXhwb3J0IGxldCBjb21wYWN0ID0gZmFsc2VcbiAgXG4gIC8vIFNldHMgZmxleCBgYWxpZ24taXRlbXNgIHByb3BlcnR5LiBcbiAgLy8gU2V0IHRvICdzdHJldGNoJyAob3IgJ3N0YXJ0Jykgd2hlbiB3ZSB3YW50IHRvIHRvcC1hbGlnbiBsYWJlbHMgXG4gIC8vIGluc2lkZSB0YWxsIG11bHRpLWxpbmUgcm93cy5cbiAgLy8gUGVyOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYWxpZ24taXRlbXNcbiAgZXhwb3J0IGxldCBhbGlnbkl0ZW1zID0gJ2NlbnRlcicgXG5cbiAgLy8gT3B0aW9uYWxseSBkZWZpbmUgZ2FwIGJldHdlZW4gaXRlbXNcbiAgZXhwb3J0IGxldCBnYXAgPSAnMHB4J1xuICBcbiAgLy8gT3B0aW9uYWxseSBhZGQgYSBsYWJlbCBhbmQgc2V0IGl0cyBzaXplXG4gIGV4cG9ydCBsZXQgbGFiZWwgPSAnJ1xuICBleHBvcnQgbGV0IGxhYmVsV2lkdGggPSAnNDYnXG4gIGV4cG9ydCBsZXQgbGFiZWxNYXJnaW4gPSAnMCdcbiAgXG4gIC8vIEJ5IGFkZGluZyBhbiBvdXRybyBkZWxheSwgd2UgZW5hYmxlIEV4cGFuZGFibGUgY29tcG9uZW50c1xuICAvLyB0aW1lIHRvIGFuaW1hdGUgdGhlaXIgY2xvc2luZy4gSXQncyBoYWNreSwgYnV0IGl0IHdvcmtzLlxuICAvLyBCeSBkZWZhdWx0IGl0J3MgemVybyAobm8gZGVsYXkpLlxuICBleHBvcnQgbGV0IG91dHJvRGVsYXkgPSAwXG4gIGV4cG9ydCBsZXQgb3V0cm9EdXJhdGlvbiA9IDBcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLnJvdyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1heC13aWR0aDogdmFyKC0tbWF4V2lkdGgpO1xufVxuXG4ucm93Lm11bHRpTGluZSB7XG4gIGFsaWduLWl0ZW1zOiBzdGFydDtcbn1cblxuLml0ZW1zIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiB2YXIoLS1nYXApO1xuICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgZmxleC1ncm93OiAxO1xufVxuXG4ubXVsdGlMaW5lIC5pdGVtcyB7XG4gIGZsZXgtd3JhcDogd3JhcDtcbn1cblxuLmxlZnRDb2x1bW4ge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGZsZXgtYmFzaXM6IHZhcigtLWxlZnRDb2x1bW4pO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBmbGV4LXNocmluazogMDtcbiAgcGFkZGluZy10b3A6IHZhcigtLWxhYmVsVG9wT2Zmc2V0KTtcbiAgcGFkZGluZy1yaWdodDogOHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4uY29tcGFjdCAubGVmdENvbHVtbiB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwcHg7XG4gIHBhZGRpbmctdG9wOiB2YXIoLS1sYWJlbFRvcE9mZnNldCk7XG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcbn1cblxuLm5vLXRyYW5zaXRpb24ge1xuICBhbmltYXRpb246IG5vbmUgIWltcG9ydGFudDtcbn08L3N0eWxlPlxuXG48ZGl2IFxuICBjbGFzcz1cInJvd1wiIFxuICB1c2U6c2V0U2l6ZT17e21hcmdpbn19IFxuICB1c2U6Y3NzPXt7bWF4V2lkdGgsIGxlZnRDb2x1bW4sIGxhYmVsVG9wT2Zmc2V0LCBnYXB9fVxuICBjbGFzczptdWx0aUxpbmVcbiAgY2xhc3M6Y29tcGFjdFxuICBvdXQ6ZmFkZXxsb2NhbD17e1xuICAgIGR1cmF0aW9uOiBvdXRyb0R1cmF0aW9uLFxuICAgIGRlbGF5OiBvdXRyb0RlbGF5XG4gIH19XG4+XG4gIHsjaWYgbGVmdENvbHVtbn1cbiAgICA8c3BhbiBjbGFzcz1cImxlZnRDb2x1bW5cIj5cbiAgICAgIHtsYWJlbH1cbiAgICA8L3NwYW4+XG4gIHsvaWZ9XG4gIDxzcGFuIGNsYXNzPVwiaXRlbXNcIj5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gIDwvc3Bhbj5cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQ3dCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxJQUFJLDRCQUFDLENBQUMsQUFDSixPQUFPLENBQUUsSUFBSSxDQUNiLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLFVBQVUsQ0FBQyxBQUM1QixDQUFDLEFBRUQsSUFBSSxVQUFVLDRCQUFDLENBQUMsQUFDZCxXQUFXLENBQUUsS0FBSyxBQUNwQixDQUFDLEFBRUQsTUFBTSw0QkFBQyxDQUFDLEFBQ04sT0FBTyxDQUFFLElBQUksQ0FDYixHQUFHLENBQUUsSUFBSSxLQUFLLENBQUMsQ0FDZixTQUFTLENBQUUsTUFBTSxDQUNqQixTQUFTLENBQUUsQ0FBQyxBQUNkLENBQUMsQUFFRCx3QkFBVSxDQUFDLE1BQU0sY0FBQyxDQUFDLEFBQ2pCLFNBQVMsQ0FBRSxJQUFJLEFBQ2pCLENBQUMsQUFFRCxXQUFXLDRCQUFDLENBQUMsQUFDWCxXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFVBQVUsQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUM3QixVQUFVLENBQUUsS0FBSyxDQUNqQixLQUFLLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDeEIsV0FBVyxDQUFFLENBQUMsQ0FDZCxXQUFXLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxDQUNsQyxhQUFhLENBQUUsR0FBRyxDQUNsQixRQUFRLENBQUUsTUFBTSxDQUNoQixXQUFXLENBQUUsTUFBTSxBQUNyQixDQUFDLEFBRUQsc0JBQVEsQ0FBQyxXQUFXLGNBQUMsQ0FBQyxBQUNwQixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxHQUFHLENBQ25CLFdBQVcsQ0FBRSxJQUFJLGdCQUFnQixDQUFDLENBQ2xDLGFBQWEsQ0FBRSxHQUFHLEFBQ3BCLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (105:2) {#if leftColumn}
function create_if_block$1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*label*/ ctx[7]);
			attr_dev(span, "class", "leftColumn svelte-nuuk4o");
			add_location(span, file$5, 105, 4, 2311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 128) set_data_dev(t, /*label*/ ctx[7]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(105:2) {#if leftColumn}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let div;
	let t;
	let span;
	let setSize_action;
	let css_action;
	let div_outro;
	let current;
	let mounted;
	let dispose;
	let if_block = /*leftColumn*/ ctx[1] && create_if_block$1(ctx);
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			attr_dev(span, "class", "items svelte-nuuk4o");
			add_location(span, file$5, 109, 2, 2373);
			attr_dev(div, "class", "row svelte-nuuk4o");
			toggle_class(div, "multiLine", /*multiLine*/ ctx[4]);
			toggle_class(div, "compact", /*compact*/ ctx[5]);
			add_location(div, file$5, 93, 0, 2073);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);
			append_dev(div, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, div, { margin: /*margin*/ ctx[3] })),
					action_destroyer(css_action = css.call(null, div, {
						maxWidth: /*maxWidth*/ ctx[0],
						leftColumn: /*leftColumn*/ ctx[1],
						labelTopOffset: /*labelTopOffset*/ ctx[2],
						gap: /*gap*/ ctx[6]
					}))
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (/*leftColumn*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}

			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 8) setSize_action.update.call(null, { margin: /*margin*/ ctx[3] });

			if (css_action && is_function(css_action.update) && dirty & /*maxWidth, leftColumn, labelTopOffset, gap*/ 71) css_action.update.call(null, {
				maxWidth: /*maxWidth*/ ctx[0],
				leftColumn: /*leftColumn*/ ctx[1],
				labelTopOffset: /*labelTopOffset*/ ctx[2],
				gap: /*gap*/ ctx[6]
			});

			if (dirty & /*multiLine*/ 16) {
				toggle_class(div, "multiLine", /*multiLine*/ ctx[4]);
			}

			if (dirty & /*compact*/ 32) {
				toggle_class(div, "compact", /*compact*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);

			if (local) {
				div_outro = create_out_transition(div, fade, {
					duration: /*outroDuration*/ ctx[9],
					delay: /*outroDelay*/ ctx[8]
				});
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("FormRow", slots, ['default']);
	let { maxWidth = "100%" } = $$props;
	let { leftColumn = "" } = $$props; // '100px'
	let { labelTopOffset = "0" } = $$props;
	let { margin = "0" } = $$props;
	let { multiLine = false } = $$props;
	let { compact = false } = $$props;
	let { alignItems = "center" } = $$props;
	let { gap = "0px" } = $$props;
	let { label = "" } = $$props;
	let { labelWidth = "46" } = $$props;
	let { labelMargin = "0" } = $$props;
	let { outroDelay = 0 } = $$props;
	let { outroDuration = 0 } = $$props;

	const writable_props = [
		"maxWidth",
		"leftColumn",
		"labelTopOffset",
		"margin",
		"multiLine",
		"compact",
		"alignItems",
		"gap",
		"label",
		"labelWidth",
		"labelMargin",
		"outroDelay",
		"outroDuration"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FormRow> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("maxWidth" in $$props) $$invalidate(0, maxWidth = $$props.maxWidth);
		if ("leftColumn" in $$props) $$invalidate(1, leftColumn = $$props.leftColumn);
		if ("labelTopOffset" in $$props) $$invalidate(2, labelTopOffset = $$props.labelTopOffset);
		if ("margin" in $$props) $$invalidate(3, margin = $$props.margin);
		if ("multiLine" in $$props) $$invalidate(4, multiLine = $$props.multiLine);
		if ("compact" in $$props) $$invalidate(5, compact = $$props.compact);
		if ("alignItems" in $$props) $$invalidate(10, alignItems = $$props.alignItems);
		if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
		if ("label" in $$props) $$invalidate(7, label = $$props.label);
		if ("labelWidth" in $$props) $$invalidate(11, labelWidth = $$props.labelWidth);
		if ("labelMargin" in $$props) $$invalidate(12, labelMargin = $$props.labelMargin);
		if ("outroDelay" in $$props) $$invalidate(8, outroDelay = $$props.outroDelay);
		if ("outroDuration" in $$props) $$invalidate(9, outroDuration = $$props.outroDuration);
		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		css,
		setSize,
		fade,
		maxWidth,
		leftColumn,
		labelTopOffset,
		margin,
		multiLine,
		compact,
		alignItems,
		gap,
		label,
		labelWidth,
		labelMargin,
		outroDelay,
		outroDuration
	});

	$$self.$inject_state = $$props => {
		if ("maxWidth" in $$props) $$invalidate(0, maxWidth = $$props.maxWidth);
		if ("leftColumn" in $$props) $$invalidate(1, leftColumn = $$props.leftColumn);
		if ("labelTopOffset" in $$props) $$invalidate(2, labelTopOffset = $$props.labelTopOffset);
		if ("margin" in $$props) $$invalidate(3, margin = $$props.margin);
		if ("multiLine" in $$props) $$invalidate(4, multiLine = $$props.multiLine);
		if ("compact" in $$props) $$invalidate(5, compact = $$props.compact);
		if ("alignItems" in $$props) $$invalidate(10, alignItems = $$props.alignItems);
		if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
		if ("label" in $$props) $$invalidate(7, label = $$props.label);
		if ("labelWidth" in $$props) $$invalidate(11, labelWidth = $$props.labelWidth);
		if ("labelMargin" in $$props) $$invalidate(12, labelMargin = $$props.labelMargin);
		if ("outroDelay" in $$props) $$invalidate(8, outroDelay = $$props.outroDelay);
		if ("outroDuration" in $$props) $$invalidate(9, outroDuration = $$props.outroDuration);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		maxWidth,
		leftColumn,
		labelTopOffset,
		margin,
		multiLine,
		compact,
		gap,
		label,
		outroDelay,
		outroDuration,
		alignItems,
		labelWidth,
		labelMargin,
		$$scope,
		slots
	];
}

class FormRow extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-nuuk4o-style")) add_css$6();

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			maxWidth: 0,
			leftColumn: 1,
			labelTopOffset: 2,
			margin: 3,
			multiLine: 4,
			compact: 5,
			alignItems: 10,
			gap: 6,
			label: 7,
			labelWidth: 11,
			labelMargin: 12,
			outroDelay: 8,
			outroDuration: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FormRow",
			options,
			id: create_fragment$6.name
		});
	}

	get maxWidth() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxWidth(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get leftColumn() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set leftColumn(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelTopOffset() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelTopOffset(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiLine() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiLine(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alignItems() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alignItems(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gap() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gap(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelWidth() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelWidth(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelMargin() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelMargin(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outroDelay() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outroDelay(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get outroDuration() {
		throw new Error("<FormRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set outroDuration(value) {
		throw new Error("<FormRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/Citation.svelte generated by Svelte v3.30.1 */
const file$6 = "src/js/renderer/component/main/wizard/Citation.svelte";

function add_css$7() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2l0YXRpb24uc3ZlbHRlIiwic291cmNlcyI6WyJDaXRhdGlvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi8uLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IHsgd3JpdGVUb0RvYyB9IGZyb20gJy4uLy4uLy4uL2VkaXRvci9lZGl0b3ItdXRpbHMnO1xuICBpbXBvcnQgRm9ybVJvdyBmcm9tICcuLi8uLi91aS9Gb3JtUm93LnN2ZWx0ZSc7XG4gIFxuICBleHBvcnQgbGV0IGNtID0gbnVsbFxuICBleHBvcnQgbGV0IGVsZW1lbnQgPSBudWxsXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn08L3N0eWxlPlxuXG48aGVhZGVyPlxuICA8aDE+Q2l0YXRpb248L2gxPlxuPC9oZWFkZXI+XG5cbjwhLS0gPFNlcGFyYXRvciBtYXJnaW49eycwIDAgOHB4J30gLz4gLS0+XG5cbjwhLS0tLS0tIERFRklOSVRJT04gLS0tLS0tPlxuXG48ZGl2IGNsYXNzPVwiZGVmaW5pdGlvblwiPlxuICB7ZWxlbWVudC5tYXJrZG93bn1cbjwvZGl2PlxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVXdCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$7(ctx) {
	let header;
	let h1;
	let t1;
	let div;
	let t2_value = /*element*/ ctx[0].markdown + "";
	let t2;

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Citation";
			t1 = space();
			div = element("div");
			t2 = text(t2_value);
			add_location(h1, file$6, 20, 2, 487);
			add_location(header, file$6, 19, 0, 476);
			attr_dev(div, "class", "definition");
			add_location(div, file$6, 27, 0, 588);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, t2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*element*/ 1 && t2_value !== (t2_value = /*element*/ ctx[0].markdown + "")) set_data_dev(t2, t2_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Citation", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Citation> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(1, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(0, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		Separator,
		writeToDoc,
		FormRow,
		cm,
		element
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(1, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(0, element = $$props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [element, cm];
}

class Citation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$7();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { cm: 1, element: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Citation",
			options,
			id: create_fragment$7.name
		});
	}

	get cm() {
		throw new Error("<Citation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<Citation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<Citation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<Citation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/InputText.svelte generated by Svelte v3.30.1 */
const file$7 = "src/js/renderer/component/ui/InputText.svelte";

function add_css$8() {
	var style = element("style");
	style.id = "svelte-688szw-style";
	style.textContent = "@keyframes svelte-688szw-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.inputText.svelte-688szw.svelte-688szw{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;position:relative;border-radius:5.5px;min-height:28px;display:inline-flex;flex-direction:row;align-items:center;padding:0 3px 0 7px}.inputText.svelte-688szw.svelte-688szw:focus-within{animation-fill-mode:forwards;animation-name:svelte-688szw-selectField;animation-duration:0.3s}.icon.svelte-688szw.svelte-688szw,.errorIcon.svelte-688szw.svelte-688szw{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;min-width:13px;height:13px;margin-right:3px}.input.svelte-688szw.svelte-688szw{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin-top:1px;width:100%;background:transparent;overflow:hidden;outline:none}.showPlaceholder.svelte-688szw .input.svelte-688szw::after{content:attr(data-placeholder);user-select:none;pointer-events:none}.inputText.svelte-688szw.svelte-688szw:not(.multiLine){overflow:hidden}.inputText.svelte-688szw:not(.multiLine) .input.svelte-688szw{overflow-x:scroll;white-space:nowrap}.inputText.svelte-688szw:not(.multiLine) .input.svelte-688szw::-webkit-scrollbar{height:0px}.inputText.multiLine.svelte-688szw .input.svelte-688szw{max-height:calc(var(--multiLineMaxHeight) * 1px);overflow-y:scroll;word-break:break-word;border-radius:4px}.inputText.compact.svelte-688szw.svelte-688szw{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;min-height:20px;line-height:20px;border-radius:4px;padding:0 3px 0 4px}.inputText.compact.svelte-688szw .icon.svelte-688szw,.inputText.compact.svelte-688szw .errorIcon.svelte-688szw{margin-top:0;margin-left:1px;min-width:11px;height:11px}.inputText.compact.svelte-688szw .input.svelte-688szw{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;margin-top:0;line-height:20px}.inputText.multiLine.svelte-688szw.svelte-688szw{padding:4px 4px}.inputText.multiLine.svelte-688szw .input.svelte-688szw{line-height:14px}.inputText.sidebar.svelte-688szw .icon.svelte-688szw,.inputText.toolbar.svelte-688szw .icon.svelte-688szw,.inputText.inline.svelte-688szw .icon.svelte-688szw{background-color:var(--controlTextColor);opacity:0.8}.inputText.sidebar.svelte-688szw .errorIcon.svelte-688szw,.inputText.toolbar.svelte-688szw .errorIcon.svelte-688szw,.inputText.inline.svelte-688szw .errorIcon.svelte-688szw{background-color:var(--errorColor);-webkit-mask-image:var(--img-exclamationmark-circle-fill)}.inputText.sidebar.svelte-688szw .input.svelte-688szw,.inputText.toolbar.svelte-688szw .input.svelte-688szw,.inputText.inline.svelte-688szw .input.svelte-688szw{color:var(--textColor)}.showPlaceholder.svelte-688szw .input.svelte-688szw::after{color:var(--placeholderTextColor)}.showPlaceholder.isError.svelte-688szw .input.svelte-688szw::after{color:var(--errorColor);opacity:0.6}.isDisabled.svelte-688szw.svelte-688szw{background-color:transparent !important}.isDisabled.svelte-688szw .input.svelte-688szw{opacity:0.8}.inputText:not(:focus-within).isError.svelte-688szw.svelte-688szw{box-shadow:inset 0 0 0 1px var(--errorColor) !important}@media(prefers-color-scheme: dark){.inputText.editable.sidebar.svelte-688szw.svelte-688szw,.inputText.editable.inline.svelte-688szw.svelte-688szw{background-color:rgba(var(--foregroundColor), 0.05);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(255, 255, 255, 0.1)}}@media(prefers-color-scheme: light){.inputText.editable.sidebar.svelte-688szw.svelte-688szw,.inputText.editable.inline.svelte-688szw.svelte-688szw{background-color:rgba(var(--foregroundColor), 0.05);box-shadow:inset 0 0 0 0.5px rgba(0, 0, 0, 0.1)}}.inputText.editable.sidebar.svelte-688szw .icon.svelte-688szw,.inputText.editable.inline.svelte-688szw .icon.svelte-688szw{opacity:0.5}.inputText.editable.toolbar.svelte-688szw.svelte-688szw{border:1px solid rgba(var(--foregroundColor), 0.05)}.inputText.editable.toolbar.svelte-688szw .icon.svelte-688szw{opacity:0.5}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (223:2) {#if icon}
function create_if_block_2(ctx) {
	let div;
	let div_style_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icon svelte-688szw");
			attr_dev(div, "style", div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[5]});`);
			add_location(div, file$7, 223, 4, 4888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "mousedown", prevent_default(/*mousedown_handler*/ ctx[16]), false, true, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon*/ 32 && div_style_value !== (div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[5]});`)) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(223:2) {#if icon}",
		ctx
	});

	return block;
}

// (250:2) {:else}
function create_else_block$1(ctx) {
	let div;
	let t;
	let div_data_placeholder_value;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*value*/ ctx[0]);
			attr_dev(div, "class", "input svelte-688szw");

			attr_dev(div, "data-placeholder", div_data_placeholder_value = /*isError*/ ctx[12]
			? /*errorPlaceholder*/ ctx[3]
			: /*placeholder*/ ctx[2]);

			add_location(div, file$7, 250, 4, 5497);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);

			if (dirty & /*isError, errorPlaceholder, placeholder*/ 4108 && div_data_placeholder_value !== (div_data_placeholder_value = /*isError*/ ctx[12]
			? /*errorPlaceholder*/ ctx[3]
			: /*placeholder*/ ctx[2])) {
				attr_dev(div, "data-placeholder", div_data_placeholder_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(250:2) {:else}",
		ctx
	});

	return block;
}

// (235:2) {#if editable && !isDisabled}
function create_if_block_1(ctx) {
	let div;
	let div_data_placeholder_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "contenteditable", "");
			attr_dev(div, "class", "input svelte-688szw");

			attr_dev(div, "data-placeholder", div_data_placeholder_value = /*isError*/ ctx[12]
			? /*errorPlaceholder*/ ctx[3]
			: /*placeholder*/ ctx[2]);

			attr_dev(div, "tabindex", "0");
			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*div_input_handler*/ ctx[18].call(div));
			add_location(div, file$7, 235, 4, 5158);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			/*div_binding*/ ctx[17](div);

			if (/*value*/ ctx[0] !== void 0) {
				div.textContent = /*value*/ ctx[0];
			}

			if (!mounted) {
				dispose = [
					listen_dev(div, "input", /*div_input_handler*/ ctx[18]),
					listen_dev(div, "keydown", keydown_handler, false, false, false),
					listen_dev(div, "input", /*input_handler*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*isError, errorPlaceholder, placeholder*/ 4108 && div_data_placeholder_value !== (div_data_placeholder_value = /*isError*/ ctx[12]
			? /*errorPlaceholder*/ ctx[3]
			: /*placeholder*/ ctx[2])) {
				attr_dev(div, "data-placeholder", div_data_placeholder_value);
			}

			if (dirty & /*value*/ 1 && /*value*/ ctx[0] !== div.textContent) {
				div.textContent = /*value*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(235:2) {#if editable && !isDisabled}",
		ctx
	});

	return block;
}

// (260:2) {#if isError}
function create_if_block$2(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "errorIcon svelte-688szw");
			add_location(div, file$7, 260, 4, 5672);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "mousedown", prevent_default(/*mousedown_handler_1*/ ctx[19]), false, true, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(260:2) {#if isError}",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let div;
	let t0;
	let t1;
	let div_class_value;
	let css_action;
	let setSize_action;
	let mounted;
	let dispose;
	let if_block0 = /*icon*/ ctx[5] && create_if_block_2(ctx);

	function select_block_type(ctx, dirty) {
		if (/*editable*/ ctx[1] && !/*isDisabled*/ ctx[11]) return create_if_block_1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*isError*/ ctx[12] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			attr_dev(div, "class", div_class_value = "inputText " + /*style*/ ctx[4] + " svelte-688szw");
			toggle_class(div, "editable", /*editable*/ ctx[1]);
			toggle_class(div, "multiLine", /*multiLine*/ ctx[9]);
			toggle_class(div, "compact", /*compact*/ ctx[8]);
			toggle_class(div, "isError", /*isError*/ ctx[12]);
			toggle_class(div, "isDisabled", /*isDisabled*/ ctx[11]);
			toggle_class(div, "showPlaceholder", !/*value*/ ctx[0]);
			add_location(div, file$7, 209, 0, 4630);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if_block1.m(div, null);
			append_dev(div, t1);
			if (if_block2) if_block2.m(div, null);

			if (!mounted) {
				dispose = [
					action_destroyer(css_action = css.call(null, div, {
						multiLineMaxHeight: /*multiLineMaxHeight*/ ctx[10]
					})),
					action_destroyer(setSize_action = setSize.call(null, div, {
						width: /*width*/ ctx[6],
						margin: /*margin*/ ctx[7]
					}))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*icon*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div, t1);
				}
			}

			if (/*isError*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block$2(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*style*/ 16 && div_class_value !== (div_class_value = "inputText " + /*style*/ ctx[4] + " svelte-688szw")) {
				attr_dev(div, "class", div_class_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*multiLineMaxHeight*/ 1024) css_action.update.call(null, {
				multiLineMaxHeight: /*multiLineMaxHeight*/ ctx[10]
			});

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, margin*/ 192) setSize_action.update.call(null, {
				width: /*width*/ ctx[6],
				margin: /*margin*/ ctx[7]
			});

			if (dirty & /*style, editable*/ 18) {
				toggle_class(div, "editable", /*editable*/ ctx[1]);
			}

			if (dirty & /*style, multiLine*/ 528) {
				toggle_class(div, "multiLine", /*multiLine*/ ctx[9]);
			}

			if (dirty & /*style, compact*/ 272) {
				toggle_class(div, "compact", /*compact*/ ctx[8]);
			}

			if (dirty & /*style, isError*/ 4112) {
				toggle_class(div, "isError", /*isError*/ ctx[12]);
			}

			if (dirty & /*style, isDisabled*/ 2064) {
				toggle_class(div, "isDisabled", /*isDisabled*/ ctx[11]);
			}

			if (dirty & /*style, value*/ 17) {
				toggle_class(div, "showPlaceholder", !/*value*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const keydown_handler = evt => {
	if (evt.key == "Enter") {
		evt.preventDefault();
	}
};

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("InputText", slots, []);
	let { editable = true } = $$props;
	let { placeholder = "" } = $$props;
	let { errorPlaceholder = "Required" } = $$props;
	let { value = "" } = $$props;
	let { focused = false } = $$props;
	let { style = "sidebar" } = $$props; // 'sidebar', 'toolbar', or 'inline'
	let { icon = undefined } = $$props; // Eg. 'img-arrow-up-arrow-down'
	let { width = "auto" } = $$props; // '100px', 'auto', etc.
	let { margin = "0" } = $$props;
	let { compact = false } = $$props;
	let { multiLine = false } = $$props;
	let { multiLineMaxHeight = "28" } = $$props;
	let { isDisabled = false } = $$props;
	let { isError = false } = $$props;
	let input = null;

	const writable_props = [
		"editable",
		"placeholder",
		"errorPlaceholder",
		"value",
		"focused",
		"style",
		"icon",
		"width",
		"margin",
		"compact",
		"multiLine",
		"multiLineMaxHeight",
		"isDisabled",
		"isError"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<InputText> was created with unknown prop '${key}'`);
	});

	function input_handler(event) {
		bubble($$self, event);
	}

	const mousedown_handler = () => input.select();

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(13, input);
		});
	}

	function div_input_handler() {
		value = this.textContent;
		$$invalidate(0, value);
	}

	const mousedown_handler_1 = () => input.select();

	$$self.$$set = $$props => {
		if ("editable" in $$props) $$invalidate(1, editable = $$props.editable);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("errorPlaceholder" in $$props) $$invalidate(3, errorPlaceholder = $$props.errorPlaceholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("focused" in $$props) $$invalidate(14, focused = $$props.focused);
		if ("style" in $$props) $$invalidate(4, style = $$props.style);
		if ("icon" in $$props) $$invalidate(5, icon = $$props.icon);
		if ("width" in $$props) $$invalidate(6, width = $$props.width);
		if ("margin" in $$props) $$invalidate(7, margin = $$props.margin);
		if ("compact" in $$props) $$invalidate(8, compact = $$props.compact);
		if ("multiLine" in $$props) $$invalidate(9, multiLine = $$props.multiLine);
		if ("multiLineMaxHeight" in $$props) $$invalidate(10, multiLineMaxHeight = $$props.multiLineMaxHeight);
		if ("isDisabled" in $$props) $$invalidate(11, isDisabled = $$props.isDisabled);
		if ("isError" in $$props) $$invalidate(12, isError = $$props.isError);
	};

	$$self.$capture_state = () => ({
		setSize,
		css,
		editable,
		placeholder,
		errorPlaceholder,
		value,
		focused,
		style,
		icon,
		width,
		margin,
		compact,
		multiLine,
		multiLineMaxHeight,
		isDisabled,
		isError,
		input
	});

	$$self.$inject_state = $$props => {
		if ("editable" in $$props) $$invalidate(1, editable = $$props.editable);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("errorPlaceholder" in $$props) $$invalidate(3, errorPlaceholder = $$props.errorPlaceholder);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("focused" in $$props) $$invalidate(14, focused = $$props.focused);
		if ("style" in $$props) $$invalidate(4, style = $$props.style);
		if ("icon" in $$props) $$invalidate(5, icon = $$props.icon);
		if ("width" in $$props) $$invalidate(6, width = $$props.width);
		if ("margin" in $$props) $$invalidate(7, margin = $$props.margin);
		if ("compact" in $$props) $$invalidate(8, compact = $$props.compact);
		if ("multiLine" in $$props) $$invalidate(9, multiLine = $$props.multiLine);
		if ("multiLineMaxHeight" in $$props) $$invalidate(10, multiLineMaxHeight = $$props.multiLineMaxHeight);
		if ("isDisabled" in $$props) $$invalidate(11, isDisabled = $$props.isDisabled);
		if ("isError" in $$props) $$invalidate(12, isError = $$props.isError);
		if ("input" in $$props) $$invalidate(13, input = $$props.input);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		editable,
		placeholder,
		errorPlaceholder,
		style,
		icon,
		width,
		margin,
		compact,
		multiLine,
		multiLineMaxHeight,
		isDisabled,
		isError,
		input,
		focused,
		input_handler,
		mousedown_handler,
		div_binding,
		div_input_handler,
		mousedown_handler_1
	];
}

class InputText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-688szw-style")) add_css$8();

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			editable: 1,
			placeholder: 2,
			errorPlaceholder: 3,
			value: 0,
			focused: 14,
			style: 4,
			icon: 5,
			width: 6,
			margin: 7,
			compact: 8,
			multiLine: 9,
			multiLineMaxHeight: 10,
			isDisabled: 11,
			isError: 12
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InputText",
			options,
			id: create_fragment$8.name
		});
	}

	get editable() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editable(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errorPlaceholder() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errorPlaceholder(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focused() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiLine() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiLine(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get multiLineMaxHeight() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set multiLineMaxHeight(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isDisabled() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isDisabled(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isError() {
		throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isError(value) {
		throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/Footnote.svelte generated by Svelte v3.30.1 */
const file$8 = "src/js/renderer/component/main/wizard/Footnote.svelte";

function add_css$9() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9vdG5vdGUuc3ZlbHRlIiwic291cmNlcyI6WyJGb290bm90ZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi8uLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IHsgd3JpdGVUb0RvYyB9IGZyb20gJy4uLy4uLy4uL2VkaXRvci9lZGl0b3ItdXRpbHMnO1xuICBpbXBvcnQgRm9ybVJvdyBmcm9tICcuLi8uLi91aS9Gb3JtUm93LnN2ZWx0ZSc7XG4gIGltcG9ydCBJbnB1dFRleHQgZnJvbSAnLi4vLi4vdWkvSW5wdXRUZXh0LnN2ZWx0ZSc7XG4gXG4gIGV4cG9ydCBsZXQgY20gPSBudWxsXG4gIGV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGxcblxuICBsZXQgY29udGVudFxuXG4gICQ6IHtcbiAgICBpZiAoZWxlbWVudC5zcGFucy5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnQgPSBlbGVtZW50LnNwYW5zWzBdXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudC5tYXJrZG93bi5pbmRleE9mKCdbJykgKyAxICsgZWxlbWVudC5zdGFydFxuICAgICAgY29udGVudCA9IHsgc3RhcnQ6IGluZGV4LCBlbmQ6IGluZGV4LCBzdHJpbmc6ICcnfVxuICAgIH1cbiAgfVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59PC9zdHlsZT5cblxuPGhlYWRlcj5cbiAgPGgxPkZvb3Rub3RlPC9oMT5cbjwvaGVhZGVyPlxuXG48U2VwYXJhdG9yIG1hcmdpbj17JzAnfSAvPlxuXG48Rm9ybVJvdyBtYXJnaW49eyc4cHggOHB4J30+XG4gIDxJbnB1dFRleHRcbiAgICBwbGFjZWhvbGRlcj17Jyd9XG4gICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgIG11bHRpTGluZU1heEhlaWdodD17MjAwfVxuICAgIHdpZHRoPXsnMTAwJSd9XG4gICAgY29tcGFjdD17dHJ1ZX0gXG4gICAgYmluZDp2YWx1ZT17Y29udGVudC5zdHJpbmd9IFxuICAgIG9uOmlucHV0PXsoZXZ0KSA9PiBcbiAgICAgIHdyaXRlVG9Eb2MoXG4gICAgICAgIGNtLCBldnQudGFyZ2V0LnRleHRDb250ZW50LCBcbiAgICAgICAgZWxlbWVudC5saW5lLCBjb250ZW50LnN0YXJ0LCBjb250ZW50LmVuZFxuICAgICAgKVxuICAgIH1cbiAgLz5cbiAgPC9Gb3JtUm93PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQndCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMifQ== */";
	append_dev(document.head, style);
}

// (38:0) <FormRow margin={'8px 8px'}>
function create_default_slot(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[3].call(null, value);
	}

	let inputtext_props = {
		placeholder: "",
		multiLine: true,
		multiLineMaxHeight: 200,
		width: "100%",
		compact: true
	};

	if (/*content*/ ctx[2].string !== void 0) {
		inputtext_props.value = /*content*/ ctx[2].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[4]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*content*/ 4) {
				updating_value = true;
				inputtext_changes.value = /*content*/ ctx[2].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(38:0) <FormRow margin={'8px 8px'}>",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let header;
	let h1;
	let t1;
	let separator;
	let t2;
	let formrow;
	let current;
	separator = new Separator({ props: { margin: "0" }, $$inline: true });

	formrow = new FormRow({
			props: {
				margin: "8px 8px",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Footnote";
			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			create_component(formrow.$$.fragment);
			add_location(h1, file$8, 32, 2, 776);
			add_location(header, file$8, 31, 0, 765);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formrow_changes = {};

			if (dirty & /*$$scope, content, cm, element*/ 39) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Footnote", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let content;
	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footnote> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		content.string = value;
		($$invalidate(2, content), $$invalidate(1, element));
	}

	const input_handler = evt => writeToDoc(cm, evt.target.textContent, element.line, content.start, content.end);

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		Separator,
		writeToDoc,
		FormRow,
		InputText,
		cm,
		element,
		content
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("content" in $$props) $$invalidate(2, content = $$props.content);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element*/ 2) {
			 {
				if (element.spans.length) {
					$$invalidate(2, content = element.spans[0]);
				} else {
					const index = element.markdown.indexOf("[") + 1 + element.start;
					$$invalidate(2, content = { start: index, end: index, string: "" });
				}
			}
		}
	};

	return [cm, element, content, inputtext_value_binding, input_handler];
}

class Footnote extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$9();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footnote",
			options,
			id: create_fragment$9.name
		});
	}

	get cm() {
		throw new Error("<Footnote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<Footnote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<Footnote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<Footnote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/ReferenceFootnote.svelte generated by Svelte v3.30.1 */

const { console: console_1$1 } = globals;
const file$9 = "src/js/renderer/component/main/wizard/ReferenceFootnote.svelte";

function add_css$a() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlRm9vdG5vdGUuc3ZlbHRlIiwic291cmNlcyI6WyJSZWZlcmVuY2VGb290bm90ZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IElucHV0VGV4dCBmcm9tICcuLi8uLi91aS9JbnB1dFRleHQuc3ZlbHRlJztcbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi8uLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IHsgd3JpdGVUb0RvYywgZ2V0UmVmZXJlbmNlRGVmaW5pdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9lZGl0b3IvZWRpdG9yLXV0aWxzJztcbiAgaW1wb3J0IEZvcm1Sb3cgZnJvbSAnLi4vLi4vdWkvRm9ybVJvdy5zdmVsdGUnO1xuICBcbiAgZXhwb3J0IGxldCBjbSA9IG51bGxcbiAgZXhwb3J0IGxldCBlbGVtZW50ID0gbnVsbFxuXG4gIGxldCBtdWx0aXBsZURlZmluaXRpb25zRm91bmQgPSBmYWxzZVxuICBsZXQgbm9EZWZpbml0aW9uc0ZvdW5kID0gZmFsc2VcblxuICBsZXQgbGFiZWxcbiAgbGV0IGRlZmluaXRpb25cblxuICAkOiB7IFxuXG4gICAgbGFiZWwgPSBlbGVtZW50LnNwYW5zLmZpbmQoKGYpID0+IGYudHlwZS5pbmNsdWRlcygnbGFiZWwnKSlcbiAgICBcbiAgICAvLyBpZiAoIWxhYmVsKSB7XG4gICAgLy8gICBjb25zdCBpbmRleCA9IGlzRnVsbCA/IFxuICAgIC8vICAgICBlbGVtZW50Lm1hcmtkb3duLmluZGV4T2YoJ11bJykgKyAyICsgZWxlbWVudC5zdGFydCA6XG4gICAgLy8gICAgIGVsZW1lbnQuc3RhcnQgKyAxXG4gICAgLy8gICBsYWJlbCA9IHsgc3RhcnQ6IGluZGV4LCBlbmQ6IGluZGV4LCBzdHJpbmc6ICcnIH1cbiAgICAvLyB9XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgY29uc3QgZGVmaW5pdGlvbnMgPSBnZXRSZWZlcmVuY2VEZWZpbml0aW9ucyhjbSwgbGFiZWwuc3RyaW5nLCAnZm9vdG5vdGUnKVxuXG4gICAgICBub0RlZmluaXRpb25zRm91bmQgPSBkZWZpbml0aW9ucy5sZW5ndGggPT0gMFxuICAgICAgbXVsdGlwbGVEZWZpbml0aW9uc0ZvdW5kID0gZGVmaW5pdGlvbnMubGVuZ3RoID4gMVxuXG4gICAgICBjb25zb2xlLmxvZyhub0RlZmluaXRpb25zRm91bmQsIG11bHRpcGxlRGVmaW5pdGlvbnNGb3VuZClcblxuICAgICAgLy8gSWYgdGhlcmUncyBvbmUgbWF0Y2gsIHNlbGVjdCBpdFxuICAgICAgLy8gRWxzZSBzZXQgZGVmaW5pdGlvbiBudWxsXG4gICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbnMubGVuZ3RoID09IDEgP1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbnNbMF0uc3BhbnMuZmluZCgocykgPT4gcy50eXBlLmluY2x1ZGVzKCdjb250ZW50JykpLnN0cmluZyA6XG4gICAgICAgICcnXG4gICAgfVxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn08L3N0eWxlPlxuXG48aGVhZGVyPlxuICA8aDE+UmVmZXJlbmNlIEZvb3Rub3RlPC9oMT5cbjwvaGVhZGVyPlxuXG48U2VwYXJhdG9yIG1hcmdpbj17JzAgMCA4cHgnfSAvPlxuXG48Rm9ybVJvdyBsYWJlbD17J0lEOid9IGxlZnRDb2x1bW49eycyMHB4J30gbWFyZ2luPXsnOHB4J30gY29tcGFjdD17dHJ1ZX0+XG4gIDxJbnB1dFRleHQgXG4gICAgd2lkdGg9JzEwMCUnIFxuICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgIGJpbmQ6dmFsdWU9e2xhYmVsLnN0cmluZ30gXG4gICAgb246aW5wdXQ9eyhldnQpID0+IFxuICAgICAgd3JpdGVUb0RvYyhjbSwgZXZ0LnRhcmdldC50ZXh0Q29udGVudCwgZWxlbWVudC5saW5lLCBsYWJlbC5zdGFydCwgbGFiZWwuZW5kKVxuICAgIH1cbiAgLz5cbjwvRm9ybVJvdz5cblxuPCEtLS0tLS0gREVGSU5JVElPTiAtLS0tLS0+XG5cbjxkaXYgY2xhc3M9XCJkZWZpbml0aW9uXCI+XG4gIHsjaWYgbm9EZWZpbml0aW9uc0ZvdW5kfVxuICAgIDxkaXYgY2xhc3M9XCJlcnJvci1tZXNzYWdlXCI+Tm8gZGVmaW5pdGlvbnMgZm9yIDxzcGFuIGNsYXNzPVwiaWRcIj57bGFiZWwuc3RyaW5nfTwvc3Bhbj4gZm91bmQuPC9kaXY+XG4gIHs6ZWxzZSBpZiBtdWx0aXBsZURlZmluaXRpb25zRm91bmR9XG4gICAgPGRpdiBjbGFzcz1cImVycm9yLW1lc3NhZ2VcIj5NdWx0aXBsZSBkZWZpbml0aW9ucyBmb3IgPHNwYW4gY2xhc3M9XCJpZFwiPntsYWJlbC5zdHJpbmd9PC9zcGFuPiBmb3VuZC48L2Rpdj5cbiAgezplbHNlfVxuICAgIDxGb3JtUm93IG1hcmdpbj17JzAnfT4gICBcbiAgICAgIDxJbnB1dFRleHRcbiAgICAgICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgICAgICBtdWx0aUxpbmVNYXhIZWlnaHQ9JzEwMCdcbiAgICAgICAgZWRpdGFibGU9e2ZhbHNlfVxuICAgICAgICB3aWR0aD0nMTAwJScgXG4gICAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgICBiaW5kOnZhbHVlPXtkZWZpbml0aW9ufSBcbiAgICAgIC8+XG4gICAgPC9Gb3JtUm93PlxuICB7L2lmfVxuPC9kaXY+XG5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0Q3dCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMifQ== */";
	append_dev(document.head, style);
}

// (60:0) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>
function create_default_slot_1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[6].call(null, value);
	}

	let inputtext_props = { width: "100%", compact: true };

	if (/*label*/ ctx[4].string !== void 0) {
		inputtext_props.value = /*label*/ ctx[4].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*label*/ 16) {
				updating_value = true;
				inputtext_changes.value = /*label*/ ctx[4].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(60:0) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (78:2) {:else}
function create_else_block$2(ctx) {
	let formrow;
	let current;

	formrow = new FormRow({
			props: {
				margin: "0",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, definition*/ 544) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(78:2) {:else}",
		ctx
	});

	return block;
}

// (76:37) 
function create_if_block_1$1(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[4].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Multiple definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$9, 76, 56, 2104);
			attr_dev(div, "class", "error-message");
			add_location(div, file$9, 76, 4, 2052);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 16 && t1_value !== (t1_value = /*label*/ ctx[4].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(76:37) ",
		ctx
	});

	return block;
}

// (74:2) {#if noDefinitionsFound}
function create_if_block$3(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[4].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("No definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$9, 74, 50, 1958);
			attr_dev(div, "class", "error-message");
			add_location(div, file$9, 74, 4, 1912);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 16 && t1_value !== (t1_value = /*label*/ ctx[4].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(74:2) {#if noDefinitionsFound}",
		ctx
	});

	return block;
}

// (79:4) <FormRow margin={'0'}>
function create_default_slot$1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[8].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definition*/ ctx[5] !== void 0) {
		inputtext_props.value = /*definition*/ ctx[5];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definition*/ 32) {
				updating_value = true;
				inputtext_changes.value = /*definition*/ ctx[5];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(79:4) <FormRow margin={'0'}>",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let header;
	let h1;
	let t1;
	let separator;
	let t2;
	let formrow;
	let t3;
	let div;
	let current_block_type_index;
	let if_block;
	let current;

	separator = new Separator({
			props: { margin: "0 0 8px" },
			$$inline: true
		});

	formrow = new FormRow({
			props: {
				label: "ID:",
				leftColumn: "20px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$3, create_if_block_1$1, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*noDefinitionsFound*/ ctx[3]) return 0;
		if (/*multipleDefinitionsFound*/ ctx[2]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Reference Footnote";
			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			create_component(formrow.$$.fragment);
			t3 = space();
			div = element("div");
			if_block.c();
			add_location(h1, file$9, 54, 2, 1467);
			add_location(header, file$9, 53, 0, 1456);
			attr_dev(div, "class", "definition");
			add_location(div, file$9, 72, 0, 1856);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formrow, target, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formrow_changes = {};

			if (dirty & /*$$scope, label, cm, element*/ 531) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(formrow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(formrow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formrow, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ReferenceFootnote", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let multipleDefinitionsFound = false;
	let noDefinitionsFound = false;
	let label;
	let definition;
	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<ReferenceFootnote> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		label.string = value;
		(((($$invalidate(4, label), $$invalidate(1, element)), $$invalidate(0, cm)), $$invalidate(3, noDefinitionsFound)), $$invalidate(2, multipleDefinitionsFound));
	}

	const input_handler = evt => writeToDoc(cm, evt.target.textContent, element.line, label.start, label.end);

	function inputtext_value_binding_1(value) {
		definition = value;
		((((($$invalidate(5, definition), $$invalidate(1, element)), $$invalidate(0, cm)), $$invalidate(4, label)), $$invalidate(3, noDefinitionsFound)), $$invalidate(2, multipleDefinitionsFound));
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		InputText,
		Separator,
		writeToDoc,
		getReferenceDefinitions,
		FormRow,
		cm,
		element,
		multipleDefinitionsFound,
		noDefinitionsFound,
		label,
		definition
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("multipleDefinitionsFound" in $$props) $$invalidate(2, multipleDefinitionsFound = $$props.multipleDefinitionsFound);
		if ("noDefinitionsFound" in $$props) $$invalidate(3, noDefinitionsFound = $$props.noDefinitionsFound);
		if ("label" in $$props) $$invalidate(4, label = $$props.label);
		if ("definition" in $$props) $$invalidate(5, definition = $$props.definition);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, cm, label, noDefinitionsFound, multipleDefinitionsFound*/ 31) {
			 {
				$$invalidate(4, label = element.spans.find(f => f.type.includes("label")));

				// if (!label) {
				//   const index = isFull ? 
				//     element.markdown.indexOf('][') + 2 + element.start :
				//     element.start + 1
				//   label = { start: index, end: index, string: '' }
				// }
				if (element) {
					const definitions = getReferenceDefinitions(cm, label.string, "footnote");
					$$invalidate(3, noDefinitionsFound = definitions.length == 0);
					$$invalidate(2, multipleDefinitionsFound = definitions.length > 1);
					console.log(noDefinitionsFound, multipleDefinitionsFound);

					// If there's one match, select it
					// Else set definition null
					$$invalidate(5, definition = definitions.length == 1
					? $$invalidate(5, definition = definitions[0].spans.find(s => s.type.includes("content")).string)
					: "");
				}
			}
		}
	};

	return [
		cm,
		element,
		multipleDefinitionsFound,
		noDefinitionsFound,
		label,
		definition,
		inputtext_value_binding,
		input_handler,
		inputtext_value_binding_1
	];
}

class ReferenceFootnote extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$a();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ReferenceFootnote",
			options,
			id: create_fragment$a.name
		});
	}

	get cm() {
		throw new Error("<ReferenceFootnote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<ReferenceFootnote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<ReferenceFootnote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<ReferenceFootnote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/DisclosureButton.svelte generated by Svelte v3.30.1 */
const file$a = "src/js/renderer/component/ui/DisclosureButton.svelte";

function add_css$b() {
	var style = element("style");
	style.id = "svelte-1crujya-style";
	style.textContent = "@keyframes svelte-1crujya-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}button.svelte-1crujya{position:absolute;top:50%;transform:translate(0, -50%);position:absolute;left:calc(var(--left) * 1px);border:none;outline:none;background:none;opacity:var(--opacity)}.icon.svelte-1crujya{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;width:100%;height:100%;transform:rotateZ(calc(var(--rotation) * 1deg));-webkit-mask-image:var(--img-chevron-down-bold)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzY2xvc3VyZUJ1dHRvbi5zdmVsdGUiLCJzb3VyY2VzIjpbIkRpc2Nsb3N1cmVCdXR0b24uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNzcywgc2V0U2l6ZSB9IGZyb20gJy4uL3VpL2FjdGlvbnMnXG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSdcbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gIGV4cG9ydCBsZXQgd2lkdGggPSAnMzRweCdcbiAgZXhwb3J0IGxldCBoZWlnaHQgPSAnMjhweCdcbiAgZXhwb3J0IGxldCBtYXJnaW4gPSAnMCdcbiAgZXhwb3J0IGxldCBwYWRkaW5nID0gJzRweCdcbiAgZXhwb3J0IGxldCBsZWZ0ID0gNFxuICBleHBvcnQgbGV0IHJvdGF0aW9uID0gMFxuICBleHBvcnQgbGV0IG9wYWNpdHkgPSAxLjBcbiAgZXhwb3J0IGxldCBpY29uQ29sb3IgPSAnY29udHJvbFRleHRDb2xvcidcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPSd0ZXh0L3Njc3MnPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbmJ1dHRvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IGNhbGModmFyKC0tbGVmdCkgKiAxcHgpO1xuICBib3JkZXI6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIG9wYWNpdHk6IHZhcigtLW9wYWNpdHkpO1xufVxuXG4uaWNvbiB7XG4gIC13ZWJraXQtbWFzay1zaXplOiBjb250YWluO1xuICAtd2Via2l0LW1hc2stcG9zaXRpb246IGNlbnRlcjtcbiAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB0cmFuc2Zvcm06IHJvdGF0ZVooY2FsYyh2YXIoLS1yb3RhdGlvbikgKiAxZGVnKSk7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLWNoZXZyb24tZG93bi1ib2xkKTtcbn08L3N0eWxlPlxuXG48YnV0dG9uXG4gIGNsYXNzPSdkaXNjbG9zdXJlJ1xuICB0YWJpbmRleD0nLTEnXG4gIHVzZTpjc3M9e3sgbGVmdCwgcm90YXRpb24sIG9wYWNpdHkgfX1cbiAgdXNlOnNldFNpemU9e3t3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIHBhZGRpbmd9fVxuICBvbjptb3VzZWRvd258c3RvcFByb3BhZ2F0aW9uPXsoKSA9PiBkaXNwYXRjaCgndG9nZ2xlJyl9XG4+XG4gIDxkaXYgXG4gICAgY2xhc3M9J2ljb24nIFxuICAgIHN0eWxlPXtgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tJHtpY29uQ29sb3J9KTtgfVxuICAvPlxuPC9idXR0b24+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0J3QixXQUFXLDBCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsTUFBTSxlQUFDLENBQUMsQUFDTixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsR0FBRyxDQUNSLFNBQVMsQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUM3QixRQUFRLENBQUUsUUFBUSxDQUNsQixJQUFJLENBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDN0IsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE9BQU8sQ0FBRSxJQUFJLFNBQVMsQ0FBQyxBQUN6QixDQUFDLEFBRUQsS0FBSyxlQUFDLENBQUMsQUFDTCxpQkFBaUIsQ0FBRSxPQUFPLENBQzFCLHFCQUFxQixDQUFFLE1BQU0sQ0FDN0IsbUJBQW1CLENBQUUsU0FBUyxDQUM5QixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osU0FBUyxDQUFFLFFBQVEsS0FBSyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNoRCxrQkFBa0IsQ0FBRSxJQUFJLHVCQUF1QixDQUFDLEFBQ2xELENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$b(ctx) {
	let button;
	let div;
	let div_style_value;
	let css_action;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			attr_dev(div, "class", "icon svelte-1crujya");
			attr_dev(div, "style", div_style_value = `background-color: var(--${/*iconColor*/ ctx[7]});`);
			add_location(div, file$a, 53, 2, 1282);
			attr_dev(button, "class", "disclosure svelte-1crujya");
			attr_dev(button, "tabindex", "-1");
			add_location(button, file$a, 46, 0, 1086);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);

			if (!mounted) {
				dispose = [
					action_destroyer(css_action = css.call(null, button, {
						left: /*left*/ ctx[4],
						rotation: /*rotation*/ ctx[5],
						opacity: /*opacity*/ ctx[6]
					})),
					action_destroyer(setSize_action = setSize.call(null, button, {
						width: /*width*/ ctx[0],
						height: /*height*/ ctx[1],
						margin: /*margin*/ ctx[2],
						padding: /*padding*/ ctx[3]
					})),
					listen_dev(button, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[9]), false, false, true)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*iconColor*/ 128 && div_style_value !== (div_style_value = `background-color: var(--${/*iconColor*/ ctx[7]});`)) {
				attr_dev(div, "style", div_style_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*left, rotation, opacity*/ 112) css_action.update.call(null, {
				left: /*left*/ ctx[4],
				rotation: /*rotation*/ ctx[5],
				opacity: /*opacity*/ ctx[6]
			});

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, height, margin, padding*/ 15) setSize_action.update.call(null, {
				width: /*width*/ ctx[0],
				height: /*height*/ ctx[1],
				margin: /*margin*/ ctx[2],
				padding: /*padding*/ ctx[3]
			});
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("DisclosureButton", slots, []);
	const dispatch = createEventDispatcher();
	let { width = "34px" } = $$props;
	let { height = "28px" } = $$props;
	let { margin = "0" } = $$props;
	let { padding = "4px" } = $$props;
	let { left = 4 } = $$props;
	let { rotation = 0 } = $$props;
	let { opacity = 1 } = $$props;
	let { iconColor = "controlTextColor" } = $$props;

	const writable_props = [
		"width",
		"height",
		"margin",
		"padding",
		"left",
		"rotation",
		"opacity",
		"iconColor"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DisclosureButton> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = () => dispatch("toggle");

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("margin" in $$props) $$invalidate(2, margin = $$props.margin);
		if ("padding" in $$props) $$invalidate(3, padding = $$props.padding);
		if ("left" in $$props) $$invalidate(4, left = $$props.left);
		if ("rotation" in $$props) $$invalidate(5, rotation = $$props.rotation);
		if ("opacity" in $$props) $$invalidate(6, opacity = $$props.opacity);
		if ("iconColor" in $$props) $$invalidate(7, iconColor = $$props.iconColor);
	};

	$$self.$capture_state = () => ({
		css,
		setSize,
		createEventDispatcher,
		dispatch,
		width,
		height,
		margin,
		padding,
		left,
		rotation,
		opacity,
		iconColor
	});

	$$self.$inject_state = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("margin" in $$props) $$invalidate(2, margin = $$props.margin);
		if ("padding" in $$props) $$invalidate(3, padding = $$props.padding);
		if ("left" in $$props) $$invalidate(4, left = $$props.left);
		if ("rotation" in $$props) $$invalidate(5, rotation = $$props.rotation);
		if ("opacity" in $$props) $$invalidate(6, opacity = $$props.opacity);
		if ("iconColor" in $$props) $$invalidate(7, iconColor = $$props.iconColor);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		width,
		height,
		margin,
		padding,
		left,
		rotation,
		opacity,
		iconColor,
		dispatch,
		mousedown_handler
	];
}

class DisclosureButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1crujya-style")) add_css$b();

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			width: 0,
			height: 1,
			margin: 2,
			padding: 3,
			left: 4,
			rotation: 5,
			opacity: 6,
			iconColor: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DisclosureButton",
			options,
			id: create_fragment$b.name
		});
	}

	get width() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get left() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set left(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rotation() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rotation(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get opacity() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set opacity(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconColor() {
		throw new Error("<DisclosureButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconColor(value) {
		throw new Error("<DisclosureButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/Expandable.svelte generated by Svelte v3.30.1 */
const file$b = "src/js/renderer/component/ui/Expandable.svelte";

function add_css$c() {
	var style = element("style");
	style.id = "svelte-ake6lf-style";
	style.textContent = "@keyframes svelte-ake6lf-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.expandable.svelte-ake6lf.svelte-ake6lf{display:flex;flex-shrink:0;flex-direction:column;transition:max-height 250ms ease-out;overflow:hidden}.expandable.isOpen.svelte-ake6lf.svelte-ake6lf{max-height:calc(var(--maxExpandedHeight) * 1px)}.expandable.svelte-ake6lf.svelte-ake6lf:not(.isOpen){max-height:20px}header.svelte-ake6lf.svelte-ake6lf{padding:0;display:flex;position:relative;flex-direction:row;align-items:center;min-height:20px;user-select:none}header.svelte-ake6lf h1.svelte-ake6lf{font-family:system-ui;font-weight:bold;font-size:11px;line-height:13px;color:var(--labelColor);font-weight:bold;flex-grow:1;margin:0;padding:0;position:absolute;left:14px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwYW5kYWJsZS5zdmVsdGUiLCJzb3VyY2VzIjpbIkV4cGFuZGFibGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNzcywgc2V0U2l6ZSB9IGZyb20gJy4uL3VpL2FjdGlvbnMnXG4gIGltcG9ydCBEaXNjbG9zdXJlQnV0dG9uIGZyb20gJy4vRGlzY2xvc3VyZUJ1dHRvbi5zdmVsdGUnO1xuXG4gIGV4cG9ydCBsZXQgdGl0bGUgPSAnVGl0bGUnXG4gIGV4cG9ydCBsZXQgaXNPcGVuID0gdHJ1ZVxuICBleHBvcnQgbGV0IG1hcmdpbiA9ICcwJztcbiAgZXhwb3J0IGxldCBwYWRkaW5nID0gJzAnO1xuXG4gIC8vIEV4cGFuZGVkIG1vZGUgd2lsbCBhdXRvbWF0aWNhbGx5IGZpdCBoZWlnaHQgb2Ygc2xvdCBjb250ZW50XG4gIC8vIElmIHdlIHdhbnQgdG8gc2V0IGEgbWF4IGhlaWdodCBhbmQgY2xpcCAoZm9yIHdoYXRldmVyIHJlYXNvbilcbiAgLy8gd2UgY2FuIHNldCB0aGlzIHZhbHVlIGxvd2VyLlxuICBleHBvcnQgbGV0IG1heEV4cGFuZGVkSGVpZ2h0ID0gMTAwMFxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4uZXhwYW5kYWJsZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDI1MG1zIGVhc2Utb3V0O1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLmV4cGFuZGFibGUuaXNPcGVuIHtcbiAgbWF4LWhlaWdodDogY2FsYyh2YXIoLS1tYXhFeHBhbmRlZEhlaWdodCkgKiAxcHgpO1xufVxuLmV4cGFuZGFibGU6bm90KC5pc09wZW4pIHtcbiAgbWF4LWhlaWdodDogMjBweDtcbn1cblxuaGVhZGVyIHtcbiAgcGFkZGluZzogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiAyMHB4O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cbmhlYWRlciBoMSB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDExcHg7XG4gIGxpbmUtaGVpZ2h0OiAxM3B4O1xuICBjb2xvcjogdmFyKC0tbGFiZWxDb2xvcik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmbGV4LWdyb3c6IDE7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAxNHB4O1xufTwvc3R5bGU+XG5cbjxzdmVsdGU6b3B0aW9ucyBpbW11dGFibGU9e3RydWV9IC8+XG5cbjxkaXYgXG4gIGNsYXNzPVwiZXhwYW5kYWJsZVwiIFxuICBjbGFzczppc09wZW4gXG4gIHVzZTpjc3M9e3sgbWF4RXhwYW5kZWRIZWlnaHQgfX1cbj5cbiAgPGhlYWRlciB1c2U6c2V0U2l6ZT17e21hcmdpbn19PlxuICAgIDxEaXNjbG9zdXJlQnV0dG9uXG4gICAgICB3aWR0aD0nMTJweCdcbiAgICAgIGhlaWdodD0nMTJweCdcbiAgICAgIHBhZGRpbmc9JzIuNXB4J1xuICAgICAgbGVmdD17LTJ9XG4gICAgICBvcGFjaXR5PXswLjZ9XG4gICAgICByb3RhdGlvbj17aXNPcGVuID8gMCA6IC05MH1cbiAgICAgIG9uOnRvZ2dsZSAvPlxuICAgIDxoMT57dGl0bGV9PC9oMT5cbiAgPC9oZWFkZXI+XG4gIDxkaXYgY2xhc3M9XCJjb250ZW50XCIgdXNlOnNldFNpemU9e3twYWRkaW5nfX0+XG4gICAgPHNsb3QgLz5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQndCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLDRCQUFDLENBQUMsQUFDWCxPQUFPLENBQUUsSUFBSSxDQUNiLFdBQVcsQ0FBRSxDQUFDLENBQ2QsY0FBYyxDQUFFLE1BQU0sQ0FDdEIsVUFBVSxDQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUNyQyxRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFDLEFBQ0QsV0FBVyxPQUFPLDRCQUFDLENBQUMsQUFDbEIsVUFBVSxDQUFFLEtBQUssSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFDbEQsQ0FBQyxBQUNELHVDQUFXLEtBQUssT0FBTyxDQUFDLEFBQUMsQ0FBQyxBQUN4QixVQUFVLENBQUUsSUFBSSxBQUNsQixDQUFDLEFBRUQsTUFBTSw0QkFBQyxDQUFDLEFBQ04sT0FBTyxDQUFFLENBQUMsQ0FDVixPQUFPLENBQUUsSUFBSSxDQUNiLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGNBQWMsQ0FBRSxHQUFHLENBQ25CLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLFdBQVcsQ0FBRSxJQUFJLEFBQ25CLENBQUMsQUFDRCxvQkFBTSxDQUFDLEVBQUUsY0FBQyxDQUFDLEFBQ1QsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLElBQUksQ0FDakIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixLQUFLLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDeEIsV0FBVyxDQUFFLElBQUksQ0FDakIsU0FBUyxDQUFFLENBQUMsQ0FDWixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLENBQ1YsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsSUFBSSxDQUFFLElBQUksQUFDWixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$c(ctx) {
	let div1;
	let header;
	let disclosurebutton;
	let t0;
	let h1;
	let t1;
	let setSize_action;
	let t2;
	let div0;
	let setSize_action_1;
	let css_action;
	let current;
	let mounted;
	let dispose;

	disclosurebutton = new DisclosureButton({
			props: {
				width: "12px",
				height: "12px",
				padding: "2.5px",
				left: -2,
				opacity: 0.6,
				rotation: /*isOpen*/ ctx[1] ? 0 : -90
			},
			$$inline: true
		});

	disclosurebutton.$on("toggle", /*toggle_handler*/ ctx[7]);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			div1 = element("div");
			header = element("header");
			create_component(disclosurebutton.$$.fragment);
			t0 = space();
			h1 = element("h1");
			t1 = text(/*title*/ ctx[0]);
			t2 = space();
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(h1, "class", "svelte-ake6lf");
			add_location(h1, file$b, 77, 4, 1653);
			attr_dev(header, "class", "svelte-ake6lf");
			add_location(header, file$b, 68, 2, 1445);
			attr_dev(div0, "class", "content");
			add_location(div0, file$b, 79, 2, 1684);
			attr_dev(div1, "class", "expandable svelte-ake6lf");
			toggle_class(div1, "isOpen", /*isOpen*/ ctx[1]);
			add_location(div1, file$b, 63, 0, 1363);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, header);
			mount_component(disclosurebutton, header, null);
			append_dev(header, t0);
			append_dev(header, h1);
			append_dev(h1, t1);
			append_dev(div1, t2);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, header, { margin: /*margin*/ ctx[2] })),
					action_destroyer(setSize_action_1 = setSize.call(null, div0, { padding: /*padding*/ ctx[3] })),
					action_destroyer(css_action = css.call(null, div1, {
						maxExpandedHeight: /*maxExpandedHeight*/ ctx[4]
					}))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const disclosurebutton_changes = {};
			if (dirty & /*isOpen*/ 2) disclosurebutton_changes.rotation = /*isOpen*/ ctx[1] ? 0 : -90;
			disclosurebutton.$set(disclosurebutton_changes);
			if (!current || dirty & /*title*/ 1) set_data_dev(t1, /*title*/ ctx[0]);
			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 4) setSize_action.update.call(null, { margin: /*margin*/ ctx[2] });

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (setSize_action_1 && is_function(setSize_action_1.update) && dirty & /*padding*/ 8) setSize_action_1.update.call(null, { padding: /*padding*/ ctx[3] });

			if (css_action && is_function(css_action.update) && dirty & /*maxExpandedHeight*/ 16) css_action.update.call(null, {
				maxExpandedHeight: /*maxExpandedHeight*/ ctx[4]
			});

			if (dirty & /*isOpen*/ 2) {
				toggle_class(div1, "isOpen", /*isOpen*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(disclosurebutton.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(disclosurebutton.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(disclosurebutton);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Expandable", slots, ['default']);
	let { title = "Title" } = $$props;
	let { isOpen = true } = $$props;
	let { margin = "0" } = $$props;
	let { padding = "0" } = $$props;
	let { maxExpandedHeight = 1000 } = $$props;
	const writable_props = ["title", "isOpen", "margin", "padding", "maxExpandedHeight"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Expandable> was created with unknown prop '${key}'`);
	});

	function toggle_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(1, isOpen = $$props.isOpen);
		if ("margin" in $$props) $$invalidate(2, margin = $$props.margin);
		if ("padding" in $$props) $$invalidate(3, padding = $$props.padding);
		if ("maxExpandedHeight" in $$props) $$invalidate(4, maxExpandedHeight = $$props.maxExpandedHeight);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		css,
		setSize,
		DisclosureButton,
		title,
		isOpen,
		margin,
		padding,
		maxExpandedHeight
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("isOpen" in $$props) $$invalidate(1, isOpen = $$props.isOpen);
		if ("margin" in $$props) $$invalidate(2, margin = $$props.margin);
		if ("padding" in $$props) $$invalidate(3, padding = $$props.padding);
		if ("maxExpandedHeight" in $$props) $$invalidate(4, maxExpandedHeight = $$props.maxExpandedHeight);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		title,
		isOpen,
		margin,
		padding,
		maxExpandedHeight,
		$$scope,
		slots,
		toggle_handler
	];
}

class Expandable extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-ake6lf-style")) add_css$c();

		init(this, options, instance$c, create_fragment$c, not_equal, {
			title: 0,
			isOpen: 1,
			margin: 2,
			padding: 3,
			maxExpandedHeight: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Expandable",
			options,
			id: create_fragment$c.name
		});
	}

	get title() {
		throw new Error("<Expandable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Expandable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isOpen() {
		throw new Error("<Expandable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isOpen(value) {
		throw new Error("<Expandable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<Expandable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Expandable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Expandable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Expandable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get maxExpandedHeight() {
		throw new Error("<Expandable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set maxExpandedHeight(value) {
		throw new Error("<Expandable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/Link.svelte generated by Svelte v3.30.1 */
const file$c = "src/js/renderer/component/main/wizard/Link.svelte";

function add_css$d() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluay5zdmVsdGUiLCJzb3VyY2VzIjpbIkxpbmsuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCBFeHBhbmRhYmxlIGZyb20gJy4uLy4uL3VpL0V4cGFuZGFibGUuc3ZlbHRlJztcbiAgaW1wb3J0IElucHV0VGV4dCBmcm9tICcuLi8uLi91aS9JbnB1dFRleHQuc3ZlbHRlJztcbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi8uLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IHsgd3JpdGVUb0RvYyB9IGZyb20gJy4uLy4uLy4uL2VkaXRvci9lZGl0b3ItdXRpbHMnO1xuICBpbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4uLy4uLy4uL1N0YXRlTWFuYWdlcic7XG4gIGltcG9ydCBGb3JtUm93IGZyb20gJy4uLy4uL3VpL0Zvcm1Sb3cuc3ZlbHRlJztcbiAgaW1wb3J0IHsgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJztcbiAgXG4gIGV4cG9ydCBsZXQgY20gPSBudWxsXG4gIGV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGxcblxuICBsZXQgdGV4dFxuICBsZXQgdXJsXG4gIGxldCB0aXRsZVxuICBsZXQgY2xlYXJVcmxBbmRUaXRsZU9uRGVzdHJveSA9IGZhbHNlXG5cbiAgJDoge1xuICAgIHRleHQgPSBlbGVtZW50LnNwYW5zLmZpbmQoKGYpID0+IGYudHlwZS5pbmNsdWRlcygndGV4dCcpKVxuICAgIHVybCA9IGVsZW1lbnQuc3BhbnMuZmluZCgoZikgPT4gZi50eXBlLmluY2x1ZGVzKCd1cmwnKSlcbiAgICB0aXRsZSA9IGVsZW1lbnQuc3BhbnMuZmluZCgoZikgPT4gZi50eXBlLmluY2x1ZGVzKCd0aXRsZScpKVxuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudC5tYXJrZG93bi5pbmRleE9mKCddKCcpICsgMiArIGVsZW1lbnQuc3RhcnRcbiAgICAgIHVybCA9IHsgc3RhcnQ6IGluZGV4LCBlbmQ6IGluZGV4LCBzdHJpbmc6ICcnIH1cbiAgICB9XG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGVsZW1lbnQubWFya2Rvd24ubGFzdEluZGV4T2YoJyknKSArIGVsZW1lbnQuc3RhcnRcbiAgICAgIHRpdGxlID0geyBzdGFydDogaW5kZXgsIGVuZDogaW5kZXgsIHN0cmluZzogJycgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgZWRnZSBjYXNlIHdoZXJlIHVzZXIgZGVsZXRlcyBVUkwgYW5kIGxlYXZlcyBUaXRsZS5cbiAgICogV2UgZG9uJ3Qgd3JpdGUgdGhlIGNoYW5nZSB1bnRpbCB0aGV5IGRlc3Ryb3kgdGhlIGVsZW1lbnQuXG4gICAqIFRoaXMgYXZvaWRzIHVuZXhwZWN0ZWQgc2lkZSBlZmZlY3RzIHdoaWxlIGVkaXRpbmcuXG4gICAqIEUuZy4gQnJlYWtpbmcgdGhlIGxpbmsgYnkgaGF2aW5nIHRpdGxlIGJ1dCBubyBVUkxcbiAgKi9cbiAgb25EZXN0cm95KCgpID0+IHtcbiAgICBpZiAoY2xlYXJVcmxBbmRUaXRsZU9uRGVzdHJveSkge1xuICAgICAgY29uc3QgbmV3TGluayA9IGBbJHt0ZXh0LnN0cmluZ31dKClgXG4gICAgICB3cml0ZVRvRG9jKGNtLCBuZXdMaW5rLCBlbGVtZW50LmxpbmUsIGVsZW1lbnQuc3RhcnQsIGVsZW1lbnQuZW5kKVxuICAgIH1cbiAgfSlcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufTwvc3R5bGU+XG5cbjxoZWFkZXI+XG4gIDxoMT5MaW5rPC9oMT5cbjwvaGVhZGVyPlxuXG48U2VwYXJhdG9yIG1hcmdpbj17JzAgMCA4cHgnfSAvPlxuXG48Rm9ybVJvdyBsYWJlbD17J1RleHQ6J30gbGVmdENvbHVtbj17JzMwcHgnfSBtYXJnaW49eyc4cHgnfSBtdWx0aUxpbmU9e3RydWV9IGxhYmVsVG9wT2Zmc2V0PXsnNHB4J30gY29tcGFjdD17dHJ1ZX0+XG4gIDxJbnB1dFRleHQgXG4gICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgIG11bHRpTGluZU1heEhlaWdodD0nMTAwJ1xuICAgIHBsYWNlaG9sZGVyPScnIFxuICAgIHdpZHRoPScxMDAlJ1xuICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgIGJpbmQ6dmFsdWU9e3RleHQuc3RyaW5nfSBcbiAgICBvbjppbnB1dD17KGV2dCkgPT4gXG4gICAgICB3cml0ZVRvRG9jKGNtLCBldnQudGFyZ2V0LnRleHRDb250ZW50LCBlbGVtZW50LmxpbmUsIHRleHQuc3RhcnQsIHRleHQuZW5kKVxuICAgIH1cbiAgLz5cbjwvRm9ybVJvdz5cblxuPEZvcm1Sb3cgbGFiZWw9eydVUkw6J30gbGVmdENvbHVtbj17JzMwcHgnfSBtYXJnaW49eyc4cHgnfSBtdWx0aUxpbmU9e3RydWV9IGxhYmVsVG9wT2Zmc2V0PXsnNHB4J30gY29tcGFjdD17dHJ1ZX0+ICAgXG4gIDxJbnB1dFRleHQgXG4gICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgIG11bHRpTGluZU1heEhlaWdodD0nMTAwJ1xuICAgIHBsYWNlaG9sZGVyPScnIFxuICAgIHdpZHRoPScxMDAlJyBcbiAgICBjb21wYWN0PXt0cnVlfSBcbiAgICBpc0Vycm9yPXt1cmwuc3RyaW5nID09ICcnfVxuICAgIGJpbmQ6dmFsdWU9e3VybC5zdHJpbmd9IFxuICAgIG9uOmlucHV0PXsoZXZ0KSA9PiB7XG4gICAgICAvLyBEb24ndCBpbW1lZGlhdGVseSB3cml0ZSBjaGFuZ2VzIGlmIHVzZXIgbWFrZXMgVVJMIGJsYW5rLFxuICAgICAgLy8gYW5kIHRpdGxlIGlzIG5vdCBibGFuaywgb3IgZWxzZSB0aGUgZWxlbWVudCB3aWxsIGJyZWFrLlxuICAgICAgLy8gRS5nLiBbdGV4dF0oIFwidGl0bGVcIilcbiAgICAgIGNvbnN0IHVybElzQmxhbmsgPSBldnQudGFyZ2V0LnRleHRDb250ZW50ID09IFwiXCJcbiAgICAgIGNvbnN0IHRpdGxlSXNOb3RCbGFuayA9IHRpdGxlLnN0cmluZyAhPT0gXCJcIlxuICAgICAgaWYgKHVybElzQmxhbmsgJiYgdGl0bGVJc05vdEJsYW5rKSB7XG4gICAgICAgIGNsZWFyVXJsQW5kVGl0bGVPbkRlc3Ryb3kgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGVhclVybEFuZFRpdGxlT25EZXN0cm95ID0gZmFsc2VcbiAgICAgICAgd3JpdGVUb0RvYyhjbSwgZXZ0LnRhcmdldC50ZXh0Q29udGVudCwgZWxlbWVudC5saW5lLCB1cmwuc3RhcnQsIHVybC5lbmQpXG4gICAgICB9XG4gICAgfX1cbiAgLz5cbjwvRm9ybVJvdz5cblxuPFNlcGFyYXRvciBtYXJnaW49eyc4cHggOHB4IDAnfSAvPlxuXG48RXhwYW5kYWJsZSBcbiAgdGl0bGU9eydPcHRpb25hbDonfSBcbiAgbWFyZ2luPXsnMCA4cHgnfSBcbiAgaXNPcGVuPXskc3RhdGUud2l6YXJkLnNob3dPcHRpb25hbExpbmtGaWVsZHN9IFxuICBvbjp0b2dnbGU9eygpID0+IFxuICAgIHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7IFxuICAgICAgdHlwZTogJ1RPR0dMRV9XSVpBUkRfT1BUSU9OQUxfTElOS19GSUVMRFMnLCBcbiAgICAgIHZhbHVlOiAhJHN0YXRlLndpemFyZC5zaG93T3B0aW9uYWxMaW5rRmllbGRzIFxuICAgIH0pXG4gIH1cbj5cbiAgeyNpZiAkc3RhdGUud2l6YXJkLnNob3dPcHRpb25hbExpbmtGaWVsZHN9XG4gIFxuICAgIDxGb3JtUm93IGxhYmVsPXsnVGl0bGU6J30gbGVmdENvbHVtbj17JzMwcHgnfSBtYXJnaW49eyc0cHggOHB4IDhweCd9IGNvbXBhY3Q9e3RydWV9PlxuICAgICAgPElucHV0VGV4dCBcbiAgICAgICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgICAgICBtdWx0aUxpbmVNYXhIZWlnaHQ9JzEwMCdcbiAgICAgICAgd2lkdGg9JzEwMCUnIFxuICAgICAgICBjb21wYWN0PXt0cnVlfSBcbiAgICAgICAgaXNEaXNhYmxlZD17dXJsLnN0cmluZyA9PSAnJ31cbiAgICAgICAgYmluZDp2YWx1ZT17dGl0bGUuc3RyaW5nfSBcbiAgICAgICAgb246aW5wdXQ9eyhldnQpID0+IHtcblxuICAgICAgICAgIGNvbnN0IHdhc0JsYW5rID0gdGl0bGUuc3RhcnQgPT0gdGl0bGUuZW5kXG4gICAgICAgICAgY29uc3QgaXNOb3dCbGFuayA9IHRpdGxlLnN0cmluZy5sZW5ndGggPT0gMFxuXG4gICAgICAgICAgaWYgKHdhc0JsYW5rKSB7XG4gICAgICAgICAgICAvLyBUbyBiZSBhIHZhbGlkIENvbW1vbm1hcmsgbGluayB0aXRsZSwgd2UgbmVlZCB0byBpbnNlcnQgd2hpdGVzcGFjZSBiZWZvcmUgdGhlIHZhbHVlLCBhbmQgd3JhcCBpdCBpbiBxdW90YXRpb24gbWFya3MuXG4gICAgICAgICAgICB3cml0ZVRvRG9jKGNtLCBgIFwiJHtldnQudGFyZ2V0LnRleHRDb250ZW50fVwiYCwgZWxlbWVudC5saW5lLCB0aXRsZS5zdGFydCwgdGl0bGUuZW5kKVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNOb3dCbGFuaykge1xuICAgICAgICAgICAgLy8gSWYgd2UndmUgY2xlYXJlZCB0aGUgdGl0bGUgZm9yIHdoYXRldmVyIHJlYXNvbiwgd2UgbmVlZCB0byBhbHNvIGRlbGV0ZSB0aGUgc3Vycm91bmRpbmcgcXVvdGF0aW9uIG1hcmtzIGFuZCB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgd3JpdGVUb0RvYyhjbSwgZXZ0LnRhcmdldC50ZXh0Q29udGVudCwgZWxlbWVudC5saW5lLCB0aXRsZS5zdGFydCAtIDIsIHRpdGxlLmVuZCArIDEpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBhYm92ZSBhcmUgbm90IHRydWUsIGRvIHRoZSB1c3VhbC4uLlxuICAgICAgICAgICAgd3JpdGVUb0RvYyhjbSwgZXZ0LnRhcmdldC50ZXh0Q29udGVudCwgZWxlbWVudC5saW5lLCB0aXRsZS5zdGFydCwgdGl0bGUuZW5kKVxuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9Gb3JtUm93PlxuICB7L2lmfVxuPC9FeHBhbmRhYmxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdEd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (64:0) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot_3(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[7].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		placeholder: "",
		width: "100%",
		compact: true
	};

	if (/*text*/ ctx[4].string !== void 0) {
		inputtext_props.value = /*text*/ ctx[4].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*text*/ 16) {
				updating_value = true;
				inputtext_changes.value = /*text*/ ctx[4].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(64:0) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

// (78:0) <FormRow label={'URL:'} leftColumn={'30px'} margin={'8px'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot_2(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[9].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		placeholder: "",
		width: "100%",
		compact: true,
		isError: /*url*/ ctx[2].string == ""
	};

	if (/*url*/ ctx[2].string !== void 0) {
		inputtext_props.value = /*url*/ ctx[2].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));
	inputtext.$on("input", /*input_handler_1*/ ctx[10]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};
			if (dirty & /*url*/ 4) inputtext_changes.isError = /*url*/ ctx[2].string == "";

			if (!updating_value && dirty & /*url*/ 4) {
				updating_value = true;
				inputtext_changes.value = /*url*/ ctx[2].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(78:0) <FormRow label={'URL:'} leftColumn={'30px'} margin={'8px'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

// (116:2) {#if $state.wizard.showOptionalLinkFields}
function create_if_block$4(ctx) {
	let formrow;
	let current;

	formrow = new FormRow({
			props: {
				label: "Title:",
				leftColumn: "30px",
				margin: "4px 8px 8px",
				compact: true,
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, url, title, cm, element*/ 16399) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(116:2) {#if $state.wizard.showOptionalLinkFields}",
		ctx
	});

	return block;
}

// (118:4) <FormRow label={'Title:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>
function create_default_slot_1$1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_2(value) {
		/*inputtext_value_binding_2*/ ctx[11].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		width: "100%",
		compact: true,
		isDisabled: /*url*/ ctx[2].string == ""
	};

	if (/*title*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*title*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_2));
	inputtext.$on("input", /*input_handler_2*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};
			if (dirty & /*url*/ 4) inputtext_changes.isDisabled = /*url*/ ctx[2].string == "";

			if (!updating_value && dirty & /*title*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*title*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(118:4) <FormRow label={'Title:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>",
		ctx
	});

	return block;
}

// (105:0) <Expandable    title={'Optional:'}    margin={'0 8px'}    isOpen={$state.wizard.showOptionalLinkFields}    on:toggle={() =>      window.api.send('dispatch', {        type: 'TOGGLE_WIZARD_OPTIONAL_LINK_FIELDS',        value: !$state.wizard.showOptionalLinkFields      })   } >
function create_default_slot$2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$state*/ ctx[6].wizard.showOptionalLinkFields && create_if_block$4(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*$state*/ ctx[6].wizard.showOptionalLinkFields) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$state*/ 64) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(105:0) <Expandable    title={'Optional:'}    margin={'0 8px'}    isOpen={$state.wizard.showOptionalLinkFields}    on:toggle={() =>      window.api.send('dispatch', {        type: 'TOGGLE_WIZARD_OPTIONAL_LINK_FIELDS',        value: !$state.wizard.showOptionalLinkFields      })   } >",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let header;
	let h1;
	let t1;
	let separator0;
	let t2;
	let formrow0;
	let t3;
	let formrow1;
	let t4;
	let separator1;
	let t5;
	let expandable;
	let current;

	separator0 = new Separator({
			props: { margin: "0 0 8px" },
			$$inline: true
		});

	formrow0 = new FormRow({
			props: {
				label: "Text:",
				leftColumn: "30px",
				margin: "8px",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "URL:",
				leftColumn: "30px",
				margin: "8px",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator1 = new Separator({
			props: { margin: "8px 8px 0" },
			$$inline: true
		});

	expandable = new Expandable({
			props: {
				title: "Optional:",
				margin: "0 8px",
				isOpen: /*$state*/ ctx[6].wizard.showOptionalLinkFields,
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	expandable.$on("toggle", /*toggle_handler*/ ctx[13]);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Link";
			t1 = space();
			create_component(separator0.$$.fragment);
			t2 = space();
			create_component(formrow0.$$.fragment);
			t3 = space();
			create_component(formrow1.$$.fragment);
			t4 = space();
			create_component(separator1.$$.fragment);
			t5 = space();
			create_component(expandable.$$.fragment);
			add_location(h1, file$c, 58, 2, 1683);
			add_location(header, file$c, 57, 0, 1672);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator0, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(formrow0, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(formrow1, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(separator1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(expandable, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formrow0_changes = {};

			if (dirty & /*$$scope, text, cm, element*/ 16403) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope, url, title, clearUrlAndTitleOnDestroy, cm, element*/ 16431) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
			const expandable_changes = {};
			if (dirty & /*$state*/ 64) expandable_changes.isOpen = /*$state*/ ctx[6].wizard.showOptionalLinkFields;

			if (dirty & /*$$scope, url, title, cm, element, $state*/ 16463) {
				expandable_changes.$$scope = { dirty, ctx };
			}

			expandable.$set(expandable_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator0.$$.fragment, local);
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			transition_in(separator1.$$.fragment, local);
			transition_in(expandable.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator0.$$.fragment, local);
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			transition_out(separator1.$$.fragment, local);
			transition_out(expandable.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator0, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(formrow1, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(separator1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(expandable, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let $state;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(6, $state = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Link", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let text;
	let url;
	let title;
	let clearUrlAndTitleOnDestroy = false;

	/**
 * Handle edge case where user deletes URL and leaves Title.
 * We don't write the change until they destroy the element.
 * This avoids unexpected side effects while editing.
 * E.g. Breaking the link by having title but no URL
*/
	onDestroy(() => {
		if (clearUrlAndTitleOnDestroy) {
			const newLink = `[${text.string}]()`;
			writeToDoc(cm, newLink, element.line, element.start, element.end);
		}
	});

	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Link> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		text.string = value;
		((($$invalidate(4, text), $$invalidate(1, element)), $$invalidate(2, url)), $$invalidate(3, title));
	}

	const input_handler = evt => writeToDoc(cm, evt.target.textContent, element.line, text.start, text.end);

	function inputtext_value_binding_1(value) {
		url.string = value;
		(($$invalidate(2, url), $$invalidate(1, element)), $$invalidate(3, title));
	}

	const input_handler_1 = evt => {
		// Don't immediately write changes if user makes URL blank,
		// and title is not blank, or else the element will break.
		// E.g. [text]( "title")
		const urlIsBlank = evt.target.textContent == "";

		const titleIsNotBlank = title.string !== "";

		if (urlIsBlank && titleIsNotBlank) {
			$$invalidate(5, clearUrlAndTitleOnDestroy = true);
		} else {
			$$invalidate(5, clearUrlAndTitleOnDestroy = false);
			writeToDoc(cm, evt.target.textContent, element.line, url.start, url.end);
		}
	};

	function inputtext_value_binding_2(value) {
		title.string = value;
		(($$invalidate(3, title), $$invalidate(1, element)), $$invalidate(2, url));
	}

	const input_handler_2 = evt => {
		const wasBlank = title.start == title.end;
		const isNowBlank = title.string.length == 0;

		if (wasBlank) {
			// To be a valid Commonmark link title, we need to insert whitespace before the value, and wrap it in quotation marks.
			writeToDoc(cm, ` "${evt.target.textContent}"`, element.line, title.start, title.end);
		} else if (isNowBlank) {
			// If we've cleared the title for whatever reason, we need to also delete the surrounding quotation marks and whitespace.
			writeToDoc(cm, evt.target.textContent, element.line, title.start - 2, title.end + 1);
		} else {
			// If the above are not true, do the usual...
			writeToDoc(cm, evt.target.textContent, element.line, title.start, title.end);
		}
	};

	const toggle_handler = () => window.api.send("dispatch", {
		type: "TOGGLE_WIZARD_OPTIONAL_LINK_FIELDS",
		value: !$state.wizard.showOptionalLinkFields
	});

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		Expandable,
		InputText,
		Separator,
		writeToDoc,
		state,
		FormRow,
		onDestroy,
		cm,
		element,
		text,
		url,
		title,
		clearUrlAndTitleOnDestroy,
		$state
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("url" in $$props) $$invalidate(2, url = $$props.url);
		if ("title" in $$props) $$invalidate(3, title = $$props.title);
		if ("clearUrlAndTitleOnDestroy" in $$props) $$invalidate(5, clearUrlAndTitleOnDestroy = $$props.clearUrlAndTitleOnDestroy);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, url, title*/ 14) {
			 {
				$$invalidate(4, text = element.spans.find(f => f.type.includes("text")));
				$$invalidate(2, url = element.spans.find(f => f.type.includes("url")));
				$$invalidate(3, title = element.spans.find(f => f.type.includes("title")));

				if (!url) {
					const index = element.markdown.indexOf("](") + 2 + element.start;
					$$invalidate(2, url = { start: index, end: index, string: "" });
				}

				if (!title) {
					const index = element.markdown.lastIndexOf(")") + element.start;
					$$invalidate(3, title = { start: index, end: index, string: "" });
				}
			}
		}
	};

	return [
		cm,
		element,
		url,
		title,
		text,
		clearUrlAndTitleOnDestroy,
		$state,
		inputtext_value_binding,
		input_handler,
		inputtext_value_binding_1,
		input_handler_1,
		inputtext_value_binding_2,
		input_handler_2,
		toggle_handler
	];
}

class Link extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$d();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Link",
			options,
			id: create_fragment$d.name
		});
	}

	get cm() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/ReferenceLink.svelte generated by Svelte v3.30.1 */
const file$d = "src/js/renderer/component/main/wizard/ReferenceLink.svelte";

function add_css$e() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlTGluay5zdmVsdGUiLCJzb3VyY2VzIjpbIlJlZmVyZW5jZUxpbmsuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCBJbnB1dFRleHQgZnJvbSAnLi4vLi4vdWkvSW5wdXRUZXh0LnN2ZWx0ZSc7XG4gIGltcG9ydCBTZXBhcmF0b3IgZnJvbSAnLi4vLi4vdWkvU2VwYXJhdG9yLnN2ZWx0ZSc7XG4gIGltcG9ydCB7IHdyaXRlVG9Eb2MsIGdldFJlZmVyZW5jZURlZmluaXRpb25zIH0gZnJvbSAnLi4vLi4vLi4vZWRpdG9yL2VkaXRvci11dGlscyc7XG4gIGltcG9ydCBGb3JtUm93IGZyb20gJy4uLy4uL3VpL0Zvcm1Sb3cuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IGNtID0gbnVsbFxuICBleHBvcnQgbGV0IGVsZW1lbnQgPSBudWxsXG5cbiAgbGV0IGlzRnVsbCA9IGZhbHNlXG4gIGxldCBpc0NvbGxhcHNlZCA9IGZhbHNlXG4gIGxldCBtdWx0aXBsZURlZmluaXRpb25zRm91bmQgPSBmYWxzZVxuICBsZXQgbm9EZWZpbml0aW9uc0ZvdW5kID0gZmFsc2VcblxuICBsZXQgbGFiZWwgIFxuICBsZXQgdGV4dFxuICBsZXQgZGVmaW5pdGlvblVybFxuICBsZXQgZGVmaW5pdGlvblRpdGxlXG4gIFxuICAkOiB7IFxuXG4gICAgaXNGdWxsID0gZWxlbWVudC50eXBlLmluY2x1ZGVzKCdmdWxsJylcbiAgICBpc0NvbGxhcHNlZCA9IGVsZW1lbnQudHlwZS5pbmNsdWRlcygnY29sbGFwc2VkJylcblxuICAgIC8vIEdldCBgbGFiZWxgXG4gICAgLy8gRnVsbCByZWZlcmVuY2UgbGlua3M6IGBbdGV4dF1bbGFiZWxdYFxuICAgIC8vIENvbGxhcHNlZCByZWZlcmVuY2UgbGlua3M6IGBbbGFiZWxdW11gXG4gICAgXG4gICAgbGFiZWwgPSBlbGVtZW50LnNwYW5zLmZpbmQoKGYpID0+IGYudHlwZS5pbmNsdWRlcygnbGFiZWwnKSlcbiAgICBcbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGlzRnVsbCA/IFxuICAgICAgICBlbGVtZW50Lm1hcmtkb3duLmluZGV4T2YoJ11bJykgKyAyICsgZWxlbWVudC5zdGFydCA6XG4gICAgICAgIGVsZW1lbnQuc3RhcnQgKyAxXG4gICAgICBsYWJlbCA9IHsgc3RhcnQ6IGluZGV4LCBlbmQ6IGluZGV4LCBzdHJpbmc6ICcnIH1cbiAgICB9XG5cbiAgICAvLyBHZXQgYHRleHRgLCBpZiBlbGVtZW50IGlzIGEgZnVsbCByZWZlcmVuY2UgbGluay5cbiAgICAvLyBFLmcuIGBbdGV4dF1bbGFiZWxdYFxuICAgIGlmIChpc0Z1bGwpIHtcbiAgICAgIHRleHQgPSBlbGVtZW50LnNwYW5zLmZpbmQoKGYpID0+IGYudHlwZS5pbmNsdWRlcygndGV4dCcpKVxuICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHRleHQgPSB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0ICsgMSwgZW5kOiBlbGVtZW50LnN0YXJ0ICsgMSwgc3RyaW5nOiAnJyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxhYmVsLnN0cmluZyAhPT0gJycpIHtcbiAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gZ2V0UmVmZXJlbmNlRGVmaW5pdGlvbnMoY20sIGxhYmVsLnN0cmluZywgJ2xpbmsnKVxuICAgICAgXG4gICAgICBub0RlZmluaXRpb25zRm91bmQgPSBkZWZpbml0aW9ucy5sZW5ndGggPT0gMFxuICAgICAgbXVsdGlwbGVEZWZpbml0aW9uc0ZvdW5kID0gZGVmaW5pdGlvbnMubGVuZ3RoID4gMVxuXG4gICAgICAvLyBJZiB0aGVyZSdzIG9uZSBtYXRjaCwgc2VsZWN0IGl0XG4gICAgICAvLyBFbHNlIHNldCBkZWZpbml0aW9uIG51bGxcbiAgICAgIGlmIChkZWZpbml0aW9ucy5sZW5ndGggPT0gMSkge1xuICAgICAgICBkZWZpbml0aW9uVXJsID0gZGVmaW5pdGlvbnNbMF0uc3BhbnMuZmluZCgocykgPT4gcy50eXBlLmluY2x1ZGVzKCd1cmwnKSk/LnN0cmluZ1xuICAgICAgICBkZWZpbml0aW9uVGl0bGUgPSBkZWZpbml0aW9uc1swXS5zcGFucy5maW5kKChzKSA9PiBzLnR5cGUuaW5jbHVkZXMoJ3RpdGxlJykpPy5zdHJpbmdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluaXRpb25VcmwgPSB1bmRlZmluZWRcbiAgICAgICAgZGVmaW5pdGlvblRpdGxlID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn08L3N0eWxlPlxuXG48aGVhZGVyPlxuICA8aDE+UmVmZXJlbmNlIExpbms8L2gxPlxuPC9oZWFkZXI+XG5cbjxTZXBhcmF0b3IgbWFyZ2luPXsnMCAwIDhweCd9IC8+XG5cbnsjaWYgaXNGdWxsIH1cbiAgXG4gIDwhLS0tLS0tIEZVTEwgLS0tLS0tPlxuXG4gIDxGb3JtUm93IGxhYmVsPXsnVGV4dDonfSBsZWZ0Q29sdW1uPXsnMzBweCd9IG1hcmdpbj17JzhweCd9IGNvbXBhY3Q9e3RydWV9PlxuICAgIDxJbnB1dFRleHQgXG4gICAgICBtdWx0aUxpbmU9e3RydWV9XG4gICAgICBtdWx0aUxpbmVNYXhIZWlnaHQ9JzIwMCdcbiAgICAgIHdpZHRoPScxMDAlJyBcbiAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgYmluZDp2YWx1ZT17dGV4dC5zdHJpbmd9IFxuICAgICAgb246aW5wdXQ9eyhldnQpID0+IFxuICAgICAgICB3cml0ZVRvRG9jKGNtLCBldnQudGFyZ2V0LnRleHRDb250ZW50LCBlbGVtZW50LmxpbmUsIHRleHQuc3RhcnQsIHRleHQuZW5kKVxuICAgICAgfVxuICAgIC8+XG4gIDwvRm9ybVJvdz5cblxuICA8Rm9ybVJvdyBsYWJlbD17J0lEOid9IGxlZnRDb2x1bW49eyczMHB4J30gbWFyZ2luPXsnOHB4J30gY29tcGFjdD17dHJ1ZX0+XG4gICAgPElucHV0VGV4dCBcbiAgICAgIHdpZHRoPScxMDAlJyBcbiAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgYmluZDp2YWx1ZT17bGFiZWwuc3RyaW5nfSBcbiAgICAgIG9uOmlucHV0PXsoZXZ0KSA9PiBcbiAgICAgICAgd3JpdGVUb0RvYyhjbSwgZXZ0LnRhcmdldC50ZXh0Q29udGVudCwgZWxlbWVudC5saW5lLCBsYWJlbC5zdGFydCwgbGFiZWwuZW5kKVxuICAgICAgfVxuICAgIC8+XG4gIDwvRm9ybVJvdz5cblxuezplbHNlIGlmIGlzQ29sbGFwc2VkfVxuXG4gIDwhLS0tLS0tIENPTExBUFNFRCBPUiBTSE9SVENVVCAtLS0tLS0+XG5cbiAgPEZvcm1Sb3cgbGFiZWw9eydJRDonfSBsZWZ0Q29sdW1uPXsnMjBweCd9IG1hcmdpbj17JzhweCd9IGNvbXBhY3Q9e3RydWV9PlxuICAgIDxJbnB1dFRleHQgXG4gICAgICB3aWR0aD0nMTAwJScgXG4gICAgICBjb21wYWN0PXt0cnVlfSBcbiAgICAgIGJpbmQ6dmFsdWU9e2xhYmVsLnN0cmluZ30gXG4gICAgICBvbjppbnB1dD17KGV2dCkgPT4gXG4gICAgICAgIHdyaXRlVG9Eb2MoY20sIGV2dC50YXJnZXQudGV4dENvbnRlbnQsIGVsZW1lbnQubGluZSwgbGFiZWwuc3RhcnQsIGxhYmVsLmVuZClcbiAgICAgIH1cbiAgICAvPlxuICA8L0Zvcm1Sb3c+XG5cbnsvaWZ9XG5cbjwhLS0tLS0tIERFRklOSVRJT04gLS0tLS0tPlxuXG48ZGl2IGNsYXNzPVwiZGVmaW5pdGlvblwiPlxuICB7I2lmIG5vRGVmaW5pdGlvbnNGb3VuZH1cbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPk5vIGRlZmluaXRpb25zIGZvciA8c3BhbiBjbGFzcz1cImlkXCI+e2xhYmVsLnN0cmluZ308L3NwYW4+IGZvdW5kLjwvZGl2PlxuICB7OmVsc2UgaWYgbXVsdGlwbGVEZWZpbml0aW9uc0ZvdW5kfVxuICAgIDxkaXYgY2xhc3M9XCJlcnJvci1tZXNzYWdlXCI+TXVsdGlwbGUgZGVmaW5pdGlvbnMgZm9yIDxzcGFuIGNsYXNzPVwiaWRcIj57bGFiZWwuc3RyaW5nfTwvc3Bhbj4gZm91bmQuPC9kaXY+XG4gIHs6ZWxzZX1cblxuICAgIDxGb3JtUm93IGxhYmVsPXsnVVJMOid9IGxlZnRDb2x1bW49eyczMHB4J30gbWFyZ2luPXsnMCd9IG11bHRpTGluZT17dHJ1ZX0gbGFiZWxUb3BPZmZzZXQ9eyc0cHgnfSBjb21wYWN0PXt0cnVlfT5cbiAgICAgIDxJbnB1dFRleHRcbiAgICAgICAgbXVsdGlMaW5lPXt0cnVlfVxuICAgICAgICBtdWx0aUxpbmVNYXhIZWlnaHQ9JzEwMCdcbiAgICAgICAgZWRpdGFibGU9e2ZhbHNlfVxuICAgICAgICB3aWR0aD0nMTAwJScgXG4gICAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgICBiaW5kOnZhbHVlPXtkZWZpbml0aW9uVXJsfSBcbiAgICAgIC8+XG4gICAgPC9Gb3JtUm93PlxuXG4gICAgeyNpZiBkZWZpbml0aW9uVGl0bGV9XG4gICAgICA8U2VwYXJhdG9yIG1hcmdpbj17JzJweCAwICd9IC8+XG4gICAgICA8Rm9ybVJvdyBsYWJlbD17J1RpdGxlOid9IGxlZnRDb2x1bW49eyczMHB4J30gbWFyZ2luPXsnMCd9IG11bHRpTGluZT17dHJ1ZX0gbGFiZWxUb3BPZmZzZXQ9eyc0cHgnfSBjb21wYWN0PXt0cnVlfT5cbiAgICAgICAgPElucHV0VGV4dFxuICAgICAgICAgIG11bHRpTGluZT17dHJ1ZX1cbiAgICAgICAgICBtdWx0aUxpbmVNYXhIZWlnaHQ9JzEwMCdcbiAgICAgICAgICBlZGl0YWJsZT17ZmFsc2V9XG4gICAgICAgICAgd2lkdGg9JzEwMCUnIFxuICAgICAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgICAgIGJpbmQ6dmFsdWU9e2RlZmluaXRpb25UaXRsZX0gXG4gICAgICAgIC8+XG4gICAgICA8L0Zvcm1Sb3c+XG4gICAgey9pZn1cbiAgey9pZn1cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (110:22) 
function create_if_block_4(ctx) {
	let formrow;
	let current;

	formrow = new FormRow({
			props: {
				label: "ID:",
				leftColumn: "20px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, label, cm, element*/ 262155) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(110:22) ",
		ctx
	});

	return block;
}

// (82:0) {#if isFull }
function create_if_block_3(ctx) {
	let formrow0;
	let t;
	let formrow1;
	let current;

	formrow0 = new FormRow({
			props: {
				label: "Text:",
				leftColumn: "30px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "ID:",
				leftColumn: "30px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow0.$$.fragment);
			t = space();
			create_component(formrow1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow0_changes = {};

			if (dirty & /*$$scope, text, cm, element*/ 262163) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope, label, cm, element*/ 262155) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(82:0) {#if isFull }",
		ctx
	});

	return block;
}

// (114:2) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>
function create_default_slot_4(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_2(value) {
		/*inputtext_value_binding_2*/ ctx[14].call(null, value);
	}

	let inputtext_props = { width: "100%", compact: true };

	if (/*label*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*label*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_2));
	inputtext.$on("input", /*input_handler_2*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*label*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*label*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(114:2) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (86:2) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} compact={true}>
function create_default_slot_3$1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[10].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "200",
		width: "100%",
		compact: true
	};

	if (/*text*/ ctx[4].string !== void 0) {
		inputtext_props.value = /*text*/ ctx[4].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[11]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*text*/ 16) {
				updating_value = true;
				inputtext_changes.value = /*text*/ ctx[4].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(86:2) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (99:2) <FormRow label={'ID:'} leftColumn={'30px'} margin={'8px'} compact={true}>
function create_default_slot_2$1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[12].call(null, value);
	}

	let inputtext_props = { width: "100%", compact: true };

	if (/*label*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*label*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));
	inputtext.$on("input", /*input_handler_1*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*label*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*label*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(99:2) <FormRow label={'ID:'} leftColumn={'30px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (134:2) {:else}
function create_else_block$3(ctx) {
	let formrow;
	let t;
	let if_block_anchor;
	let current;

	formrow = new FormRow({
			props: {
				label: "URL:",
				leftColumn: "30px",
				margin: "0",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*definitionTitle*/ ctx[9] && create_if_block_2$1(ctx);

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, definitionUrl*/ 262400) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);

			if (/*definitionTitle*/ ctx[9]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*definitionTitle*/ 512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(134:2) {:else}",
		ctx
	});

	return block;
}

// (132:37) 
function create_if_block_1$2(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[3].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Multiple definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$d, 132, 56, 3575);
			attr_dev(div, "class", "error-message");
			add_location(div, file$d, 132, 4, 3523);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8 && t1_value !== (t1_value = /*label*/ ctx[3].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(132:37) ",
		ctx
	});

	return block;
}

// (130:2) {#if noDefinitionsFound}
function create_if_block$5(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[3].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("No definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$d, 130, 50, 3429);
			attr_dev(div, "class", "error-message");
			add_location(div, file$d, 130, 4, 3383);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8 && t1_value !== (t1_value = /*label*/ ctx[3].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(130:2) {#if noDefinitionsFound}",
		ctx
	});

	return block;
}

// (136:4) <FormRow label={'URL:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot_1$2(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_3(value) {
		/*inputtext_value_binding_3*/ ctx[16].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definitionUrl*/ ctx[8] !== void 0) {
		inputtext_props.value = /*definitionUrl*/ ctx[8];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_3));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definitionUrl*/ 256) {
				updating_value = true;
				inputtext_changes.value = /*definitionUrl*/ ctx[8];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(136:4) <FormRow label={'URL:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

// (147:4) {#if definitionTitle}
function create_if_block_2$1(ctx) {
	let separator;
	let t;
	let formrow;
	let current;

	separator = new Separator({
			props: { margin: "2px 0 " },
			$$inline: true
		});

	formrow = new FormRow({
			props: {
				label: "Title:",
				leftColumn: "30px",
				margin: "0",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(separator.$$.fragment);
			t = space();
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(separator, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, definitionTitle*/ 262656) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(147:4) {#if definitionTitle}",
		ctx
	});

	return block;
}

// (149:6) <FormRow label={'Title:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot$3(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_4(value) {
		/*inputtext_value_binding_4*/ ctx[17].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definitionTitle*/ ctx[9] !== void 0) {
		inputtext_props.value = /*definitionTitle*/ ctx[9];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_4));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definitionTitle*/ 512) {
				updating_value = true;
				inputtext_changes.value = /*definitionTitle*/ ctx[9];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(149:6) <FormRow label={'Title:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let header;
	let h1;
	let t1;
	let separator;
	let t2;
	let current_block_type_index;
	let if_block0;
	let t3;
	let div;
	let current_block_type_index_1;
	let if_block1;
	let current;

	separator = new Separator({
			props: { margin: "0 0 8px" },
			$$inline: true
		});

	const if_block_creators = [create_if_block_3, create_if_block_4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isFull*/ ctx[2]) return 0;
		if (/*isCollapsed*/ ctx[5]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const if_block_creators_1 = [create_if_block$5, create_if_block_1$2, create_else_block$3];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*noDefinitionsFound*/ ctx[7]) return 0;
		if (/*multipleDefinitionsFound*/ ctx[6]) return 1;
		return 2;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Reference Link";
			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			div = element("div");
			if_block1.c();
			add_location(h1, file$d, 76, 2, 2140);
			add_location(header, file$d, 75, 0, 2129);
			attr_dev(div, "class", "definition");
			add_location(div, file$d, 128, 0, 3327);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator, target, anchor);
			insert_dev(target, t2, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, div, anchor);
			if_blocks_1[current_block_type_index_1].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t3.parentNode, t3);
				} else {
					if_block0 = null;
				}
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t2);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div);
			if_blocks_1[current_block_type_index_1].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ReferenceLink", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let isFull = false;
	let isCollapsed = false;
	let multipleDefinitionsFound = false;
	let noDefinitionsFound = false;
	let label;
	let text;
	let definitionUrl;
	let definitionTitle;
	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ReferenceLink> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		text.string = value;
		(((($$invalidate(4, text), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(0, cm));
	}

	const input_handler = evt => writeToDoc(cm, evt.target.textContent, element.line, text.start, text.end);

	function inputtext_value_binding_1(value) {
		label.string = value;
		(((($$invalidate(3, label), $$invalidate(1, element)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	const input_handler_1 = evt => writeToDoc(cm, evt.target.textContent, element.line, label.start, label.end);

	function inputtext_value_binding_2(value) {
		label.string = value;
		(((($$invalidate(3, label), $$invalidate(1, element)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	const input_handler_2 = evt => writeToDoc(cm, evt.target.textContent, element.line, label.start, label.end);

	function inputtext_value_binding_3(value) {
		definitionUrl = value;
		((((($$invalidate(8, definitionUrl), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	function inputtext_value_binding_4(value) {
		definitionTitle = value;
		((((($$invalidate(9, definitionTitle), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		InputText,
		Separator,
		writeToDoc,
		getReferenceDefinitions,
		FormRow,
		cm,
		element,
		isFull,
		isCollapsed,
		multipleDefinitionsFound,
		noDefinitionsFound,
		label,
		text,
		definitionUrl,
		definitionTitle
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("isFull" in $$props) $$invalidate(2, isFull = $$props.isFull);
		if ("isCollapsed" in $$props) $$invalidate(5, isCollapsed = $$props.isCollapsed);
		if ("multipleDefinitionsFound" in $$props) $$invalidate(6, multipleDefinitionsFound = $$props.multipleDefinitionsFound);
		if ("noDefinitionsFound" in $$props) $$invalidate(7, noDefinitionsFound = $$props.noDefinitionsFound);
		if ("label" in $$props) $$invalidate(3, label = $$props.label);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("definitionUrl" in $$props) $$invalidate(8, definitionUrl = $$props.definitionUrl);
		if ("definitionTitle" in $$props) $$invalidate(9, definitionTitle = $$props.definitionTitle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, label, isFull, text, cm*/ 31) {
			 {
				$$invalidate(2, isFull = element.type.includes("full"));
				$$invalidate(5, isCollapsed = element.type.includes("collapsed"));

				// Get `label`
				// Full reference links: `[text][label]`
				// Collapsed reference links: `[label][]`
				$$invalidate(3, label = element.spans.find(f => f.type.includes("label")));

				if (!label) {
					const index = isFull
					? element.markdown.indexOf("][") + 2 + element.start
					: element.start + 1;

					$$invalidate(3, label = { start: index, end: index, string: "" });
				}

				// Get `text`, if element is a full reference link.
				// E.g. `[text][label]`
				if (isFull) {
					$$invalidate(4, text = element.spans.find(f => f.type.includes("text")));

					if (!text) {
						$$invalidate(4, text = {
							start: element.start + 1,
							end: element.start + 1,
							string: ""
						});
					}
				}

				if (label.string !== "") {
					const definitions = getReferenceDefinitions(cm, label.string, "link");
					$$invalidate(7, noDefinitionsFound = definitions.length == 0);
					$$invalidate(6, multipleDefinitionsFound = definitions.length > 1);

					// If there's one match, select it
					// Else set definition null
					if (definitions.length == 1) {
						$$invalidate(8, definitionUrl = definitions[0].spans.find(s => s.type.includes("url"))?.string);
						$$invalidate(9, definitionTitle = definitions[0].spans.find(s => s.type.includes("title"))?.string);
					} else {
						$$invalidate(8, definitionUrl = undefined);
						$$invalidate(9, definitionTitle = undefined);
					}
				}
			}
		}
	};

	return [
		cm,
		element,
		isFull,
		label,
		text,
		isCollapsed,
		multipleDefinitionsFound,
		noDefinitionsFound,
		definitionUrl,
		definitionTitle,
		inputtext_value_binding,
		input_handler,
		inputtext_value_binding_1,
		input_handler_1,
		inputtext_value_binding_2,
		input_handler_2,
		inputtext_value_binding_3,
		inputtext_value_binding_4
	];
}

class ReferenceLink extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$e();
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ReferenceLink",
			options,
			id: create_fragment$e.name
		});
	}

	get cm() {
		throw new Error("<ReferenceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<ReferenceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<ReferenceLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<ReferenceLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/ImagePreview.svelte generated by Svelte v3.30.1 */
const file$e = "src/js/renderer/component/main/wizard/ImagePreview.svelte";

function add_css$f() {
	var style = element("style");
	style.id = "svelte-1vz6uqp-style";
	style.textContent = "@keyframes svelte-1vz6uqp-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}img.svelte-1vz6uqp{width:100%;height:100%;margin:0;padding:0;object-fit:contain}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VQcmV2aWV3LnN2ZWx0ZSIsInNvdXJjZXMiOlsiSW1hZ2VQcmV2aWV3LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgeyBmaWxlcyB9IGZyb20gXCIuLi8uLi8uLi9GaWxlc01hbmFnZXJcIjtcblxuXHRleHBvcnQgbGV0IHVybCA9IG51bGxcblx0ZXhwb3J0IGxldCBjbSA9IG51bGxcblxuXHRsZXQgZm9ybWF0dGVkVXJsXG5cdGxldCBpc0xvY2FsVXJsXG5cblx0JDogdXJsLCBmb3JtYXRVUkwoKVxuXG5cdC8qKlxuXHQgKiBJZiBgdXJsYCBpcyByZWxhdGl2ZSwgZ2V0IHdvcmtpbmcgYWJzb2x1dGUgdXJsIFxuXHQgKiBvZiBmaWxlIGluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeS5cblx0ICovXG5cdGZ1bmN0aW9uIGZvcm1hdFVSTCgpIHtcblx0XHRpZiAoIWNtIHx8ICF1cmwpIHJldHVyblxuXHRcdGNvbnN0IHByb2plY3QgPSB3aW5kb3cuc3RhdGUucHJvamVjdHMuYnlJZFt3aW5kb3cuaWRdXG5cdFx0Y29uc3QgZG9jID0gJGZpbGVzLmJ5SWRbY20ucGFuZWwuZG9jSWRdXG5cdFx0Y29uc3QgZG9jVVJMID0gbmV3IFVSTChgZmlsZTovLyR7ZG9jLnBhdGh9YClcblx0XHRmb3JtYXR0ZWRVcmwgPSBuZXcgVVJMKHVybCwgZG9jVVJMKVxuXHRcdGlzTG9jYWxVcmwgPSBmb3JtYXR0ZWRVcmwucHJvdG9jb2wgPT0gJ2ZpbGU6J1xuXHR9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbmltZyxcbiNwcmV2aWV3IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBvYmplY3QtZml0OiBjb250YWluO1xufTwvc3R5bGU+XG5cbjwhLS0gPGlmcmFtZSBpZD1cInByZXZpZXdcIiB0aXRsZT1cIkltYWdlXCIgc3JjPXt1cmx9IC8+IC0tPlxuXG48IS0tIDxkaXYgYmluZDp0aGlzPXtlbGVtZW50fSBiaW5kOmNsaWVudFdpZHRoIGJpbmQ6Y2xpZW50SGVpZ2h0IGJpbmQ6b2Zmc2V0V2lkdGggYmluZDpvZmZzZXRIZWlnaHQgaWQ9XCJwcmV2aWV3XCIgLz4gLS0+XG5cbjxpbWcgc3JjPXtmb3JtYXR0ZWRVcmx9IC8+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBCd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELEdBQUcsZUFDTSxDQUFDLEFBQ1IsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQ0FDVixVQUFVLENBQUUsT0FBTyxBQUNyQixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$f(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			if (img.src !== (img_src_value = /*formattedUrl*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1vz6uqp");
			add_location(img, file$e, 47, 0, 1073);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*formattedUrl*/ 1 && img.src !== (img_src_value = /*formattedUrl*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$f.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$f($$self, $$props, $$invalidate) {
	let $files;
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(4, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ImagePreview", slots, []);
	let { url = null } = $$props;
	let { cm = null } = $$props;
	let formattedUrl;
	let isLocalUrl;

	/**
 * If `url` is relative, get working absolute url 
 * of file in the project directory.
 */
	function formatURL() {
		if (!cm || !url) return;
		const project = window.state.projects.byId[window.id];
		const doc = $files.byId[cm.panel.docId];
		const docURL = new URL(`file://${doc.path}`);
		$$invalidate(0, formattedUrl = new URL(url, docURL));
		isLocalUrl = formattedUrl.protocol == "file:";
	}

	const writable_props = ["url", "cm"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ImagePreview> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("cm" in $$props) $$invalidate(2, cm = $$props.cm);
	};

	$$self.$capture_state = () => ({
		files,
		url,
		cm,
		formattedUrl,
		isLocalUrl,
		formatURL,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("cm" in $$props) $$invalidate(2, cm = $$props.cm);
		if ("formattedUrl" in $$props) $$invalidate(0, formattedUrl = $$props.formattedUrl);
		if ("isLocalUrl" in $$props) isLocalUrl = $$props.isLocalUrl;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*url*/ 2) {
			 (formatURL());
		}
	};

	return [formattedUrl, url, cm];
}

class ImagePreview extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1vz6uqp-style")) add_css$f();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { url: 1, cm: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ImagePreview",
			options,
			id: create_fragment$f.name
		});
	}

	get url() {
		throw new Error("<ImagePreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<ImagePreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cm() {
		throw new Error("<ImagePreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<ImagePreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing. The function also has a property 'clear' 
 * that is a function which will clear the timer to prevent previously scheduled executions. 
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */
function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = Date.now() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        context = args = null;
      }
    }
  }
  var debounced = function(){
    context = this;
    args = arguments;
    timestamp = Date.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };

  debounced.clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  
  debounced.flush = function() {
    if (timeout) {
      result = func.apply(context, args);
      context = args = null;
      
      clearTimeout(timeout);
      timeout = null;
    }
  };

  return debounced;
}
// Adds compatibility for ES modules
debounce.debounce = debounce;

var debounce_1 = debounce;

/* src/js/renderer/component/main/wizard/Image.svelte generated by Svelte v3.30.1 */
const file$f = "src/js/renderer/component/main/wizard/Image.svelte";

function add_css$g() {
	var style = element("style");
	style.id = "svelte-1qrb0d9-style";
	style.textContent = "@keyframes svelte-1qrb0d9-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.preview.svelte-1qrb0d9{width:100%;height:9em;background:rgba(0, 0, 0, 0.05);padding:4px;margin:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (107:2) {:else}
function create_else_block$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Image picker");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(107:2) {:else}",
		ctx
	});

	return block;
}

// (105:2) {#if url.string && isValidImagePath}
function create_if_block_1$3(ctx) {
	let imagepreview;
	let current;

	imagepreview = new ImagePreview({
			props: {
				url: /*url*/ ctx[3].string,
				cm: /*cm*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(imagepreview.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(imagepreview, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const imagepreview_changes = {};
			if (dirty & /*url*/ 8) imagepreview_changes.url = /*url*/ ctx[3].string;
			if (dirty & /*cm*/ 1) imagepreview_changes.cm = /*cm*/ ctx[0];
			imagepreview.$set(imagepreview_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(imagepreview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(imagepreview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(imagepreview, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(105:2) {#if url.string && isValidImagePath}",
		ctx
	});

	return block;
}

// (117:0) <FormRow label={'URL:'} leftColumn={'30px'} margin={'8px'} compact={true} multiLine={true} labelTopOffset={'3px'}>
function create_default_slot_3$2(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[8].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		width: "100%",
		compact: true,
		isError: /*url*/ ctx[3].string == ""
	};

	if (/*url*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*url*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};
			if (dirty & /*url*/ 8) inputtext_changes.isError = /*url*/ ctx[3].string == "";

			if (!updating_value && dirty & /*url*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*url*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(117:0) <FormRow label={'URL:'} leftColumn={'30px'} margin={'8px'} compact={true} multiLine={true} labelTopOffset={'3px'}>",
		ctx
	});

	return block;
}

// (155:2) {#if $state.wizard.showOptionalImageFields}
function create_if_block$6(ctx) {
	let formrow0;
	let t;
	let formrow1;
	let current;

	formrow0 = new FormRow({
			props: {
				label: "Alt:",
				leftColumn: "30px",
				margin: "4px 8px 8px",
				compact: true,
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "Title:",
				leftColumn: "30px",
				margin: "4px 8px 8px",
				compact: true,
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow0.$$.fragment);
			t = space();
			create_component(formrow1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow0_changes = {};

			if (dirty & /*$$scope, url, text, cm, element*/ 524303) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope, url, title, cm, element*/ 524315) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(155:2) {#if $state.wizard.showOptionalImageFields}",
		ctx
	});

	return block;
}

// (158:4) <FormRow label={'Alt:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>
function create_default_slot_2$2(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[10].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		width: "100%",
		compact: true,
		isDisabled: /*url*/ ctx[3].string == ""
	};

	if (/*text*/ ctx[2].string !== void 0) {
		inputtext_props.value = /*text*/ ctx[2].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));
	inputtext.$on("input", /*input_handler_1*/ ctx[11]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};
			if (dirty & /*url*/ 8) inputtext_changes.isDisabled = /*url*/ ctx[3].string == "";

			if (!updating_value && dirty & /*text*/ 4) {
				updating_value = true;
				inputtext_changes.value = /*text*/ ctx[2].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(158:4) <FormRow label={'Alt:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>",
		ctx
	});

	return block;
}

// (173:4) <FormRow label={'Title:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>
function create_default_slot_1$3(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_2(value) {
		/*inputtext_value_binding_2*/ ctx[12].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		width: "100%",
		compact: true,
		isDisabled: /*url*/ ctx[3].string == ""
	};

	if (/*title*/ ctx[4].string !== void 0) {
		inputtext_props.value = /*title*/ ctx[4].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_2));
	inputtext.$on("input", /*input_handler_2*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};
			if (dirty & /*url*/ 8) inputtext_changes.isDisabled = /*url*/ ctx[3].string == "";

			if (!updating_value && dirty & /*title*/ 16) {
				updating_value = true;
				inputtext_changes.value = /*title*/ ctx[4].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(173:4) <FormRow label={'Title:'} leftColumn={'30px'} margin={'4px 8px 8px'} compact={true}>",
		ctx
	});

	return block;
}

// (144:0) <Expandable    title={'Optional:'}    margin={'0 8px'}    isOpen={$state.wizard.showOptionalImageFields}    on:toggle={() =>      window.api.send('dispatch', {        type: 'TOGGLE_WIZARD_OPTIONAL_IMAGE_FIELDS',        value: !$state.wizard.showOptionalImageFields      })   } >
function create_default_slot$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$state*/ ctx[7].wizard.showOptionalImageFields && create_if_block$6(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*$state*/ ctx[7].wizard.showOptionalImageFields) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$state*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(144:0) <Expandable    title={'Optional:'}    margin={'0 8px'}    isOpen={$state.wizard.showOptionalImageFields}    on:toggle={() =>      window.api.send('dispatch', {        type: 'TOGGLE_WIZARD_OPTIONAL_IMAGE_FIELDS',        value: !$state.wizard.showOptionalImageFields      })   } >",
		ctx
	});

	return block;
}

function create_fragment$g(ctx) {
	let header;
	let h1;
	let t1;
	let separator0;
	let t2;
	let div;
	let current_block_type_index;
	let if_block;
	let t3;
	let separator1;
	let t4;
	let formrow;
	let t5;
	let separator2;
	let t6;
	let expandable;
	let current;
	separator0 = new Separator({ props: { margin: "0" }, $$inline: true });
	const if_block_creators = [create_if_block_1$3, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*url*/ ctx[3].string && /*isValidImagePath*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	separator1 = new Separator({
			props: { margin: "0 0 8px" },
			$$inline: true
		});

	formrow = new FormRow({
			props: {
				label: "URL:",
				leftColumn: "30px",
				margin: "8px",
				compact: true,
				multiLine: true,
				labelTopOffset: "3px",
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator2 = new Separator({
			props: { margin: "8px 8px 0" },
			$$inline: true
		});

	expandable = new Expandable({
			props: {
				title: "Optional:",
				margin: "0 8px",
				isOpen: /*$state*/ ctx[7].wizard.showOptionalImageFields,
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	expandable.$on("toggle", /*toggle_handler*/ ctx[14]);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Image";
			t1 = space();
			create_component(separator0.$$.fragment);
			t2 = space();
			div = element("div");
			if_block.c();
			t3 = space();
			create_component(separator1.$$.fragment);
			t4 = space();
			create_component(formrow.$$.fragment);
			t5 = space();
			create_component(separator2.$$.fragment);
			t6 = space();
			create_component(expandable.$$.fragment);
			add_location(h1, file$f, 95, 2, 2631);
			add_location(header, file$f, 94, 0, 2620);
			attr_dev(div, "class", "preview svelte-1qrb0d9");
			add_location(div, file$f, 103, 0, 2712);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator0, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			insert_dev(target, t3, anchor);
			mount_component(separator1, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(formrow, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(separator2, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(expandable, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}

			const formrow_changes = {};

			if (dirty & /*$$scope, url, title, clearUrlAndTitleOnDestroy, cm, element*/ 524347) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
			const expandable_changes = {};
			if (dirty & /*$state*/ 128) expandable_changes.isOpen = /*$state*/ ctx[7].wizard.showOptionalImageFields;

			if (dirty & /*$$scope, url, title, cm, element, text, $state*/ 524447) {
				expandable_changes.$$scope = { dirty, ctx };
			}

			expandable.$set(expandable_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator0.$$.fragment, local);
			transition_in(if_block);
			transition_in(separator1.$$.fragment, local);
			transition_in(formrow.$$.fragment, local);
			transition_in(separator2.$$.fragment, local);
			transition_in(expandable.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator0.$$.fragment, local);
			transition_out(if_block);
			transition_out(separator1.$$.fragment, local);
			transition_out(formrow.$$.fragment, local);
			transition_out(separator2.$$.fragment, local);
			transition_out(expandable.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator0, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			if (detaching) detach_dev(t3);
			destroy_component(separator1, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(formrow, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(separator2, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(expandable, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$g.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$g($$self, $$props, $$invalidate) {
	let $state;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(7, $state = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Image", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let text;
	let url;
	let title;
	let clearUrlAndTitleOnDestroy = false;
	let formattedUrl = "";
	let isValidImagePath;
	let isRemoteUrl;
	let isLocalUrl;

	const checkUrl = debounce_1.debounce(
		() => {
			// Return if url is missing or unchanged
			if (!url.string || url.string == formattedUrl) return;

			formattedUrl = url.string;
			const hasExtension = formattedUrl.lastIndexOf(".") > 0;
			if (!hasExtension) return;
			$$invalidate(6, isValidImagePath = isImagePath(formattedUrl));

			if (isValidImagePath) {
				isRemoteUrl = isUrl(formattedUrl);
			}
		},
		500,
		true
	);

	/**
 * Handle edge case where user deletes URL and leaves Title.
 * We don't write the change until they destroy the element.
 * This avoids unexpected side effects while editing.
 * E.g. Breaking the link by having title but no URL
*/
	onDestroy(() => {
		if (clearUrlAndTitleOnDestroy) {
			const newImage = `![${text.string}]()`;
			writeToDoc(cm, newImage, element.line, element.start, element.end);
		}
	});

	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		url.string = value;
		((($$invalidate(3, url), $$invalidate(1, element)), $$invalidate(2, text)), $$invalidate(4, title));
	}

	const input_handler = evt => {
		// Don't immediately write changes if user makes URL blank,
		// and title is not blank, or else the element will break.
		// E.g. ![text]( "title")
		const urlIsBlank = evt.target.textContent == "";

		const titleIsNotBlank = title.string !== "";

		if (urlIsBlank && titleIsNotBlank) {
			$$invalidate(5, clearUrlAndTitleOnDestroy = true);
		} else {
			$$invalidate(5, clearUrlAndTitleOnDestroy = false);
			writeToDoc(cm, evt.target.textContent, element.line, url.start, url.end);
		}
	};

	function inputtext_value_binding_1(value) {
		text.string = value;
		((($$invalidate(2, text), $$invalidate(1, element)), $$invalidate(3, url)), $$invalidate(4, title));
	}

	const input_handler_1 = evt => writeToDoc(cm, evt.target.textContent, element.line, text.start, text.end);

	function inputtext_value_binding_2(value) {
		title.string = value;
		((($$invalidate(4, title), $$invalidate(1, element)), $$invalidate(2, text)), $$invalidate(3, url));
	}

	const input_handler_2 = evt => {
		const wasBlank = title.start == title.end;
		const isNowBlank = title.string.length == 0;

		if (wasBlank) {
			// To be a valid Commonmark link title, we need to insert whitespace before the value, and wrap it in quotation marks.
			writeToDoc(cm, ` "${evt.target.textContent}"`, element.line, title.start, title.end);
		} else if (isNowBlank) {
			// If we've cleared the title for whatever reason, we need to also delete the surrounding quotation marks and whitespace.
			writeToDoc(cm, evt.target.textContent, element.line, title.start - 2, title.end + 1);
		} else {
			// If the above are not true, do the usual...
			writeToDoc(cm, evt.target.textContent, element.line, title.start, title.end);
		}
	};

	const toggle_handler = () => window.api.send("dispatch", {
		type: "TOGGLE_WIZARD_OPTIONAL_IMAGE_FIELDS",
		value: !$state.wizard.showOptionalImageFields
	});

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		ImagePreview,
		Expandable,
		InputText,
		Separator,
		writeToDoc,
		state,
		FormRow,
		isUrl,
		isImagePath,
		debounce: debounce_1.debounce,
		onDestroy,
		cm,
		element,
		text,
		url,
		title,
		clearUrlAndTitleOnDestroy,
		formattedUrl,
		isValidImagePath,
		isRemoteUrl,
		isLocalUrl,
		checkUrl,
		$state
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("url" in $$props) $$invalidate(3, url = $$props.url);
		if ("title" in $$props) $$invalidate(4, title = $$props.title);
		if ("clearUrlAndTitleOnDestroy" in $$props) $$invalidate(5, clearUrlAndTitleOnDestroy = $$props.clearUrlAndTitleOnDestroy);
		if ("formattedUrl" in $$props) formattedUrl = $$props.formattedUrl;
		if ("isValidImagePath" in $$props) $$invalidate(6, isValidImagePath = $$props.isValidImagePath);
		if ("isRemoteUrl" in $$props) isRemoteUrl = $$props.isRemoteUrl;
		if ("isLocalUrl" in $$props) isLocalUrl = $$props.isLocalUrl;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, text, url, title*/ 30) {
			 {
				$$invalidate(2, text = element.spans.find(f => f.type.includes("text")));
				$$invalidate(3, url = element.spans.find(f => f.type.includes("url")));
				$$invalidate(4, title = element.spans.find(f => f.type.includes("title")));

				if (!text) {
					const index = element.markdown.indexOf("![") + 2 + element.start;
					$$invalidate(2, text = { start: index, end: index, string: "" });
				}

				if (!url) {
					const index = element.markdown.indexOf("](") + 2 + element.start;
					$$invalidate(3, url = { start: index, end: index, string: "" });
				}

				if (!title) {
					const index = element.markdown.lastIndexOf(")") + element.start;
					$$invalidate(4, title = { start: index, end: index, string: "" });
				}

				checkUrl();
			}
		}
	};

	return [
		cm,
		element,
		text,
		url,
		title,
		clearUrlAndTitleOnDestroy,
		isValidImagePath,
		$state,
		inputtext_value_binding,
		input_handler,
		inputtext_value_binding_1,
		input_handler_1,
		inputtext_value_binding_2,
		input_handler_2,
		toggle_handler
	];
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1qrb0d9-style")) add_css$g();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Image",
			options,
			id: create_fragment$g.name
		});
	}

	get cm() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/ReferenceImage.svelte generated by Svelte v3.30.1 */
const file$g = "src/js/renderer/component/main/wizard/ReferenceImage.svelte";

function add_css$h() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (113:22) 
function create_if_block_4$1(ctx) {
	let formrow;
	let current;

	formrow = new FormRow({
			props: {
				label: "ID:",
				leftColumn: "20px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, label, cm, element*/ 1048587) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(113:22) ",
		ctx
	});

	return block;
}

// (86:0) {#if isFull }
function create_if_block_3$1(ctx) {
	let formrow0;
	let t;
	let formrow1;
	let current;

	formrow0 = new FormRow({
			props: {
				label: "Text:",
				leftColumn: "30px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "ID:",
				leftColumn: "30px",
				margin: "8px",
				compact: true,
				$$slots: { default: [create_default_slot_3$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow0.$$.fragment);
			t = space();
			create_component(formrow1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow0_changes = {};

			if (dirty & /*$$scope, text, cm, element*/ 1048595) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope, label, cm, element*/ 1048587) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(86:0) {#if isFull }",
		ctx
	});

	return block;
}

// (117:2) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>
function create_default_slot_5(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_2(value) {
		/*inputtext_value_binding_2*/ ctx[15].call(null, value);
	}

	let inputtext_props = { width: "100%", compact: true };

	if (/*label*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*label*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_2));
	inputtext.$on("input", /*input_handler_2*/ ctx[16]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*label*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*label*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(117:2) <FormRow label={'ID:'} leftColumn={'20px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (90:2) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} compact={true}>
function create_default_slot_4$1(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[11].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "200",
		width: "100%",
		compact: true
	};

	if (/*text*/ ctx[4].string !== void 0) {
		inputtext_props.value = /*text*/ ctx[4].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));
	inputtext.$on("input", /*input_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*text*/ 16) {
				updating_value = true;
				inputtext_changes.value = /*text*/ ctx[4].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(90:2) <FormRow label={'Text:'} leftColumn={'30px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (102:2) <FormRow label={'ID:'} leftColumn={'30px'} margin={'8px'} compact={true}>
function create_default_slot_3$3(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[13].call(null, value);
	}

	let inputtext_props = { width: "100%", compact: true };

	if (/*label*/ ctx[3].string !== void 0) {
		inputtext_props.value = /*label*/ ctx[3].string;
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));
	inputtext.$on("input", /*input_handler_1*/ ctx[14]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*label*/ 8) {
				updating_value = true;
				inputtext_changes.value = /*label*/ ctx[3].string;
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$3.name,
		type: "slot",
		source: "(102:2) <FormRow label={'ID:'} leftColumn={'30px'} margin={'8px'} compact={true}>",
		ctx
	});

	return block;
}

// (137:2) {:else}
function create_else_block$5(ctx) {
	let div;
	let imagepreview;
	let t0;
	let separator0;
	let t1;
	let formrow0;
	let t2;
	let separator1;
	let t3;
	let formrow1;
	let t4;
	let if_block_anchor;
	let current;

	imagepreview = new ImagePreview({
			props: {
				url: /*definitionUrl*/ ctx[9],
				cm: /*cm*/ ctx[0]
			},
			$$inline: true
		});

	separator0 = new Separator({
			props: { margin: "4px 0 " },
			$$inline: true
		});

	formrow0 = new FormRow({
			props: {
				label: "URL:",
				leftColumn: "30px",
				margin: "0",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator1 = new Separator({
			props: { margin: "2px 0 " },
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "Alt:",
				leftColumn: "30px",
				margin: "0",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*definitionTitle*/ ctx[10] && create_if_block_2$2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(imagepreview.$$.fragment);
			t0 = space();
			create_component(separator0.$$.fragment);
			t1 = space();
			create_component(formrow0.$$.fragment);
			t2 = space();
			create_component(separator1.$$.fragment);
			t3 = space();
			create_component(formrow1.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(div, "class", "preview");
			add_location(div, file$g, 138, 4, 3801);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(imagepreview, div, null);
			insert_dev(target, t0, anchor);
			mount_component(separator0, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(formrow0, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(separator1, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(formrow1, target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const imagepreview_changes = {};
			if (dirty & /*definitionUrl*/ 512) imagepreview_changes.url = /*definitionUrl*/ ctx[9];
			if (dirty & /*cm*/ 1) imagepreview_changes.cm = /*cm*/ ctx[0];
			imagepreview.$set(imagepreview_changes);
			const formrow0_changes = {};

			if (dirty & /*$$scope, definitionUrl*/ 1049088) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope, definitionAlt*/ 1048832) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);

			if (/*definitionTitle*/ ctx[10]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*definitionTitle*/ 1024) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(imagepreview.$$.fragment, local);
			transition_in(separator0.$$.fragment, local);
			transition_in(formrow0.$$.fragment, local);
			transition_in(separator1.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(imagepreview.$$.fragment, local);
			transition_out(separator0.$$.fragment, local);
			transition_out(formrow0.$$.fragment, local);
			transition_out(separator1.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(imagepreview);
			if (detaching) detach_dev(t0);
			destroy_component(separator0, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(separator1, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(formrow1, detaching);
			if (detaching) detach_dev(t4);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$5.name,
		type: "else",
		source: "(137:2) {:else}",
		ctx
	});

	return block;
}

// (135:37) 
function create_if_block_1$4(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[3].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Multiple definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$g, 135, 56, 3734);
			attr_dev(div, "class", "error-message");
			add_location(div, file$g, 135, 4, 3682);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8 && t1_value !== (t1_value = /*label*/ ctx[3].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(135:37) ",
		ctx
	});

	return block;
}

// (133:2) {#if noDefinitionsFound}
function create_if_block$7(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*label*/ ctx[3].string + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("No definitions for ");
			span = element("span");
			t1 = text(t1_value);
			t2 = text(" found.");
			attr_dev(span, "class", "id");
			add_location(span, file$g, 133, 50, 3588);
			attr_dev(div, "class", "error-message");
			add_location(div, file$g, 133, 4, 3542);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*label*/ 8 && t1_value !== (t1_value = /*label*/ ctx[3].string + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(133:2) {#if noDefinitionsFound}",
		ctx
	});

	return block;
}

// (145:4) <FormRow label={'URL:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot_2$3(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_3(value) {
		/*inputtext_value_binding_3*/ ctx[17].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definitionUrl*/ ctx[9] !== void 0) {
		inputtext_props.value = /*definitionUrl*/ ctx[9];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_3));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definitionUrl*/ 512) {
				updating_value = true;
				inputtext_changes.value = /*definitionUrl*/ ctx[9];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(145:4) <FormRow label={'URL:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

// (159:4) <FormRow label={'Alt:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot_1$4(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_4(value) {
		/*inputtext_value_binding_4*/ ctx[18].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definitionAlt*/ ctx[8] !== void 0) {
		inputtext_props.value = /*definitionAlt*/ ctx[8];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_4));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definitionAlt*/ 256) {
				updating_value = true;
				inputtext_changes.value = /*definitionAlt*/ ctx[8];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$4.name,
		type: "slot",
		source: "(159:4) <FormRow label={'Alt:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

// (170:4) {#if definitionTitle}
function create_if_block_2$2(ctx) {
	let separator;
	let t;
	let formrow;
	let current;

	separator = new Separator({
			props: { margin: "2px 0 " },
			$$inline: true
		});

	formrow = new FormRow({
			props: {
				label: "Title:",
				leftColumn: "30px",
				margin: "0",
				multiLine: true,
				labelTopOffset: "4px",
				compact: true,
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(separator.$$.fragment);
			t = space();
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(separator, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty & /*$$scope, definitionTitle*/ 1049600) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(170:4) {#if definitionTitle}",
		ctx
	});

	return block;
}

// (172:6) <FormRow label={'Title:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>
function create_default_slot$5(ctx) {
	let inputtext;
	let updating_value;
	let current;

	function inputtext_value_binding_5(value) {
		/*inputtext_value_binding_5*/ ctx[19].call(null, value);
	}

	let inputtext_props = {
		multiLine: true,
		multiLineMaxHeight: "100",
		editable: false,
		width: "100%",
		compact: true
	};

	if (/*definitionTitle*/ ctx[10] !== void 0) {
		inputtext_props.value = /*definitionTitle*/ ctx[10];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_5));

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty & /*definitionTitle*/ 1024) {
				updating_value = true;
				inputtext_changes.value = /*definitionTitle*/ ctx[10];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(172:6) <FormRow label={'Title:'} leftColumn={'30px'} margin={'0'} multiLine={true} labelTopOffset={'4px'} compact={true}>",
		ctx
	});

	return block;
}

function create_fragment$h(ctx) {
	let header;
	let h1;
	let t1;
	let separator;
	let t2;
	let current_block_type_index;
	let if_block0;
	let t3;
	let div;
	let current_block_type_index_1;
	let if_block1;
	let current;

	separator = new Separator({
			props: { margin: "0 0 8px" },
			$$inline: true
		});

	const if_block_creators = [create_if_block_3$1, create_if_block_4$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isFull*/ ctx[2]) return 0;
		if (/*isCollapsed*/ ctx[5]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const if_block_creators_1 = [create_if_block$7, create_if_block_1$4, create_else_block$5];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*noDefinitionsFound*/ ctx[7]) return 0;
		if (/*multipleDefinitionsFound*/ ctx[6]) return 1;
		return 2;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Reference Image";
			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			div = element("div");
			if_block1.c();
			add_location(h1, file$g, 80, 2, 2301);
			add_location(header, file$g, 79, 0, 2290);
			attr_dev(div, "class", "definition");
			add_location(div, file$g, 131, 0, 3486);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			insert_dev(target, t1, anchor);
			mount_component(separator, target, anchor);
			insert_dev(target, t2, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, div, anchor);
			if_blocks_1[current_block_type_index_1].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t3.parentNode, t3);
				} else {
					if_block0 = null;
				}
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (detaching) detach_dev(t1);
			destroy_component(separator, detaching);
			if (detaching) detach_dev(t2);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div);
			if_blocks_1[current_block_type_index_1].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$h.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$h($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ReferenceImage", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let isFull = false;
	let isCollapsed = false;
	let multipleDefinitionsFound = false;
	let noDefinitionsFound = false;
	let label;
	let text;
	let definitionAlt;
	let definitionUrl;
	let definitionTitle;
	const writable_props = ["cm", "element"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ReferenceImage> was created with unknown prop '${key}'`);
	});

	function inputtext_value_binding(value) {
		text.string = value;
		(((($$invalidate(4, text), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(0, cm));
	}

	const input_handler = evt => writeToDoc(cm, evt.target.textContent, element.line, text.start, text.end);

	function inputtext_value_binding_1(value) {
		label.string = value;
		(((($$invalidate(3, label), $$invalidate(1, element)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	const input_handler_1 = evt => writeToDoc(cm, evt.target.textContent, element.line, label.start, label.end);

	function inputtext_value_binding_2(value) {
		label.string = value;
		(((($$invalidate(3, label), $$invalidate(1, element)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	const input_handler_2 = evt => writeToDoc(cm, evt.target.textContent, element.line, label.start, label.end);

	function inputtext_value_binding_3(value) {
		definitionUrl = value;
		((((($$invalidate(9, definitionUrl), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	function inputtext_value_binding_4(value) {
		definitionAlt = value;
		((((($$invalidate(8, definitionAlt), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	function inputtext_value_binding_5(value) {
		definitionTitle = value;
		((((($$invalidate(10, definitionTitle), $$invalidate(1, element)), $$invalidate(3, label)), $$invalidate(2, isFull)), $$invalidate(4, text)), $$invalidate(0, cm));
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
	};

	$$self.$capture_state = () => ({
		InputText,
		Separator,
		writeToDoc,
		getReferenceDefinitions,
		FormRow,
		ImagePreview,
		cm,
		element,
		isFull,
		isCollapsed,
		multipleDefinitionsFound,
		noDefinitionsFound,
		label,
		text,
		definitionAlt,
		definitionUrl,
		definitionTitle
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("isFull" in $$props) $$invalidate(2, isFull = $$props.isFull);
		if ("isCollapsed" in $$props) $$invalidate(5, isCollapsed = $$props.isCollapsed);
		if ("multipleDefinitionsFound" in $$props) $$invalidate(6, multipleDefinitionsFound = $$props.multipleDefinitionsFound);
		if ("noDefinitionsFound" in $$props) $$invalidate(7, noDefinitionsFound = $$props.noDefinitionsFound);
		if ("label" in $$props) $$invalidate(3, label = $$props.label);
		if ("text" in $$props) $$invalidate(4, text = $$props.text);
		if ("definitionAlt" in $$props) $$invalidate(8, definitionAlt = $$props.definitionAlt);
		if ("definitionUrl" in $$props) $$invalidate(9, definitionUrl = $$props.definitionUrl);
		if ("definitionTitle" in $$props) $$invalidate(10, definitionTitle = $$props.definitionTitle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*element, label, isFull, text, cm*/ 31) {
			 {
				$$invalidate(2, isFull = element.type.includes("full"));
				$$invalidate(5, isCollapsed = element.type.includes("collapsed"));

				// Get `label`
				// Full reference links: `[text][label]`
				// Collapsed reference links: `[label][]`
				$$invalidate(3, label = element.spans.find(f => f.type.includes("label")));

				if (!label) {
					const index = isFull
					? element.markdown.indexOf("][") + 2 + element.start
					: element.start + 1;

					$$invalidate(3, label = { start: index, end: index, string: "" });
				}

				// Get `text`, if element is a full reference link.
				// E.g. `[text][label]`
				if (isFull) {
					$$invalidate(4, text = element.spans.find(f => f.type.includes("text")));

					if (!text) {
						$$invalidate(4, text = {
							start: element.start + 1,
							end: element.start + 1,
							string: ""
						});
					}
				}

				if (label.string !== "") {
					const definitions = getReferenceDefinitions(cm, label.string, "link");
					$$invalidate(7, noDefinitionsFound = definitions.length == 0);
					$$invalidate(6, multipleDefinitionsFound = definitions.length > 1);

					// If there's one match, select it
					// Else set definition null
					if (definitions.length == 1) {
						$$invalidate(8, definitionAlt = isFull ? text.string : label.string);
						$$invalidate(9, definitionUrl = definitions[0].spans.find(s => s.type.includes("url"))?.string);
						$$invalidate(10, definitionTitle = definitions[0].spans.find(s => s.type.includes("title"))?.string);
					} else {
						$$invalidate(8, definitionAlt = undefined);
						$$invalidate(9, definitionUrl = undefined);
						$$invalidate(10, definitionTitle = undefined);
					}
				}
			}
		}
	};

	return [
		cm,
		element,
		isFull,
		label,
		text,
		isCollapsed,
		multipleDefinitionsFound,
		noDefinitionsFound,
		definitionAlt,
		definitionUrl,
		definitionTitle,
		inputtext_value_binding,
		input_handler,
		inputtext_value_binding_1,
		input_handler_1,
		inputtext_value_binding_2,
		input_handler_2,
		inputtext_value_binding_3,
		inputtext_value_binding_4,
		inputtext_value_binding_5
	];
}

class ReferenceImage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$h();
		init(this, options, instance$h, create_fragment$h, safe_not_equal, { cm: 0, element: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ReferenceImage",
			options,
			id: create_fragment$h.name
		});
	}

	get cm() {
		throw new Error("<ReferenceImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cm(value) {
		throw new Error("<ReferenceImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<ReferenceImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<ReferenceImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/wizard/Wizard.svelte generated by Svelte v3.30.1 */

const { document: document_1$1 } = globals;
const file$h = "src/js/renderer/component/main/wizard/Wizard.svelte";

function add_css$i() {
	var style = element("style");
	style.id = "svelte-1pgcool-style";
	style.textContent = "@keyframes svelte-1pgcool-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#wizard.svelte-1pgcool{--notch-size:0.6em;--popup-distance:-0.5em;--show:0.05s;--hide:0.05s;--delay:0.5s;font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;background-color:var(--windowBackgroundColor);box-shadow:0 0 20px 2px rgba(0, 0, 0, 0.2);border:var(--wizard-border-thickness) solid var(--wizard-border-color);border-radius:var(--wizard-border-radius);color:var(--labelColor);opacity:0;padding:0;position:absolute;transform:translate(0%, 10px);transition-delay:0.5s;transition-timing-function:ease-out;transition:opacity 0.05s;white-space:normal;width:20em;z-index:100;transition:max-height 250ms ease-out;max-height:1000px}#wizard.isVisible.svelte-1pgcool{outline:none;opacity:1;transition:opacity 0.05s;transition-timing-function:ease-in}#wizard.svelte-1pgcool>header{min-height:24px;padding:0;display:flex;position:relative;flex-direction:row;align-items:center;flex:none;user-select:none;margin:0 0 0 8px}#wizard.svelte-1pgcool>header h1{font-family:system-ui;font-weight:bold;font-size:11px;line-height:13px;color:var(--labelColor);flex-grow:1;margin:0;padding:0}#wizard.svelte-1pgcool .definition{background-color:rgba(0, 0, 0, 0.06);border-top:1px solid rgba(var(--foregroundColor), 0.05);padding:8px}#wizard.svelte-1pgcool .error-message{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:var(--secondaryLabelColor);margin:4px}#wizard.svelte-1pgcool .error-message .id{color:var(--labelColor)}#wizard.svelte-1pgcool h2{font-family:system-ui;font-weight:bold;font-size:11px;line-height:13px;margin:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1$1.head, style);
}

// (335:53) 
function create_if_block_7(ctx) {
	let referenceimage;
	let current;

	referenceimage = new ReferenceImage({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(referenceimage.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(referenceimage, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const referenceimage_changes = {};
			if (dirty & /*cm*/ 1) referenceimage_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) referenceimage_changes.element = /*element*/ ctx[1];
			referenceimage.$set(referenceimage_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(referenceimage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(referenceimage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(referenceimage, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(335:53) ",
		ctx
	});

	return block;
}

// (333:43) 
function create_if_block_6(ctx) {
	let image;
	let current;

	image = new Image({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(image.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(image, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const image_changes = {};
			if (dirty & /*cm*/ 1) image_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) image_changes.element = /*element*/ ctx[1];
			image.$set(image_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(image, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(333:43) ",
		ctx
	});

	return block;
}

// (331:52) 
function create_if_block_5(ctx) {
	let referencelink;
	let current;

	referencelink = new ReferenceLink({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(referencelink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(referencelink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const referencelink_changes = {};
			if (dirty & /*cm*/ 1) referencelink_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) referencelink_changes.element = /*element*/ ctx[1];
			referencelink.$set(referencelink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(referencelink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(referencelink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(referencelink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(331:52) ",
		ctx
	});

	return block;
}

// (329:42) 
function create_if_block_4$2(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(link.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*cm*/ 1) link_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) link_changes.element = /*element*/ ctx[1];
			link.$set(link_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(link, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$2.name,
		type: "if",
		source: "(329:42) ",
		ctx
	});

	return block;
}

// (327:49) 
function create_if_block_3$2(ctx) {
	let referencefootnote;
	let current;

	referencefootnote = new ReferenceFootnote({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(referencefootnote.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(referencefootnote, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const referencefootnote_changes = {};
			if (dirty & /*cm*/ 1) referencefootnote_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) referencefootnote_changes.element = /*element*/ ctx[1];
			referencefootnote.$set(referencefootnote_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(referencefootnote.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(referencefootnote.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(referencefootnote, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$2.name,
		type: "if",
		source: "(327:49) ",
		ctx
	});

	return block;
}

// (325:46) 
function create_if_block_2$3(ctx) {
	let footnote;
	let current;

	footnote = new Footnote({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(footnote.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(footnote, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const footnote_changes = {};
			if (dirty & /*cm*/ 1) footnote_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) footnote_changes.element = /*element*/ ctx[1];
			footnote.$set(footnote_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(footnote.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(footnote.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(footnote, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$3.name,
		type: "if",
		source: "(325:46) ",
		ctx
	});

	return block;
}

// (323:39) 
function create_if_block_1$5(ctx) {
	let citation;
	let current;

	citation = new Citation({
			props: {
				cm: /*cm*/ ctx[0],
				element: /*element*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(citation.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(citation, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const citation_changes = {};
			if (dirty & /*cm*/ 1) citation_changes.cm = /*cm*/ ctx[0];
			if (dirty & /*element*/ 2) citation_changes.element = /*element*/ ctx[1];
			citation.$set(citation_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(citation.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(citation.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(citation, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(323:39) ",
		ctx
	});

	return block;
}

// (321:2) {#if !element}
function create_if_block$8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Empty!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(321:2) {#if !element}",
		ctx
	});

	return block;
}

function create_fragment$i(ctx) {
	let div;
	let show_if;
	let show_if_1;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;

	const if_block_creators = [
		create_if_block$8,
		create_if_block_1$5,
		create_if_block_2$3,
		create_if_block_3$2,
		create_if_block_4$2,
		create_if_block_5,
		create_if_block_6,
		create_if_block_7
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*element*/ ctx[1]) return 0;
		if (/*element*/ ctx[1].type == "citation") return 1;
		if (/*element*/ ctx[1].type == "footnote-inline") return 2;
		if (/*element*/ ctx[1].type == "footnote-reference") return 3;
		if (/*element*/ ctx[1].type == "link-inline") return 4;
		if (dirty & /*element*/ 2) show_if = !!/*element*/ ctx[1].type.includes("link-reference");
		if (show_if) return 5;
		if (/*element*/ ctx[1].type == "image-inline") return 6;
		if (dirty & /*element*/ 2) show_if_1 = !!/*element*/ ctx[1].type.includes("image-reference");
		if (show_if_1) return 7;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			attr_dev(div, "id", "wizard");
			set_style(div, "left", /*leftPos*/ ctx[5]);
			set_style(div, "top", /*topPos*/ ctx[6]);
			attr_dev(div, "class", "below svelte-1pgcool");
			attr_dev(div, "tabindex", "-1");
			toggle_class(div, "isVisible", /*isVisible*/ ctx[3]);
			toggle_class(div, "isIncomplete", /*isIncomplete*/ ctx[4]);
			add_location(div, file$h, 308, 0, 8652);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			/*div_binding*/ ctx[13](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[12]), false, false, true),
					listen_dev(div, "keydown", /*onKeydown*/ ctx[8], false, false, false),
					listen_dev(div, "focusout", /*onFocusout*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				} else {
					if_block = null;
				}
			}

			if (!current || dirty & /*leftPos*/ 32) {
				set_style(div, "left", /*leftPos*/ ctx[5]);
			}

			if (!current || dirty & /*topPos*/ 64) {
				set_style(div, "top", /*topPos*/ ctx[6]);
			}

			if (dirty & /*isVisible*/ 8) {
				toggle_class(div, "isVisible", /*isVisible*/ ctx[3]);
			}

			if (dirty & /*isIncomplete*/ 16) {
				toggle_class(div, "isIncomplete", /*isIncomplete*/ ctx[4]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			/*div_binding*/ ctx[13](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$i.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$i($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Wizard", slots, []);
	let { cm = null } = $$props;
	let { textMarker = null } = $$props;
	let { type = "" } = $$props;
	let element = null;
	let el = null; // DOM element, set with bind:this
	let isVisible = false;
	let isIncomplete = false;
	let leftPos = "-5000px"; // Default value
	let topPos = "0px";

	// On changes, check if target element was affected.
	// If yes, get the updated element.
	cm.on("changes", (cm, changes) => {
		if (!isVisible) return;
		const elementWasAffected = changes.find(({ from, to }) => from.line == element.line && to.line == element.line && element.start <= from.ch && element.end >= to.ch) !== undefined;

		// Get the updated target element.
		// We assume line and start will be the same, before and after.
		// NOTE: This may not always be true! This is a potential bug source.
		if (elementWasAffected) {
			// if (!textMarker) {
			// }
			$$invalidate(9, textMarker = cm.findMarksAt({ line: element.line, ch: element.start }));

			// const { from } = textMarker.find()
			$$invalidate(1, element = getElementAt(cm, element.line, element.start + 1));

			if (!element) hide();
		}
	});

	// ------- EVENT HANDLERS ------ //
	function onFocusout(evt) {
		if (!el.contains(evt.relatedTarget)) {
			hide();
		}
	}

	/**
 * Handle tabbing and backspace/delete
 * @param evt
 */
	function onKeydown(evt) {
		const fieldsAreNotFocused = document.activeElement == el;

		if (evt.key == "Tab" && !evt.altKey) {
			tab(evt);
		} else if (evt.key == "Tab" && evt.altKey) {
			altTab(evt);
		} else if (evt.key.equalsAny("Backspace", "Delete") && fieldsAreNotFocused) {
			deleteTarget();
		} else if (evt.key == "Enter" || evt.key == "Escape") {
			cm.focus();
		} else if (evt.key.equalsAny("ArrowLeft", "ArrowRight") && fieldsAreNotFocused) {
			// Close wizard if user presses arrow while no fields are selected
			cm.focus();

			cm.triggerOnKeyDown({
				type: "keydown",
				keyCode: evt.key == "ArrowLeft" ? 37 : 39,
				altKey: false,
				shiftKey: false
			});
		}
	}

	/**
 * Prevent CodeMirror from taking back focus when we try to interact with the Wizard. This seems to be due to CodeMirror's "ensureFocus" function.
 */
	// function onForwardedInteraction(evt) {
	//   if (evt.detail.type == 'keydown' && evt.detail.key == 'Enter') {
	//     evt.detail.preventDefault()
	//     cm.dispatch({ type: 'deSelectMark' })
	//   }
	// }
	// ------- ACTIONS ------ //
	/**
 * Delete the target range
 */
	function deleteTarget() {
		const { from, to } = textMarker.find();
		cm.focus();
		cm.replaceRange("", from, to);
	}

	/**
 * Tab to the prev/next input in the wizard
 */
	function tab(evt) {
		evt.preventDefault();
		const focusables = Array.from(el.querySelectorAll(`[contenteditable]:not([tabindex="-1"])`));
		const indexOfFocused = focusables.indexOf(document.activeElement);
		const nothingFocused = indexOfFocused == -1;
		const firstItemFocused = indexOfFocused == 0;
		const lastItemFocused = indexOfFocused == focusables.length - 1;
		let inputToFocus;

		if (!evt.shiftKey) {
			// Tab to next focusable element.
			// If at end, loop back and focus first element.
			inputToFocus = nothingFocused || lastItemFocused
			? focusables[0]
			: focusables[indexOfFocused + 1];
		} else {
			// Tab backwards to previous focusable element.
			// If at start, focus last element.
			inputToFocus = nothingFocused || firstItemFocused
			? focusables[focusables.length - 1]
			: focusables[indexOfFocused - 1];
		}

		if (inputToFocus) {
			// We can't call `select()` on contenteditable, so instead we have to focus it, 
			// then call `selectAll` a moment later (or else browser selects previous scope).
			if (inputToFocus.hasAttribute("contenteditable")) {
				inputToFocus.focus();
				setTimeout(() => document.execCommand("selectAll", false, null), 1);
			} else {
				inputToFocus.select();
			}
		}
	}

	/**
 * Forward alt-tab events to `cm` by using undocumented `cm.triggerOnKeyDown` function. Per https://discuss.codemirror.net/t/signal-keydown/548/2. This ensures that alt-tab events work consistently, from user-pov, regardless of what element is focused (cm or widget).
 * @param evt
 */
	function altTab(evt) {
		evt.preventDefault();
		cm.focus();

		cm.triggerOnKeyDown({
			type: "keydown",
			keyCode: 9,
			altKey: true,
			shiftKey: evt.shiftKey
		});
	}

	async function show(newTextMarker) {
		$$invalidate(9, textMarker = newTextMarker);
		const { from } = textMarker.find();

		// Get the element we're editing
		$$invalidate(1, element = getElementAt(cm, from.line, from.ch + 1));

		// Update position
		// Docs: https://codemirror.net/doc/manual.html#charCoords
		const paddingOnLeftSideOfEditor = cm.display.lineSpace.offsetLeft;

		$$invalidate(5, leftPos = `${cm.cursorCoords(true, "local").left + paddingOnLeftSideOfEditor}px`);
		$$invalidate(6, topPos = `${cm.cursorCoords(true, "local").bottom + 10}px`);

		// Autoscroll to ensure wizard is visible. We need to call this manually, AFTER the wizard has repositioned itself (using `tick`), so autoscroll takes the wizard element into account. Otherwise it either doesn't fire, or fires too early (e.g. when the selection was set that triggered the wizard opening)
		await tick$1();

		cm.scrollIntoView(null);

		// Error
		$$invalidate(4, isIncomplete = element.isIncomplete);

		// Make visible
		$$invalidate(3, isVisible = true);

		// Focus
		el.focus();
	}

	/**
 * Hide wizard by toggling `isVisible` class and positioning off-screen.
 */
	function hide() {
		$$invalidate(1, element = undefined);
		$$invalidate(3, isVisible = false);
		$$invalidate(5, leftPos = "-5000px"); // Default value
		$$invalidate(6, topPos = "0px"); // Default value
	}

	const writable_props = ["cm", "textMarker", "type"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Wizard> was created with unknown prop '${key}'`);
	});

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(2, el);
		});
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("textMarker" in $$props) $$invalidate(9, textMarker = $$props.textMarker);
		if ("type" in $$props) $$invalidate(10, type = $$props.type);
	};

	$$self.$capture_state = () => ({
		tick: tick$1,
		Citation,
		Footnote,
		ReferenceFootnote,
		Link,
		ReferenceLink,
		Image,
		ReferenceImage,
		getLineSpans,
		getElementAt,
		cm,
		textMarker,
		type,
		element,
		el,
		isVisible,
		isIncomplete,
		leftPos,
		topPos,
		onFocusout,
		onKeydown,
		deleteTarget,
		tab,
		altTab,
		show,
		hide
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(0, cm = $$props.cm);
		if ("textMarker" in $$props) $$invalidate(9, textMarker = $$props.textMarker);
		if ("type" in $$props) $$invalidate(10, type = $$props.type);
		if ("element" in $$props) $$invalidate(1, element = $$props.element);
		if ("el" in $$props) $$invalidate(2, el = $$props.el);
		if ("isVisible" in $$props) $$invalidate(3, isVisible = $$props.isVisible);
		if ("isIncomplete" in $$props) $$invalidate(4, isIncomplete = $$props.isIncomplete);
		if ("leftPos" in $$props) $$invalidate(5, leftPos = $$props.leftPos);
		if ("topPos" in $$props) $$invalidate(6, topPos = $$props.topPos);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		cm,
		element,
		el,
		isVisible,
		isIncomplete,
		leftPos,
		topPos,
		onFocusout,
		onKeydown,
		textMarker,
		type,
		show,
		mousedown_handler,
		div_binding
	];
}

class Wizard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1$1.getElementById("svelte-1pgcool-style")) add_css$i();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, { cm: 0, textMarker: 9, type: 10, show: 11 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Wizard",
			options,
			id: create_fragment$i.name
		});
	}

	get cm() {
		return this.$$.ctx[0];
	}

	set cm(cm) {
		this.$set({ cm });
		flush();
	}

	get textMarker() {
		return this.$$.ctx[9];
	}

	set textMarker(textMarker) {
		this.$set({ textMarker });
		flush();
	}

	get type() {
		return this.$$.ctx[10];
	}

	set type(type) {
		this.$set({ type });
		flush();
	}

	get show() {
		return this.$$.ctx[11];
	}

	set show(value) {
		throw new Error("<Wizard>: Cannot set read-only property 'show'");
	}
}

/* src/js/renderer/component/main/Autocomplete.svelte generated by Svelte v3.30.1 */
const file$i = "src/js/renderer/component/main/Autocomplete.svelte";

function add_css$j() {
	var style = element("style");
	style.id = "svelte-boq74e-style";
	style.textContent = "@keyframes svelte-boq74e-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}ul.svelte-boq74e.svelte-boq74e{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;backdrop-filter:blur(8px);position:fixed;user-select:none;z-index:100;overflow:hidden;position:absolute;border-radius:2.5px;list-style:none;margin:0;width:200px;padding:0;background:var(--menuBackgroundColor)}@media(prefers-color-scheme: dark){ul.svelte-boq74e.svelte-boq74e{border:1px solid rgba(255, 255, 255, 0.2);box-shadow:0 0 0 0.5px black}}@media(prefers-color-scheme: light){ul.svelte-boq74e.svelte-boq74e{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.5), 0 0 0 0.5px rgba(0, 0, 0, 0.12), 0 5px 16px 0 rgba(0, 0, 0, 0.2)}}li.svelte-boq74e.svelte-boq74e{margin:0;height:20px;padding:0 5px;display:flex;cursor:default;white-space:nowrap;outline:none;align-items:center;user-select:none}li.selected.svelte-boq74e.svelte-boq74e{background-color:var(--controlAccentColor)}li.selected.svelte-boq74e .label.svelte-boq74e{color:var(--selectedMenuItemTextColor)}li.selected.svelte-boq74e .preview.svelte-boq74e{color:var(--selectedMenuItemTextColor);opacity:0.7}.label.svelte-boq74e.svelte-boq74e{color:var(--labelColor);flex-grow:1;margin:-1px 0 0 0}.preview.svelte-boq74e.svelte-boq74e{font-family:\"SFMono-Regular\";font-size:0.9em;flex-shrink:0;color:var(--secondaryLabelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i].label;
	child_ctx[19] = list[i].preview;
	child_ctx[21] = i;
	return child_ctx;
}

// (358:6) {#if preview}
function create_if_block$9(ctx) {
	let span;
	let t_value = /*preview*/ ctx[19] + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "class", "preview svelte-boq74e");
			add_location(span, file$i, 358, 8, 9923);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 16 && t_value !== (t_value = /*preview*/ ctx[19] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$9.name,
		type: "if",
		source: "(358:6) {#if preview}",
		ctx
	});

	return block;
}

// (350:2) {#each items as { label, preview }
function create_each_block(ctx) {
	let li;
	let span;
	let t0_value = /*label*/ ctx[18] + "";
	let t0;
	let t1;
	let t2;
	let mounted;
	let dispose;
	let if_block = /*preview*/ ctx[19] && create_if_block$9(ctx);

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[10](/*index*/ ctx[21]);
	}

	const block = {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			attr_dev(span, "class", "label svelte-boq74e");
			add_location(span, file$i, 356, 6, 9859);
			attr_dev(li, "class", "svelte-boq74e");
			toggle_class(li, "selected", /*index*/ ctx[21] == /*selectedIndex*/ ctx[3]);
			add_location(li, file$i, 350, 4, 9682);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span);
			append_dev(span, t0);
			append_dev(li, t1);
			if (if_block) if_block.m(li, null);
			append_dev(li, t2);

			if (!mounted) {
				dispose = [
					listen_dev(li, "mouseenter", mouseenter_handler, false, false, false),
					listen_dev(li, "mousedown", prevent_default(/*mousedown_handler*/ ctx[9]), false, true, false),
					listen_dev(li, "mouseup", /*selectItem*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 16 && t0_value !== (t0_value = /*label*/ ctx[18] + "")) set_data_dev(t0, t0_value);

			if (/*preview*/ ctx[19]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$9(ctx);
					if_block.c();
					if_block.m(li, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*selectedIndex*/ 8) {
				toggle_class(li, "selected", /*index*/ ctx[21] == /*selectedIndex*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(350:2) {#each items as { label, preview }",
		ctx
	});

	return block;
}

function create_fragment$j(ctx) {
	let ul;
	let each_value = /*items*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(ul, "class", "autocomplete svelte-boq74e");
			set_style(ul, "left", /*leftPos*/ ctx[1]);
			set_style(ul, "top", /*topPos*/ ctx[2]);
			attr_dev(ul, "tabindex", "0");
			toggle_class(ul, "isVisible", /*isVisible*/ ctx[0]);
			add_location(ul, file$i, 343, 0, 9531);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selectedIndex, selectItem, items*/ 56) {
				each_value = /*items*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*leftPos*/ 2) {
				set_style(ul, "left", /*leftPos*/ ctx[1]);
			}

			if (dirty & /*topPos*/ 4) {
				set_style(ul, "top", /*topPos*/ ctx[2]);
			}

			if (dirty & /*isVisible*/ 1) {
				toggle_class(ul, "isVisible", /*isVisible*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$j.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$j($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Autocomplete", slots, []);
	let { cm } = $$props;
	let { selectedOptionIndex = 0 } = $$props;
	let isVisible = false;
	let leftPos = "-5000px"; // Default value
	let topPos = "0px";
	let targetFrom;
	let targetTo;
	let selectedIndex = 0;
	let items = [];
	let mode = ""; // 'element', 'citation', etc.
	let typedText = "";

	// Close the wizard when this CM instance is de-focused.
	// E.g. When other panel is selected, or user clicks on sidebar.
	cm.on("blur", (cm, evt) => {
		if (isVisible) hide();
	});

	// Arrow up/down: cycle through the options
	// Enter: select item and close
	// Esc: close
	cm.on("keydown", (cm, evt) => {
		if (isVisible && !evt.metaKey) {
			switch (evt.key) {
				case "ArrowUp":
					evt.preventDefault();
					if (selectedIndex > 0) $$invalidate(3, selectedIndex--, selectedIndex);
					break;
				case "ArrowDown":
					evt.preventDefault();
					if (selectedIndex < items.length - 1) $$invalidate(3, selectedIndex++, selectedIndex);
					break;
				case "Enter":
					selectItem();
					evt.preventDefault();
					break;
				case "Escape":
					evt.preventDefault();
					hide();
					break;
			}
		}
	});

	// Update the items as the user types
	// (usually to narrow the scope).
	// cm.on('beforeChange', (cm, change) => {
	//   if (!isVisible) return
	//   const { from, to, text, origin, update } = change
	//   if (isVisible) {
	//     if (origin == '+input') {
	//       targetTo.ch += text[0].length
	//     } else if (origin == '+delete') {
	//       targetTo.ch = from.ch
	//     }
	//   }
	//   console.log(change)
	//   // filterItems()
	// })
	cm.on("change", (cm, change) => {
		if (!isVisible) return;
		const { from, to, text, origin, update } = change;

		if (isVisible) {
			if (origin == "+input") {
				targetTo.ch += text[0].length;
			} else if (origin == "+delete") {
				targetTo.ch = from.ch;
			}
		}

		filterItems();
	});

	cm.on("cursorActivity", cm => {
		if (!isVisible) return;
		const from = cm.getCursor("from");
		const to = cm.getCursor("to");
		const isOutsideLine = from.line !== targetFrom.line;
		const isOutsideLeftBracket = from.ch < targetFrom.ch;
		const isOutsideRightBracket = to.ch > targetTo.ch;
		const shouldHide = isOutsideLine || isOutsideLeftBracket || isOutsideRightBracket;
		if (shouldHide) hide();
	});

	// Close if the cursor has left the brackets
	// cm.on('beforeSelectionChange', (cm, change) => {
	//   if (!isVisible) return
	//   const { ranges, origin, update } = change
	//   const { from, to } = getFromAndTo(ranges[0])
	//   const multipleSelections = ranges.length > 1
	//   const isOutsideLine = from.line !== targetFrom.line
	//   const isOutsideLeftBracket = from.ch < targetFrom.ch
	//   const isOutsideRightBracket = to.ch > targetTo.ch
	//   const shouldHide = 
	//     multipleSelections || 
	//     isOutsideLine || 
	//     isOutsideLeftBracket ||
	//     isOutsideRightBracket
	//   if (shouldHide) hide()
	// })
	/**
 * Write to doc. 
 * What is written depends on the mode and the item selected.
 */
	async function selectItem() {
		const selectedItem = items[selectedIndex];
		const selectedText = cm.getRange(targetFrom, targetTo);
		const noTextIsSelected = targetFrom.line == targetTo.line && targetFrom.ch == targetTo.ch;
		const line = targetFrom.line;

		if (mode == "elements") {
			switch (selectedItem.label) {
				case "Link":
					writeToDoc(cm, `[${selectedText}]()`, line, targetFrom.ch - 1, targetTo.ch + 1);
					break;
				case "Image":
					writeToDoc(cm, `![${selectedText}]()`, line, targetFrom.ch - 1, targetTo.ch + 1);
					break;
				case "Footnote":
					writeToDoc(cm, `^[${selectedText}]`, line, targetFrom.ch - 1, targetTo.ch + 1);
					break;
				case "Citation":
					writeToDoc(cm, `[@${selectedText}]`, line, targetFrom.ch - 1, targetTo.ch + 1);
					break;
			}

			// Wait for cm to update with changes
			await tick$1();

			// Select new element
			const newElement = getElementAt(cm, line, targetFrom.ch);

			// Set cursor position. 
			if (selectedItem.label.equalsAny("Link")) {
				const { line, text, url } = newElement;

				if (newElement.text.string == "") {
					// If text is empty, place inside brackets, ready to enter text. 
					// [|]()
					cm.setSelection({ line, ch: text.start }, { line, ch: text.end });
				} else {
					// Else place inside parentheses, ready to enter URL. 
					// [text](|)
					cm.setSelection({ line, ch: url.start }, { line, ch: url.end });
				}
			} else if (selectedItem.label == "Image") {
				// Place inside parentheses, ready to enter URL. 
				// ![](|)
				const { line, url } = newElement;

				cm.setSelection({ line, ch: url.start }, { line, ch: url.end });
			} else if (selectedItem.label == "Footnote") {
				const { line, content } = newElement;

				if (content.string == "") {
					// If content is empty, place inside brackets, ready to enter text. 
					// ^[|]
					cm.setSelection({ line, ch: content.start }, { line, ch: content.start });
				} else {
					// Else place at end of brackets, ready to continue.
					cm.setSelection({ line, ch: content.end }, { line, ch: content.end });
				}
			}

			// Open the wizard to the new element
			if (!window.state.sourceMode) {
				// newElement.isNew = true
				const textMarker = cm.findMarksAt({ line, ch: newElement.start + 1 })[0];

				textMarker.component.openWizard();
			}
		} // tabToNextMark(cm)

		hide();
	}

	/**
 * Filter items based on what user has typed.
 * Get string encapsulating brackets, contents, and preceding 1 character.
 * Run narrowScope() as the user types. If the string matches any of the items,
 * narrow to show only those items.
 * If there are no matches, show all items
 */
	function filterItems() {
		const typedText = cm.getRange(
			{
				line: targetFrom.line,
				ch: targetFrom.ch - 2
			},
			{ line: targetTo.line, ch: targetTo.ch + 1 }
		);

		const textMatchesAnItem = items.some(i => i.start && typedText.startsWith(i.start));

		if (textMatchesAnItem) {
			$$invalidate(4, items = getStartingItems().filter(i => {
				return typedText.startsWith(i.start);
			}));
		} else {
			$$invalidate(4, items = getStartingItems());
		}
	}

	function getStartingItems() {
		if (mode == "elements") {
			return [
				{
					label: "Link",
					preview: "[...](...)",
					start: ""
				},
				{
					label: "Image",
					preview: "![...](...)",
					start: "!["
				},
				{
					label: "Footnote",
					preview: "^[...]",
					start: "^["
				},
				{
					label: "Citation",
					preview: "[@...]",
					start: "[@"
				}
			];
		} else if (mode == "citation") {
			return [{ label: "Johnson and Change, 2012" }];
		}
	}

	function show(menuMode) {
		mode = menuMode;
		$$invalidate(4, items = getStartingItems());
		$$invalidate(0, isVisible = true);
		$$invalidate(3, selectedIndex = 0);
		targetFrom = cm.getCursor("from");
		targetTo = cm.getCursor("to");

		// const { from, to } = getFromAndTo(cm.listSelections()[0])
		// targetFrom = {...from}
		// targetTo = {...to}
		filterItems();

		// Docs: https://codemirror.net/doc/manual.html#charCoords
		const paddingOnLeftSideOfEditor = cm.display.lineSpace.offsetLeft;

		$$invalidate(1, leftPos = `${cm.cursorCoords(true, "local").left + paddingOnLeftSideOfEditor}px`);
		$$invalidate(2, topPos = `${cm.cursorCoords(true, "local").bottom + 14}px`);
	}

	/**
 * Hide the menu
 */
	function hide() {
		$$invalidate(0, isVisible = false);
		targetFrom = null;
		targetTo = null;
		$$invalidate(1, leftPos = "-5000px");
		$$invalidate(2, topPos = "0px");
	}

	const writable_props = ["cm", "selectedOptionIndex"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Autocomplete> was created with unknown prop '${key}'`);
	});

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	const mouseenter_handler = index => $$invalidate(3, selectedIndex = index);

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(6, cm = $$props.cm);
		if ("selectedOptionIndex" in $$props) $$invalidate(7, selectedOptionIndex = $$props.selectedOptionIndex);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		tick: tick$1,
		getFromAndTo,
		writeToDoc,
		getElementAt,
		cm,
		selectedOptionIndex,
		isVisible,
		leftPos,
		topPos,
		targetFrom,
		targetTo,
		selectedIndex,
		items,
		mode,
		typedText,
		selectItem,
		filterItems,
		getStartingItems,
		show,
		hide
	});

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(6, cm = $$props.cm);
		if ("selectedOptionIndex" in $$props) $$invalidate(7, selectedOptionIndex = $$props.selectedOptionIndex);
		if ("isVisible" in $$props) $$invalidate(0, isVisible = $$props.isVisible);
		if ("leftPos" in $$props) $$invalidate(1, leftPos = $$props.leftPos);
		if ("topPos" in $$props) $$invalidate(2, topPos = $$props.topPos);
		if ("targetFrom" in $$props) targetFrom = $$props.targetFrom;
		if ("targetTo" in $$props) targetTo = $$props.targetTo;
		if ("selectedIndex" in $$props) $$invalidate(3, selectedIndex = $$props.selectedIndex);
		if ("items" in $$props) $$invalidate(4, items = $$props.items);
		if ("mode" in $$props) mode = $$props.mode;
		if ("typedText" in $$props) typedText = $$props.typedText;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		isVisible,
		leftPos,
		topPos,
		selectedIndex,
		items,
		selectItem,
		cm,
		selectedOptionIndex,
		show,
		mousedown_handler,
		mouseenter_handler
	];
}

class Autocomplete extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-boq74e-style")) add_css$j();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, { cm: 6, selectedOptionIndex: 7, show: 8 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Autocomplete",
			options,
			id: create_fragment$j.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*cm*/ ctx[6] === undefined && !("cm" in props)) {
			console.warn("<Autocomplete> was created without expected prop 'cm'");
		}
	}

	get cm() {
		return this.$$.ctx[6];
	}

	set cm(cm) {
		this.$set({ cm });
		flush();
	}

	get selectedOptionIndex() {
		return this.$$.ctx[7];
	}

	set selectedOptionIndex(selectedOptionIndex) {
		this.$set({ selectedOptionIndex });
		flush();
	}

	get show() {
		return this.$$.ctx[8];
	}

	set show(value) {
		throw new Error("<Autocomplete>: Cannot set read-only property 'show'");
	}
}

/* src/js/renderer/component/main/preview/Preview.svelte generated by Svelte v3.30.1 */

const file$j = "src/js/renderer/component/main/preview/Preview.svelte";

function add_css$k() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJldmlldy5zdmVsdGUiLCJzb3VyY2VzIjpbIlByZXZpZXcuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cbiAgZXhwb3J0IGxldCBjbSA9IG51bGxcbiAgZXhwb3J0IGxldCBlbGVtZW50ID0gbnVsbFxuICBleHBvcnQgbGV0IGVsID0gbnVsbCAvLyBET00gZWxlbWVudCwgc2V0IHdpdGggYmluZDp0aGlzXG5cbiAgbGV0IGlzVmlzaWJsZSA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFNob3cgd2l6YXJkIGJ5IHRvZ2dsaW5nICdpc1Zpc2libGUnIGNsYXNzLCBhbmQgc2V0dGluZyBgdG9wYCBhbmQgYGxlZnRgIHBvc2l0aW9ucy5cbiAgICovXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaG93KG5ld0VsZW1lbnQpIHtcblxuICAgIGVsZW1lbnQgPSBuZXdFbGVtZW50XG5cbiAgICAvLyBVcGRhdGUgcG9zaXRpb25cbiAgICAvLyBEb2NzOiBodHRwczovL2NvZGVtaXJyb3IubmV0L2RvYy9tYW51YWwuaHRtbCNjaGFyQ29vcmRzXG4gICAgY29uc3QgcGFkZGluZ09uTGVmdFNpZGVPZkVkaXRvciA9IGNtLmRpc3BsYXkubGluZVNwYWNlLm9mZnNldExlZnRcbiAgICBsZWZ0UG9zID0gYCR7XG4gICAgICBjbS5jdXJzb3JDb29yZHModHJ1ZSwgJ2xvY2FsJykubGVmdCArIHBhZGRpbmdPbkxlZnRTaWRlT2ZFZGl0b3JcbiAgICB9cHhgXG4gICAgdG9wUG9zID0gYCR7Y20uY3Vyc29yQ29vcmRzKHRydWUsICdsb2NhbCcpLmJvdHRvbSArIDEwfXB4YFxuXG4gICAgLy8gQXV0b3Njcm9sbCB0byBlbnN1cmUgd2l6YXJkIGlzIHZpc2libGUuIFdlIG5lZWQgdG8gY2FsbCB0aGlzIG1hbnVhbGx5LCBBRlRFUiB0aGUgd2l6YXJkIGhhcyByZXBvc2l0aW9uZWQgaXRzZWxmICh1c2luZyBgdGlja2ApLCBzbyBhdXRvc2Nyb2xsIHRha2VzIHRoZSB3aXphcmQgZWxlbWVudCBpbnRvIGFjY291bnQuIE90aGVyd2lzZSBpdCBlaXRoZXIgZG9lc24ndCBmaXJlLCBvciBmaXJlcyB0b28gZWFybHkgKGUuZy4gd2hlbiB0aGUgc2VsZWN0aW9uIHdhcyBzZXQgdGhhdCB0cmlnZ2VyZWQgdGhlIHdpemFyZCBvcGVuaW5nKVxuICAgIGF3YWl0IHRpY2soKVxuICAgIGNtLnNjcm9sbEludG9WaWV3KG51bGwpXG5cbiAgICAvLyBFcnJvclxuICAgIC8vIGlzRXJyb3IgPSB0YXJnZXQuZXJyb3JcblxuICAgIC8vIE1ha2UgdmlzaWJsZVxuICAgIGlzVmlzaWJsZSA9IHRydWVcblxuICAgIC8vIEZvY3VzXG4gICAgZWwuZm9jdXMoKVxuICB9XG5cbiAgLyoqXG4gICogSGlkZSB3aXphcmQgYnkgdG9nZ2xpbmcgYGlzVmlzaWJsZWAgY2xhc3MgYW5kIHBvc2l0aW9uaW5nIG9mZi1zY3JlZW4uXG4gICovXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaXNWaXNpYmxlID0gZmFsc2VcbiAgICAvLyBSZXNldCB0byBkZWZhdWx0IHZhbHVlc1xuICAgIGxlZnRQb3MgPSAnLTUwMDBweCdcbiAgICB0b3BQb3MgPSAnMHB4J1xuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn08L3N0eWxlPlxuXG48c3ZlbHRlOm9wdGlvbnMgYWNjZXNzb3JzPXt0cnVlfSAvPlxuPGRpdiBcbiAgaWQ9XCJwcmV2aWV3XCJcbiAgYmluZDp0aGlzPXtlbH1cbiAgY2xhc3M6dmlzaWJsZT17aXNWaXNpYmxlfVxuICB0YWJpbmRleD1cIi0xXCJcbj5cblxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$k(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "id", "preview");
			attr_dev(div, "tabindex", "-1");
			toggle_class(div, "visible", /*isVisible*/ ctx[1]);
			add_location(div, file$j, 59, 0, 1597);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			/*div_binding*/ ctx[5](div);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isVisible*/ 2) {
				toggle_class(div, "visible", /*isVisible*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[5](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$k.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$k($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Preview", slots, []);
	let { cm = null } = $$props;
	let { element = null } = $$props;
	let { el = null } = $$props; // DOM element, set with bind:this
	let isVisible = false;

	async function show(newElement) {
		$$invalidate(2, element = newElement);

		// Update position
		// Docs: https://codemirror.net/doc/manual.html#charCoords
		const paddingOnLeftSideOfEditor = cm.display.lineSpace.offsetLeft;

		leftPos = `${cm.cursorCoords(true, "local").left + paddingOnLeftSideOfEditor}px`;
		topPos = `${cm.cursorCoords(true, "local").bottom + 10}px`;

		// Autoscroll to ensure wizard is visible. We need to call this manually, AFTER the wizard has repositioned itself (using `tick`), so autoscroll takes the wizard element into account. Otherwise it either doesn't fire, or fires too early (e.g. when the selection was set that triggered the wizard opening)
		await tick();

		cm.scrollIntoView(null);

		// Error
		// isError = target.error
		// Make visible
		$$invalidate(1, isVisible = true);

		// Focus
		el.focus();
	}

	/**
* Hide wizard by toggling `isVisible` class and positioning off-screen.
*/
	function hide() {
		$$invalidate(1, isVisible = false);

		// Reset to default values
		leftPos = "-5000px";

		topPos = "0px";
	}

	const writable_props = ["cm", "element", "el"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Preview> was created with unknown prop '${key}'`);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$set = $$props => {
		if ("cm" in $$props) $$invalidate(3, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(2, element = $$props.element);
		if ("el" in $$props) $$invalidate(0, el = $$props.el);
	};

	$$self.$capture_state = () => ({ cm, element, el, isVisible, show, hide });

	$$self.$inject_state = $$props => {
		if ("cm" in $$props) $$invalidate(3, cm = $$props.cm);
		if ("element" in $$props) $$invalidate(2, element = $$props.element);
		if ("el" in $$props) $$invalidate(0, el = $$props.el);
		if ("isVisible" in $$props) $$invalidate(1, isVisible = $$props.isVisible);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [el, isVisible, element, cm, show, div_binding];
}

class Preview extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$k();
		init(this, options, instance$k, create_fragment$k, safe_not_equal, { cm: 3, element: 2, el: 0, show: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Preview",
			options,
			id: create_fragment$k.name
		});
	}

	get cm() {
		return this.$$.ctx[3];
	}

	set cm(cm) {
		this.$set({ cm });
		flush();
	}

	get element() {
		return this.$$.ctx[2];
	}

	set element(element) {
		this.$set({ element });
		flush();
	}

	get el() {
		return this.$$.ctx[0];
	}

	set el(el) {
		this.$set({ el });
		flush();
	}

	get show() {
		return this.$$.ctx[4];
	}

	set show(value) {
		throw new Error("<Preview>: Cannot set read-only property 'show'");
	}
}

/* src/js/renderer/component/main/Editor.svelte generated by Svelte v3.30.1 */

const file$k = "src/js/renderer/component/main/Editor.svelte";

function add_css$l() {
	var style = element("style");
	style.id = "svelte-3al5si-style";
	style.textContent = "@keyframes svelte-3al5si-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.editor.svelte-3al5si{width:100%;height:100%;position:relative;overflow:hidden}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$l(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "editor svelte-3al5si");
			toggle_class(div, "isFocusedPanel", /*isFocusedPanel*/ ctx[0]);
			toggle_class(div, "visible", /*visible*/ ctx[1]);
			toggle_class(div, "metaKeyDown", /*$isMetaKeyDown*/ ctx[2]);
			add_location(div, file$k, 272, 0, 7294);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			/*div_binding*/ ctx[14](div);

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler*/ ctx[13], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isFocusedPanel*/ 1) {
				toggle_class(div, "isFocusedPanel", /*isFocusedPanel*/ ctx[0]);
			}

			if (dirty & /*visible*/ 2) {
				toggle_class(div, "visible", /*visible*/ ctx[1]);
			}

			if (dirty & /*$isMetaKeyDown*/ 4) {
				toggle_class(div, "metaKeyDown", /*$isMetaKeyDown*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[14](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$l.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function setEditorTheme() {
	
} // TODO

function instance$l($$self, $$props, $$invalidate) {
	let $state;
	let $project;
	let $isMetaKeyDown;
	let $markdownOptions;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(8, $state = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(10, $project = $$value));
	validate_store(isMetaKeyDown, "isMetaKeyDown");
	component_subscribe($$self, isMetaKeyDown, $$value => $$invalidate(2, $isMetaKeyDown = $$value));
	validate_store(markdownOptions, "markdownOptions");
	component_subscribe($$self, markdownOptions, $$value => $$invalidate(12, $markdownOptions = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Editor", slots, []);
	let { panel = {} } = $$props;
	let { doc = undefined } = $$props;
	let { isFocusedPanel = false } = $$props; // 1/18: Not using these yet
	let { visible = false } = $$props;
	let { width = 0 } = $$props;

	function refreshSize() {
		if (!cm) return;
		cm.refresh();
	}

	// Bindings
	let cm; // CodeMirror (Editor) instance

	let el; // This element

	/**
 * Handle panel changes. Determine what changed, and make the appropriate updates.
 */
	function onPanelChange() {
		if (!cm) return;

		// If status has changed...
		const statusHasChanged = panel.status !== cm.panel.status;

		const isNewDoc = panel.docId == "newDoc";

		// If doc has changed, load new one
		// This will also load initial doc, on Editor creation.
		const docHasChanged = panel.docId !== cm.panel.docId;

		if (docHasChanged) {
			saveCursorPosition(cm);

			if (isNewDoc) {
				loadEmptyDoc(cm);
			} else {
				loadDoc(cm, doc);
			}
		}

		// If save status has changed, and it's now "no unsaved changes", mark the doc clean
		// Per: https://codemirror.net/doc/manual.html#markClean
		const saveStatusHasChanged = cm.panel.unsavedChanges !== panel.unsavedChanges;

		if (saveStatusHasChanged) {
			if (!panel.unsavedChanges) {
				cm.doc.markClean();
			}
		}

		// Set cm.panel to a copy of panel when panel changes.
		cm.panel = { ...panel };
	}

	/**
 * When sourceMode changes, clear marks if true.
 * Else, if false, create marks.
 */
	function toggleSource() {
		if (!cm) return;

		// Clear current marks, regardless of sourceMode true/false.
		cm.getAllMarks().forEach(m => m.clear());

		if (!sourceMode) {
			markDoc(cm);
		}
	}

	/**
 * Save doc in the panel when the window requests it.
 */
	function windowStatusChanged() {
		if (!cm) return;

		if (windowStatus == "wantsToClose" && panel.unsavedChanges) {
			window.api.send("dispatch", {
				type: "SAVE_PANEL_CHANGES_SO_WE_CAN_CLOSE_WINDOW",
				panelIndex: panel.index,
				outgoingDoc: doc,
				outgoingDocData: cm.getValue(),
				isNewDoc: panel.docId == "newDoc"
			});
		}
	}

	function toggleMetaKeyClass() {
		if (!cm) return;
		cm.state.isMetaKeyDown = $isMetaKeyDown;
	}

	function setMarkdownOptions() {
		if (!cm) return;
		setMode(cm);
	}

	let removeListenerMethods = [];

	onMount(async () => {
		// ------ CREATE EDITOR INSTANCE ------ //
		cm = makeEditor(el);

		window.cmInstances.push(cm);

		// If the panel is focused, focus the CodeMirror instance
		if (isFocusedPanel) cm.focus();

		// Set `cm.panel` to a copy of panel
		// cm.panel = { ...panel }markdownOptions
		// ------ CREATE LISTENERS ------ //
		const newDocListener = window.api.receive("mainRequestsCreateNewDocInFocusedPanel", () => {
			const isNewDoc = panel.docId == "newDoc";

			if (isFocusedPanel) {
				window.api.send("dispatch", {
					type: "OPEN_NEW_DOC_IN_PANEL",
					panelIndex: panel.index,
					outgoingDoc: doc,
					outgoingDocData: panel.unsavedChanges ? getCmDataByPanelId(panel.id) : "",
					isNewDoc
				});
			}
		});

		// Save
		const saveListener = window.api.receive("mainRequestsSaveFocusedPanel", () => {
			if (isFocusedPanel && panel.unsavedChanges) {
				const isNewDoc = panel.docId == "newDoc";

				if (isNewDoc) {
					window.api.send("dispatch", {
						type: "SAVE_DOC_AS",
						panelIndex: panel.index,
						doc,
						data: cm.getValue(),
						isNewDoc
					});
				} else {
					window.api.send("dispatch", {
						type: "SAVE_DOC",
						panelIndex: panel.index,
						doc,
						data: cm.getValue()
					});
				}
			}
		});

		// Save As
		const saveAsListener = window.api.receive("mainRequestsSaveAsFocusedPanel", () => {
			if (isFocusedPanel) {
				const isNewDoc = panel.docId == "newDoc";

				window.api.send("dispatch", {
					type: "SAVE_DOC_AS",
					panelIndex: panel.index,
					doc,
					data: cm.getValue(),
					isNewDoc
				});
			}
		});

		// Save All
		const saveAllListener = window.api.receive("mainRequestsSaveAll", () => {
			if (panel.unsavedChanges) {
				const isNewDoc = panel.docId == "newDoc";

				if (isNewDoc) {
					window.api.send("dispatch", {
						type: "SAVE_DOC_AS",
						panelIndex: panel.index,
						doc,
						data: cm.getValue(),
						isNewDoc
					});
				} else {
					window.api.send("dispatch", {
						type: "SAVE_DOC",
						panelIndex: panel.index,
						doc,
						data: cm.getValue()
					});
				}
			}
		});

		removeListenerMethods.push(newDocListener, saveListener, saveAsListener, saveAllListener);

		// ------ CREATE COMPONENTS ------ //
		// Add wizard, autocomplete and preview components to CodeMirror's scroller element. If we don't, and instead were to define them as components here, in Editor.svelte,they would be siblings of the top-level CodeMirror element (which is added to the `el` div), and therefore NOT scroll with the editor.
		const autocomplete = new Autocomplete({
				target: cm.getScrollerElement(),
				props: { cm }
			});

		const preview = new Preview({
				target: cm.getScrollerElement(),
				props: { cm }
			});

		const wizard = new Wizard({
				target: cm.getScrollerElement(),
				props: { cm }
			});

		// Expose as props on `cm`
		cm.autocomplete = autocomplete;

		cm.preview = preview;
		cm.wizard = wizard;
	});

	onDestroy(() => {
		// Remove `window.api.receive` listeners
		removeListenerMethods.forEach(remove => remove());
	});

	const writable_props = ["panel", "doc", "isFocusedPanel", "visible", "width"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Editor> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(3, el);
		});
	}

	$$self.$$set = $$props => {
		if ("panel" in $$props) $$invalidate(4, panel = $$props.panel);
		if ("doc" in $$props) $$invalidate(5, doc = $$props.doc);
		if ("isFocusedPanel" in $$props) $$invalidate(0, isFocusedPanel = $$props.isFocusedPanel);
		if ("visible" in $$props) $$invalidate(1, visible = $$props.visible);
		if ("width" in $$props) $$invalidate(6, width = $$props.width);
	};

	$$self.$capture_state = () => ({
		state,
		project,
		isMetaKeyDown,
		markdownOptions,
		files,
		onMount,
		onDestroy,
		makeEditor,
		setMode,
		Wizard,
		Autocomplete,
		Preview,
		markDoc,
		loadDoc,
		saveCursorPosition,
		loadEmptyDoc,
		getCmDataByPanelId,
		panel,
		doc,
		isFocusedPanel,
		visible,
		width,
		refreshSize,
		cm,
		el,
		onPanelChange,
		toggleSource,
		windowStatusChanged,
		toggleMetaKeyClass,
		setEditorTheme,
		setMarkdownOptions,
		removeListenerMethods,
		sourceMode,
		$state,
		windowStatus,
		$project,
		$isMetaKeyDown,
		editorTheme,
		$markdownOptions
	});

	$$self.$inject_state = $$props => {
		if ("panel" in $$props) $$invalidate(4, panel = $$props.panel);
		if ("doc" in $$props) $$invalidate(5, doc = $$props.doc);
		if ("isFocusedPanel" in $$props) $$invalidate(0, isFocusedPanel = $$props.isFocusedPanel);
		if ("visible" in $$props) $$invalidate(1, visible = $$props.visible);
		if ("width" in $$props) $$invalidate(6, width = $$props.width);
		if ("cm" in $$props) cm = $$props.cm;
		if ("el" in $$props) $$invalidate(3, el = $$props.el);
		if ("removeListenerMethods" in $$props) removeListenerMethods = $$props.removeListenerMethods;
		if ("sourceMode" in $$props) $$invalidate(7, sourceMode = $$props.sourceMode);
		if ("windowStatus" in $$props) $$invalidate(9, windowStatus = $$props.windowStatus);
		if ("editorTheme" in $$props) $$invalidate(11, editorTheme = $$props.editorTheme);
	};

	let sourceMode;
	let windowStatus;
	let editorTheme;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width*/ 64) {
			// We have to call `cm.refresh()` when the panel size
			// changes or selections and cursors don't update.
			 (refreshSize());
		}

		if ($$self.$$.dirty & /*panel*/ 16) {
			 (onPanelChange());
		}

		if ($$self.$$.dirty & /*$state*/ 256) {
			 $$invalidate(7, sourceMode = $state.sourceMode);
		}

		if ($$self.$$.dirty & /*sourceMode*/ 128) {
			 (toggleSource());
		}

		if ($$self.$$.dirty & /*$project*/ 1024) {
			 $$invalidate(9, windowStatus = $project.window.status);
		}

		if ($$self.$$.dirty & /*windowStatus*/ 512) {
			 (windowStatusChanged());
		}

		if ($$self.$$.dirty & /*$isMetaKeyDown*/ 4) {
			 (toggleMetaKeyClass());
		}

		if ($$self.$$.dirty & /*$state*/ 256) {
			 $$invalidate(11, editorTheme = $state.theme.editorTheme);
		}

		if ($$self.$$.dirty & /*editorTheme*/ 2048) ;

		if ($$self.$$.dirty & /*$markdownOptions*/ 4096) {
			 (setMarkdownOptions());
		}
	};

	return [
		isFocusedPanel,
		visible,
		$isMetaKeyDown,
		el,
		panel,
		doc,
		width,
		sourceMode,
		$state,
		windowStatus,
		$project,
		editorTheme,
		$markdownOptions,
		click_handler,
		div_binding
	];
}

class Editor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-3al5si-style")) add_css$l();

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			panel: 4,
			doc: 5,
			isFocusedPanel: 0,
			visible: 1,
			width: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Editor",
			options,
			id: create_fragment$l.name
		});
	}

	get panel() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set panel(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get doc() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set doc(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isFocusedPanel() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isFocusedPanel(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/*
  Menu is a singleton, driven by:

  - Menu.svelte component. One per window. Created by Layout.svelte. Position, contents (etc) are dervied from...
  - menu store. Created here, in MenuManager.js. Is updated by closeMenu and openMenu functions, which are by called from both the Menu component, and by...
  - Components that use the Menu component, such as PopupButton. They call `openMenu` from their mousedown handlers, and pass in params, which openMenu then applies to the store.

  The components react to state changes in the `menu` store. But components do not modify state. Instead they call openMenu and closeMenu, which modify state.
  */

const menu = writable({
  isOpen: false,
  id: undefined, // Unique ID of the component that opened it
  items: [],
  selectedItem: undefined, 
  type: 'pulldown', // 'pulldown' or 'popup'
  compact: false,
  position: { x: 0, y: 0 },
  width: '0px', // E.g. '100px'
});

function closeMenu(selectedItem) {
  menu.update((oldState) => {
    return {
      ...oldState,
      selectedItem: selectedItem,
      isOpen: false
    }
  });
}

function openMenu(node, params) {
  const { x, y, width, height } = node.getBoundingClientRect();
  menu.update((oldState) => {
    return {
      ...oldState,
      ...params,
      position: { 
        x, 
        y: y + height
      },
      isOpen: true
    }
  });
}

const tooltip = writable({ 
  status: 'hide', // 'show', 'hide', or 'hideAfterDelay'
  text: '', 
  x: 0, 
  y: 0 
});

/**
 * Tooltip is a singleton component attached to the top-level component for each window. We store a reference to it in the StateManager (as a `tooltip` store). And we update it's value here. NOTE: If the parent component is not enabled, we don't show the tooltip.
 * @param {*} node 
 * @param {*} params - Object: `{ text: 'Hello!', enabled: true }`
 */
function setTooltip(node, params) {

  // Set text value
  const { text } = params;

  // Set initial `enabled` value. This is updated in `update` function.
  let enabled = params.enabled;

  function onMouseEnter(evt) {
    if (!enabled) return
    tooltip.set({
      status: 'show',
      text: text,
      x: evt.clientX,
      y: evt.clientY + 4
    });
  }

  function onMouseDown() {
    if (!enabled) return
    tooltip.set({
      status: 'hide',
      text: '',
      x: 0,
      y: 0
    });
  }

  function onMouseLeave(evt) {
    if (!enabled) return
    tooltip.set({
      status: 'hideAfterDelay',
      text: '',
      x: 0,
      y: 0
    });
  }

  node.addEventListener('mouseenter', onMouseEnter);
  node.addEventListener('mousedown', onMouseDown);
  node.addEventListener('mouseleave', onMouseLeave);

  return {
    update(newParams) {
      enabled = newParams.enabled;
    },
    
    destroy() {
      node.removeEventListener('mouseenter', onMouseEnter);
      node.removeEventListener('click', onMouseDown);
      node.removeEventListener('mouseleave', onMouseLeave);
    }
  }
}

// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
// optimize the gzip compression for this alphabet.
let urlAlphabet =
  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

let nanoid = (size = 21) => {
  let id = '';
  // A compact alternative for `for (var i = 0; i < step; i++)`.
  let i = size;
  while (i--) {
    // `| 0` is more compact and faster than `Math.floor()`.
    id += urlAlphabet[(Math.random() * 64) | 0];
  }
  return id
};

/* src/js/renderer/component/ui/IconButton.svelte generated by Svelte v3.30.1 */
const file$l = "src/js/renderer/component/ui/IconButton.svelte";

function add_css$m() {
	var style = element("style");
	style.id = "svelte-1v33v6i-style";
	style.textContent = "@keyframes svelte-1v33v6i-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}button.svelte-1v33v6i.svelte-1v33v6i{-webkit-app-region:no-drag;display:inline-flex;vertical-align:top;align-items:center;justify-content:center;outline:none;border:0;outline:0;min-width:28px;min-height:28px;border-radius:5.5px;flex:none}button.svelte-1v33v6i .icon.svelte-1v33v6i{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;pointer-events:none;width:18px;height:18px;transform:scale(var(--iconScale))}button.svelte-1v33v6i .caret.svelte-1v33v6i{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;pointer-events:none;margin:0 -2px 0 8px;width:8px;height:8px;-webkit-mask-image:var(--img-chevron-down-heavy)}button.compact.svelte-1v33v6i.svelte-1v33v6i{min-width:24px;min-height:24px}button.compact.svelte-1v33v6i .icon.svelte-1v33v6i{width:16px;height:16px}button.svelte-1v33v6i.svelte-1v33v6i{background:none}button.svelte-1v33v6i .icon.svelte-1v33v6i,button.svelte-1v33v6i .caret.svelte-1v33v6i{background:rgba(var(--foregroundColor), 0.6)}button.menuOpen.svelte-1v33v6i.svelte-1v33v6i,button.svelte-1v33v6i.svelte-1v33v6i:not(.disabled):hover{background:rgba(var(--foregroundColor), 0.04)}button.menuOpen.svelte-1v33v6i .caret.svelte-1v33v6i,button.svelte-1v33v6i:not(.disabled):hover .caret.svelte-1v33v6i{background:var(--labelColor)}button.svelte-1v33v6i.svelte-1v33v6i:not(.disabled):active{background:rgba(var(--foregroundColor), 0.08)}button.disabled.svelte-1v33v6i.svelte-1v33v6i{opacity:0.35}button.svelte-1v33v6i.svelte-1v33v6i:not(.windowFocused){opacity:0.5}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (151:0) {:else}
function create_else_block$6(ctx) {
	let button;
	let div;
	let div_style_value;
	let css_action;
	let setSize_action;
	let setTooltip_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			attr_dev(div, "class", "icon svelte-1v33v6i");
			attr_dev(div, "style", div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[0]});`);
			add_location(div, file$l, 163, 4, 3902);
			attr_dev(button, "tabindex", "0");
			attr_dev(button, "class", "svelte-1v33v6i");
			toggle_class(button, "compact", /*compact*/ ctx[2]);
			toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[11]);
			add_location(button, file$l, 152, 2, 3634);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);

			if (!mounted) {
				dispose = [
					action_destroyer(css_action = css.call(null, button, { iconScale: /*iconScale*/ ctx[6] })),
					action_destroyer(setSize_action = setSize.call(null, button, {
						margin: /*margin*/ ctx[5],
						padding: /*padding*/ ctx[4]
					})),
					action_destroyer(setTooltip_action = setTooltip.call(null, button, {
						text: /*tooltip*/ ctx[1],
						enabled: !/*disabled*/ ctx[3]
					})),
					listen_dev(button, "mousedown", /*mousedown_handler*/ ctx[13], false, false, false),
					listen_dev(button, "mouseup", /*mouseup_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon*/ 1 && div_style_value !== (div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[0]});`)) {
				attr_dev(div, "style", div_style_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*iconScale*/ 64) css_action.update.call(null, { iconScale: /*iconScale*/ ctx[6] });

			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin, padding*/ 48) setSize_action.update.call(null, {
				margin: /*margin*/ ctx[5],
				padding: /*padding*/ ctx[4]
			});

			if (setTooltip_action && is_function(setTooltip_action.update) && dirty & /*tooltip, disabled*/ 10) setTooltip_action.update.call(null, {
				text: /*tooltip*/ ctx[1],
				enabled: !/*disabled*/ ctx[3]
			});

			if (dirty & /*compact*/ 4) {
				toggle_class(button, "compact", /*compact*/ ctx[2]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*$isWindowFocused*/ 2048) {
				toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[11]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$6.name,
		type: "else",
		source: "(151:0) {:else}",
		ctx
	});

	return block;
}

// (124:0) {#if items}
function create_if_block$a(ctx) {
	let button;
	let div;
	let div_style_value;
	let t;
	let css_action;
	let setSize_action;
	let setTooltip_action;
	let mounted;
	let dispose;
	let if_block = /*showCaret*/ ctx[8] && create_if_block_1$6(ctx);

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			t = space();
			if (if_block) if_block.c();
			attr_dev(div, "class", "icon svelte-1v33v6i");
			attr_dev(div, "style", div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[0]});`);
			add_location(div, file$l, 144, 4, 3487);
			attr_dev(button, "class", "svelte-1v33v6i");
			toggle_class(button, "compact", /*compact*/ ctx[2]);
			toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "menuOpen", /*$menu*/ ctx[10].isOpen && /*$menu*/ ctx[10].id == /*id*/ ctx[12]);
			toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[11]);
			add_location(button, file$l, 125, 2, 2991);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);
			append_dev(button, t);
			if (if_block) if_block.m(button, null);

			if (!mounted) {
				dispose = [
					action_destroyer(css_action = css.call(null, button, { iconScale: /*iconScale*/ ctx[6] })),
					action_destroyer(setSize_action = setSize.call(null, button, {
						margin: /*margin*/ ctx[5],
						padding: /*padding*/ ctx[4]
					})),
					action_destroyer(setTooltip_action = setTooltip.call(null, button, {
						text: /*tooltip*/ ctx[1],
						enabled: !/*disabled*/ ctx[3]
					})),
					listen_dev(button, "mousedown", /*mousedown_handler_1*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon*/ 1 && div_style_value !== (div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[0]});`)) {
				attr_dev(div, "style", div_style_value);
			}

			if (/*showCaret*/ ctx[8]) {
				if (if_block) ; else {
					if_block = create_if_block_1$6(ctx);
					if_block.c();
					if_block.m(button, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (css_action && is_function(css_action.update) && dirty & /*iconScale*/ 64) css_action.update.call(null, { iconScale: /*iconScale*/ ctx[6] });

			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin, padding*/ 48) setSize_action.update.call(null, {
				margin: /*margin*/ ctx[5],
				padding: /*padding*/ ctx[4]
			});

			if (setTooltip_action && is_function(setTooltip_action.update) && dirty & /*tooltip, disabled*/ 10) setTooltip_action.update.call(null, {
				text: /*tooltip*/ ctx[1],
				enabled: !/*disabled*/ ctx[3]
			});

			if (dirty & /*compact*/ 4) {
				toggle_class(button, "compact", /*compact*/ ctx[2]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*$menu, id*/ 5120) {
				toggle_class(button, "menuOpen", /*$menu*/ ctx[10].isOpen && /*$menu*/ ctx[10].id == /*id*/ ctx[12]);
			}

			if (dirty & /*$isWindowFocused*/ 2048) {
				toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[11]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$a.name,
		type: "if",
		source: "(124:0) {#if items}",
		ctx
	});

	return block;
}

// (146:4) {#if showCaret}
function create_if_block_1$6(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "caret svelte-1v33v6i");
			add_location(div, file$l, 146, 6, 3580);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$6.name,
		type: "if",
		source: "(146:4) {#if showCaret}",
		ctx
	});

	return block;
}

function create_fragment$m(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*items*/ ctx[7]) return create_if_block$a;
		return create_else_block$6;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$m.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$m($$self, $$props, $$invalidate) {
	let $menu;
	let $isWindowFocused;
	validate_store(menu, "menu");
	component_subscribe($$self, menu, $$value => $$invalidate(10, $menu = $$value));
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(11, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("IconButton", slots, []);
	const dispatch = createEventDispatcher();
	let { icon = "img-photo" } = $$props;
	let { tooltip = undefined } = $$props;
	let { compact = false } = $$props;
	let { disabled = false } = $$props;
	let { padding = "0 10px" } = $$props;
	let { margin = "0" } = $$props;
	let { iconScale = 1 } = $$props; // Use to tweak size of icon
	let { items = undefined } = $$props; // Array of menu items
	let { showCaret = false } = $$props;
	let { menuWidth = "100px" } = $$props;

	// Unique ID. Used to match menu with component that opens it.
	let id = nanoid();

	function checkForMenuSelection() {
		const selectionWasMade = !$menu.isOpen && $menu.id == id && $menu.selectedItem;

		if (selectionWasMade) {
			dispatch("selectItem", { item: $menu.selectedItem });
		}
	}

	const writable_props = [
		"icon",
		"tooltip",
		"compact",
		"disabled",
		"padding",
		"margin",
		"iconScale",
		"items",
		"showCaret",
		"menuWidth"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<IconButton> was created with unknown prop '${key}'`);
	});

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	function mouseup_handler(event) {
		bubble($$self, event);
	}

	const mousedown_handler_1 = domEvent => {
		if (disabled) return;

		openMenu(domEvent.target, {
			id,
			items,
			type: "pulldown",
			width: menuWidth,
			compact
		});
	};

	$$self.$$set = $$props => {
		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
		if ("tooltip" in $$props) $$invalidate(1, tooltip = $$props.tooltip);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("padding" in $$props) $$invalidate(4, padding = $$props.padding);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
		if ("iconScale" in $$props) $$invalidate(6, iconScale = $$props.iconScale);
		if ("items" in $$props) $$invalidate(7, items = $$props.items);
		if ("showCaret" in $$props) $$invalidate(8, showCaret = $$props.showCaret);
		if ("menuWidth" in $$props) $$invalidate(9, menuWidth = $$props.menuWidth);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		menu,
		openMenu,
		setTooltip,
		css,
		setSize,
		nanoid,
		createEventDispatcher,
		dispatch,
		icon,
		tooltip,
		compact,
		disabled,
		padding,
		margin,
		iconScale,
		items,
		showCaret,
		menuWidth,
		id,
		checkForMenuSelection,
		$menu,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("icon" in $$props) $$invalidate(0, icon = $$props.icon);
		if ("tooltip" in $$props) $$invalidate(1, tooltip = $$props.tooltip);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("padding" in $$props) $$invalidate(4, padding = $$props.padding);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
		if ("iconScale" in $$props) $$invalidate(6, iconScale = $$props.iconScale);
		if ("items" in $$props) $$invalidate(7, items = $$props.items);
		if ("showCaret" in $$props) $$invalidate(8, showCaret = $$props.showCaret);
		if ("menuWidth" in $$props) $$invalidate(9, menuWidth = $$props.menuWidth);
		if ("id" in $$props) $$invalidate(12, id = $$props.id);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$menu*/ 1024) {
			// Was a selection made? If yes, dispatch event. Criteria is: when `menu` store changes, is it: 1) closed, 2) set to this component instance's `id`, and 3) set to a valid `selectedItem` value (not undefined)
			 (checkForMenuSelection());
		}
	};

	return [
		icon,
		tooltip,
		compact,
		disabled,
		padding,
		margin,
		iconScale,
		items,
		showCaret,
		menuWidth,
		$menu,
		$isWindowFocused,
		id,
		mousedown_handler,
		mouseup_handler,
		mousedown_handler_1
	];
}

class IconButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1v33v6i-style")) add_css$m();

		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
			icon: 0,
			tooltip: 1,
			compact: 2,
			disabled: 3,
			padding: 4,
			margin: 5,
			iconScale: 6,
			items: 7,
			showCaret: 8,
			menuWidth: 9
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IconButton",
			options,
			id: create_fragment$m.name
		});
	}

	get icon() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltip() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltip(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconScale() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconScale(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showCaret() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showCaret(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get menuWidth() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set menuWidth(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/AddressBar.svelte generated by Svelte v3.30.1 */

const file$m = "src/js/renderer/component/main/AddressBar.svelte";

function add_css$n() {
	var style = element("style");
	style.id = "svelte-c0yy6y-style";
	style.textContent = "@keyframes svelte-c0yy6y-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-c0yy6y-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#addressbar.svelte-c0yy6y{margin:0 auto}.searchfield.svelte-c0yy6y{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;position:relative;background-color:rgba(0, 0, 0, 0.04);border-radius:4px;min-height:20px;min-width:20rem;max-width:40rem;display:flex;flex-direction:row;align-items:center}.searchfield.svelte-c0yy6y:focus-within{animation-fill-mode:forwards;animation-name:svelte-c0yy6y-selectField;animation-duration:0.3s}@keyframes svelte-c0yy6y-selectField{from{box-shadow:0 0 0 10px transparent}to{box-shadow:0 0 0 3.5px rgba(59, 153, 252, 0.5)}}.magnifying-glass.svelte-c0yy6y{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;position:absolute;top:50%;transform:translate(0, -50%);background-color:var(--controlTextColor);-webkit-mask-image:var(--img-magnifyingglass);position:absolute;width:13px;height:13px;left:5px;opacity:0.5}.placeholder.svelte-c0yy6y{position:absolute;top:50%;transform:translate(0, -50%);color:var(--placeholderTextColor);left:24px;pointer-events:none}input.svelte-c0yy6y{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin:1px 0 0 24px;width:100%;background:transparent;outline:none;border:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRkcmVzc0Jhci5zdmVsdGUiLCJzb3VyY2VzIjpbIkFkZHJlc3NCYXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgc3RhdGUgPSB7fVxuICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gJ1NlYXJjaCdcbiAgZXhwb3J0IGxldCBxdWVyeSA9ICcnXG4gIGV4cG9ydCBsZXQgZm9jdXNlZCA9IGZhbHNlXG5cbiAgbGV0IGlucHV0ID0gbnVsbFxuXG4gIC8vICQ6IGNvbnNvbGUubG9nKHN0YXRlLm9wZW5Eb2MpXG5cbiAgZnVuY3Rpb24gaGFuZGxlS2V5ZG93bihldnQpIHtcbiAgICBpZiAoIWZvY3VzZWQpIHJldHVyblxuICAgIGlmIChldnQua2V5ID09ICdmJyAmJiBldnQubWV0YUtleSkge1xuICAgICAgaW5wdXQuc2VsZWN0KClcbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbiNhZGRyZXNzYmFyIHtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5zZWFyY2hmaWVsZCB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wOHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNCk7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgbWluLWhlaWdodDogMjBweDtcbiAgbWluLXdpZHRoOiAyMHJlbTtcbiAgbWF4LXdpZHRoOiA0MHJlbTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5zZWFyY2hmaWVsZDpmb2N1cy13aXRoaW4ge1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgYW5pbWF0aW9uLW5hbWU6IHNlbGVjdEZpZWxkO1xuICBhbmltYXRpb24tZHVyYXRpb246IDAuM3M7XG59XG5cbkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAzLjVweCByZ2JhKDU5LCAxNTMsIDI1MiwgMC41KTtcbiAgfVxufVxuLm1hZ25pZnlpbmctZ2xhc3Mge1xuICAtd2Via2l0LW1hc2stc2l6ZTogY29udGFpbjtcbiAgLXdlYmtpdC1tYXNrLXBvc2l0aW9uOiBjZW50ZXI7XG4gIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbnRyb2xUZXh0Q29sb3IpO1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1tYWduaWZ5aW5nZ2xhc3MpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxM3B4O1xuICBoZWlnaHQ6IDEzcHg7XG4gIGxlZnQ6IDVweDtcbiAgb3BhY2l0eTogMC41O1xufVxuXG4ucGxhY2Vob2xkZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcbiAgY29sb3I6IHZhcigtLXBsYWNlaG9sZGVyVGV4dENvbG9yKTtcbiAgbGVmdDogMjRweDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG5cbmlucHV0IHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIG1hcmdpbjogMXB4IDAgMCAyNHB4O1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbn08L3N0eWxlPlxuXG48c3ZlbHRlOndpbmRvdyBvbjprZXlkb3duPXtoYW5kbGVLZXlkb3dufSAvPlxuXG48ZGl2IGlkPVwiYWRkcmVzc2JhclwiPlxuICA8ZGl2IGNsYXNzPVwic2VhcmNoZmllbGRcIj5cbiAgICA8ZGl2XG4gICAgICBvbjptb3VzZWRvd258cHJldmVudERlZmF1bHQ9eygpID0+IGlucHV0LnNlbGVjdCgpfVxuICAgICAgY2xhc3M9XCJtYWduaWZ5aW5nLWdsYXNzXCIgLz5cbiAgICB7I2lmICFxdWVyeX08c3BhbiBjbGFzcz1cInBsYWNlaG9sZGVyXCI+e3BsYWNlaG9sZGVyfTwvc3Bhbj57L2lmfVxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGJpbmQ6dGhpcz17aW5wdXR9IGJpbmQ6dmFsdWU9e3F1ZXJ5fSAvPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELFdBQVcseUJBQVksQ0FBQyxBQUN0QixJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLGNBQUMsQ0FBQyxBQUNYLE1BQU0sQ0FBRSxDQUFDLENBQUMsSUFBSSxBQUNoQixDQUFDLEFBRUQsWUFBWSxjQUFDLENBQUMsQUFDWixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLGdCQUFnQixDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3JDLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsV0FBVyxDQUFFLE1BQU0sQUFDckIsQ0FBQyxBQUNELDBCQUFZLGFBQWEsQUFBQyxDQUFDLEFBQ3pCLG1CQUFtQixDQUFFLFFBQVEsQ0FDN0IsY0FBYyxDQUFFLHlCQUFXLENBQzNCLGtCQUFrQixDQUFFLElBQUksQUFDMUIsQ0FBQyxBQUVELFdBQVcseUJBQVksQ0FBQyxBQUN0QixJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUNwQyxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQ2pELENBQUMsQUFDSCxDQUFDLEFBQ0QsaUJBQWlCLGNBQUMsQ0FBQyxBQUNqQixpQkFBaUIsQ0FBRSxPQUFPLENBQzFCLHFCQUFxQixDQUFFLE1BQU0sQ0FDN0IsbUJBQW1CLENBQUUsU0FBUyxDQUM5QixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsR0FBRyxDQUNSLFNBQVMsQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUM3QixnQkFBZ0IsQ0FBRSxJQUFJLGtCQUFrQixDQUFDLENBQ3pDLGtCQUFrQixDQUFFLElBQUkscUJBQXFCLENBQUMsQ0FDOUMsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLElBQUksQ0FBRSxHQUFHLENBQ1QsT0FBTyxDQUFFLEdBQUcsQUFDZCxDQUFDLEFBRUQsWUFBWSxjQUFDLENBQUMsQUFDWixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsR0FBRyxDQUNSLFNBQVMsQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUM3QixLQUFLLENBQUUsSUFBSSxzQkFBc0IsQ0FBQyxDQUNsQyxJQUFJLENBQUUsSUFBSSxDQUNWLGNBQWMsQ0FBRSxJQUFJLEFBQ3RCLENBQUMsQUFFRCxLQUFLLGNBQUMsQ0FBQyxBQUNMLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLE9BQU8sQ0FDdkIsTUFBTSxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDcEIsS0FBSyxDQUFFLElBQUksQ0FDWCxVQUFVLENBQUUsV0FBVyxDQUN2QixPQUFPLENBQUUsSUFBSSxDQUNiLE1BQU0sQ0FBRSxJQUFJLEFBQ2QsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (114:4) {#if !query}
function create_if_block$b(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*placeholder*/ ctx[1]);
			attr_dev(span, "class", "placeholder svelte-c0yy6y");
			add_location(span, file$m, 113, 16, 2367);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*placeholder*/ 2) set_data_dev(t, /*placeholder*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$b.name,
		type: "if",
		source: "(114:4) {#if !query}",
		ctx
	});

	return block;
}

function create_fragment$n(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let t1;
	let input_1;
	let mounted;
	let dispose;
	let if_block = !/*query*/ ctx[0] && create_if_block$b(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			input_1 = element("input");
			attr_dev(div0, "class", "magnifying-glass svelte-c0yy6y");
			add_location(div0, file$m, 110, 4, 2255);
			attr_dev(input_1, "type", "text");
			attr_dev(input_1, "class", "svelte-c0yy6y");
			add_location(input_1, file$m, 114, 4, 2423);
			attr_dev(div1, "class", "searchfield svelte-c0yy6y");
			add_location(div1, file$m, 109, 2, 2225);
			attr_dev(div2, "id", "addressbar");
			attr_dev(div2, "class", "svelte-c0yy6y");
			add_location(div2, file$m, 108, 0, 2201);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div1, t0);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t1);
			append_dev(div1, input_1);
			/*input_1_binding*/ ctx[7](input_1);
			set_input_value(input_1, /*query*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(window, "keydown", /*handleKeydown*/ ctx[3], false, false, false),
					listen_dev(div0, "mousedown", prevent_default(/*mousedown_handler*/ ctx[6]), false, true, false),
					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!/*query*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$b(ctx);
					if_block.c();
					if_block.m(div1, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*query*/ 1 && input_1.value !== /*query*/ ctx[0]) {
				set_input_value(input_1, /*query*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block) if_block.d();
			/*input_1_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$n.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$n($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AddressBar", slots, []);
	let { state = {} } = $$props;
	let { placeholder = "Search" } = $$props;
	let { query = "" } = $$props;
	let { focused = false } = $$props;
	let input = null;

	// $: console.log(state.openDoc)
	function handleKeydown(evt) {
		if (!focused) return;

		if (evt.key == "f" && evt.metaKey) {
			input.select();
		}
	}

	const writable_props = ["state", "placeholder", "query", "focused"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AddressBar> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = () => input.select();

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(2, input);
		});
	}

	function input_1_input_handler() {
		query = this.value;
		$$invalidate(0, query);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(4, state = $$props.state);
		if ("placeholder" in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("focused" in $$props) $$invalidate(5, focused = $$props.focused);
	};

	$$self.$capture_state = () => ({
		state,
		placeholder,
		query,
		focused,
		input,
		handleKeydown
	});

	$$self.$inject_state = $$props => {
		if ("state" in $$props) $$invalidate(4, state = $$props.state);
		if ("placeholder" in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("focused" in $$props) $$invalidate(5, focused = $$props.focused);
		if ("input" in $$props) $$invalidate(2, input = $$props.input);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		query,
		placeholder,
		input,
		handleKeydown,
		state,
		focused,
		mousedown_handler,
		input_1_binding,
		input_1_input_handler
	];
}

class AddressBar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-c0yy6y-style")) add_css$n();

		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
			state: 4,
			placeholder: 1,
			query: 0,
			focused: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AddressBar",
			options,
			id: create_fragment$n.name
		});
	}

	get state() {
		throw new Error("<AddressBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set state(value) {
		throw new Error("<AddressBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<AddressBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<AddressBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get query() {
		throw new Error("<AddressBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set query(value) {
		throw new Error("<AddressBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focused() {
		throw new Error("<AddressBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<AddressBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/EditorPanel.svelte generated by Svelte v3.30.1 */
const file$n = "src/js/renderer/component/main/EditorPanel.svelte";

function add_css$o() {
	var style = element("style");
	style.id = "svelte-1v1omyd-style";
	style.textContent = "@keyframes svelte-1v1omyd-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.panel.svelte-1v1omyd.svelte-1v1omyd{overflow:hidden}.panel.svelte-1v1omyd:not(.isFocusedPanel) h1.svelte-1v1omyd{opacity:0.6}.highlightAll.svelte-1v1omyd.svelte-1v1omyd,.highlightLeftEdge.svelte-1v1omyd.svelte-1v1omyd,.highlightRightEdge.svelte-1v1omyd.svelte-1v1omyd{animation-delay:100ms;animation-duration:100ms;animation-timing-function:ease-out;animation-fill-mode:forwards}.highlightAll.svelte-1v1omyd.svelte-1v1omyd{animation-name:svelte-1v1omyd-highlightAll}.highlightLeftEdge.svelte-1v1omyd.svelte-1v1omyd{animation-name:svelte-1v1omyd-highlightLeftEdge}.highlightRightEdge.svelte-1v1omyd.svelte-1v1omyd{animation-name:svelte-1v1omyd-highlightRightEdge}.highlightLeftEdge.isFirstPanel.svelte-1v1omyd.svelte-1v1omyd{animation-name:svelte-1v1omyd-highlightLeftEdgeOfFirstPanel}.highlightRightEdge.isLastPanel.svelte-1v1omyd.svelte-1v1omyd{animation-name:svelte-1v1omyd-highlightRightEdgeOfLastPanel}@keyframes svelte-1v1omyd-highlightAll{from{box-shadow:inset 0 0 0 0 var(--keyboardFocusIndicatorColor)}to{box-shadow:inset 0 0 0 5px var(--keyboardFocusIndicatorColor)}}@keyframes svelte-1v1omyd-highlightLeftEdge{from{box-shadow:inset 0 0 0 0 var(--keyboardFocusIndicatorColor)}to{box-shadow:inset 25px 0 0 0 var(--keyboardFocusIndicatorColor)}}@keyframes svelte-1v1omyd-highlightRightEdge{from{box-shadow:inset 0 0 0 0 var(--keyboardFocusIndicatorColor)}to{box-shadow:inset -25px 0 0 0 var(--keyboardFocusIndicatorColor)}}@keyframes svelte-1v1omyd-highlightLeftEdgeOfFirstPanel{from{box-shadow:inset 0 0 0 0 var(--keyboardFocusIndicatorColor)}to{box-shadow:inset 50px 0 0 0 var(--keyboardFocusIndicatorColor)}}@keyframes svelte-1v1omyd-highlightRightEdgeOfLastPanel{from{box-shadow:inset 0 0 0 0 var(--keyboardFocusIndicatorColor)}to{box-shadow:inset -50px 0 0 0 var(--keyboardFocusIndicatorColor)}}.header.svelte-1v1omyd.svelte-1v1omyd{width:100%;display:flex;flex-direction:row;padding:0 5px 0 10px;display:flex;align-items:center;height:30px;flex:none;user-select:none}.tab.svelte-1v1omyd.svelte-1v1omyd{flex-grow:1;display:flex;flex-direction:row;align-items:center;overflow:hidden}h1.svelte-1v1omyd.svelte-1v1omyd{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--secondaryLabelColor);margin:0;padding:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.hasUnsavedChanges.svelte-1v1omyd.svelte-1v1omyd{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--secondaryLabelColor);margin-left:2px}.header.svelte-1v1omyd:not(:hover) .tab .close.svelte-1v1omyd{display:none}.header.svelte-1v1omyd:hover .tab .close.svelte-1v1omyd{margin-left:3px;display:initial}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdG9yUGFuZWwuc3ZlbHRlIiwic291cmNlcyI6WyJFZGl0b3JQYW5lbC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgcHJvamVjdCB9IGZyb20gJy4uLy4uL1N0YXRlTWFuYWdlcic7XG4gIGltcG9ydCB7IGZpbGVzIH0gZnJvbSAnLi4vLi4vRmlsZXNNYW5hZ2VyJztcbiAgaW1wb3J0IHsgb25Nb3VudCwgb25EZXN0cm95IH0gZnJvbSAnc3ZlbHRlJ1xuXG4gIGltcG9ydCBFZGl0b3IgZnJvbSAnLi9FZGl0b3Iuc3ZlbHRlJztcbiAgaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vdWkvSWNvbkJ1dHRvbi5zdmVsdGUnO1xuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnXG4gIGltcG9ydCBBZGRyZXNzQmFyIGZyb20gJy4vQWRkcmVzc0Jhci5zdmVsdGUnO1xuICBpbXBvcnQgeyBnZXRDbURhdGFCeVBhbmVsSWQgfSBmcm9tICcuLi8uLi9lZGl0b3IvZWRpdG9yLXV0aWxzJztcbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gIGV4cG9ydCBsZXQgaW5kZXggPSAwXG4gIGV4cG9ydCBsZXQgcGFuZWwgPSB7fVxuICBleHBvcnQgbGV0IHdpZHRoID0gMjAgLy8gUGVyY2VudGFnZS4gSXMgY29udmVydGVkIHRvIGAyMCVgLlxuICBleHBvcnQgbGV0IGlzRmlyc3RQYW5lbCA9IGZhbHNlXG4gIGV4cG9ydCBsZXQgaXNMYXN0UGFuZWwgPSBmYWxzZVxuXG4gIGV4cG9ydCBsZXQgaGlnaGxpZ2h0QWxsID0gdW5kZWZpbmVkXG4gIGV4cG9ydCBsZXQgaGlnaGxpZ2h0TGVmdEVkZ2UgPSB1bmRlZmluZWRcbiAgZXhwb3J0IGxldCBoaWdobGlnaHRSaWdodEVkZ2UgPSB1bmRlZmluZWRcblxuICAkOiBkb2MgPSAkZmlsZXMuYnlJZFtwYW5lbC5kb2NJZF1cbiAgJDogaXNGb2N1c2VkUGFuZWwgPSBpbmRleCA9PSAkcHJvamVjdC5mb2N1c2VkUGFuZWxJbmRleFxuXG4gIGxldCBlbCAvLyBUaGlzIGVsZW1lbnRcblxuICAvLyBPbiBkcmFnIHN0YXJ0LCBpZiB0aGUgZHJhZ2dlZCBmaWxlIGlzIGEgZG9jLCBzZXQgaXQncyBpZCBhcyBhIGRhdGFUcmFuc2ZlciBpdGVtLiBXZSB1c2UgYSBjdXN0b20gYHRleHQvZG9jaWRgLiBQZXI6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MX0RyYWdfYW5kX0Ryb3BfQVBJL0RyYWdfb3BlcmF0aW9ucyNkcmFnZGF0YVxuICBmdW5jdGlvbiBvbkRyYWdUYWJTdGFydChkb21FdmVudCkge1xuICAgIGRvbUV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3RhYmluZGV4JywgaW5kZXgpO1xuICAgIGRpc3BhdGNoKCdkcmFnVGFiU3RhcnQnLCB7XG4gICAgICB0YWJJbmRleDogaW5kZXhcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gb25EcmFnVGFiRW5kKCkge1xuICAgIGRpc3BhdGNoKCdkcmFnVGFiQ2FuY2VsJylcbiAgfVxuXG4gIC8vIC0tLS0tLSBEUkFHIEFORCBEUk9QIC0tLS0tLSAvL1xuXG4gIGZ1bmN0aW9uIG9uRHJhZ092ZXIoZG9tRXZlbnQpIHtcbiAgICBcbiAgICBjb25zdCBpc0RvYyA9IGRvbUV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcy5pbmNsdWRlcygndGV4dC9kb2NpZCcpXG4gICAgY29uc3QgaXNUYWIgPSBkb21FdmVudC5kYXRhVHJhbnNmZXIudHlwZXMuaW5jbHVkZXMoJ3RleHQvdGFiaW5kZXgnKVxuXG4gICAgaWYgKGlzRG9jKSB7XG4gICAgICBpZiAoaXNPdmVyTGVmdEVkZ2UoZG9tRXZlbnQpKSB7XG4gICAgICAgIGRpc3BhdGNoKCdkcmFnRG9jT3ZlckVkZ2UnLCB7XG4gICAgICAgICAgZWRnZTogJ2xlZnQnLFxuICAgICAgICAgIHBhbmVsSW5kZXg6IGluZGV4XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGlzT3ZlclJpZ2h0RWRnZShkb21FdmVudCkpIHtcbiAgICAgICAgZGlzcGF0Y2goJ2RyYWdEb2NPdmVyRWRnZScsIHtcbiAgICAgICAgICBlZGdlOiAncmlnaHQnLFxuICAgICAgICAgIHBhbmVsSW5kZXg6IGluZGV4XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaCgnZHJhZ0RvY092ZXJDZW50ZXInLCB7XG4gICAgICAgICAgcGFuZWxJbmRleDogaW5kZXhcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVGFiKSB7XG4gICAgICBkaXNwYXRjaCgnZHJhZ1RhYk92ZXInLCB7XG4gICAgICAgIHBhbmVsSW5kZXg6IGluZGV4XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJvcChkb21FdmVudCkge1xuICAgIGNvbnN0IGlzRG9jID0gZG9tRXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzLmluY2x1ZGVzKCd0ZXh0L2RvY2lkJylcbiAgICBjb25zdCBpc1RhYiA9IGRvbUV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcy5pbmNsdWRlcygndGV4dC90YWJpbmRleCcpXG4gICAgXG4gICAgaWYgKGlzRG9jKSB7XG4gICAgICBpZiAoaXNPdmVyTGVmdEVkZ2UoZG9tRXZlbnQpKSB7XG4gICAgICAgIG9wZW5Eb2NJbk5ld1BhbmVsKGRvbUV2ZW50LCBpbmRleClcbiAgICAgIH0gZWxzZSBpZiAoaXNPdmVyUmlnaHRFZGdlKGRvbUV2ZW50KSkge1xuICAgICAgICBvcGVuRG9jSW5OZXdQYW5lbChkb21FdmVudCwgaW5kZXggKyAxKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlbkRvY0luVGhpc1BhbmVsKGRvbUV2ZW50KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUYWIpIHtcbiAgICAgIFxuICAgICAgY29uc3QgZHJhZ2dlZFRhYkluZGV4ID0gZG9tRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvdGFiaW5kZXgnKVxuXG4gICAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywgeyBcbiAgICAgICAgdHlwZTogJ01PVkVfUEFORUwnLCBcbiAgICAgICAgZnJvbUluZGV4OiBkcmFnZ2VkVGFiSW5kZXgsIFxuICAgICAgICB0b0luZGV4OiBpbmRleFxuICAgICAgfSlcblxuICAgIH1cbiAgfVxuICBcbiAgLyoqXG4gICAqIFdoZW4gdXNlciBkcm9wcyBkb2Mgb250byB0aGlzIHBhbmVsLCBsb2FkIHRoZSBkb2MuXG4gICAqL1xuICBmdW5jdGlvbiBvcGVuRG9jSW5UaGlzUGFuZWwoZG9tRXZlbnQpIHtcbiAgICAgIFxuICAgIC8vIE9ubHkgcHJvY2VlZCBpZiBkcmFnZ2VkIGRvYyBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50LlxuICAgIGNvbnN0IGRyYWdnZWREb2NJZCA9IGRvbUV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L2RvY2lkJylcbiAgICBpZiAoZHJhZ2dlZERvY0lkID09IHBhbmVsLmRvY0lkKSByZXR1cm4gXG4gICAgXG4gICAgLy8gTG9hZCBkcmFnZ2VkIGRvY1xuICAgIHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7IFxuICAgICAgdHlwZTogJ09QRU5fRE9DX0lOX1BBTkVMJywgXG4gICAgICBwYW5lbEluZGV4OiBpbmRleCxcbiAgICAgIGRvYzogZmlsZXMuYnlJZFtkcmFnZ2VkRG9jSWRdLFxuICAgICAgc2VsZWN0SW5TaWRlQmFyOiB0cnVlLFxuICAgICAgb3V0Z29pbmdEb2M6IGRvYyxcbiAgICAgIG91dGdvaW5nRG9jRGF0YTogcGFuZWwudW5zYXZlZENoYW5nZXMgP1xuICAgICAgICBnZXRDbURhdGFCeVBhbmVsSWQocGFuZWwuaWQpIDogJycsXG4gICAgICBpc05ld0RvYzogcGFuZWwuZG9jSWQgPT0gJ25ld0RvYydcbiAgICB9KVxuICAgIFxuICAgIC8vIEZvY3VzIHBhbmVsXG4gICAgZm9jdXNQYW5lbCgpXG4gIH1cblxuICAvKipcbiAgICogV2hlbiB1c2VyIGRyb3BzIGRvYyBvbnRvIHRoZSBlZGdlcyBvZiB0aGlzIHBhbmVsLCBjcmVhdGUgYSBuZXcgcGFuZWwgb24gdGhhdCBzaWRlLCBhbmQgbG9hZCB0aGUgZG9jIGluIGl0LlxuICAgKi9cbiAgIGZ1bmN0aW9uIG9wZW5Eb2NJbk5ld1BhbmVsKGRvbUV2ZW50LCBuZXdQYW5lbEluZGV4KSB7XG4gICAgd2luZG93LmFwaS5zZW5kKCdkaXNwYXRjaCcsIHtcbiAgICAgIHR5cGU6ICdPUEVOX05FV19QQU5FTCcsXG4gICAgICBkb2NJZDogZG9tRXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvZG9jaWQnKSxcbiAgICAgIHBhbmVsSW5kZXg6IG5ld1BhbmVsSW5kZXhcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFdoaWxlIGRyYWdnaW5nLCBpcyBtb3VzZSBvdmVyIGxlZnQgZWRnZSBvZiBwYW5lbD9cbiAgICogXCJFZGdlXCIgd2lkdGggaXMgMjVweCwgb3IgNTBweCBvbiBmYXIgbGVmdC9yaWdodC5cbiAgICogQHBhcmFtIGRvbUV2ZW50XG4gICAqL1xuICBmdW5jdGlvbiBpc092ZXJMZWZ0RWRnZShkb21FdmVudCkge1xuICAgIC8vIEdldCBtb3VzZSBwb3NpdGlvbiBpbnNpZGUgdGhlIGVsZW1lbnRcbiAgICBjb25zdCBwb3NYID0gZG9tRXZlbnQuY2xpZW50WCAtIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnhcbiAgICByZXR1cm4gaXNGaXJzdFBhbmVsID8gcG9zWCA8IDUwIDogcG9zWCA8IDI1XG4gIH1cblxuICAvKipcbiAgICogV2hpbGUgZHJhZ2dpbmcsIGlzIG1vdXNlIG92ZXIgbGVmdCBlZGdlIG9mIHBhbmVsP1xuICAgKi9cbiAgZnVuY3Rpb24gaXNPdmVyUmlnaHRFZGdlKGRvbUV2ZW50KSB7XG4gICAgY29uc3QgeyB4LCB3aWR0aCB9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAvLyBHZXQgbW91c2UgcG9zaXRpb24gaW5zaWRlIHRoZSBlbGVtZW50XG4gICAgY29uc3QgcG9zWCA9IGRvbUV2ZW50LmNsaWVudFggLSB4XG4gICAgcmV0dXJuIGlzTGFzdFBhbmVsID8gcG9zWCA+IHdpZHRoIC0gNTAgOiBwb3NYID4gd2lkdGggLSAyNVxuICB9XG5cblxuICAvLyAtLS0tLS0gUkVTSVpFIC0tLS0tLSAvL1xuXG4gIC8vIFRPRE8gMy8xNzogUmVtb3ZlIHRoaXM/IE5vdCBzdXJlIGl0J3MgZG9pbmcgYW55dGhpbmcgYW55bW9yZS4gRm91bmQgaXQgYWN0aXZlIGJ1dCBzZWVtaW5nbHkgbm90IGNhbGxlZCBieSBhbnl0aGluZy5cblxuICAvLyAvKipcbiAgLy8gICogSWYgdXNlciBjbGlja3MtYW5kLWRyYWdzIGNsb3NlIGVub3VnaCB0byBsZWZ0L3JpZ2h0IGVkZ2VzLCB3ZSBzdGFydCBhIHJlc2l6ZSBvcGVyYXRpb24gKGFuZCBjYW5jZWwgdGhlIGV2ZW50IGRlZmF1bHQpLiBFbHNlIHdlIGp1c3QgZm9jdXMgdGhlIHBhbmVsLlxuICAvLyAgKi9cbiAgLy8gIGZ1bmN0aW9uIG9uTW91c2VEb3duKGRvbUV2ZW50KSB7XG4gICAgXG4gIC8vICAgY29uc3QgeyB4LCB3aWR0aCB9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgLy8gICBjb25zdCBwb3NYID0gZG9tRXZlbnQuY2xpZW50WCAtIHhcbiAgLy8gICBjb25zdCBpc0Nsb3NlRW5vdWdoVG9MZWZ0RWRnZSA9IHBvc1ggPCAxMFxuICAvLyAgIGNvbnN0IGlzQ2xvc2VFbm91Z2hUb1JpZ2h0RWRnZSA9IHBvc1ggPiB3aWR0aCAtIDEwXG5cbiAgLy8gICBpZiAoaXNDbG9zZUVub3VnaFRvUmlnaHRFZGdlIHx8IGlzQ2xvc2VFbm91Z2hUb1JpZ2h0RWRnZSkge1xuICAvLyAgICAgZG9tRXZlbnQucHJldmVudERlZmF1bHQoKVxuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBmb2N1c1BhbmVsKClcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvLyBmdW5jdGlvbiBzZXRXaWR0aChkb21FdmVudCkge1xuICAvLyAgIGRpc3BhdGNoKCdyZXNpemUnLCB7IFxuICAvLyAgICAgZG9tRXZlbnQ6IGRvbUV2ZW50LCBcbiAgLy8gICB9KVxuICAvLyB9XG5cbiAgLy8gZnVuY3Rpb24gcmVzaXplKGRvbUV2ZW50KSB7XG4gIC8vICAgZHJhZ2dpbmcgPSB0cnVlO1xuICAvLyAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmVzaXplRW5kLCBmYWxzZSk7XG4gIC8vICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNldFdpZHRoLCBmYWxzZSk7XG4gIC8vIH1cblxuICAvLyBmdW5jdGlvbiByZXNpemVFbmQoKSB7XG4gIC8vICAgZHJhZ2dpbmcgPSBmYWxzZTtcbiAgLy8gICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJlc2l6ZUVuZCwgZmFsc2UpO1xuICAvLyAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZXRXaWR0aCwgZmFsc2UpO1xuICAvLyAgIGRpc3BhdGNoKCdyZXNpemVlbmQnKVxuICAvLyB9XG5cblxuICAvLyAtLS0tLS0tIE9QRU4sIENMT1NFLCBBTkQgRk9DVVMgUEFORUxTIC0tLS0tLS0gLy9cblxuICAvKipcbiAgICogT3BlbiBuZXcgcGFuZWwgdG8gcmlnaHQgb2YgY3VycmVudCBvbmUsIHdpdGggYW4gZW1wdHkgZG9jXG4gICAqL1xuICAgZnVuY3Rpb24gb3BlblBhbmVsVG9SaWdodCgpIHtcbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ09QRU5fTkVXX1BBTkVMJyxcbiAgICAgIGRvY0lkOiAnbmV3RG9jJyxcbiAgICAgIHBhbmVsSW5kZXg6IGluZGV4ICsgMVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZVRoaXNQYW5lbCgpIHtcbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ0NMT1NFX1BBTkVMJyxcbiAgICAgIHBhbmVsSW5kZXg6IGluZGV4LFxuICAgICAgb3V0Z29pbmdEb2M6IGRvYyxcbiAgICAgIG91dGdvaW5nRG9jRGF0YTogcGFuZWwudW5zYXZlZENoYW5nZXMgPyBcbiAgICAgICAgZ2V0Q21EYXRhQnlQYW5lbElkKHBhbmVsLmlkKSA6ICcnLFxuICAgICAgaXNOZXdEb2M6IHBhbmVsLmRvY0lkID09ICduZXdEb2MnXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvY3VzUGFuZWwoKSB7XG4gICAgaWYgKCRwcm9qZWN0LmZvY3VzZWRQYW5lbEluZGV4ID09IGluZGV4KSByZXR1cm5cbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ0ZPQ1VTX1BBTkVMJyxcbiAgICAgIHBhbmVsSW5kZXg6IGluZGV4XG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0gT04gTU9VTlQgLS0tLS0tLSAvL1xuXG4gIGxldCByZW1vdmVMaXN0ZW5lck1ldGhvZHMgPSBbXVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVyMSA9IHdpbmRvdy5hcGkucmVjZWl2ZSgnbWFpblJlcXVlc3RzQ2xvc2VGb2N1c2VkUGFuZWwnLCAoKSA9PiB7XG4gICAgICBpZiAoaXNGb2N1c2VkUGFuZWwpIHtcbiAgICAgICAgY2xvc2VUaGlzUGFuZWwoKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmVtb3ZlTGlzdGVuZXJNZXRob2RzLnB1c2gobGlzdGVuZXIxKVxuICB9KVxuXG4gIG9uRGVzdHJveSgoKSA9PiB7XG4gICAgLy8gUmVtb3ZlIGB3aW5kb3cuYXBpLnJlY2VpdmVgIGxpc3RlbmVyc1xuICAgIHJlbW92ZUxpc3RlbmVyTWV0aG9kcy5mb3JFYWNoKChyZW1vdmUpID0+IHJlbW92ZSgpKVxuICB9KVxuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbi5wYW5lbCB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5wYW5lbDpub3QoLmlzRm9jdXNlZFBhbmVsKSBoMSB7XG4gIG9wYWNpdHk6IDAuNjtcbn1cblxuLmhpZ2hsaWdodEFsbCxcbi5oaWdobGlnaHRMZWZ0RWRnZSxcbi5oaWdobGlnaHRSaWdodEVkZ2Uge1xuICBhbmltYXRpb24tZGVsYXk6IDEwMG1zO1xuICBhbmltYXRpb24tZHVyYXRpb246IDEwMG1zO1xuICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG59XG5cbi5oaWdobGlnaHRBbGwge1xuICBhbmltYXRpb24tbmFtZTogaGlnaGxpZ2h0QWxsO1xufVxuXG4uaGlnaGxpZ2h0TGVmdEVkZ2Uge1xuICBhbmltYXRpb24tbmFtZTogaGlnaGxpZ2h0TGVmdEVkZ2U7XG59XG5cbi5oaWdobGlnaHRSaWdodEVkZ2Uge1xuICBhbmltYXRpb24tbmFtZTogaGlnaGxpZ2h0UmlnaHRFZGdlO1xufVxuXG4uaGlnaGxpZ2h0TGVmdEVkZ2UuaXNGaXJzdFBhbmVsIHtcbiAgYW5pbWF0aW9uLW5hbWU6IGhpZ2hsaWdodExlZnRFZGdlT2ZGaXJzdFBhbmVsO1xufVxuXG4uaGlnaGxpZ2h0UmlnaHRFZGdlLmlzTGFzdFBhbmVsIHtcbiAgYW5pbWF0aW9uLW5hbWU6IGhpZ2hsaWdodFJpZ2h0RWRnZU9mTGFzdFBhbmVsO1xufVxuXG5Aa2V5ZnJhbWVzIGhpZ2hsaWdodEFsbCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDAgdmFyKC0ta2V5Ym9hcmRGb2N1c0luZGljYXRvckNvbG9yKTtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgNXB4IHZhcigtLWtleWJvYXJkRm9jdXNJbmRpY2F0b3JDb2xvcik7XG4gIH1cbn1cbkBrZXlmcmFtZXMgaGlnaGxpZ2h0TGVmdEVkZ2Uge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAwIHZhcigtLWtleWJvYXJkRm9jdXNJbmRpY2F0b3JDb2xvcik7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDI1cHggMCAwIDAgdmFyKC0ta2V5Ym9hcmRGb2N1c0luZGljYXRvckNvbG9yKTtcbiAgfVxufVxuQGtleWZyYW1lcyBoaWdobGlnaHRSaWdodEVkZ2Uge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAwIHZhcigtLWtleWJvYXJkRm9jdXNJbmRpY2F0b3JDb2xvcik7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IC0yNXB4IDAgMCAwIHZhcigtLWtleWJvYXJkRm9jdXNJbmRpY2F0b3JDb2xvcik7XG4gIH1cbn1cbkBrZXlmcmFtZXMgaGlnaGxpZ2h0TGVmdEVkZ2VPZkZpcnN0UGFuZWwge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAwIHZhcigtLWtleWJvYXJkRm9jdXNJbmRpY2F0b3JDb2xvcik7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDUwcHggMCAwIDAgdmFyKC0ta2V5Ym9hcmRGb2N1c0luZGljYXRvckNvbG9yKTtcbiAgfVxufVxuQGtleWZyYW1lcyBoaWdobGlnaHRSaWdodEVkZ2VPZkxhc3RQYW5lbCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDAgdmFyKC0ta2V5Ym9hcmRGb2N1c0luZGljYXRvckNvbG9yKTtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgLTUwcHggMCAwIDAgdmFyKC0ta2V5Ym9hcmRGb2N1c0luZGljYXRvckNvbG9yKTtcbiAgfVxufVxuLmhlYWRlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBwYWRkaW5nOiAwIDVweCAwIDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGhlaWdodDogMzBweDtcbiAgZmxleDogbm9uZTtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWIge1xuICBmbGV4LWdyb3c6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbmgxIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuLmhhc1Vuc2F2ZWRDaGFuZ2VzIHtcbiAgZm9udC1mYW1pbHk6IFwiU0YgUHJvIERpc3BsYXlcIjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4xMnB4O1xuICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5TGFiZWxDb2xvcik7XG4gIG1hcmdpbi1sZWZ0OiAycHg7XG59XG5cbi5oZWFkZXI6bm90KDpob3ZlcikgLnRhYiAuY2xvc2Uge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uaGVhZGVyOmhvdmVyIC50YWIgLmNsb3NlIHtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgZGlzcGxheTogaW5pdGlhbDtcbn1cblxuLmRpdmlkZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxcHg7XG4gIGJhY2tncm91bmQ6IHZhcigtLXNlcGFyYXRvckNvbG9yKTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmRpdmlkZXIgLmRyYWdUYXJnZXQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogLTVweDtcbiAgd2lkdGg6IDEwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgei1pbmRleDogMTA7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMjAwLCAxMDAsIDAuNCk7XG59PC9zdHlsZT5cblxuXG48IS0tIFBhbmVsIC0tPlxuPGRpdiBcbiAgc3R5bGU9e2B3aWR0aDogJHt3aWR0aH0lYH1cbiAgY2xhc3M9XCJwYW5lbFwiIFxuICBjbGFzczpoaWdobGlnaHRBbGxcbiAgY2xhc3M6aGlnaGxpZ2h0TGVmdEVkZ2VcbiAgY2xhc3M6aGlnaGxpZ2h0UmlnaHRFZGdlXG4gIGNsYXNzOmlzRm9jdXNlZFBhbmVsXG4gIGNsYXNzOmlzRmlyc3RQYW5lbFxuICBjbGFzczppc0xhc3RQYW5lbFxuICBiaW5kOnRoaXM9e2VsfVxuICBvbjptb3VzZWRvd249e2ZvY3VzUGFuZWx9XG4gIG9uOmRyYWdvdmVyfHByZXZlbnREZWZhdWx0PXtvbkRyYWdPdmVyfVxuICBvbjpkcm9wPXtvbkRyb3B9XG4+XG5cbiAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgIDxzcGFuIGNsYXNzPVwidGFiXCI+ICBcbiAgICAgIFxuICAgICAgPCEtLSBOYW1lIG9mIGRvYyAtLT5cbiAgICAgIDxoMSBcbiAgICAgICAgZHJhZ2dhYmxlPXRydWVcbiAgICAgICAgb246ZHJhZ3N0YXJ0PXtvbkRyYWdUYWJTdGFydH1cbiAgICAgICAgb246ZHJhZ2VuZD17b25EcmFnVGFiRW5kfVxuICAgICAgPlxuICAgICAgICB7I2lmIGRvY31cbiAgICAgICAgICB7ZG9jLnRpdGxlID8gZG9jLnRpdGxlIDogZG9jLm5hbWV9XG4gICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICBVbnRpdGxlZC0xXG4gICAgICAgIHsvaWZ9XG4gICAgICA8L2gxPlxuXG4gICAgICA8IS0tIFVuc2F2ZWQgY2hhbmdlcyAtLT5cbiAgICAgIHsjaWYgcGFuZWwudW5zYXZlZENoYW5nZXN9XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaGFzVW5zYXZlZENoYW5nZXNcIj7igKI8L3NwYW4+XG4gICAgICB7L2lmfVxuXG4gICAgICA8IS0tIENsb3NlIGJ1dHRvbi4gT25seSBzaG93IHRoaXMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhbmVscy4gLS0+XG4gICAgICB7I2lmICRwcm9qZWN0LnBhbmVscy5sZW5ndGggPiAxfVxuICAgICAgICA8c3BhbiBjbGFzcz1cImNsb3NlXCI+XG4gICAgICAgICAgPEljb25CdXR0b24gXG4gICAgICAgICAgICBvbjptb3VzZWRvd249eyhkb21FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAvLyBTdG9wIHByb3BvZ2F0aW9uIHNvIHdlIGRvbid0IHRyaWdnZXIgYG9uOm1vdXNlZG93bj17Zm9jdXNQYW5lbH1gIG9uIHBhcmVudCBkaXYgd2hlbiBjbGlja2luZyB0aGlzIGJ1dHRvbiB0byBjbG9zZSB0aGUgcGFuZWwuIFxuICAgICAgICAgICAgICBkb21FdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uOm1vdXNldXA9e2Nsb3NlVGhpc1BhbmVsfSBcbiAgICAgICAgICAgIHRvb2x0aXA9J1NhdmUgY2hhbmdlcyBhbmQgY2xvc2UgZWRpdG9yJyBcbiAgICAgICAgICAgIGNvbXBhY3Q9e3RydWV9IFxuICAgICAgICAgICAgaWNvbj0naW1nLXhtYXJrLW1lZGl1bS1yZWd1bGFyJyBcbiAgICAgICAgICAgIHBhZGRpbmc9JzAnIFxuICAgICAgICAgICAgaWNvblNjYWxlPXswLjZ9IFxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIHsvaWZ9XG5cbiAgICA8L3NwYW4+XG5cbiAgICA8IS0tIE5ldyBwYW5lbCAtLT5cbiAgICA8SWNvbkJ1dHRvbiBcbiAgICAgIG9uOm1vdXNldXA9e29wZW5QYW5lbFRvUmlnaHR9IFxuICAgICAgcGFkZGluZz0nMCA0cHgnIFxuICAgICAgdG9vbHRpcD0nQWRkIGVkaXRvciB0byByaWdodCcgXG4gICAgICBjb21wYWN0PXt0cnVlfSBcbiAgICAgIGljb249J2ltZy1zcXVhcmUtc3BsaXQtMngxLW1lZGl1bS1yZWd1bGFyJ1xuICAgICAgaWNvblNjYWxlPXswLjh9IFxuICAgIC8+XG4gIDwvZGl2PlxuXG4gIDxFZGl0b3Ige3BhbmVsfSB7ZG9jfSB7aXNGb2N1c2VkUGFuZWx9IHt3aWR0aH0gLz5cblxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNQd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELE1BQU0sOEJBQUMsQ0FBQyxBQUNOLFFBQVEsQ0FBRSxNQUFNLEFBQ2xCLENBQUMsQUFFRCxxQkFBTSxLQUFLLGVBQWUsQ0FBQyxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQzlCLE9BQU8sQ0FBRSxHQUFHLEFBQ2QsQ0FBQyxBQUVELDJDQUFhLENBQ2IsZ0RBQWtCLENBQ2xCLG1CQUFtQiw4QkFBQyxDQUFDLEFBQ25CLGVBQWUsQ0FBRSxLQUFLLENBQ3RCLGtCQUFrQixDQUFFLEtBQUssQ0FDekIseUJBQXlCLENBQUUsUUFBUSxDQUNuQyxtQkFBbUIsQ0FBRSxRQUFRLEFBQy9CLENBQUMsQUFFRCxhQUFhLDhCQUFDLENBQUMsQUFDYixjQUFjLENBQUUsMkJBQ2xCLENBQUMsQUFFRCxrQkFBa0IsOEJBQUMsQ0FBQyxBQUNsQixjQUFjLENBQUUsZ0NBQ2xCLENBQUMsQUFFRCxtQkFBbUIsOEJBQUMsQ0FBQyxBQUNuQixjQUFjLENBQUUsaUNBQ2xCLENBQUMsQUFFRCxrQkFBa0IsYUFBYSw4QkFBQyxDQUFDLEFBQy9CLGNBQWMsQ0FBRSw0Q0FDbEIsQ0FBQyxBQUVELG1CQUFtQixZQUFZLDhCQUFDLENBQUMsQUFDL0IsY0FBYyxDQUFFLDRDQUNsQixDQUFDLEFBRUQsV0FBVywyQkFBYSxDQUFDLEFBQ3ZCLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSw2QkFBNkIsQ0FBQyxBQUM5RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLDZCQUE2QixDQUFDLEFBQ2hFLENBQUMsQUFDSCxDQUFDLEFBQ0QsV0FBVyxnQ0FBa0IsQ0FBQyxBQUM1QixJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksNkJBQTZCLENBQUMsQUFDOUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSw2QkFBNkIsQ0FBQyxBQUNqRSxDQUFDLEFBQ0gsQ0FBQyxBQUNELFdBQVcsaUNBQW1CLENBQUMsQUFDN0IsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLDZCQUE2QixDQUFDLEFBQzlELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksNkJBQTZCLENBQUMsQUFDbEUsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLDRDQUE4QixDQUFDLEFBQ3hDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSw2QkFBNkIsQ0FBQyxBQUM5RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLDZCQUE2QixDQUFDLEFBQ2pFLENBQUMsQUFDSCxDQUFDLEFBQ0QsV0FBVyw0Q0FBOEIsQ0FBQyxBQUN4QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksNkJBQTZCLENBQUMsQUFDOUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSw2QkFBNkIsQ0FBQyxBQUNsRSxDQUFDLEFBQ0gsQ0FBQyxBQUNELE9BQU8sOEJBQUMsQ0FBQyxBQUNQLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsR0FBRyxDQUNuQixPQUFPLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNyQixPQUFPLENBQUUsSUFBSSxDQUNiLFdBQVcsQ0FBRSxNQUFNLENBQ25CLE1BQU0sQ0FBRSxJQUFJLENBQ1osSUFBSSxDQUFFLElBQUksQ0FDVixXQUFXLENBQUUsSUFBSSxBQUNuQixDQUFDLEFBRUQsSUFBSSw4QkFBQyxDQUFDLEFBQ0osU0FBUyxDQUFFLENBQUMsQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxHQUFHLENBQ25CLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFFBQVEsQ0FBRSxNQUFNLEFBQ2xCLENBQUMsQUFFRCxFQUFFLDhCQUFDLENBQUMsQUFDRixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxJQUFJLHFCQUFxQixDQUFDLENBQ2pDLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQ0FDVixXQUFXLENBQUUsTUFBTSxDQUNuQixRQUFRLENBQUUsTUFBTSxDQUNoQixhQUFhLENBQUUsUUFBUSxBQUN6QixDQUFDLEFBRUQsa0JBQWtCLDhCQUFDLENBQUMsQUFDbEIsV0FBVyxDQUFFLGdCQUFnQixDQUM3QixXQUFXLENBQUUsSUFBSSxDQUNqQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxJQUFJLHFCQUFxQixDQUFDLENBQ2pDLFdBQVcsQ0FBRSxHQUFHLEFBQ2xCLENBQUMsQUFFRCxzQkFBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLGVBQUMsQ0FBQyxBQUMvQixPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFFRCxzQkFBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sZUFBQyxDQUFDLEFBQ3pCLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLE9BQU8sQ0FBRSxPQUFPLEFBQ2xCLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (429:8) {:else}
function create_else_block$7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Untitled-1");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$7.name,
		type: "else",
		source: "(429:8) {:else}",
		ctx
	});

	return block;
}

// (427:8) {#if doc}
function create_if_block_2$4(ctx) {
	let t_value = (/*doc*/ ctx[9].title
	? /*doc*/ ctx[9].title
	: /*doc*/ ctx[9].name) + "";

	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*doc*/ 512 && t_value !== (t_value = (/*doc*/ ctx[9].title
			? /*doc*/ ctx[9].title
			: /*doc*/ ctx[9].name) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$4.name,
		type: "if",
		source: "(427:8) {#if doc}",
		ctx
	});

	return block;
}

// (435:6) {#if panel.unsavedChanges}
function create_if_block_1$7(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "•";
			attr_dev(span, "class", "hasUnsavedChanges svelte-1v1omyd");
			add_location(span, file$n, 435, 8, 10519);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$7.name,
		type: "if",
		source: "(435:6) {#if panel.unsavedChanges}",
		ctx
	});

	return block;
}

// (440:6) {#if $project.panels.length > 1}
function create_if_block$c(ctx) {
	let span;
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				tooltip: "Save changes and close editor",
				compact: true,
				icon: "img-xmark-medium-regular",
				padding: "0",
				iconScale: 0.6
			},
			$$inline: true
		});

	iconbutton.$on("mousedown", mousedown_handler);
	iconbutton.$on("mouseup", /*closeThisPanel*/ ctx[16]);

	const block = {
		c: function create() {
			span = element("span");
			create_component(iconbutton.$$.fragment);
			attr_dev(span, "class", "close svelte-1v1omyd");
			add_location(span, file$n, 440, 8, 10694);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			mount_component(iconbutton, span, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$c.name,
		type: "if",
		source: "(440:6) {#if $project.panels.length > 1}",
		ctx
	});

	return block;
}

function create_fragment$o(ctx) {
	let div1;
	let div0;
	let span;
	let h1;
	let t0;
	let t1;
	let t2;
	let iconbutton;
	let t3;
	let editor;
	let div1_style_value;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*doc*/ ctx[9]) return create_if_block_2$4;
		return create_else_block$7;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*panel*/ ctx[0].unsavedChanges && create_if_block_1$7(ctx);
	let if_block2 = /*$project*/ ctx[7].panels.length > 1 && create_if_block$c(ctx);

	iconbutton = new IconButton({
			props: {
				padding: "0 4px",
				tooltip: "Add editor to right",
				compact: true,
				icon: "img-square-split-2x1-medium-regular",
				iconScale: 0.8
			},
			$$inline: true
		});

	iconbutton.$on("mouseup", /*openPanelToRight*/ ctx[15]);

	editor = new Editor({
			props: {
				panel: /*panel*/ ctx[0],
				doc: /*doc*/ ctx[9],
				isFocusedPanel: /*isFocusedPanel*/ ctx[10],
				width: /*width*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			h1 = element("h1");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			create_component(iconbutton.$$.fragment);
			t3 = space();
			create_component(editor.$$.fragment);
			attr_dev(h1, "draggable", "true");
			attr_dev(h1, "class", "svelte-1v1omyd");
			add_location(h1, file$n, 421, 6, 10212);
			attr_dev(span, "class", "tab svelte-1v1omyd");
			add_location(span, file$n, 418, 4, 10151);
			attr_dev(div0, "class", "header svelte-1v1omyd");
			add_location(div0, file$n, 417, 2, 10126);
			attr_dev(div1, "style", div1_style_value = `width: ${/*width*/ ctx[1]}%`);
			attr_dev(div1, "class", "panel svelte-1v1omyd");
			toggle_class(div1, "highlightAll", /*highlightAll*/ ctx[4]);
			toggle_class(div1, "highlightLeftEdge", /*highlightLeftEdge*/ ctx[5]);
			toggle_class(div1, "highlightRightEdge", /*highlightRightEdge*/ ctx[6]);
			toggle_class(div1, "isFocusedPanel", /*isFocusedPanel*/ ctx[10]);
			toggle_class(div1, "isFirstPanel", /*isFirstPanel*/ ctx[2]);
			toggle_class(div1, "isLastPanel", /*isLastPanel*/ ctx[3]);
			add_location(div1, file$n, 402, 0, 9825);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(span, h1);
			if_block0.m(h1, null);
			append_dev(span, t0);
			if (if_block1) if_block1.m(span, null);
			append_dev(span, t1);
			if (if_block2) if_block2.m(span, null);
			append_dev(div0, t2);
			mount_component(iconbutton, div0, null);
			append_dev(div1, t3);
			mount_component(editor, div1, null);
			/*div1_binding*/ ctx[20](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(h1, "dragstart", /*onDragTabStart*/ ctx[11], false, false, false),
					listen_dev(h1, "dragend", /*onDragTabEnd*/ ctx[12], false, false, false),
					listen_dev(div1, "mousedown", /*focusPanel*/ ctx[17], false, false, false),
					listen_dev(div1, "dragover", prevent_default(/*onDragOver*/ ctx[13]), false, true, false),
					listen_dev(div1, "drop", /*onDrop*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(h1, null);
				}
			}

			if (/*panel*/ ctx[0].unsavedChanges) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$7(ctx);
					if_block1.c();
					if_block1.m(span, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*$project*/ ctx[7].panels.length > 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*$project*/ 128) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$c(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(span, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const editor_changes = {};
			if (dirty & /*panel*/ 1) editor_changes.panel = /*panel*/ ctx[0];
			if (dirty & /*doc*/ 512) editor_changes.doc = /*doc*/ ctx[9];
			if (dirty & /*isFocusedPanel*/ 1024) editor_changes.isFocusedPanel = /*isFocusedPanel*/ ctx[10];
			if (dirty & /*width*/ 2) editor_changes.width = /*width*/ ctx[1];
			editor.$set(editor_changes);

			if (!current || dirty & /*width*/ 2 && div1_style_value !== (div1_style_value = `width: ${/*width*/ ctx[1]}%`)) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (dirty & /*highlightAll*/ 16) {
				toggle_class(div1, "highlightAll", /*highlightAll*/ ctx[4]);
			}

			if (dirty & /*highlightLeftEdge*/ 32) {
				toggle_class(div1, "highlightLeftEdge", /*highlightLeftEdge*/ ctx[5]);
			}

			if (dirty & /*highlightRightEdge*/ 64) {
				toggle_class(div1, "highlightRightEdge", /*highlightRightEdge*/ ctx[6]);
			}

			if (dirty & /*isFocusedPanel*/ 1024) {
				toggle_class(div1, "isFocusedPanel", /*isFocusedPanel*/ ctx[10]);
			}

			if (dirty & /*isFirstPanel*/ 4) {
				toggle_class(div1, "isFirstPanel", /*isFirstPanel*/ ctx[2]);
			}

			if (dirty & /*isLastPanel*/ 8) {
				toggle_class(div1, "isLastPanel", /*isLastPanel*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			transition_in(iconbutton.$$.fragment, local);
			transition_in(editor.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			transition_out(iconbutton.$$.fragment, local);
			transition_out(editor.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(iconbutton);
			destroy_component(editor);
			/*div1_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$o.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function openDocInNewPanel(domEvent, newPanelIndex) {
	window.api.send("dispatch", {
		type: "OPEN_NEW_PANEL",
		docId: domEvent.dataTransfer.getData("text/docid"),
		panelIndex: newPanelIndex
	});
}

const mousedown_handler = domEvent => {
	// Stop propogation so we don't trigger `on:mousedown={focusPanel}` on parent div when clicking this button to close the panel. 
	domEvent.stopPropagation();
};

function instance$o($$self, $$props, $$invalidate) {
	let $files;
	let $project;
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(19, $files = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(7, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EditorPanel", slots, []);
	const dispatch = createEventDispatcher();
	let { index = 0 } = $$props;
	let { panel = {} } = $$props;
	let { width = 20 } = $$props; // Percentage. Is converted to `20%`.
	let { isFirstPanel = false } = $$props;
	let { isLastPanel = false } = $$props;
	let { highlightAll = undefined } = $$props;
	let { highlightLeftEdge = undefined } = $$props;
	let { highlightRightEdge = undefined } = $$props;
	let el; // This element

	// On drag start, if the dragged file is a doc, set it's id as a dataTransfer item. We use a custom `text/docid`. Per: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#dragdata
	function onDragTabStart(domEvent) {
		domEvent.dataTransfer.setData("text/tabindex", index);
		dispatch("dragTabStart", { tabIndex: index });
	}

	function onDragTabEnd() {
		dispatch("dragTabCancel");
	}

	// ------ DRAG AND DROP ------ //
	function onDragOver(domEvent) {
		const isDoc = domEvent.dataTransfer.types.includes("text/docid");
		const isTab = domEvent.dataTransfer.types.includes("text/tabindex");

		if (isDoc) {
			if (isOverLeftEdge(domEvent)) {
				dispatch("dragDocOverEdge", { edge: "left", panelIndex: index });
			} else if (isOverRightEdge(domEvent)) {
				dispatch("dragDocOverEdge", { edge: "right", panelIndex: index });
			} else {
				dispatch("dragDocOverCenter", { panelIndex: index });
			}
		} else if (isTab) {
			dispatch("dragTabOver", { panelIndex: index });
		}
	}

	function onDrop(domEvent) {
		const isDoc = domEvent.dataTransfer.types.includes("text/docid");
		const isTab = domEvent.dataTransfer.types.includes("text/tabindex");

		if (isDoc) {
			if (isOverLeftEdge(domEvent)) {
				openDocInNewPanel(domEvent, index);
			} else if (isOverRightEdge(domEvent)) {
				openDocInNewPanel(domEvent, index + 1);
			} else {
				openDocInThisPanel(domEvent);
			}
		} else if (isTab) {
			const draggedTabIndex = domEvent.dataTransfer.getData("text/tabindex");

			window.api.send("dispatch", {
				type: "MOVE_PANEL",
				fromIndex: draggedTabIndex,
				toIndex: index
			});
		}
	}

	/**
 * When user drops doc onto this panel, load the doc.
 */
	function openDocInThisPanel(domEvent) {
		// Only proceed if dragged doc is different from current.
		const draggedDocId = domEvent.dataTransfer.getData("text/docid");

		if (draggedDocId == panel.docId) return;

		// Load dragged doc
		window.api.send("dispatch", {
			type: "OPEN_DOC_IN_PANEL",
			panelIndex: index,
			doc: files.byId[draggedDocId],
			selectInSideBar: true,
			outgoingDoc: doc,
			outgoingDocData: panel.unsavedChanges ? getCmDataByPanelId(panel.id) : "",
			isNewDoc: panel.docId == "newDoc"
		});

		// Focus panel
		focusPanel();
	}

	/**
 * While dragging, is mouse over left edge of panel?
 * "Edge" width is 25px, or 50px on far left/right.
 * @param domEvent
 */
	function isOverLeftEdge(domEvent) {
		// Get mouse position inside the element
		const posX = domEvent.clientX - el.getBoundingClientRect().x;

		return isFirstPanel ? posX < 50 : posX < 25;
	}

	/**
 * While dragging, is mouse over left edge of panel?
 */
	function isOverRightEdge(domEvent) {
		const { x, width } = el.getBoundingClientRect();

		// Get mouse position inside the element
		const posX = domEvent.clientX - x;

		return isLastPanel ? posX > width - 50 : posX > width - 25;
	}

	// ------ RESIZE ------ //
	// TODO 3/17: Remove this? Not sure it's doing anything anymore. Found it active but seemingly not called by anything.
	// /**
	//  * If user clicks-and-drags close enough to left/right edges, we start a resize operation (and cancel the event default). Else we just focus the panel.
	//  */
	//  function onMouseDown(domEvent) {
	//   const { x, width } = el.getBoundingClientRect()
	//   const posX = domEvent.clientX - x
	//   const isCloseEnoughToLeftEdge = posX < 10
	//   const isCloseEnoughToRightEdge = posX > width - 10
	//   if (isCloseEnoughToRightEdge || isCloseEnoughToRightEdge) {
	//     domEvent.preventDefault()
	//   } else {
	//     focusPanel()
	//   }
	// }
	// function setWidth(domEvent) {
	//   dispatch('resize', { 
	//     domEvent: domEvent, 
	//   })
	// }
	// function resize(domEvent) {
	//   dragging = true;
	//   window.addEventListener('mouseup', resizeEnd, false);
	//   window.addEventListener('mousemove', setWidth, false);
	// }
	// function resizeEnd() {
	//   dragging = false;
	//   window.removeEventListener('mouseup', resizeEnd, false);
	//   window.removeEventListener('mousemove', setWidth, false);
	//   dispatch('resizeend')
	// }
	// ------- OPEN, CLOSE, AND FOCUS PANELS ------- //
	/**
 * Open new panel to right of current one, with an empty doc
 */
	function openPanelToRight() {
		window.api.send("dispatch", {
			type: "OPEN_NEW_PANEL",
			docId: "newDoc",
			panelIndex: index + 1
		});
	}

	function closeThisPanel() {
		window.api.send("dispatch", {
			type: "CLOSE_PANEL",
			panelIndex: index,
			outgoingDoc: doc,
			outgoingDocData: panel.unsavedChanges ? getCmDataByPanelId(panel.id) : "",
			isNewDoc: panel.docId == "newDoc"
		});
	}

	function focusPanel() {
		if ($project.focusedPanelIndex == index) return;
		window.api.send("dispatch", { type: "FOCUS_PANEL", panelIndex: index });
	}

	// ------- ON MOUNT ------- //
	let removeListenerMethods = [];

	onMount(() => {
		const listener1 = window.api.receive("mainRequestsCloseFocusedPanel", () => {
			if (isFocusedPanel) {
				closeThisPanel();
			}
		});

		removeListenerMethods.push(listener1);
	});

	onDestroy(() => {
		// Remove `window.api.receive` listeners
		removeListenerMethods.forEach(remove => remove());
	});

	const writable_props = [
		"index",
		"panel",
		"width",
		"isFirstPanel",
		"isLastPanel",
		"highlightAll",
		"highlightLeftEdge",
		"highlightRightEdge"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EditorPanel> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	$$self.$$set = $$props => {
		if ("index" in $$props) $$invalidate(18, index = $$props.index);
		if ("panel" in $$props) $$invalidate(0, panel = $$props.panel);
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("isFirstPanel" in $$props) $$invalidate(2, isFirstPanel = $$props.isFirstPanel);
		if ("isLastPanel" in $$props) $$invalidate(3, isLastPanel = $$props.isLastPanel);
		if ("highlightAll" in $$props) $$invalidate(4, highlightAll = $$props.highlightAll);
		if ("highlightLeftEdge" in $$props) $$invalidate(5, highlightLeftEdge = $$props.highlightLeftEdge);
		if ("highlightRightEdge" in $$props) $$invalidate(6, highlightRightEdge = $$props.highlightRightEdge);
	};

	$$self.$capture_state = () => ({
		project,
		files,
		onMount,
		onDestroy,
		Editor,
		IconButton,
		createEventDispatcher,
		AddressBar,
		getCmDataByPanelId,
		dispatch,
		index,
		panel,
		width,
		isFirstPanel,
		isLastPanel,
		highlightAll,
		highlightLeftEdge,
		highlightRightEdge,
		el,
		onDragTabStart,
		onDragTabEnd,
		onDragOver,
		onDrop,
		openDocInThisPanel,
		openDocInNewPanel,
		isOverLeftEdge,
		isOverRightEdge,
		openPanelToRight,
		closeThisPanel,
		focusPanel,
		removeListenerMethods,
		doc,
		$files,
		isFocusedPanel,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("index" in $$props) $$invalidate(18, index = $$props.index);
		if ("panel" in $$props) $$invalidate(0, panel = $$props.panel);
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("isFirstPanel" in $$props) $$invalidate(2, isFirstPanel = $$props.isFirstPanel);
		if ("isLastPanel" in $$props) $$invalidate(3, isLastPanel = $$props.isLastPanel);
		if ("highlightAll" in $$props) $$invalidate(4, highlightAll = $$props.highlightAll);
		if ("highlightLeftEdge" in $$props) $$invalidate(5, highlightLeftEdge = $$props.highlightLeftEdge);
		if ("highlightRightEdge" in $$props) $$invalidate(6, highlightRightEdge = $$props.highlightRightEdge);
		if ("el" in $$props) $$invalidate(8, el = $$props.el);
		if ("removeListenerMethods" in $$props) removeListenerMethods = $$props.removeListenerMethods;
		if ("doc" in $$props) $$invalidate(9, doc = $$props.doc);
		if ("isFocusedPanel" in $$props) $$invalidate(10, isFocusedPanel = $$props.isFocusedPanel);
	};

	let doc;
	let isFocusedPanel;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$files, panel*/ 524289) {
			 $$invalidate(9, doc = $files.byId[panel.docId]);
		}

		if ($$self.$$.dirty & /*index, $project*/ 262272) {
			 $$invalidate(10, isFocusedPanel = index == $project.focusedPanelIndex);
		}
	};

	return [
		panel,
		width,
		isFirstPanel,
		isLastPanel,
		highlightAll,
		highlightLeftEdge,
		highlightRightEdge,
		$project,
		el,
		doc,
		isFocusedPanel,
		onDragTabStart,
		onDragTabEnd,
		onDragOver,
		onDrop,
		openPanelToRight,
		closeThisPanel,
		focusPanel,
		index,
		$files,
		div1_binding
	];
}

class EditorPanel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1v1omyd-style")) add_css$o();

		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
			index: 18,
			panel: 0,
			width: 1,
			isFirstPanel: 2,
			isLastPanel: 3,
			highlightAll: 4,
			highlightLeftEdge: 5,
			highlightRightEdge: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditorPanel",
			options,
			id: create_fragment$o.name
		});
	}

	get index() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set index(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get panel() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set panel(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isFirstPanel() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isFirstPanel(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLastPanel() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLastPanel(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get highlightAll() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set highlightAll(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get highlightLeftEdge() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set highlightLeftEdge(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get highlightRightEdge() {
		throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set highlightRightEdge(value) {
		throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/EditorPanelDivider.svelte generated by Svelte v3.30.1 */
const file$o = "src/js/renderer/component/main/EditorPanelDivider.svelte";

function add_css$p() {
	var style = element("style");
	style.id = "svelte-q8fgzp-style";
	style.textContent = "@keyframes svelte-q8fgzp-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.divider.svelte-q8fgzp{height:100%;width:1px;background:var(--separatorColor);position:relative}.dragTarget.svelte-q8fgzp{position:absolute;top:0;left:-5px;width:10px;height:100%;z-index:10}.divider.svelte-q8fgzp:not(.enabled){pointer-events:none}.dragTarget.svelte-q8fgzp:hover,.dragTarget.dragging.svelte-q8fgzp{cursor:col-resize}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdG9yUGFuZWxEaXZpZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRWRpdG9yUGFuZWxEaXZpZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSdcbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxuXG4gIGV4cG9ydCBsZXQgZW5hYmxlZCA9IHRydWVcblxuICBsZXQgZHJhZ2dpbmcgPSBmYWxzZVxuXG4gIGZ1bmN0aW9uIHNldFdpZHRoKGRvbUV2ZW50KSB7XG4gICAgZGlzcGF0Y2goJ3Jlc2l6ZScsIHsgXG4gICAgICBkb21FdmVudDogZG9tRXZlbnQsIFxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZXNpemUoZG9tRXZlbnQpIHtcbiAgICBkcmFnZ2luZyA9IHRydWU7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCByZXNpemVFbmQsIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2V0V2lkdGgsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZUVuZCgpIHtcbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmVzaXplRW5kLCBmYWxzZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNldFdpZHRoLCBmYWxzZSk7XG4gICAgZGlzcGF0Y2goJ3Jlc2l6ZWVuZCcpXG4gIH1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPSd0ZXh0L3Njc3MnPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbi5kaXZpZGVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1zZXBhcmF0b3JDb2xvcik7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmRyYWdUYXJnZXQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogLTVweDtcbiAgd2lkdGg6IDEwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgei1pbmRleDogMTA7XG59XG5cbi5kaXZpZGVyOm5vdCguZW5hYmxlZCkge1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLmRyYWdUYXJnZXQ6aG92ZXIsXG4uZHJhZ1RhcmdldC5kcmFnZ2luZyB7XG4gIGN1cnNvcjogY29sLXJlc2l6ZTtcbn08L3N0eWxlPlxuXG48ZGl2IFxuICBjbGFzcz0nZGl2aWRlcicgXG4gIGNsYXNzOmVuYWJsZWRcbj5cbiAgPGRpdiBcbiAgICBjbGFzcz0nZHJhZ1RhcmdldCdcbiAgICBjbGFzczpkcmFnZ2luZ1xuICAgIG9uOm1vdXNlZG93bnxwcmV2ZW50RGVmYXVsdD17cmVzaXplfVxuICAgIG9uOmRibGNsaWNrXG4gIC8+XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEJ3QixXQUFXLHlCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsUUFBUSxjQUFDLENBQUMsQUFDUixNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxHQUFHLENBQ1YsVUFBVSxDQUFFLElBQUksZ0JBQWdCLENBQUMsQ0FDakMsUUFBUSxDQUFFLFFBQVEsQUFDcEIsQ0FBQyxBQUVELFdBQVcsY0FBQyxDQUFDLEFBQ1gsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLENBQUMsQ0FDTixJQUFJLENBQUUsSUFBSSxDQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsRUFBRSxBQUNiLENBQUMsQUFFRCxzQkFBUSxLQUFLLFFBQVEsQ0FBQyxBQUFDLENBQUMsQUFDdEIsY0FBYyxDQUFFLElBQUksQUFDdEIsQ0FBQyxBQUVELHlCQUFXLE1BQU0sQ0FDakIsV0FBVyxTQUFTLGNBQUMsQ0FBQyxBQUNwQixNQUFNLENBQUUsVUFBVSxBQUNwQixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$p(ctx) {
	let div1;
	let div0;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			attr_dev(div0, "class", "dragTarget svelte-q8fgzp");
			toggle_class(div0, "dragging", /*dragging*/ ctx[1]);
			add_location(div0, file$o, 67, 2, 1251);
			attr_dev(div1, "class", "divider svelte-q8fgzp");
			toggle_class(div1, "enabled", /*enabled*/ ctx[0]);
			add_location(div1, file$o, 63, 0, 1206);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (!mounted) {
				dispose = [
					listen_dev(div0, "mousedown", prevent_default(/*resize*/ ctx[2]), false, true, false),
					listen_dev(div0, "dblclick", /*dblclick_handler*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*dragging*/ 2) {
				toggle_class(div0, "dragging", /*dragging*/ ctx[1]);
			}

			if (dirty & /*enabled*/ 1) {
				toggle_class(div1, "enabled", /*enabled*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$p.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$p($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EditorPanelDivider", slots, []);
	const dispatch = createEventDispatcher();
	let { enabled = true } = $$props;
	let dragging = false;

	function setWidth(domEvent) {
		dispatch("resize", { domEvent });
	}

	function resize(domEvent) {
		$$invalidate(1, dragging = true);
		window.addEventListener("mouseup", resizeEnd, false);
		window.addEventListener("mousemove", setWidth, false);
	}

	function resizeEnd() {
		$$invalidate(1, dragging = false);
		window.removeEventListener("mouseup", resizeEnd, false);
		window.removeEventListener("mousemove", setWidth, false);
		dispatch("resizeend");
	}

	const writable_props = ["enabled"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EditorPanelDivider> was created with unknown prop '${key}'`);
	});

	function dblclick_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("enabled" in $$props) $$invalidate(0, enabled = $$props.enabled);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		dispatch,
		enabled,
		dragging,
		setWidth,
		resize,
		resizeEnd
	});

	$$self.$inject_state = $$props => {
		if ("enabled" in $$props) $$invalidate(0, enabled = $$props.enabled);
		if ("dragging" in $$props) $$invalidate(1, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [enabled, dragging, resize, dblclick_handler];
}

class EditorPanelDivider extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-q8fgzp-style")) add_css$p();
		init(this, options, instance$p, create_fragment$p, safe_not_equal, { enabled: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditorPanelDivider",
			options,
			id: create_fragment$p.name
		});
	}

	get enabled() {
		throw new Error("<EditorPanelDivider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set enabled(value) {
		throw new Error("<EditorPanelDivider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/main/EditorPanels.svelte generated by Svelte v3.30.1 */
const file$p = "src/js/renderer/component/main/EditorPanels.svelte";

function add_css$q() {
	var style = element("style");
	style.id = "svelte-13ydpf1-style";
	style.textContent = "@keyframes svelte-13ydpf1-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.panels.svelte-13ydpf1{width:100%;display:flex;flex-direction:row;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[26] = i;
	return child_ctx;
}

// (216:4) {#if index !== $project.panels.length - 1}
function create_if_block$d(ctx) {
	let editorpaneldivider;
	let current;

	function resize_handler(...args) {
		return /*resize_handler*/ ctx[18](/*index*/ ctx[26], ...args);
	}

	editorpaneldivider = new EditorPanelDivider({
			props: { enabled: !/*dragIsActive*/ ctx[3] },
			$$inline: true
		});

	editorpaneldivider.$on("resize", resize_handler);
	editorpaneldivider.$on("resizeend", /*savePanelSizes*/ ctx[7]);
	editorpaneldivider.$on("dblclick", /*dividePanelsEvenly*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(editorpaneldivider.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(editorpaneldivider, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const editorpaneldivider_changes = {};
			if (dirty & /*dragIsActive*/ 8) editorpaneldivider_changes.enabled = !/*dragIsActive*/ ctx[3];
			editorpaneldivider.$set(editorpaneldivider_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editorpaneldivider.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editorpaneldivider.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(editorpaneldivider, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$d.name,
		type: "if",
		source: "(216:4) {#if index !== $project.panels.length - 1}",
		ctx
	});

	return block;
}

// (199:2) {#each $project.panels as panel, index (panel.id)}
function create_each_block$1(key_1, ctx) {
	let first;
	let editorpanel;
	let t;
	let if_block_anchor;
	let current;

	editorpanel = new EditorPanel({
			props: {
				panel: /*panel*/ ctx[24],
				index: /*index*/ ctx[26],
				highlightAll: /*indexOfPanelToHighlight*/ ctx[5] == /*index*/ ctx[26],
				highlightLeftEdge: /*indexOfDividerToHighlight*/ ctx[4] == /*index*/ ctx[26],
				highlightRightEdge: /*indexOfDividerToHighlight*/ ctx[4] == /*index*/ ctx[26] + 1,
				width: /*widths*/ ctx[2][/*index*/ ctx[26]],
				isFirstPanel: /*index*/ ctx[26] == 0,
				isLastPanel: /*index*/ ctx[26] == /*$project*/ ctx[0].panels.length - 1
			},
			$$inline: true
		});

	editorpanel.$on("dragDocOverEdge", /*onDragDocOverEdge*/ ctx[13]);
	editorpanel.$on("dragDocOverCenter", /*onDragDocOverCenter*/ ctx[14]);
	editorpanel.$on("dragTabStart", /*onDragTabStart*/ ctx[15]);
	editorpanel.$on("dragTabOver", /*onDragTabOver*/ ctx[16]);
	editorpanel.$on("dragTabCancel", /*onDragTabCancel*/ ctx[17]);
	let if_block = /*index*/ ctx[26] !== /*$project*/ ctx[0].panels.length - 1 && create_if_block$d(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(editorpanel.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(editorpanel, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const editorpanel_changes = {};
			if (dirty & /*$project*/ 1) editorpanel_changes.panel = /*panel*/ ctx[24];
			if (dirty & /*$project*/ 1) editorpanel_changes.index = /*index*/ ctx[26];
			if (dirty & /*indexOfPanelToHighlight, $project*/ 33) editorpanel_changes.highlightAll = /*indexOfPanelToHighlight*/ ctx[5] == /*index*/ ctx[26];
			if (dirty & /*indexOfDividerToHighlight, $project*/ 17) editorpanel_changes.highlightLeftEdge = /*indexOfDividerToHighlight*/ ctx[4] == /*index*/ ctx[26];
			if (dirty & /*indexOfDividerToHighlight, $project*/ 17) editorpanel_changes.highlightRightEdge = /*indexOfDividerToHighlight*/ ctx[4] == /*index*/ ctx[26] + 1;
			if (dirty & /*widths, $project*/ 5) editorpanel_changes.width = /*widths*/ ctx[2][/*index*/ ctx[26]];
			if (dirty & /*$project*/ 1) editorpanel_changes.isFirstPanel = /*index*/ ctx[26] == 0;
			if (dirty & /*$project*/ 1) editorpanel_changes.isLastPanel = /*index*/ ctx[26] == /*$project*/ ctx[0].panels.length - 1;
			editorpanel.$set(editorpanel_changes);

			if (/*index*/ ctx[26] !== /*$project*/ ctx[0].panels.length - 1) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$project*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editorpanel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(editorpanel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(editorpanel, detaching);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(199:2) {#each $project.panels as panel, index (panel.id)}",
		ctx
	});

	return block;
}

function create_fragment$q(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	let each_value = /*$project*/ ctx[0].panels;
	validate_each_argument(each_value);
	const get_key = ctx => /*panel*/ ctx[24].id;
	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "panels svelte-13ydpf1");
			add_location(div, file$p, 188, 0, 5092);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			/*div_binding*/ ctx[19](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "dragover", /*onDragOver*/ ctx[9], false, false, false),
					listen_dev(div, "dragenter", /*onDragEnter*/ ctx[10], true, false, false),
					listen_dev(div, "dragleave", /*onDragLeave*/ ctx[11], false, false, false),
					listen_dev(div, "drop", /*onDrop*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*dragIsActive, resizePanel, $project, savePanelSizes, dividePanelsEvenly, indexOfPanelToHighlight, indexOfDividerToHighlight, widths, onDragDocOverEdge, onDragDocOverCenter, onDragTabStart, onDragTabOver, onDragTabCancel*/ 254461) {
				const each_value = /*$project*/ ctx[0].panels;
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			/*div_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$q($$self, $$props, $$invalidate) {
	let $project;
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(0, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EditorPanels", slots, []);
	let panelsEl;

	// ------- RESIZE ------- //
	let widths = [];

	function setPanelWidths() {
		let newWidths = [];
		$project.panels.forEach(p => newWidths.push(parseFloat(p.width)));

		if (!arraysEqual(widths, newWidths)) {
			$$invalidate(2, widths = newWidths);
		}
	}

	/**
* While user is dragging divider, update `widths` array. 
* We see changes on panel widths instantly.
* @param evt - From Svelte. Includes `domEvent` in `evt.detail`
* @param index - Of panel to left of the divider
*/
	function resizePanel(evt, index) {
		const panels = panelsEl.getBoundingClientRect();
		const domEvent = evt.detail.domEvent;

		// Get mouse X position inside `panels` width, as %
		const percentPosition = (domEvent.clientX - panels.x) / panels.width * 100;

		// Get new % width of panel to LEFT of dragged divider
		let cumulativeWidthsToLeft = 0;

		for (var i = 0; i < index; i++) {
			cumulativeWidthsToLeft += widths[i];
		}

		const percentWidth = percentPosition - cumulativeWidthsToLeft;
		const delta = widths[index] - percentWidth;

		// Update width of LEFT panel
		$$invalidate(2, widths[index] = percentWidth, widths);

		// Update width or RIGHT panel. We want its right edge to not move.
		$$invalidate(2, widths[index + 1] = widths[index + 1] + delta, widths);
	}

	/**
 * When user is done dragging divider, save changes to store
 */
	function savePanelSizes() {
		window.api.send("dispatch", { type: "SET_PANEL_WIDTHS", widths });
	}

	/**
 * Set all panels to equal widths When user double clicks a divider
 */
	function dividePanelsEvenly() {
		$$invalidate(2, widths = widths.map(w => w = 100 / $project.panels.length));
		window.api.send("dispatch", { type: "SET_PANEL_WIDTHS", widths });
	}

	// ------- DRAGGING ------- //
	// NOTE: We have to deal with a very annoying issue with drag-and-drop, wherein leave event fires when we drag over a child element. To prevent that, when leave event fires, we check if the new target is the same as the original (parent) target. If no, we ignore it. `dragTarget` is the variable that saves the target, and that we check against.
	let dragTarget = undefined;

	let dragIsActive = false;

	function onDragOver() {
		$$invalidate(3, dragIsActive = true);
	}

	function onDragEnter(domEvent) {
		const isDoc = domEvent.dataTransfer.types.includes("text/docid");

		if (isDoc) {
			dragTarget = domEvent.target;
		}
	}

	/** 
 * Called when 1) user drags outside EditorPanels element, 2) user drags over child element (we regard this as a false positive, and only care if the user has dragged outside the element; see note above), and 3) cancels drag action (e.g. by pressing Escape).
*/
	function onDragLeave(domEvent) {
		if (domEvent.target == dragTarget) {
			reset();
		}
	}

	function onDrop() {
		reset();
	}

	/**
 * Reset various state tracking variables
 */
	function reset() {
		dragTarget = undefined;
		$$invalidate(4, indexOfDividerToHighlight = undefined);
		$$invalidate(5, indexOfPanelToHighlight = undefined);
		draggedTabIndex = undefined;
		$$invalidate(3, dragIsActive = false);
	}

	// ------- DRAG: DOCS ------- //
	let indexOfDividerToHighlight = undefined;

	let indexOfPanelToHighlight = undefined;

	function onDragDocOverEdge(evt) {
		if (evt.detail.edge == "left") {
			$$invalidate(4, indexOfDividerToHighlight = evt.detail.panelIndex);
		} else {
			$$invalidate(4, indexOfDividerToHighlight = evt.detail.panelIndex + 1);
		}

		$$invalidate(5, indexOfPanelToHighlight = undefined);
	}

	function onDragDocOverCenter(evt) {
		$$invalidate(4, indexOfDividerToHighlight = undefined);
		$$invalidate(5, indexOfPanelToHighlight = evt.detail.panelIndex);
	}

	// ------- DRAG: TABS ------- //
	// These are functions related to dragging panel tabs
	let draggedTabIndex = undefined;

	/**
 * We save the index of the dragged tab to a variable.
 * @param evt
 */
	function onDragTabStart(evt) {
		draggedTabIndex = evt.detail.tabIndex;
	}

	/**
 * If the dragged tab / panel is to the right, we highlight the left edge of the panel being dragged over. Else, we highlight the right edge.
 */
	function onDragTabOver(evt) {
		if (draggedTabIndex == evt.detail.panelIndex) return;
		$$invalidate(4, indexOfDividerToHighlight = evt.detail.panelIndex);

		if (draggedTabIndex < evt.detail.panelIndex) {
			$$invalidate(4, indexOfDividerToHighlight++, indexOfDividerToHighlight);
		}
	}

	/**
 * Called when user cancels tab dragging by pressing Escape. We need to clear (reset) the tracking variables in this, the parent.
 */
	function onDragTabCancel() {
		reset();
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EditorPanels> was created with unknown prop '${key}'`);
	});

	const resize_handler = (index, evt) => resizePanel(evt, index);

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			panelsEl = $$value;
			$$invalidate(1, panelsEl);
		});
	}

	$$self.$capture_state = () => ({
		project,
		EditorPanel,
		EditorPanelDivider,
		arraysEqual,
		panelsEl,
		widths,
		setPanelWidths,
		resizePanel,
		savePanelSizes,
		dividePanelsEvenly,
		dragTarget,
		dragIsActive,
		onDragOver,
		onDragEnter,
		onDragLeave,
		onDrop,
		reset,
		indexOfDividerToHighlight,
		indexOfPanelToHighlight,
		onDragDocOverEdge,
		onDragDocOverCenter,
		draggedTabIndex,
		onDragTabStart,
		onDragTabOver,
		onDragTabCancel,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("panelsEl" in $$props) $$invalidate(1, panelsEl = $$props.panelsEl);
		if ("widths" in $$props) $$invalidate(2, widths = $$props.widths);
		if ("dragTarget" in $$props) dragTarget = $$props.dragTarget;
		if ("dragIsActive" in $$props) $$invalidate(3, dragIsActive = $$props.dragIsActive);
		if ("indexOfDividerToHighlight" in $$props) $$invalidate(4, indexOfDividerToHighlight = $$props.indexOfDividerToHighlight);
		if ("indexOfPanelToHighlight" in $$props) $$invalidate(5, indexOfPanelToHighlight = $$props.indexOfPanelToHighlight);
		if ("draggedTabIndex" in $$props) draggedTabIndex = $$props.draggedTabIndex;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$project*/ 1) {
			 ($project.panels, setPanelWidths());
		}
	};

	return [
		$project,
		panelsEl,
		widths,
		dragIsActive,
		indexOfDividerToHighlight,
		indexOfPanelToHighlight,
		resizePanel,
		savePanelSizes,
		dividePanelsEvenly,
		onDragOver,
		onDragEnter,
		onDragLeave,
		onDrop,
		onDragDocOverEdge,
		onDragDocOverCenter,
		onDragTabStart,
		onDragTabOver,
		onDragTabCancel,
		resize_handler,
		div_binding
	];
}

class EditorPanels extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-13ydpf1-style")) add_css$q();
		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditorPanels",
			options,
			id: create_fragment$q.name
		});
	}
}

/* src/js/renderer/component/firstrun/FirstRun.svelte generated by Svelte v3.30.1 */

const file$q = "src/js/renderer/component/firstrun/FirstRun.svelte";

function add_css$r() {
	var style = element("style");
	style.id = "svelte-1rtxcnr-style";
	style.textContent = "@keyframes svelte-1rtxcnr-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#firstrun.svelte-1rtxcnr{padding:4rem;overflow:scroll;height:100%}h1.svelte-1rtxcnr{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--labelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlyc3RSdW4uc3ZlbHRlIiwic291cmNlcyI6WyJGaXJzdFJ1bi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblxuZnVuY3Rpb24gZHJvcChldnQpIHtcbiAgY29uc3QgZmlsZSA9IGV2dC5kYXRhVHJhbnNmZXIuZmlsZXNbMF1cbiAgY29uc3QgdHlwZSA9IGZpbGUudHlwZSA9PSAnJyA/ICdmb2xkZXInIDogZmlsZS50eXBlLmluY2x1ZGVzKCdtYXJrZG93bicpID8gJ2RvYycgOiB1bmRlZmluZWRcbiAgXG4gIGlmICh0eXBlID09ICdmb2xkZXInKSB7XG4gICAgd2luZG93LmFwaS5zZW5kKCdkaXNwYXRjaCcsIHsgXG4gICAgICB0eXBlOiAnU0VUX1BST0pFQ1RfRElSRUNUT1JZJyxcbiAgICAgIGRpcmVjdG9yeTogZmlsZS5wYXRoXG4gICAgfSlcbiAgfVxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4jZmlyc3RydW4ge1xuICBwYWRkaW5nOiA0cmVtO1xuICBvdmVyZmxvdzogc2Nyb2xsO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbmgxIHtcbiAgZm9udC1mYW1pbHk6IFwiU0YgUHJvIERpc3BsYXlcIjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4xMnB4O1xuICBjb2xvcjogdmFyKC0tbGFiZWxDb2xvcik7XG59XG5cbmgyIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbn08L3N0eWxlPlxuXG48IS0tIDxzdmVsdGU6Ym9keSBvbjpkcm9wfHByZXZlbnREZWZhdWx0fHN0b3BQcm9wYWdhdGlvbj17ZHJvcH0gLz4gLS0+XG5cbjxkaXYgaWQ9XCJmaXJzdHJ1blwiIG9uOmRyYWdvdmVyfHByZXZlbnREZWZhdWx0IG9uOmRyb3B8cHJldmVudERlZmF1bHQ9e2Ryb3B9PlxuICA8aDE+R2FtYmllcjwvaDE+XG5cbiAgPGJ1dHRvblxuICAgIG9uOmNsaWNrPXsoKSA9PiB7XG4gICAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywgeyB0eXBlOiAnU0VMRUNUX1BST0pFQ1RfRElSRUNUT1JZX0ZST01fRElBTE9HJyB9KVxuICAgIH19PlxuICAgIENob29zZSBQcm9qZWN0IEZvbGRlci4uLlxuICA8L2J1dHRvbj5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdCd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELFNBQVMsZUFBQyxDQUFDLEFBQ1QsT0FBTyxDQUFFLElBQUksQ0FDYixRQUFRLENBQUUsTUFBTSxDQUNoQixNQUFNLENBQUUsSUFBSSxBQUNkLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNGLFdBQVcsQ0FBRSxnQkFBZ0IsQ0FDN0IsV0FBVyxDQUFFLElBQUksQ0FDakIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixLQUFLLENBQUUsSUFBSSxZQUFZLENBQUMsQUFDMUIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$r(ctx) {
	let div;
	let h1;
	let t1;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "Gambier";
			t1 = space();
			button = element("button");
			button.textContent = "Choose Project Folder...";
			attr_dev(h1, "class", "svelte-1rtxcnr");
			add_location(h1, file$q, 51, 2, 1094);
			add_location(button, file$q, 53, 2, 1114);
			attr_dev(div, "id", "firstrun");
			attr_dev(div, "class", "svelte-1rtxcnr");
			add_location(div, file$q, 50, 0, 1015);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(div, t1);
			append_dev(div, button);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler*/ ctx[1], false, false, false),
					listen_dev(div, "dragover", prevent_default(/*dragover_handler*/ ctx[0]), false, true, false),
					listen_dev(div, "drop", prevent_default(drop), false, true, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$r.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function drop(evt) {
	const file = evt.dataTransfer.files[0];

	const type = file.type == ""
	? "folder"
	: file.type.includes("markdown") ? "doc" : undefined;

	if (type == "folder") {
		window.api.send("dispatch", {
			type: "SET_PROJECT_DIRECTORY",
			directory: file.path
		});
	}
}

function instance$r($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("FirstRun", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FirstRun> was created with unknown prop '${key}'`);
	});

	function dragover_handler(event) {
		bubble($$self, event);
	}

	const click_handler = () => {
		window.api.send("dispatch", {
			type: "SELECT_PROJECT_DIRECTORY_FROM_DIALOG"
		});
	};

	$$self.$capture_state = () => ({ drop });
	return [dragover_handler, click_handler];
}

class FirstRun extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1rtxcnr-style")) add_css$r();
		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FirstRun",
			options,
			id: create_fragment$r.name
		});
	}
}

/* src/js/renderer/component/dev/FunctionalTests.svelte generated by Svelte v3.30.1 */
const file$r = "src/js/renderer/component/dev/FunctionalTests.svelte";

function add_css$s() {
	var style = element("style");
	style.id = "svelte-1l96k0k-style";
	style.textContent = "@keyframes svelte-1l96k0k-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#functionalTests.svelte-1l96k0k{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin:5em}button.svelte-1l96k0k{display:block;margin:0.5em 0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25hbFRlc3RzLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRnVuY3Rpb25hbFRlc3RzLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gXCIuLi8uLi9GaWxlc01hbmFnZXJcIjtcbiAgaW1wb3J0IHsgcHJvamVjdCB9IGZyb20gXCIuLi8uLi9TdGF0ZU1hbmFnZXJcIjtcbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbiNmdW5jdGlvbmFsVGVzdHMge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgbWFyZ2luOiA1ZW07XG59XG5cbmJ1dHRvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDAuNWVtIDA7XG59PC9zdHlsZT5cblxuPGRpdiBpZD1cImZ1bmN0aW9uYWxUZXN0c1wiPlxuXG4gIFByb2plY3QgSUQ6IHt3aW5kb3cuaWR9PGJyPlxuICBEaXJlY3Rvcnk6IHskcHJvamVjdC5kaXJlY3Rvcnl9PGJyPlxuICBGaWxlczogeyRmaWxlcy5hbGxJZHN9PGJyPlxuXG4gIDxidXR0b25cbiAgb246Y2xpY2s9eygpID0+IHtcbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ1NFVF9QUk9KRUNUX0RJUkVDVE9SWScsXG4gICAgICBkaXJlY3Rvcnk6IFwiL1VzZXJzL2pvc2gvRGVza3RvcC9UZXN0IG5vdGVzL0pvcmRhblwiXG4gICAgfSlcbiAgfX1cbiAgPlNFVF9QUk9KRUNUX0RJUkVDVE9SWSB0byBKb3JkYW48L2J1dHRvbj5cblxuICA8YnV0dG9uXG4gICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgIHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7XG4gICAgICAgIHR5cGU6ICdTRVRfUFJPSkVDVF9ESVJFQ1RPUlknLFxuICAgICAgICBkaXJlY3Rvcnk6IFwiL1VzZXJzL2pvc2gvRGVza3RvcC9UZXN0IG5vdGVzL0JvcmlzXCJcbiAgICAgIH0pXG4gICAgfX1cbiAgPlNFVF9QUk9KRUNUX0RJUkVDVE9SWSB0byBCb3JpczwvYnV0dG9uPlxuXG4gIDxidXR0b25cbiAgb246Y2xpY2s9eygpID0+IHtcbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ0NSRUFURV9ORVdfUFJPSkVDVCdcbiAgICB9KVxuICB9fVxuICA+Q1JFQVRFX05FV19QUk9KRUNUPC9idXR0b24+XG5cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELGdCQUFnQixlQUFDLENBQUMsQUFDaEIsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixNQUFNLENBQUUsR0FBRyxBQUNiLENBQUMsQUFFRCxNQUFNLGVBQUMsQ0FBQyxBQUNOLE9BQU8sQ0FBRSxLQUFLLENBQ2QsTUFBTSxDQUFFLEtBQUssQ0FBQyxDQUFDLEFBQ2pCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$s(ctx) {
	let div;
	let t0;
	let t1_value = window.id + "";
	let t1;
	let br0;
	let t2;
	let t3_value = /*$project*/ ctx[0].directory + "";
	let t3;
	let br1;
	let t4;
	let t5_value = /*$files*/ ctx[1].allIds + "";
	let t5;
	let br2;
	let t6;
	let button0;
	let t8;
	let button1;
	let t10;
	let button2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Project ID: ");
			t1 = text(t1_value);
			br0 = element("br");
			t2 = text("\n  Directory: ");
			t3 = text(t3_value);
			br1 = element("br");
			t4 = text("\n  Files: ");
			t5 = text(t5_value);
			br2 = element("br");
			t6 = space();
			button0 = element("button");
			button0.textContent = "SET_PROJECT_DIRECTORY to Jordan";
			t8 = space();
			button1 = element("button");
			button1.textContent = "SET_PROJECT_DIRECTORY to Boris";
			t10 = space();
			button2 = element("button");
			button2.textContent = "CREATE_NEW_PROJECT";
			add_location(br0, file$r, 29, 25, 606);
			add_location(br1, file$r, 30, 33, 644);
			add_location(br2, file$r, 31, 24, 673);
			attr_dev(button0, "class", "svelte-1l96k0k");
			add_location(button0, file$r, 33, 2, 681);
			attr_dev(button1, "class", "svelte-1l96k0k");
			add_location(button1, file$r, 42, 2, 896);
			attr_dev(button2, "class", "svelte-1l96k0k");
			add_location(button2, file$r, 51, 2, 1121);
			attr_dev(div, "id", "functionalTests");
			attr_dev(div, "class", "svelte-1l96k0k");
			add_location(div, file$r, 27, 0, 553);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, br0);
			append_dev(div, t2);
			append_dev(div, t3);
			append_dev(div, br1);
			append_dev(div, t4);
			append_dev(div, t5);
			append_dev(div, br2);
			append_dev(div, t6);
			append_dev(div, button0);
			append_dev(div, t8);
			append_dev(div, button1);
			append_dev(div, t10);
			append_dev(div, button2);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[2], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[3], false, false, false),
					listen_dev(button2, "click", /*click_handler_2*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$project*/ 1 && t3_value !== (t3_value = /*$project*/ ctx[0].directory + "")) set_data_dev(t3, t3_value);
			if (dirty & /*$files*/ 2 && t5_value !== (t5_value = /*$files*/ ctx[1].allIds + "")) set_data_dev(t5, t5_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$s.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$s($$self, $$props, $$invalidate) {
	let $project;
	let $files;
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(0, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(1, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("FunctionalTests", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FunctionalTests> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		window.api.send("dispatch", {
			type: "SET_PROJECT_DIRECTORY",
			directory: "/Users/josh/Desktop/Test notes/Jordan"
		});
	};

	const click_handler_1 = () => {
		window.api.send("dispatch", {
			type: "SET_PROJECT_DIRECTORY",
			directory: "/Users/josh/Desktop/Test notes/Boris"
		});
	};

	const click_handler_2 = () => {
		window.api.send("dispatch", { type: "CREATE_NEW_PROJECT" });
	};

	$$self.$capture_state = () => ({ files, project, $project, $files });
	return [$project, $files, click_handler, click_handler_1, click_handler_2];
}

class FunctionalTests extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1l96k0k-style")) add_css$s();
		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FunctionalTests",
			options,
			id: create_fragment$s.name
		});
	}
}

/* src/js/renderer/component/sidebar/Tab.svelte generated by Svelte v3.30.1 */
const file$s = "src/js/renderer/component/sidebar/Tab.svelte";

function add_css$t() {
	var style = element("style");
	style.id = "svelte-1415yw9-style";
	style.textContent = "@keyframes svelte-1415yw9-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}li.svelte-1415yw9{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;background-color:var(--controlTextColor);list-style-type:none;margin:0 12px 0 0;padding:0;width:14px;height:14px;opacity:70%}li.isActive.svelte-1415yw9{background-color:var(--iconAccentColor);opacity:100%}li.svelte-1415yw9:last-of-type{margin:0}.project.svelte-1415yw9{-webkit-mask-image:var(--img-folder)}.project.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-folder-fill)}.allDocs.svelte-1415yw9{-webkit-mask-image:var(--img-doc-on-doc)}.allDocs.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-doc-on-doc-fill)}.mostRecent.svelte-1415yw9{-webkit-mask-image:var(--img-clock)}.mostRecent.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-clock-fill)}.tags.svelte-1415yw9{-webkit-mask-image:var(--img-tag)}.tags.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-tag-fill)}.media.svelte-1415yw9{-webkit-mask-image:var(--img-photo)}.media.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-photo-fill)}.citations.svelte-1415yw9{-webkit-mask-image:var(--img-quote-bubble)}.citations.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-quote-bubble-fill)}.search.svelte-1415yw9{-webkit-mask-image:var(--img-magnifyingglass)}.search.isActive.svelte-1415yw9{-webkit-mask-image:var(--img-magnifyingglass)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFiLnN2ZWx0ZSIsInNvdXJjZXMiOlsiVGFiLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBzaWRlYmFyIH0gZnJvbSAnLi4vLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgeyBzZXRUb29sdGlwIH0gZnJvbSAnLi4vLi4vVG9vbHRpcE1hbmFnZXInXG5cbiAgZXhwb3J0IGxldCBpZFxuICBcbiAgJDogdGFiID0gJHNpZGViYXIudGFic0J5SWRbaWRdXG4gICQ6IGlzQWN0aXZlID0gJHNpZGViYXIuYWN0aXZlVGFiSWQgPT0gaWRcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxubGkge1xuICAtd2Via2l0LW1hc2stc2l6ZTogY29udGFpbjtcbiAgLXdlYmtpdC1tYXNrLXBvc2l0aW9uOiBjZW50ZXI7XG4gIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29udHJvbFRleHRDb2xvcik7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgbWFyZ2luOiAwIDEycHggMCAwO1xuICBwYWRkaW5nOiAwO1xuICB3aWR0aDogMTRweDtcbiAgaGVpZ2h0OiAxNHB4O1xuICBvcGFjaXR5OiA3MCU7XG59XG5saS5pc0FjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWljb25BY2NlbnRDb2xvcik7XG4gIG9wYWNpdHk6IDEwMCU7XG59XG5cbmxpOmxhc3Qtb2YtdHlwZSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLnByb2plY3Qge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1mb2xkZXIpO1xufVxuXG4ucHJvamVjdC5pc0FjdGl2ZSB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLWZvbGRlci1maWxsKTtcbn1cblxuLmFsbERvY3Mge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1kb2Mtb24tZG9jKTtcbn1cblxuLmFsbERvY3MuaXNBY3RpdmUge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1kb2Mtb24tZG9jLWZpbGwpO1xufVxuXG4ubW9zdFJlY2VudCB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLWNsb2NrKTtcbn1cblxuLm1vc3RSZWNlbnQuaXNBY3RpdmUge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1jbG9jay1maWxsKTtcbn1cblxuLnRhZ3Mge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy10YWcpO1xufVxuXG4udGFncy5pc0FjdGl2ZSB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLXRhZy1maWxsKTtcbn1cblxuLm1lZGlhIHtcbiAgLXdlYmtpdC1tYXNrLWltYWdlOiB2YXIoLS1pbWctcGhvdG8pO1xufVxuXG4ubWVkaWEuaXNBY3RpdmUge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1waG90by1maWxsKTtcbn1cblxuLmNpdGF0aW9ucyB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLXF1b3RlLWJ1YmJsZSk7XG59XG5cbi5jaXRhdGlvbnMuaXNBY3RpdmUge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1xdW90ZS1idWJibGUtZmlsbCk7XG59XG5cbi5zZWFyY2gge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1tYWduaWZ5aW5nZ2xhc3MpO1xufVxuXG4uc2VhcmNoLmlzQWN0aXZlIHtcbiAgLXdlYmtpdC1tYXNrLWltYWdlOiB2YXIoLS1pbWctbWFnbmlmeWluZ2dsYXNzKTtcbn08L3N0eWxlPlxuXG48c3ZlbHRlOm9wdGlvbnMgaW1tdXRhYmxlPXt0cnVlfSAvPlxuXG48bGlcbiAgb246Y2xpY2s9eygpID0+IHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7XG4gICAgICB0eXBlOiAnU0VMRUNUX1NJREVCQVJfVEFCX0JZX0lEJyxcbiAgICAgIGlkOiBpZCxcbiAgICB9KX1cbiAgY2xhc3M6aXNBY3RpdmVcbiAgY2xhc3M9e2lkfSBcbiAgdXNlOnNldFRvb2x0aXA9e3t0ZXh0OiBgU2hvdyAke3RhYi50aXRsZX1gLCBlbmFibGVkOiB0cnVlfX0gXG4vPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELEVBQUUsZUFBQyxDQUFDLEFBQ0YsaUJBQWlCLENBQUUsT0FBTyxDQUMxQixxQkFBcUIsQ0FBRSxNQUFNLENBQzdCLG1CQUFtQixDQUFFLFNBQVMsQ0FDOUIsZ0JBQWdCLENBQUUsSUFBSSxrQkFBa0IsQ0FBQyxDQUN6QyxlQUFlLENBQUUsSUFBSSxDQUNyQixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsQixPQUFPLENBQUUsQ0FBQyxDQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsR0FBRyxBQUNkLENBQUMsQUFDRCxFQUFFLFNBQVMsZUFBQyxDQUFDLEFBQ1gsZ0JBQWdCLENBQUUsSUFBSSxpQkFBaUIsQ0FBQyxDQUN4QyxPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFFRCxpQkFBRSxhQUFhLEFBQUMsQ0FBQyxBQUNmLE1BQU0sQ0FBRSxDQUFDLEFBQ1gsQ0FBQyxBQUVELFFBQVEsZUFBQyxDQUFDLEFBQ1Isa0JBQWtCLENBQUUsSUFBSSxZQUFZLENBQUMsQUFDdkMsQ0FBQyxBQUVELFFBQVEsU0FBUyxlQUFDLENBQUMsQUFDakIsa0JBQWtCLENBQUUsSUFBSSxpQkFBaUIsQ0FBQyxBQUM1QyxDQUFDLEFBRUQsUUFBUSxlQUFDLENBQUMsQUFDUixrQkFBa0IsQ0FBRSxJQUFJLGdCQUFnQixDQUFDLEFBQzNDLENBQUMsQUFFRCxRQUFRLFNBQVMsZUFBQyxDQUFDLEFBQ2pCLGtCQUFrQixDQUFFLElBQUkscUJBQXFCLENBQUMsQUFDaEQsQ0FBQyxBQUVELFdBQVcsZUFBQyxDQUFDLEFBQ1gsa0JBQWtCLENBQUUsSUFBSSxXQUFXLENBQUMsQUFDdEMsQ0FBQyxBQUVELFdBQVcsU0FBUyxlQUFDLENBQUMsQUFDcEIsa0JBQWtCLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxBQUMzQyxDQUFDLEFBRUQsS0FBSyxlQUFDLENBQUMsQUFDTCxrQkFBa0IsQ0FBRSxJQUFJLFNBQVMsQ0FBQyxBQUNwQyxDQUFDLEFBRUQsS0FBSyxTQUFTLGVBQUMsQ0FBQyxBQUNkLGtCQUFrQixDQUFFLElBQUksY0FBYyxDQUFDLEFBQ3pDLENBQUMsQUFFRCxNQUFNLGVBQUMsQ0FBQyxBQUNOLGtCQUFrQixDQUFFLElBQUksV0FBVyxDQUFDLEFBQ3RDLENBQUMsQUFFRCxNQUFNLFNBQVMsZUFBQyxDQUFDLEFBQ2Ysa0JBQWtCLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxBQUMzQyxDQUFDLEFBRUQsVUFBVSxlQUFDLENBQUMsQUFDVixrQkFBa0IsQ0FBRSxJQUFJLGtCQUFrQixDQUFDLEFBQzdDLENBQUMsQUFFRCxVQUFVLFNBQVMsZUFBQyxDQUFDLEFBQ25CLGtCQUFrQixDQUFFLElBQUksdUJBQXVCLENBQUMsQUFDbEQsQ0FBQyxBQUVELE9BQU8sZUFBQyxDQUFDLEFBQ1Asa0JBQWtCLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxBQUNoRCxDQUFDLEFBRUQsT0FBTyxTQUFTLGVBQUMsQ0FBQyxBQUNoQixrQkFBa0IsQ0FBRSxJQUFJLHFCQUFxQixDQUFDLEFBQ2hELENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$t(ctx) {
	let li;
	let li_class_value;
	let setTooltip_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			li = element("li");
			attr_dev(li, "class", li_class_value = "" + (null_to_empty(/*id*/ ctx[0]) + " svelte-1415yw9"));
			toggle_class(li, "isActive", /*isActive*/ ctx[2]);
			add_location(li, file$s, 98, 0, 1748);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(li, "click", /*click_handler*/ ctx[4], false, false, false),
					action_destroyer(setTooltip_action = setTooltip.call(null, li, {
						text: `Show ${/*tab*/ ctx[1].title}`,
						enabled: true
					}))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*id*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*id*/ ctx[0]) + " svelte-1415yw9"))) {
				attr_dev(li, "class", li_class_value);
			}

			if (setTooltip_action && is_function(setTooltip_action.update) && dirty & /*tab*/ 2) setTooltip_action.update.call(null, {
				text: `Show ${/*tab*/ ctx[1].title}`,
				enabled: true
			});

			if (dirty & /*id, isActive*/ 5) {
				toggle_class(li, "isActive", /*isActive*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$t.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$t($$self, $$props, $$invalidate) {
	let $sidebar;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(3, $sidebar = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tab", slots, []);
	let { id } = $$props;
	const writable_props = ["id"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tab> was created with unknown prop '${key}'`);
	});

	const click_handler = () => window.api.send("dispatch", { type: "SELECT_SIDEBAR_TAB_BY_ID", id });

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		sidebar,
		setTooltip,
		id,
		tab,
		$sidebar,
		isActive
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("isActive" in $$props) $$invalidate(2, isActive = $$props.isActive);
	};

	let tab;
	let isActive;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar, id*/ 9) {
			 $$invalidate(1, tab = $sidebar.tabsById[id]);
		}

		if ($$self.$$.dirty & /*$sidebar, id*/ 9) {
			 $$invalidate(2, isActive = $sidebar.activeTabId == id);
		}
	};

	return [id, tab, isActive, $sidebar, click_handler];
}

class Tab extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1415yw9-style")) add_css$t();
		init(this, options, instance$t, create_fragment$t, not_equal, { id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tab",
			options,
			id: create_fragment$t.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<Tab> was created without expected prop 'id'");
		}
	}

	get id() {
		throw new Error("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var createCopy = function createCopy(item) {
  if (!item || (typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') return item;

  var accumulator = Array.isArray(item) ? [] : {};
  return iterator(item, accumulator, createCopy);
};

var iterator = function iterator(iterable, accumulator, callback) {
  for (var key in iterable) {
    if (iterable.hasOwnProperty(key)) {
      accumulator[key] = callback(iterable[key]);
    }
  }
  return accumulator;
};

var createCopy_1 = { createCopy: createCopy, iterator: iterator };

var constants = {
  id: 'id',
  parentId: 'parentId',
  children: 'children',
  excludeParent: false,
  saveExtractedChildren: false
};

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var OPTIONS = {};

var id = function id(item) {
  return item && item[OPTIONS.id];
};
var parentId = function parentId(item) {
  return item && item[OPTIONS.parentId];
};
var childrenKey = function childrenKey() {
  return OPTIONS.children;
};

var mergeOptionsBeforeCreateHierarchy = function mergeOptionsBeforeCreateHierarchy() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  OPTIONS = _extends({}, constants, options);
  return OPTIONS;
};

var options = { id: id, parentId: parentId, childrenKey: childrenKey, mergeOptionsBeforeCreateHierarchy: mergeOptionsBeforeCreateHierarchy };

var createCopy$1 = createCopy_1.createCopy;

var id$1 = options.id,
    childrenKey$1 = options.childrenKey,
    parentId$1 = options.parentId,
    mergeOptionsBeforeCreateHierarchy$1 = options.mergeOptionsBeforeCreateHierarchy;

var hasParent = function hasParent(parentId, items) {
  return items.some(function (item) {
    return id$1(item) === parentId;
  });
};

var hasChildren = function hasChildren(item) {
  var key = childrenKey$1();
  return !!(item && item[key] && item[key].length);
};

var getParents = function getParents() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return items.filter(function (item) {
    return id$1(item) && !hasParent(parentId$1(item), items);
  });
};

var getChildren = function getChildren(child, items) {
  var childId = id$1(child);
  return childId ? items.filter(function (item) {
    return parentId$1(item) === childId;
  }) : [];
};

var getParentChildren = function getParentChildren(parent) {
  var key = childrenKey$1();
  return Array.isArray(parent[key]) ? parent[key].slice() : [];
};

var mergeChildren = function mergeChildren(parent, children) {
  if (children) {
    var parentChildren = getParentChildren(parent);
    parent[childrenKey$1()] = parentChildren.concat(children);
  }
  return parent;
};

var createHierarchy = function createHierarchy(method) {
  return function (array, options) {
    if (array && array.length) {
      var OPTIONS = mergeOptionsBeforeCreateHierarchy$1(options);
      return method(createCopy$1(array), null, OPTIONS);
    }
  };
};

var common = { getParents: getParents, getChildren: getChildren, mergeChildren: mergeChildren, hasChildren: hasChildren, childrenKey: childrenKey$1, createHierarchy: createHierarchy };

var getParents$1 = common.getParents,
    getChildren$1 = common.getChildren,
    mergeChildren$1 = common.mergeChildren;

var createTreeHierarchy = function createTreeHierarchy(items, parent) {
  var children = [];

  if (parent) children = getChildren$1(parent, items);else children = getParents$1(items);

  if (children.length) {
    parent && mergeChildren$1(parent, children);
    children.forEach(function (item) {
      return createTreeHierarchy(items, item);
    });
  }
  return children;
};

var createTreeHierarchy_1 = { createTreeHierarchy: createTreeHierarchy };

var hasChildren$1 = common.hasChildren,
    childrenKey$2 = common.childrenKey;

var createFlatHierarchy = function createFlatHierarchy(items, parent) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var flatList = [];

  items.forEach(function (item) {
    if (hasChildren$1(item)) {
      var key = childrenKey$2();
      var children = createFlatHierarchy(item[key]);

      !options.saveExtractedChildren && delete item[key];
      !options.excludeParent && children.unshift(item);

      flatList = flatList.concat(children);
    } else {
      !options.excludeParent && flatList.push(item);
    }
  });
  return flatList;
};

var createFlatHierarchy_1 = { createFlatHierarchy: createFlatHierarchy };

var createHierarchy$1 = common.createHierarchy;

var createTreeHierarchy$1 = createTreeHierarchy_1.createTreeHierarchy;

var createFlatHierarchy$1 = createFlatHierarchy_1.createFlatHierarchy;

var lib = {
  createTreeHierarchy: createHierarchy$1(createTreeHierarchy$1),
  createFlatHierarchy: createHierarchy$1(createFlatHierarchy$1)
};

/* src/js/renderer/component/sidebar/Header.svelte generated by Svelte v3.30.1 */

const file$t = "src/js/renderer/component/sidebar/Header.svelte";

function add_css$u() {
	var style = element("style");
	style.id = "svelte-1lm44c6-style";
	style.textContent = "@keyframes svelte-1lm44c6-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}header.svelte-1lm44c6.svelte-1lm44c6{padding:0 10px;display:flex;position:relative;flex-direction:row;align-items:center;height:30px;flex:none;user-select:none}header.svelte-1lm44c6 h1.svelte-1lm44c6{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);flex-grow:1;margin:0;padding:0}.hoverToShowSlot.svelte-1lm44c6 .slot.svelte-1lm44c6{visibility:hidden}.hoverToShowSlot.svelte-1lm44c6:hover .slot.svelte-1lm44c6,.hoverToShowSlot.svelte-1lm44c6:focus-within .slot.svelte-1lm44c6{visibility:visible}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiSGVhZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IHRpdGxlID0gJ1RpdGxlJ1xuICBleHBvcnQgbGV0IGhvdmVyVG9TaG93U2xvdCA9IGZhbHNlXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG5oZWFkZXIge1xuICBwYWRkaW5nOiAwIDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgaGVpZ2h0OiAzMHB4O1xuICBmbGV4OiBub25lO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cbmhlYWRlciBoMSB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBmbGV4LWdyb3c6IDE7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLmhvdmVyVG9TaG93U2xvdCAuc2xvdCB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cblxuLmhvdmVyVG9TaG93U2xvdDpob3ZlciAuc2xvdCxcbi5ob3ZlclRvU2hvd1Nsb3Q6Zm9jdXMtd2l0aGluIC5zbG90IHtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn08L3N0eWxlPlxuXG48aGVhZGVyIGNsYXNzPXtob3ZlclRvU2hvd1Nsb3QgPyAnaG92ZXJUb1Nob3dTbG90JyA6ICcnfT5cbiAgPGgxPnt0aXRsZX08L2gxPlxuICA8ZGl2IGNsYXNzPVwic2xvdFwiPlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgPC9kaXY+XG48L2hlYWRlcj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELE1BQU0sOEJBQUMsQ0FBQyxBQUNOLE9BQU8sQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUNmLE9BQU8sQ0FBRSxJQUFJLENBQ2IsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsTUFBTSxDQUFFLElBQUksQ0FDWixJQUFJLENBQUUsSUFBSSxDQUNWLFdBQVcsQ0FBRSxJQUFJLEFBQ25CLENBQUMsQUFDRCxxQkFBTSxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQ1QsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLElBQUksQ0FDakIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixLQUFLLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDeEIsU0FBUyxDQUFFLENBQUMsQ0FDWixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLEFBQ1osQ0FBQyxBQUVELCtCQUFnQixDQUFDLEtBQUssZUFBQyxDQUFDLEFBQ3RCLFVBQVUsQ0FBRSxNQUFNLEFBQ3BCLENBQUMsQUFFRCwrQkFBZ0IsTUFBTSxDQUFDLG9CQUFLLENBQzVCLCtCQUFnQixhQUFhLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDbkMsVUFBVSxDQUFFLE9BQU8sQUFDckIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$u(ctx) {
	let header;
	let h1;
	let t0;
	let t1;
	let div;
	let header_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(h1, "class", "svelte-1lm44c6");
			add_location(h1, file$t, 45, 2, 893);
			attr_dev(div, "class", "slot svelte-1lm44c6");
			add_location(div, file$t, 46, 2, 912);
			attr_dev(header, "class", header_class_value = "" + (null_to_empty(/*hoverToShowSlot*/ ctx[1] ? "hoverToShowSlot" : "") + " svelte-1lm44c6"));
			add_location(header, file$t, 44, 0, 833);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);
			append_dev(header, h1);
			append_dev(h1, t0);
			append_dev(header, t1);
			append_dev(header, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*hoverToShowSlot*/ 2 && header_class_value !== (header_class_value = "" + (null_to_empty(/*hoverToShowSlot*/ ctx[1] ? "hoverToShowSlot" : "") + " svelte-1lm44c6"))) {
				attr_dev(header, "class", header_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$u.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$u($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Header", slots, ['default']);
	let { title = "Title" } = $$props;
	let { hoverToShowSlot = false } = $$props;
	const writable_props = ["title", "hoverToShowSlot"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("hoverToShowSlot" in $$props) $$invalidate(1, hoverToShowSlot = $$props.hoverToShowSlot);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ title, hoverToShowSlot });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("hoverToShowSlot" in $$props) $$invalidate(1, hoverToShowSlot = $$props.hoverToShowSlot);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, hoverToShowSlot, $$scope, slots];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1lm44c6-style")) add_css$u();
		init(this, options, instance$u, create_fragment$u, safe_not_equal, { title: 0, hoverToShowSlot: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment$u.name
		});
	}

	get title() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hoverToShowSlot() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hoverToShowSlot(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/SortMenu.svelte generated by Svelte v3.30.1 */
const file$u = "src/js/renderer/component/sidebar/SortMenu.svelte";

function add_css$v() {
	var style = element("style");
	style.id = "svelte-14wu3hi-style";
	style.textContent = "@keyframes svelte-14wu3hi-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.sortMenu.svelte-14wu3hi{transform:translate(2px, 0)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29ydE1lbnUuc3ZlbHRlIiwic291cmNlcyI6WyJTb3J0TWVudS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgc2lkZWJhciB9IGZyb20gJy4uLy4uL1N0YXRlTWFuYWdlcidcbiAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSc7XG4gIGltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL3VpL0ljb25CdXR0b24uc3ZlbHRlJztcblxuICAvLyBMaXN0IG9mIG1lbnUgaXRlbXNcbiAgZXhwb3J0IGxldCBpdGVtcyA9IFtdXG5cbiAgY29uc3QgdGFiSWQgPSBnZXRDb250ZXh0KCd0YWJJZCcpXG4gICQ6IHRhYiA9ICRzaWRlYmFyLnRhYnNCeUlkW3RhYklkXVxuXG4gIGZ1bmN0aW9uIHNldFNvcnRpbmcoZXZ0KSB7XG4gICAgXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBldnQuZGV0YWlsLml0ZW1cbiAgICBcbiAgICBpZiAoc2VsZWN0ZWQgPT0gdW5kZWZpbmVkKSByZXR1cm5cbiAgICBcbiAgICBpdGVtcy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZiAoaS5ncm91cCA9PSBzZWxlY3RlZC5ncm91cCkge1xuICAgICAgICBpLmNoZWNrZWQgPSBpLmxhYmVsID09IHNlbGVjdGVkLmxhYmVsXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHNvcnRCeSA9IGl0ZW1zLmZpbmQoKGkpID0+IGkuZ3JvdXAgPT0gJ3NvcnRCeScgJiYgaS5jaGVja2VkKT8ubGFiZWxcbiAgICBjb25zdCBzb3J0T3JkZXIgPSBpdGVtcy5maW5kKChpKSA9PiBpLmdyb3VwID09ICdzb3J0T3JkZXInICYmIGkuY2hlY2tlZCk/LmxhYmVsXG5cbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywge1xuICAgICAgdHlwZTogJ1NJREVCQVJfU0VUX1NPUlRJTkcnLFxuICAgICAgdGFiSWQ6IHRhYklkLFxuICAgICAgc29ydEJ5OiBzb3J0QnksXG4gICAgICBzb3J0T3JkZXI6IHNvcnRPcmRlcixcbiAgICB9KVxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbi5zb3J0TWVudSB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDJweCwgMCk7XG59PC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInNvcnRNZW51XCI+XG4gIDxJY29uQnV0dG9uIGNvbXBhY3Q9e3RydWV9IG1lbnVXaWR0aD0nMTIwcHgnIGl0ZW1zPXtpdGVtc30gaWNvbj17J2ltZy1hcnJvdy11cC1hcnJvdy1kb3duJ30gdG9vbHRpcD17J0NoYW5nZSB0aGUgc29ydGluZyBjcml0ZXJpYSBhbmQgZGlyZWN0aW9uJ30gb246c2VsZWN0SXRlbT17c2V0U29ydGluZ30gLz5cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQ3dCLFdBQVcsMEJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxTQUFTLGVBQUMsQ0FBQyxBQUNULFNBQVMsQ0FBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUM5QixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$v(ctx) {
	let div;
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				compact: true,
				menuWidth: "120px",
				items: /*items*/ ctx[0],
				icon: "img-arrow-up-arrow-down",
				tooltip: "Change the sorting criteria and direction"
			},
			$$inline: true
		});

	iconbutton.$on("selectItem", /*setSorting*/ ctx[1]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(iconbutton.$$.fragment);
			attr_dev(div, "class", "sortMenu svelte-14wu3hi");
			add_location(div, file$u, 48, 0, 1125);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(iconbutton, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbutton_changes = {};
			if (dirty & /*items*/ 1) iconbutton_changes.items = /*items*/ ctx[0];
			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$v.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$v($$self, $$props, $$invalidate) {
	let $sidebar;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(2, $sidebar = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SortMenu", slots, []);
	let { items = [] } = $$props;
	const tabId = getContext("tabId");

	function setSorting(evt) {
		const selected = evt.detail.item;
		if (selected == undefined) return;

		items.forEach(i => {
			if (i.group == selected.group) {
				i.checked = i.label == selected.label;
			}
		});

		const sortBy = items.find(i => i.group == "sortBy" && i.checked)?.label;
		const sortOrder = items.find(i => i.group == "sortOrder" && i.checked)?.label;

		window.api.send("dispatch", {
			type: "SIDEBAR_SET_SORTING",
			tabId,
			sortBy,
			sortOrder
		});
	}

	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SortMenu> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		sidebar,
		getContext,
		IconButton,
		items,
		tabId,
		setSorting,
		tab,
		$sidebar
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("tab" in $$props) tab = $$props.tab;
	};

	let tab;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 4) {
			 tab = $sidebar.tabsById[tabId];
		}
	};

	return [items, setSorting, $sidebar];
}

class SortMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-14wu3hi-style")) add_css$v();
		init(this, options, instance$v, create_fragment$v, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SortMenu",
			options,
			id: create_fragment$v.name
		});
	}

	get items() {
		throw new Error("<SortMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<SortMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/SearchField.svelte generated by Svelte v3.30.1 */
const file$v = "src/js/renderer/component/ui/SearchField.svelte";

function add_css$w() {
	var style = element("style");
	style.id = "svelte-6nc5pe-style";
	style.textContent = "@keyframes svelte-6nc5pe-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.searchfield.svelte-6nc5pe.svelte-6nc5pe{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;position:relative;border-radius:5.5px;height:28px;display:inline-flex;flex-direction:row;align-items:center}.searchfield.svelte-6nc5pe.svelte-6nc5pe:focus-within{animation-fill-mode:forwards;animation-name:svelte-6nc5pe-selectField;animation-duration:0.3s}.icon.svelte-6nc5pe.svelte-6nc5pe{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;min-width:13px;height:13px;margin-left:7px}.inputWrapper.svelte-6nc5pe.svelte-6nc5pe{margin:0 3px 0 7px;position:relative;width:100%}.placeholder.svelte-6nc5pe.svelte-6nc5pe{position:absolute;top:50%;transform:translate(0, -50%);user-select:none;pointer-events:none}input.svelte-6nc5pe.svelte-6nc5pe{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin:1px 0 0 -2px;width:100%;background:transparent;outline:none;border:none}.searchfield.compact.svelte-6nc5pe.svelte-6nc5pe{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;height:20px;border-radius:4px;line-height:20px}.searchfield.compact.svelte-6nc5pe .icon.svelte-6nc5pe{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;min-width:11px;height:11px;margin-left:5px}.searchfield.compact.svelte-6nc5pe input.svelte-6nc5pe{line-height:20px;font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px}.searchfield.sidebar.svelte-6nc5pe .icon.svelte-6nc5pe,.searchfield.toolbar.svelte-6nc5pe .icon.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe .icon.svelte-6nc5pe{background-color:var(--controlTextColor);opacity:0.8}.searchfield.sidebar.svelte-6nc5pe .placeholder.svelte-6nc5pe,.searchfield.toolbar.svelte-6nc5pe .placeholder.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe .placeholder.svelte-6nc5pe{color:var(--placeholderTextColor)}.searchfield.sidebar.svelte-6nc5pe input.svelte-6nc5pe,.searchfield.toolbar.svelte-6nc5pe input.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe input.svelte-6nc5pe{color:var(--textColor)}@media(prefers-color-scheme: dark){.searchfield.sidebar.svelte-6nc5pe.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe.svelte-6nc5pe{background-color:rgba(var(--foregroundColor), 0.05);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(255, 255, 255, 0.1)}}@media(prefers-color-scheme: light){.searchfield.sidebar.svelte-6nc5pe.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe.svelte-6nc5pe{background-color:rgba(var(--foregroundColor), 0.05);box-shadow:inset 0 0 0 0.5px rgba(0, 0, 0, 0.1)}}.searchfield.sidebar.svelte-6nc5pe .icon.svelte-6nc5pe,.searchfield.inline.svelte-6nc5pe .icon.svelte-6nc5pe{opacity:0.5}.searchfield.toolbar.svelte-6nc5pe.svelte-6nc5pe{border:1px solid rgba(var(--foregroundColor), 0.05)}.searchfield.toolbar.svelte-6nc5pe .icon.svelte-6nc5pe{opacity:0.5}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (171:2) {#if icon}
function create_if_block_1$8(ctx) {
	let div;
	let div_style_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icon svelte-6nc5pe");
			attr_dev(div, "style", div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[3]});`);
			add_location(div, file$v, 171, 4, 3711);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "mousedown", prevent_default(/*mousedown_handler*/ ctx[11]), false, true, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*icon*/ 8 && div_style_value !== (div_style_value = `-webkit-mask-image: var(--${/*icon*/ ctx[3]});`)) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$8.name,
		type: "if",
		source: "(171:2) {#if icon}",
		ctx
	});

	return block;
}

// (179:4) {#if !query}
function create_if_block$e(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*placeholder*/ ctx[1]);
			attr_dev(span, "class", "placeholder svelte-6nc5pe");
			add_location(span, file$v, 179, 6, 3914);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*placeholder*/ 2) set_data_dev(t, /*placeholder*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$e.name,
		type: "if",
		source: "(179:4) {#if !query}",
		ctx
	});

	return block;
}

function create_fragment$w(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let input_1;
	let div1_class_value;
	let setSize_action;
	let mounted;
	let dispose;
	let if_block0 = /*icon*/ ctx[3] && create_if_block_1$8(ctx);
	let if_block1 = !/*query*/ ctx[0] && create_if_block$e(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			input_1 = element("input");
			attr_dev(input_1, "type", "text");
			attr_dev(input_1, "class", "svelte-6nc5pe");
			add_location(input_1, file$v, 181, 4, 3975);
			attr_dev(div0, "class", "inputWrapper svelte-6nc5pe");
			add_location(div0, file$v, 177, 2, 3864);
			attr_dev(div1, "class", div1_class_value = "searchfield " + /*style*/ ctx[2] + " svelte-6nc5pe");
			toggle_class(div1, "compact", /*compact*/ ctx[7]);
			add_location(div1, file$v, 165, 0, 3595);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div0, t1);
			append_dev(div0, input_1);
			/*input_1_binding*/ ctx[12](input_1);
			set_input_value(input_1, /*query*/ ctx[0]);

			if (!mounted) {
				dispose = [
					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[13]),
					listen_dev(input_1, "keydown", /*keydown_handler*/ ctx[10], false, false, false),
					action_destroyer(setSize_action = setSize.call(null, div1, {
						width: /*width*/ ctx[4],
						margin: /*margin*/ ctx[6],
						padding: /*padding*/ ctx[5]
					}))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*icon*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$8(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*query*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$e(ctx);
					if_block1.c();
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*query*/ 1 && input_1.value !== /*query*/ ctx[0]) {
				set_input_value(input_1, /*query*/ ctx[0]);
			}

			if (dirty & /*style*/ 4 && div1_class_value !== (div1_class_value = "searchfield " + /*style*/ ctx[2] + " svelte-6nc5pe")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, margin, padding*/ 112) setSize_action.update.call(null, {
				width: /*width*/ ctx[4],
				margin: /*margin*/ ctx[6],
				padding: /*padding*/ ctx[5]
			});

			if (dirty & /*style, compact*/ 132) {
				toggle_class(div1, "compact", /*compact*/ ctx[7]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*input_1_binding*/ ctx[12](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$w.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$w($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SearchField", slots, []);
	let { placeholder = "Search" } = $$props;
	let { query = "" } = $$props;
	let { focused = false } = $$props;
	let { style = "sidebar" } = $$props; // 'sidebar', 'toolbar', or 'inline'
	let { icon = undefined } = $$props; // Eg. 'img-arrow-up-arrow-down'
	let { width = "auto" } = $$props; // '100px', 'auto', etc.
	let { padding = "0" } = $$props;
	let { margin = "0" } = $$props;
	let { compact = false } = $$props;
	let input = null;

	const writable_props = [
		"placeholder",
		"query",
		"focused",
		"style",
		"icon",
		"width",
		"padding",
		"margin",
		"compact"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchField> was created with unknown prop '${key}'`);
	});

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const mousedown_handler = () => input.select();

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(8, input);
		});
	}

	function input_1_input_handler() {
		query = this.value;
		$$invalidate(0, query);
	}

	$$self.$$set = $$props => {
		if ("placeholder" in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("focused" in $$props) $$invalidate(9, focused = $$props.focused);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("icon" in $$props) $$invalidate(3, icon = $$props.icon);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("padding" in $$props) $$invalidate(5, padding = $$props.padding);
		if ("margin" in $$props) $$invalidate(6, margin = $$props.margin);
		if ("compact" in $$props) $$invalidate(7, compact = $$props.compact);
	};

	$$self.$capture_state = () => ({
		setSize,
		placeholder,
		query,
		focused,
		style,
		icon,
		width,
		padding,
		margin,
		compact,
		input
	});

	$$self.$inject_state = $$props => {
		if ("placeholder" in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("focused" in $$props) $$invalidate(9, focused = $$props.focused);
		if ("style" in $$props) $$invalidate(2, style = $$props.style);
		if ("icon" in $$props) $$invalidate(3, icon = $$props.icon);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("padding" in $$props) $$invalidate(5, padding = $$props.padding);
		if ("margin" in $$props) $$invalidate(6, margin = $$props.margin);
		if ("compact" in $$props) $$invalidate(7, compact = $$props.compact);
		if ("input" in $$props) $$invalidate(8, input = $$props.input);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		query,
		placeholder,
		style,
		icon,
		width,
		padding,
		margin,
		compact,
		input,
		focused,
		keydown_handler,
		mousedown_handler,
		input_1_binding,
		input_1_input_handler
	];
}

class SearchField extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-6nc5pe-style")) add_css$w();

		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
			placeholder: 1,
			query: 0,
			focused: 9,
			style: 2,
			icon: 3,
			width: 4,
			padding: 5,
			margin: 6,
			compact: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchField",
			options,
			id: create_fragment$w.name
		});
	}

	get placeholder() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get query() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set query(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focused() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focused(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<SearchField>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<SearchField>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/*
A collection of common list interactions. These are shared across DocLists, TreeLists, etc.
*/

// -------- MOUSE DOWN -------- //

function onMousedown(domEvent, id, isSelected, tab, tabId, listIds, files) {

  // Shift-click: Select range of items in list
  // Click while not selected: Make this the only selected item
  // Cmd-click while not selected: Add this to existing items
  // Cmd-click while selected: Remove this from existing items

  const normalClicked = !domEvent.shiftKey && !domEvent.metaKey;

  if (normalClicked) return

  // const clickedWhileSelected = !domEvent.metaKey && isSelected
  // const clickedWhileNotSelected = !domEvent.metaKey && !isSelected

  // if (clickedWhileSelected) {
  // return
  // } else if (clickedWhileNotSelected) {
  //   selected = [id]
  // }

  const shiftClicked = domEvent.shiftKey;
  const cmdClickedWhileNotSelected = domEvent.metaKey && !isSelected;
  const cmdClickedWhileSelected = domEvent.metaKey && isSelected;

  let selected = [];

  if (shiftClicked) {
    const clickedIndex = listIds.indexOf(id);
    const lastSelectedIndex = listIds.indexOf(tab.lastSelected);
    const lastSelectedIsStillVisible = lastSelectedIndex !== -1;
    if (!lastSelectedIsStillVisible) {
      // If last selected item is no longer visible (e.g. parent 
      // folder may have closed), select only this id.
      selected = [id];
    } else {
      // Else, select all items between the last selected, and this id.
      const selectFromIndex = Math.min(clickedIndex, lastSelectedIndex);
      const selectToIndex = Math.max(clickedIndex, lastSelectedIndex);
      const newSelected = listIds.slice(selectFromIndex, selectToIndex + 1);
      const lastSelected = [...tab.selected];
      selected = [...newSelected, ...lastSelected];
    }
  } else if (cmdClickedWhileNotSelected) {
    selected = [id, ...tab.selected];
  } else if (cmdClickedWhileSelected) {
    // Copy array and remove this item from it
    selected = [...tab.selected];
    const indexToRemove = selected.indexOf(id);
    selected.splice(indexToRemove, 1);
  }

  // If there are multiple selected, find and remove any duplicates.
  // Per: https://stackoverflow.com/a/14438954
  if (selected.length > 1) {
    selected = Array.from(new Set(selected));
  }

  // Update selection
  window.api.send('dispatch', {
    type: 'SIDEBAR_SET_SELECTED',
    tabId: tabId,
    lastSelected: id,
    selected: selected,
  });
}

/**
 * Open the file `id` in the focused panel, if it's a doc, and only one file is selected.
 */
function onMouseup(domEvent, id, tab, tabId, panel, files) {

  // If shift or meta were pressed, we read this as a 
  // "select stuff" action, and don't open docs.
  const shiftOrMetaWerePressed =
    domEvent.shiftKey || domEvent.metaKey;
  if (shiftOrMetaWerePressed) return

  const isDoc = files.byId[id].type == 'doc';
  const isNotAlreadyOpen = id !== panel.docId;
  // const oneFileSelected = tab.selected.length == 1

  // If the selected doc is not already open, open it
  // The 
  if (isDoc && isNotAlreadyOpen) {

    window.api.send('dispatch', {
      type: 'OPEN_DOC_IN_PANEL',
      panelIndex: panel.index,
      doc: files.byId[id],
      selectInSideBar: true,
      outgoingDoc: files.byId[panel.docId],
      outgoingDocData: panel.unsavedChanges ?
        getCmDataByPanelId(panel.id) : '',
      isNewDoc: panel.docId == 'newDoc'
    });

  } else if (!isNotAlreadyOpen) {

    // If user clicks on already-open doc, we usually don't 
    // need to do anything. But if multiple items are selected
    // we should deselect the other docs.
    if (tab.selected.length > 1) {
      window.api.send('dispatch', {
        type: 'SIDEBAR_SET_SELECTED',
        tabId: tabId,
        lastSelected: id,
        selected: [id],
      });
    }
  }
}

// -------- LEFT/RIGHT -------- //

function arrowUpDown(key, shiftPressed, altPressed, tab, tabId, listIds, files, project) {

  let id = ''; // of newly-selected item
  let selected = [];

  const lastSelectedIndex = listIds.indexOf(tab.lastSelected);

  const isLastSelectedStillVisible = lastSelectedIndex !== -1;
  const atTop = lastSelectedIndex == 0;
  const atBottom = lastSelectedIndex == listIds.length - 1;

  // Determine next file
  if (!isLastSelectedStillVisible) {
    // If last selected file is no longer visible (e.g. parent folder has since closed), select first or last file in list. On arrow up, select last file. Do oppposite for arrow down. Shift or alt have no effect.
    id = key == 'ArrowUp' ? listIds[listIds.length - 1] : listIds[0];
    selected = [id];
  } else if (altPressed) {
    // If alt is pressed, jump to top or bottom of list.
    id = key == 'ArrowUp' ? listIds[0] : listIds[listIds.length - 1];
    // If shift pressed, include all items between lastSelected and top/bottom
    // and add to the existing selection.
    if (shiftPressed) {
      const lastSelectedIsStillVisible = lastSelectedIndex !== -1;
      // If last selected item is no longer visible (e.g. parent 
      // folder may have closed), select all items
      if (!lastSelectedIsStillVisible) {
        selected = [...listIds];
      } else {
        const newSelectedIndex = listIds.indexOf(id);
        const selectFromIndex = Math.min(newSelectedIndex, lastSelectedIndex);
        const selectToIndex = Math.max(newSelectedIndex, lastSelectedIndex);
        const newSelected = listIds.slice(selectFromIndex, selectToIndex + 1);
        const lastSelected = [...tab.selected];
        selected = [...newSelected, ...lastSelected];
      }

    } else {
      selected = [id];
    }
  } else if (key == 'ArrowUp' && atTop) {
    // If arrowing up and already at top...
    if (tab.selected.length > 1) {
      // If there are multiple items selected...
      if (!shiftPressed) {
        // If shift key is not pressed, clear, and select only first item.
        id = listIds[0];
        selected = [id];
      } else {
        // Else, do nothing.
        return
      }
    } else {
      // Else, do nothing.
      return
    }
  } else if (key == 'ArrowDown' && atBottom) {
    // [Same as arrowing up]
    // If arrowing down and already at bottom...
    if (tab.selected.length > 1) {
      // If there are multiple items selected...
      if (!shiftPressed) {
        // If shift key is not pressed, clear, and select only last item.
        id = listIds[listIds.length - 1];
        selected = [id];
      } else {
        // Else, do nothing.
        return
      }
    } else {
      // Else, do nothing.
      return
    }
  } else if (shiftPressed) {
    // const newSelectedIndex = listIds.indexOf(id)

    // Are we shift-arrowing into an existing selection?
    // Get selected id. Then check if it's already selected
    // If yes, deselect lastSelected (thereby shrinking the selectiub)

    id = key == 'ArrowUp' ? listIds[lastSelectedIndex - 1] : listIds[lastSelectedIndex + 1];
    const isAlreadySelected = tab.selected.includes(id);

    if (isAlreadySelected) {
      const indexOfLastSelectedInSelected = tab.selected.indexOf(tab.lastSelected);
      selected = [...tab.selected];
      selected.splice(indexOfLastSelectedInSelected, 1);
    } else {
      // Else, add id to the existing selection.
      selected = [id, ...tab.selected];
    }
  } else {
    // Select previous or next
    id = key == 'ArrowUp' ? listIds[lastSelectedIndex - 1] : listIds[lastSelectedIndex + 1];
    selected = [id];
  }

  // If there are multiple selected, select them (but don't open).
  // If there's only one selection, open it.
  if (selected.length > 1) {

    // First find and remove any duplicates.
    // Per: https://stackoverflow.com/a/14438954
    selected = Array.from(new Set(selected));

    // Update selection
    window.api.send('dispatch', {
      type: 'SIDEBAR_SET_SELECTED',
      tabId: tabId,
      lastSelected: id,
      selected: selected,
    });

  } else {

    const isDoc = files.byId[id].type == 'doc';
    
    // Open doc
    if (isDoc) {

      const panel = project.panels.find(({index}) => index == project.focusedPanelIndex);
  
      window.api.send('dispatch', {
        type: 'OPEN_DOC_IN_PANEL',
        panelIndex: panel.index,
        doc: files.byId[id],
        selectInSideBar: true,
        outgoingDoc: files.byId[panel.docId],
        outgoingDocData: panel.unsavedChanges ?
          getCmDataByPanelId(panel.id) : '',
        isNewDoc: panel.docId == 'newDoc'
      });

    }
  }
}

// -------- TREE-LIST FUNCTIONS -------- //

function arrowLeftRight(key, tab, tabId, listIds, files) {

  const isMultipleSelected = tab.selected.length > 1;

  if (isMultipleSelected) {

    const selectedFolders = files.allIds.filter((id) =>
      tab.selected.includes(id) &&
      files.byId[id].type == 'folder');

    let expanded = [...tab.expanded];

    if (key == 'ArrowLeft') {
      selectedFolders.forEach((id) => {
        if (expanded.includes(id)) {
          const indexToRemove = expanded.indexOf(id);
          expanded.splice(indexToRemove, 1);
        }
      });
    } else if (key == 'ArrowRight') {
      selectedFolders.forEach((id) => {
        if (!expanded.includes(id)) {
          expanded.push(id);
        }
      });
    }
    window.api.send('dispatch', {
      type: 'SIDEBAR_SET_EXPANDED',
      tabId: tabId,
      expanded: expanded,
    });

  } else {

    const file = files.byId[tab.lastSelected];
    const isFolder = file.type == 'folder';
    const isExpanded = isFolder && tab.expanded.some((id) => id == file.id);

    if (key == 'ArrowLeft') {
      if (isFolder && isExpanded) {
        toggleExpanded(file.id, isExpanded, tab, tabId);
      } else {
        selectParentFolder(file.id, tabId, listIds, files);
      }
    } else if (key == 'ArrowRight') {
      if (isFolder && !isExpanded) {
        toggleExpanded(file.id, isExpanded, tab, tabId);
      }
    }
  }
}

function selectParentFolder(childId, tabId, listIds, files) {
  const parentId = files.byId[childId].parentId;

  // If `listIds` does not include parent ID, we're at the top-level.
  // There's no visible parent to select, so return.
  if (!listIds.includes(parentId)) return

  window.api.send('dispatch', {
    type: 'SIDEBAR_SET_SELECTED',
    tabId: tabId,
    lastSelected: parentId,
    selected: [parentId],
  });
}

function toggleExpanded(id, isExpanded, tab, tabId) {
  let expanded = [...tab.expanded];
  switch (isExpanded) {
    case true:
      const indexToRemove = expanded.indexOf(id);
      expanded.splice(indexToRemove, 1);
      break
    case false:
      expanded.push(id);
      break
  }
  window.api.send('dispatch', {
    type: 'SIDEBAR_SET_EXPANDED',
    tabId: tabId,
    expanded: expanded,
  });
}

/* src/js/renderer/component/sidebar/list/File.svelte generated by Svelte v3.30.1 */
const file_1 = "src/js/renderer/component/sidebar/list/File.svelte";

function add_css$x() {
	var style = element("style");
	style.id = "svelte-18njyfj-style";
	style.textContent = "@keyframes svelte-18njyfj-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.file.svelte-18njyfj.svelte-18njyfj{contain:strict;user-select:none;border-radius:4px;margin-bottom:1px;width:100%;height:28px}.file.svelte-18njyfj .icon.svelte-18njyfj{-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;position:absolute;top:50%;transform:translate(0, -50%);background-color:var(--iconAccentColor);left:calc(calc(var(--leftOffset) * 1px) + 20px);width:14px;height:14px;pointer-events:none}.file.svelte-18njyfj .label.svelte-18njyfj{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;position:absolute;top:50%;transform:translate(0, -50%);color:var(--labelColor);left:calc(calc(var(--leftOffset) * 1px) + 42px);white-space:nowrap;pointer-events:none}.file.svelte-18njyfj .counter.svelte-18njyfj{position:absolute;top:50%;transform:translate(0, -50%);font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--tertiaryLabelColor);position:absolute;right:7px;pointer-events:none}.folder.svelte-18njyfj .icon.svelte-18njyfj{-webkit-mask-image:var(--img-folder)}.doc.svelte-18njyfj .icon.svelte-18njyfj{-webkit-mask-image:var(--img-doc-text)}.img.svelte-18njyfj .icon.svelte-18njyfj{-webkit-mask-image:var(--img-photo)}.av.svelte-18njyfj .icon.svelte-18njyfj{-webkit-mask-image:var(--img-play-rectangle)}.file.isHighlighted.svelte-18njyfj.svelte-18njyfj{background-color:var(--selectedContentBackgroundColor)}.file.isHighlighted.svelte-18njyfj .icon.svelte-18njyfj{background-color:var(--selectedMenuItemTextColor)}.file.isHighlighted.svelte-18njyfj .label.svelte-18njyfj{color:var(--selectedMenuItemTextColor)}.file.isHighlighted.svelte-18njyfj .counter.svelte-18njyfj{color:var(--controlColor)}.file.isHighlightedInBg.svelte-18njyfj.svelte-18njyfj{background-color:rgba(var(--foregroundColor), 0.12)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZS5zdmVsdGUiLCJzb3VyY2VzIjpbIkZpbGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgYWZ0ZXJVcGRhdGUgfSBmcm9tICdzdmVsdGUnXG4gIGltcG9ydCB7IHN0YXRlLCBwcm9qZWN0LCBzaWRlYmFyLCBpc1dpbmRvd0ZvY3VzZWQgfSBmcm9tICcuLi8uLi8uLi9TdGF0ZU1hbmFnZXInXG4gIGltcG9ydCB7IGZpbGVzIH0gZnJvbSAnLi4vLi4vLi4vRmlsZXNNYW5hZ2VyJ1xuICBpbXBvcnQgeyBjc3MgfSBmcm9tICcuLi8uLi91aS9hY3Rpb25zJ1xuICBpbXBvcnQge29uTW91c2Vkb3duLCB0b2dnbGVFeHBhbmRlZCwgb25Nb3VzZXVwfSBmcm9tICcuL2ludGVyYWN0aW9ucydcbiAgaW1wb3J0IERpc2Nsb3N1cmVCdXR0b24gZnJvbSAnLi4vLi4vdWkvRGlzY2xvc3VyZUJ1dHRvbi5zdmVsdGUnXG4gIGltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGV4cG9ydCBsZXQgaWQgPSAnJ1xuXHRleHBvcnQgbGV0IGxpc3RJZHMgPSBbXVxuICBleHBvcnQgbGV0IG5lc3REZXB0aCA9IDAgIFxuICBleHBvcnQgbGV0IGlzRHJhZ1RhcmdldCA9IGZhbHNlXG4gIFxuXHRjb25zdCB0YWJJZCA9IGdldENvbnRleHQoJ3RhYklkJylcblx0JDogdGFiID0gJHNpZGViYXIudGFic0J5SWRbdGFiSWRdXG4gICQ6IGZpbGUgPSAkZmlsZXMuYnlJZFtpZF1cbiAgJDogbGVmdE9mZnNldCA9IG5lc3REZXB0aCAqIDE1XG4gICQ6IGlzRXhwYW5kYWJsZSA9IGZpbGU/LnR5cGUgPT0gJ2ZvbGRlcidcbiAgJDogaXNGb2xkZXIgPSAkc2lkZWJhci50YWJzQnlJZC5wcm9qZWN0LmV4cGFuZGVkLnNvbWUoKGlkKSA9PiBpZCA9PSBmaWxlPy5pZClcbiAgJDogaXNTZWxlY3RlZCA9ICRzaWRlYmFyLnRhYnNCeUlkLnByb2plY3Quc2VsZWN0ZWQuc29tZSgoaWQpID0+IGlkID09IGZpbGU/LmlkKVxuICAvLyBUT0RPIF4gVXBkYXRlIHRvIG5ldyBzeXN0ZW1cbiAgJDogaXNXaW5kb3dEcmFnZ2VkT3ZlciA9ICRwcm9qZWN0LndpbmRvdy5pc0RyYWdnZWRPdmVyXG4gICQ6IGlzU2VjdGlvbkZvY3VzZWQgPSAkcHJvamVjdC5mb2N1c2VkU2VjdGlvbklkID09ICdzaWRlYmFyJ1xuXG4gICQ6IGlzSGlnaGxpZ2h0ZWQgPSAoJGlzV2luZG93Rm9jdXNlZCAmJiBpc1NlbGVjdGVkICYmIGlzU2VjdGlvbkZvY3VzZWQgJiYgIWlzV2luZG93RHJhZ2dlZE92ZXIpIHx8IGlzRHJhZ1RhcmdldFxuICAkOiBpc0hpZ2hsaWdodGVkSW5CZyA9ICgkaXNXaW5kb3dGb2N1c2VkICYmIGlzU2VsZWN0ZWQgJiYgIWlzU2VjdGlvbkZvY3VzZWQpIHx8IChpc1NlbGVjdGVkICYmICEkaXNXaW5kb3dGb2N1c2VkKSB8fCAoaXNTZWxlY3RlZCAmJiBpc1dpbmRvd0RyYWdnZWRPdmVyICYmICFpc0RyYWdUYXJnZXQpXG5cbiAgLy8gT24gZHJhZyBzdGFydCwgaWYgdGhlIGRyYWdnZWQgZmlsZSBpcyBhIGRvYywgc2V0IGl0J3MgaWQgYXMgYSBkYXRhVHJhbnNmZXIgaXRlbS4gV2UgdXNlIGEgY3VzdG9tIGB0ZXh0L2RvY2lkYC4gUGVyOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTF9EcmFnX2FuZF9Ecm9wX0FQSS9EcmFnX29wZXJhdGlvbnMjZHJhZ2RhdGFcbiAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZG9tRXZlbnQpIHtcbiAgICBjb25zdCBmaWxlID0gJGZpbGVzLmJ5SWRbaWRdXG4gICAgaWYgKGZpbGUudHlwZSA9PSAnZG9jJykge1xuICAgICAgZG9tRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvZG9jaWQnLCBpZCk7XG4gICAgfVxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT0ndGV4dC9zY3NzJz5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4uZmlsZSB7XG4gIGNvbnRhaW46IHN0cmljdDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgbWFyZ2luLWJvdHRvbTogMXB4O1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAyOHB4O1xufVxuLmZpbGUgLmljb24ge1xuICAtd2Via2l0LW1hc2stc2l6ZTogY29udGFpbjtcbiAgLXdlYmtpdC1tYXNrLXBvc2l0aW9uOiBjZW50ZXI7XG4gIC13ZWJraXQtbWFzay1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWljb25BY2NlbnRDb2xvcik7XG4gIGxlZnQ6IGNhbGMoY2FsYyh2YXIoLS1sZWZ0T2Zmc2V0KSAqIDFweCkgKyAyMHB4KTtcbiAgd2lkdGg6IDE0cHg7XG4gIGhlaWdodDogMTRweDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4uZmlsZSAubGFiZWwge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbiAgbGVmdDogY2FsYyhjYWxjKHZhcigtLWxlZnRPZmZzZXQpICogMXB4KSArIDQycHgpO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5maWxlIC5jb3VudGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wOHB4O1xuICBjb2xvcjogdmFyKC0tdGVydGlhcnlMYWJlbENvbG9yKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogN3B4O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLmZvbGRlciAuaWNvbiB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLWZvbGRlcik7XG59XG5cbi5kb2MgLmljb24ge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1kb2MtdGV4dCk7XG59XG5cbi5pbWcgLmljb24ge1xuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWltZy1waG90byk7XG59XG5cbi5hdiAuaWNvbiB7XG4gIC13ZWJraXQtbWFzay1pbWFnZTogdmFyKC0taW1nLXBsYXktcmVjdGFuZ2xlKTtcbn1cblxuLmZpbGUuaXNIaWdobGlnaHRlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbGVjdGVkQ29udGVudEJhY2tncm91bmRDb2xvcik7XG59XG4uZmlsZS5pc0hpZ2hsaWdodGVkIC5kaXNjbG9zdXJlIFtyb2xlPWJ1dHRvbl0sXG4uZmlsZS5pc0hpZ2hsaWdodGVkIC5pY29uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0ZWRNZW51SXRlbVRleHRDb2xvcik7XG59XG4uZmlsZS5pc0hpZ2hsaWdodGVkIC5sYWJlbCB7XG4gIGNvbG9yOiB2YXIoLS1zZWxlY3RlZE1lbnVJdGVtVGV4dENvbG9yKTtcbn1cbi5maWxlLmlzSGlnaGxpZ2h0ZWQgLmNvdW50ZXIge1xuICBjb2xvcjogdmFyKC0tY29udHJvbENvbG9yKTtcbn1cblxuLmZpbGUuaXNIaWdobGlnaHRlZEluQmcge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWZvcmVncm91bmRDb2xvciksIDAuMTIpO1xufTwvc3R5bGU+XG5cbjxzdmVsdGU6b3B0aW9ucyBpbW11dGFibGU9e3RydWV9IC8+XG5cbjwhLS0gdXNlOmxpc3RJdGVtPXt7aWQsIHRhYklkLCB0YWIsIGxpc3RJZHMsIGlzU2VsZWN0ZWR9fSAtLT5cbjwhLS0gdXNlOmRyYWdJbnRvRm9sZGVyPXt7aXNGb2xkZXI6IGlzRXhwYW5kYWJsZSwgZm9sZGVyUGF0aDogZmlsZS5wYXRofX0gLS0+XG57I2lmIGZpbGV9XG4gIDxkaXZcbiAgICB1c2U6Y3NzPXt7IGxlZnRPZmZzZXQgfX1cbiAgICBjbGFzcz1cImZpbGUge2ZpbGUudHlwZX1cIlxuICAgIGNsYXNzOmlzSGlnaGxpZ2h0ZWRcbiAgICBjbGFzczppc0hpZ2hsaWdodGVkSW5CZ1xuICAgIGNsYXNzOmlzRm9sZGVyXG4gICAgZHJhZ2dhYmxlPXRydWVcbiAgICBvbjpkcmFnc3RhcnQ9e29uRHJhZ1N0YXJ0fVxuICAgIG9uOmRyYWdvdmVyfHByZXZlbnREZWZhdWx0fHN0b3BQcm9wYWdhdGlvblxuICAgIG9uOmRyYWdsZWF2ZXxwcmV2ZW50RGVmYXVsdHxzdG9wUHJvcGFnYXRpb25cbiAgICBvbjpkcm9wfHByZXZlbnREZWZhdWx0fHN0b3BQcm9wYWdhdGlvblxuICAgIG9uOm1vdXNlZG93bj17KGV2dCkgPT4gb25Nb3VzZWRvd24oZXZ0LCBpZCwgaXNTZWxlY3RlZCwgdGFiLCB0YWJJZCwgbGlzdElkcywgJGZpbGVzKX1cbiAgICBvbjptb3VzZXVwPXsoZXZ0KSA9PiBvbk1vdXNldXAoZXZ0LCBpZCwgdGFiLCB0YWJJZCwgJHByb2plY3QucGFuZWxzWyRwcm9qZWN0LmZvY3VzZWRQYW5lbEluZGV4XSwgJGZpbGVzKX1cbiAgICA+XG4gICAgICBcbiAgICB7I2lmIGlzRXhwYW5kYWJsZX1cbiAgICAgIDxEaXNjbG9zdXJlQnV0dG9uXG4gICAgICAgIHdpZHRoPXsnMTRweCd9XG4gICAgICAgIGhlaWdodD17JzE0cHgnfVxuICAgICAgICBwYWRkaW5nPXsnM3B4J31cbiAgICAgICAgbGVmdD17bGVmdE9mZnNldCArIDN9XG4gICAgICAgIHJvdGF0aW9uPXtpc0ZvbGRlciA/IDAgOiAtOTB9XG4gICAgICAgIG9wYWNpdHk9ezAuODV9XG4gICAgICAgIGljb25Db2xvcj17aXNIaWdobGlnaHRlZCA/ICdzZWxlY3RlZE1lbnVJdGVtVGV4dENvbG9yJyA6ICdjb250cm9sVGV4dENvbG9yJ31cbiAgICAgICAgb246dG9nZ2xlPXsoKSA9PiB0b2dnbGVFeHBhbmRlZChpZCwgaXNGb2xkZXIsIHRhYiwgdGFiSWQpfSBcbiAgICAgIC8+XG5cbiAgICB7L2lmfVxuICAgIDxkaXYgY2xhc3M9XCJpY29uXCIgLz5cbiAgICA8ZGl2IGNsYXNzPVwibGFiZWxcIj57ZmlsZS50aXRsZSA/IGZpbGUudGl0bGUgOiBmaWxlLm5hbWV9PC9kaXY+XG4gICAgeyNpZiBpc0V4cGFuZGFibGV9XG4gICAgICA8ZGl2IGNsYXNzPVwiY291bnRlclwiPntmaWxlLm51bURlc2NlbmRhbnRzfTwvZGl2PlxuICAgIHsvaWZ9XG4gIDwvZGl2Plxuey9pZn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0N3QixXQUFXLDBCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsS0FBSyw4QkFBQyxDQUFDLEFBQ0wsT0FBTyxDQUFFLE1BQU0sQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixhQUFhLENBQUUsR0FBRyxDQUNsQixhQUFhLENBQUUsR0FBRyxDQUNsQixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELG9CQUFLLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDWCxpQkFBaUIsQ0FBRSxPQUFPLENBQzFCLHFCQUFxQixDQUFFLE1BQU0sQ0FDN0IsbUJBQW1CLENBQUUsU0FBUyxDQUM5QixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsR0FBRyxDQUNSLFNBQVMsQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUM3QixnQkFBZ0IsQ0FBRSxJQUFJLGlCQUFpQixDQUFDLENBQ3hDLElBQUksQ0FBRSxLQUFLLEtBQUssSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNoRCxLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osY0FBYyxDQUFFLElBQUksQUFDdEIsQ0FBQyxBQUNELG9CQUFLLENBQUMsTUFBTSxlQUFDLENBQUMsQUFDWixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxHQUFHLENBQ1IsU0FBUyxDQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQzdCLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUN4QixJQUFJLENBQUUsS0FBSyxLQUFLLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDaEQsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsY0FBYyxDQUFFLElBQUksQUFDdEIsQ0FBQyxBQUNELG9CQUFLLENBQUMsUUFBUSxlQUFDLENBQUMsQUFDZCxRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsR0FBRyxDQUNSLFNBQVMsQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUM3QixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxJQUFJLG9CQUFvQixDQUFDLENBQ2hDLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEtBQUssQ0FBRSxHQUFHLENBQ1YsY0FBYyxDQUFFLElBQUksQUFDdEIsQ0FBQyxBQUVELHNCQUFPLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDYixrQkFBa0IsQ0FBRSxJQUFJLFlBQVksQ0FBQyxBQUN2QyxDQUFDLEFBRUQsbUJBQUksQ0FBQyxLQUFLLGVBQUMsQ0FBQyxBQUNWLGtCQUFrQixDQUFFLElBQUksY0FBYyxDQUFDLEFBQ3pDLENBQUMsQUFFRCxtQkFBSSxDQUFDLEtBQUssZUFBQyxDQUFDLEFBQ1Ysa0JBQWtCLENBQUUsSUFBSSxXQUFXLENBQUMsQUFDdEMsQ0FBQyxBQUVELGtCQUFHLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDVCxrQkFBa0IsQ0FBRSxJQUFJLG9CQUFvQixDQUFDLEFBQy9DLENBQUMsQUFFRCxLQUFLLGNBQWMsOEJBQUMsQ0FBQyxBQUNuQixnQkFBZ0IsQ0FBRSxJQUFJLGdDQUFnQyxDQUFDLEFBQ3pELENBQUMsQUFFRCxLQUFLLDZCQUFjLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDekIsZ0JBQWdCLENBQUUsSUFBSSwyQkFBMkIsQ0FBQyxBQUNwRCxDQUFDLEFBQ0QsS0FBSyw2QkFBYyxDQUFDLE1BQU0sZUFBQyxDQUFDLEFBQzFCLEtBQUssQ0FBRSxJQUFJLDJCQUEyQixDQUFDLEFBQ3pDLENBQUMsQUFDRCxLQUFLLDZCQUFjLENBQUMsUUFBUSxlQUFDLENBQUMsQUFDNUIsS0FBSyxDQUFFLElBQUksY0FBYyxDQUFDLEFBQzVCLENBQUMsQUFFRCxLQUFLLGtCQUFrQiw4QkFBQyxDQUFDLEFBQ3ZCLGdCQUFnQixDQUFFLEtBQUssSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEFBQ3RELENBQUMifQ== */";
	append_dev(document.head, style);
}

// (135:0) {#if file}
function create_if_block$f(ctx) {
	let div2;
	let t0;
	let div0;
	let t1;
	let div1;

	let t2_value = (/*file*/ ctx[2].title
	? /*file*/ ctx[2].title
	: /*file*/ ctx[2].name) + "";

	let t2;
	let t3;
	let div2_class_value;
	let css_action;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*isExpandable*/ ctx[8] && create_if_block_2$5(ctx);
	let if_block1 = /*isExpandable*/ ctx[8] && create_if_block_1$9(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			if (if_block1) if_block1.c();
			attr_dev(div0, "class", "icon svelte-18njyfj");
			add_location(div0, file_1, 163, 4, 4809);
			attr_dev(div1, "class", "label svelte-18njyfj");
			add_location(div1, file_1, 164, 4, 4834);
			attr_dev(div2, "class", div2_class_value = "file " + /*file*/ ctx[2].type + " svelte-18njyfj");
			attr_dev(div2, "draggable", "true");
			toggle_class(div2, "isHighlighted", /*isHighlighted*/ ctx[10]);
			toggle_class(div2, "isHighlightedInBg", /*isHighlightedInBg*/ ctx[11]);
			toggle_class(div2, "isFolder", /*isFolder*/ ctx[9]);
			add_location(div2, file_1, 135, 2, 3888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append_dev(div2, t0);
			append_dev(div2, div0);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, t2);
			append_dev(div2, t3);
			if (if_block1) if_block1.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(css_action = css.call(null, div2, { leftOffset: /*leftOffset*/ ctx[7] })),
					listen_dev(div2, "dragstart", /*onDragStart*/ ctx[13], false, false, false),
					listen_dev(div2, "dragover", stop_propagation(prevent_default(/*dragover_handler*/ ctx[20])), false, true, true),
					listen_dev(div2, "dragleave", stop_propagation(prevent_default(/*dragleave_handler*/ ctx[21])), false, true, true),
					listen_dev(div2, "drop", stop_propagation(prevent_default(/*drop_handler*/ ctx[22])), false, true, true),
					listen_dev(div2, "mousedown", /*mousedown_handler*/ ctx[24], false, false, false),
					listen_dev(div2, "mouseup", /*mouseup_handler*/ ctx[25], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*isExpandable*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*isExpandable*/ 256) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*file*/ 4) && t2_value !== (t2_value = (/*file*/ ctx[2].title
			? /*file*/ ctx[2].title
			: /*file*/ ctx[2].name) + "")) set_data_dev(t2, t2_value);

			if (/*isExpandable*/ ctx[8]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$9(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*file*/ 4 && div2_class_value !== (div2_class_value = "file " + /*file*/ ctx[2].type + " svelte-18njyfj")) {
				attr_dev(div2, "class", div2_class_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*leftOffset*/ 128) css_action.update.call(null, { leftOffset: /*leftOffset*/ ctx[7] });

			if (dirty & /*file, isHighlighted*/ 1028) {
				toggle_class(div2, "isHighlighted", /*isHighlighted*/ ctx[10]);
			}

			if (dirty & /*file, isHighlightedInBg*/ 2052) {
				toggle_class(div2, "isHighlightedInBg", /*isHighlightedInBg*/ ctx[11]);
			}

			if (dirty & /*file, isFolder*/ 516) {
				toggle_class(div2, "isFolder", /*isFolder*/ ctx[9]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$f.name,
		type: "if",
		source: "(135:0) {#if file}",
		ctx
	});

	return block;
}

// (151:4) {#if isExpandable}
function create_if_block_2$5(ctx) {
	let disclosurebutton;
	let current;

	disclosurebutton = new DisclosureButton({
			props: {
				width: "14px",
				height: "14px",
				padding: "3px",
				left: /*leftOffset*/ ctx[7] + 3,
				rotation: /*isFolder*/ ctx[9] ? 0 : -90,
				opacity: 0.85,
				iconColor: /*isHighlighted*/ ctx[10]
				? "selectedMenuItemTextColor"
				: "controlTextColor"
			},
			$$inline: true
		});

	disclosurebutton.$on("toggle", /*toggle_handler*/ ctx[23]);

	const block = {
		c: function create() {
			create_component(disclosurebutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(disclosurebutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const disclosurebutton_changes = {};
			if (dirty & /*leftOffset*/ 128) disclosurebutton_changes.left = /*leftOffset*/ ctx[7] + 3;
			if (dirty & /*isFolder*/ 512) disclosurebutton_changes.rotation = /*isFolder*/ ctx[9] ? 0 : -90;

			if (dirty & /*isHighlighted*/ 1024) disclosurebutton_changes.iconColor = /*isHighlighted*/ ctx[10]
			? "selectedMenuItemTextColor"
			: "controlTextColor";

			disclosurebutton.$set(disclosurebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(disclosurebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(disclosurebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(disclosurebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$5.name,
		type: "if",
		source: "(151:4) {#if isExpandable}",
		ctx
	});

	return block;
}

// (166:4) {#if isExpandable}
function create_if_block_1$9(ctx) {
	let div;
	let t_value = /*file*/ ctx[2].numDescendants + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "counter svelte-18njyfj");
			add_location(div, file_1, 166, 6, 4926);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*file*/ 4 && t_value !== (t_value = /*file*/ ctx[2].numDescendants + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$9.name,
		type: "if",
		source: "(166:4) {#if isExpandable}",
		ctx
	});

	return block;
}

function create_fragment$x(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*file*/ ctx[2] && create_if_block$f(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*file*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*file*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$x.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$x($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	let $project;
	let $isWindowFocused;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(16, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(3, $files = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(5, $project = $$value));
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(19, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("File", slots, []);
	let { id = "" } = $$props;
	let { listIds = [] } = $$props;
	let { nestDepth = 0 } = $$props;
	let { isDragTarget = false } = $$props;
	const tabId = getContext("tabId");

	// On drag start, if the dragged file is a doc, set it's id as a dataTransfer item. We use a custom `text/docid`. Per: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#dragdata
	function onDragStart(domEvent) {
		const file = $files.byId[id];

		if (file.type == "doc") {
			domEvent.dataTransfer.setData("text/docid", id);
		}
	}

	const writable_props = ["id", "listIds", "nestDepth", "isDragTarget"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<File> was created with unknown prop '${key}'`);
	});

	function dragover_handler(event) {
		bubble($$self, event);
	}

	function dragleave_handler(event) {
		bubble($$self, event);
	}

	function drop_handler(event) {
		bubble($$self, event);
	}

	const toggle_handler = () => toggleExpanded(id, isFolder, tab, tabId);
	const mousedown_handler = evt => onMousedown(evt, id, isSelected, tab, tabId, listIds);
	const mouseup_handler = evt => onMouseup(evt, id, tab, tabId, $project.panels[$project.focusedPanelIndex], $files);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("nestDepth" in $$props) $$invalidate(14, nestDepth = $$props.nestDepth);
		if ("isDragTarget" in $$props) $$invalidate(15, isDragTarget = $$props.isDragTarget);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		afterUpdate,
		state,
		project,
		sidebar,
		isWindowFocused,
		files,
		css,
		onMousedown,
		toggleExpanded,
		onMouseup,
		DisclosureButton,
		getContext,
		id,
		listIds,
		nestDepth,
		isDragTarget,
		tabId,
		onDragStart,
		tab,
		$sidebar,
		file,
		$files,
		leftOffset,
		isExpandable,
		isFolder,
		isSelected,
		isWindowDraggedOver,
		$project,
		isSectionFocused,
		isHighlighted,
		$isWindowFocused,
		isHighlightedInBg
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("nestDepth" in $$props) $$invalidate(14, nestDepth = $$props.nestDepth);
		if ("isDragTarget" in $$props) $$invalidate(15, isDragTarget = $$props.isDragTarget);
		if ("tab" in $$props) $$invalidate(6, tab = $$props.tab);
		if ("file" in $$props) $$invalidate(2, file = $$props.file);
		if ("leftOffset" in $$props) $$invalidate(7, leftOffset = $$props.leftOffset);
		if ("isExpandable" in $$props) $$invalidate(8, isExpandable = $$props.isExpandable);
		if ("isFolder" in $$props) $$invalidate(9, isFolder = $$props.isFolder);
		if ("isSelected" in $$props) $$invalidate(4, isSelected = $$props.isSelected);
		if ("isWindowDraggedOver" in $$props) $$invalidate(17, isWindowDraggedOver = $$props.isWindowDraggedOver);
		if ("isSectionFocused" in $$props) $$invalidate(18, isSectionFocused = $$props.isSectionFocused);
		if ("isHighlighted" in $$props) $$invalidate(10, isHighlighted = $$props.isHighlighted);
		if ("isHighlightedInBg" in $$props) $$invalidate(11, isHighlightedInBg = $$props.isHighlightedInBg);
	};

	let tab;
	let file;
	let leftOffset;
	let isExpandable;
	let isFolder;
	let isSelected;
	let isWindowDraggedOver;
	let isSectionFocused;
	let isHighlighted;
	let isHighlightedInBg;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 65536) {
			 $$invalidate(6, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$files, id*/ 9) {
			 $$invalidate(2, file = $files.byId[id]);
		}

		if ($$self.$$.dirty & /*nestDepth*/ 16384) {
			 $$invalidate(7, leftOffset = nestDepth * 15);
		}

		if ($$self.$$.dirty & /*file*/ 4) {
			 $$invalidate(8, isExpandable = file?.type == "folder");
		}

		if ($$self.$$.dirty & /*$sidebar, file*/ 65540) {
			 $$invalidate(9, isFolder = $sidebar.tabsById.project.expanded.some(id => id == file?.id));
		}

		if ($$self.$$.dirty & /*$sidebar, file*/ 65540) {
			 $$invalidate(4, isSelected = $sidebar.tabsById.project.selected.some(id => id == file?.id));
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			// TODO ^ Update to new system
			 $$invalidate(17, isWindowDraggedOver = $project.window.isDraggedOver);
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			 $$invalidate(18, isSectionFocused = $project.focusedSectionId == "sidebar");
		}

		if ($$self.$$.dirty & /*$isWindowFocused, isSelected, isSectionFocused, isWindowDraggedOver, isDragTarget*/ 950288) {
			 $$invalidate(10, isHighlighted = $isWindowFocused && isSelected && isSectionFocused && !isWindowDraggedOver || isDragTarget);
		}

		if ($$self.$$.dirty & /*$isWindowFocused, isSelected, isSectionFocused, isWindowDraggedOver, isDragTarget*/ 950288) {
			 $$invalidate(11, isHighlightedInBg = $isWindowFocused && isSelected && !isSectionFocused || isSelected && !$isWindowFocused || isSelected && isWindowDraggedOver && !isDragTarget);
		}
	};

	return [
		id,
		listIds,
		file,
		$files,
		isSelected,
		$project,
		tab,
		leftOffset,
		isExpandable,
		isFolder,
		isHighlighted,
		isHighlightedInBg,
		tabId,
		onDragStart,
		nestDepth,
		isDragTarget,
		$sidebar,
		isWindowDraggedOver,
		isSectionFocused,
		$isWindowFocused,
		dragover_handler,
		dragleave_handler,
		drop_handler,
		toggle_handler,
		mousedown_handler,
		mouseup_handler
	];
}

class File extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-18njyfj-style")) add_css$x();

		init(this, options, instance$x, create_fragment$x, not_equal, {
			id: 0,
			listIds: 1,
			nestDepth: 14,
			isDragTarget: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "File",
			options,
			id: create_fragment$x.name
		});
	}

	get id() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nestDepth() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nestDepth(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isDragTarget() {
		throw new Error("<File>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isDragTarget(value) {
		throw new Error("<File>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function flip(node, animation, params) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const scaleX = animation.from.width / node.clientWidth;
    const scaleY = animation.from.height / node.clientHeight;
    const dx = (animation.from.left - animation.to.left) / scaleX;
    const dy = (animation.from.top - animation.to.top) / scaleY;
    const d = Math.sqrt(dx * dx + dy * dy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
    return {
        delay,
        duration: is_function(duration) ? duration(d) : duration,
        easing,
        css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
    };
}

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */
// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A$1 (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B$1 (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A$1(aA1, aA2) * aT + B$1(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A$1(aA1, aA2) * aT * aT + 2.0 * B$1(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

function LinearEasing (x) {
  return x;
}

var src = function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};

// We use 'bezier-easing' package to convert CSS cubic bezier easing curves to easing functions (which Svelte transitions require).

const standard = src(0.4, 0, 0.2, 1);
const decelerate = src(0, 0, 0.2, 1);

function standardEase(t) {
  return standard(t)
}

/**
 * Set parent to overflow:hidden to make it look like the sliding element is being masked.
 * @param {*} node 
 * @param {*} param1 
 */
function slideUp(node, { duration = 100, easing = standardEase }) {
  return {
    duration: duration,
    easing,
    css: (t, u) => `transform: translate(0, ${u * -100}%)`,
  }
}

/* src/js/renderer/component/sidebar/list/Folder.svelte generated by Svelte v3.30.1 */

const { console: console_1$2 } = globals;
const file$w = "src/js/renderer/component/sidebar/list/Folder.svelte";

function add_css$y() {
	var style = element("style");
	style.id = "svelte-1vd77vl-style";
	style.textContent = "@keyframes svelte-1vd77vl-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.folder.svelte-1vd77vl{position:absolute;width:100%;overflow:hidden;height:calc(var(--folderHeight) * 1px);transition:height calc(var(--duration) * 1ms) var(--folderEasing), border-radius 1ms 50ms, box-shadow 1ms 50ms}.folder.isRoot.svelte-1vd77vl{position:relative}.folder.svelte-1vd77vl,ul.svelte-1vd77vl{transform-origin:left top;will-change:transform}.folder.isRoot.isDragTarget.svelte-1vd77vl{box-shadow:inset 0 0 0 2px var(--keyboardFocusIndicatorColor);border-radius:4px;transition-delay:0}ul.svelte-1vd77vl,li.svelte-1vd77vl{margin:0;padding:0;text-indent:0;list-style-type:none}li.svelte-1vd77vl{position:relative;display:block}li.isEmpty.svelte-1vd77vl{height:28px;pointer-events:none;visibility:hidden;margin-bottom:1px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

// (117:0) {#if !isRoot}
function create_if_block_3$3(ctx) {
	let file_1;
	let current;

	file_1 = new File({
			props: {
				id: /*folder*/ ctx[4].id,
				listIds: /*listIds*/ ctx[1],
				nestDepth: /*nestDepth*/ ctx[3] - 1,
				isDragTarget: /*isDragTarget*/ ctx[5]
			},
			$$inline: true
		});

	file_1.$on("dragover", /*onDragOver*/ ctx[11]);
	file_1.$on("dragleave", /*onDragLeave*/ ctx[12]);
	file_1.$on("drop", /*onDrop*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(file_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(file_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const file_1_changes = {};
			if (dirty & /*folder*/ 16) file_1_changes.id = /*folder*/ ctx[4].id;
			if (dirty & /*listIds*/ 2) file_1_changes.listIds = /*listIds*/ ctx[1];
			if (dirty & /*nestDepth*/ 8) file_1_changes.nestDepth = /*nestDepth*/ ctx[3] - 1;
			if (dirty & /*isDragTarget*/ 32) file_1_changes.isDragTarget = /*isDragTarget*/ ctx[5];
			file_1.$set(file_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(file_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(file_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(file_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$3.name,
		type: "if",
		source: "(117:0) {#if !isRoot}",
		ctx
	});

	return block;
}

// (129:0) {#if isExpanded}
function create_if_block$g(ctx) {
	let div;
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let ul_transition;
	let css_action;
	let current;
	let mounted;
	let dispose;
	let each_value = /*subtree*/ ctx[0].children;
	validate_each_argument(each_value);
	const get_key = ctx => /*child*/ ctx[22].id;
	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$2(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(ul, "class", "rows svelte-1vd77vl");
			add_location(ul, file$w, 138, 2, 4033);
			attr_dev(div, "class", "folder svelte-1vd77vl");
			toggle_class(div, "isRoot", /*isRoot*/ ctx[2]);
			toggle_class(div, "isDragTarget", /*isDragTarget*/ ctx[5]);
			add_location(div, file$w, 129, 1, 3696);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "dragover", prevent_default(/*dragover_handler*/ ctx[18]), false, true, false),
					listen_dev(div, "dragleave", prevent_default(/*dragleave_handler*/ ctx[19]), false, true, false),
					listen_dev(div, "drop", prevent_default(/*drop_handler*/ ctx[20]), false, true, false),
					action_destroyer(css_action = css.call(null, div, {
						folderHeight: /*folderHeight*/ ctx[6],
						folderEasing: /*folderEasing*/ ctx[7],
						duration: /*duration*/ ctx[8]
					}))
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*subtree, listIds, nestDepth, isFolder, onDragOver, onDragLeave, onDrop*/ 15371) {
				const each_value = /*subtree*/ ctx[0].children;
				validate_each_argument(each_value);
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block$2, null, get_each_context$2);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}

			if (css_action && is_function(css_action.update) && dirty & /*folderHeight, folderEasing, duration*/ 448) css_action.update.call(null, {
				folderHeight: /*folderHeight*/ ctx[6],
				folderEasing: /*folderEasing*/ ctx[7],
				duration: /*duration*/ ctx[8]
			});

			if (dirty & /*isRoot*/ 4) {
				toggle_class(div, "isRoot", /*isRoot*/ ctx[2]);
			}

			if (dirty & /*isDragTarget*/ 32) {
				toggle_class(div, "isDragTarget", /*isDragTarget*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (local) {
				add_render_callback(() => {
					if (!ul_transition) ul_transition = create_bidirectional_transition(
						ul,
						slideUp,
						{
							duration: /*isRoot*/ ctx[2] ? 0 : /*duration*/ ctx[8]
						},
						true
					);

					ul_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			if (local) {
				if (!ul_transition) ul_transition = create_bidirectional_transition(
					ul,
					slideUp,
					{
						duration: /*isRoot*/ ctx[2] ? 0 : /*duration*/ ctx[8]
					},
					false
				);

				ul_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (detaching && ul_transition) ul_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$g.name,
		type: "if",
		source: "(129:0) {#if isExpanded}",
		ctx
	});

	return block;
}

// (145:5) {#if !child.id.includes('empty')}
function create_if_block_1$a(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2$6, create_else_block$8];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*subtree*/ 1) show_if = !!/*isFolder*/ ctx[10](/*child*/ ctx[22].id);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$a.name,
		type: "if",
		source: "(145:5) {#if !child.id.includes('empty')}",
		ctx
	});

	return block;
}

// (157:6) {:else}
function create_else_block$8(ctx) {
	let file_1;
	let current;

	file_1 = new File({
			props: {
				id: /*child*/ ctx[22].id,
				listIds: /*listIds*/ ctx[1],
				nestDepth: /*nestDepth*/ ctx[3]
			},
			$$inline: true
		});

	file_1.$on("dragover", /*onDragOver*/ ctx[11]);
	file_1.$on("dragleave", /*onDragLeave*/ ctx[12]);
	file_1.$on("drop", /*onDrop*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(file_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(file_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const file_1_changes = {};
			if (dirty & /*subtree*/ 1) file_1_changes.id = /*child*/ ctx[22].id;
			if (dirty & /*listIds*/ 2) file_1_changes.listIds = /*listIds*/ ctx[1];
			if (dirty & /*nestDepth*/ 8) file_1_changes.nestDepth = /*nestDepth*/ ctx[3];
			file_1.$set(file_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(file_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(file_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(file_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$8.name,
		type: "else",
		source: "(157:6) {:else}",
		ctx
	});

	return block;
}

// (147:6) {#if isFolder(child.id)}
function create_if_block_2$6(ctx) {
	let folder_1;
	let current;

	folder_1 = new Folder({
			props: {
				subtree: /*child*/ ctx[22],
				listIds: /*listIds*/ ctx[1],
				isRoot: false,
				nestDepth: /*nestDepth*/ ctx[3] + 1
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(folder_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(folder_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const folder_1_changes = {};
			if (dirty & /*subtree*/ 1) folder_1_changes.subtree = /*child*/ ctx[22];
			if (dirty & /*listIds*/ 2) folder_1_changes.listIds = /*listIds*/ ctx[1];
			if (dirty & /*nestDepth*/ 8) folder_1_changes.nestDepth = /*nestDepth*/ ctx[3] + 1;
			folder_1.$set(folder_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(folder_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(folder_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(folder_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$6.name,
		type: "if",
		source: "(147:6) {#if isFolder(child.id)}",
		ctx
	});

	return block;
}

// (140:3) {#each subtree.children as child (child.id)}
function create_each_block$2(key_1, ctx) {
	let li;
	let show_if = !/*child*/ ctx[22].id.includes("empty");
	let t;
	let rect;
	let stop_animation = noop;
	let current;
	let if_block = show_if && create_if_block_1$a(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			li = element("li");
			if (if_block) if_block.c();
			t = space();
			attr_dev(li, "class", "svelte-1vd77vl");
			toggle_class(li, "isEmpty", /*child*/ ctx[22].id.includes("empty"));
			add_location(li, file$w, 140, 4, 4166);
			this.first = li;
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if (if_block) if_block.m(li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*subtree*/ 1) show_if = !/*child*/ ctx[22].id.includes("empty");

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*subtree*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$a(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(li, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*subtree*/ 1) {
				toggle_class(li, "isEmpty", /*child*/ ctx[22].id.includes("empty"));
			}
		},
		r: function measure() {
			rect = li.getBoundingClientRect();
		},
		f: function fix() {
			fix_position(li);
			stop_animation();
		},
		a: function animate() {
			stop_animation();

			stop_animation = create_animation(li, rect, flip, {
				duration: /*duration*/ ctx[8],
				easing: standardEase
			});
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(140:3) {#each subtree.children as child (child.id)}",
		ctx
	});

	return block;
}

function create_fragment$y(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = !/*isRoot*/ ctx[2] && create_if_block_3$3(ctx);
	let if_block1 = /*isExpanded*/ ctx[9] && create_if_block$g(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!/*isRoot*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*isRoot*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*isExpanded*/ ctx[9]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*isExpanded*/ 512) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$g(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$y($$self, $$props, $$invalidate) {
	let $state;
	let $files;
	let $sidebar;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(15, $state = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(16, $files = $$value));
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(17, $sidebar = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Folder", slots, []);
	let { subtree } = $$props;
	let { listIds } = $$props;
	let { isRoot = true } = $$props;
	let { nestDepth = 0 } = $$props;
	let isDragTarget = false;
	const tabId = getContext("tabId");

	// When the number of children changes, the height changes. This happens instantly, and can clip the child elements as they animate to their new positions. We want to avoid that. We could animate the height at the same duration and easing as the other transitions, but that's a big performance no-no. So instead we use `step` transitions to wait until the standard transition duration is complete, and then set the new value. OR we set it at the beginning. It depends on whether the folder has grown or shrunk. We determine -that- by comparing the new and old `numVisibleDescendants`.
	let oldNumVisibleDescendants = 0;

	let folderHeight = 0;
	let folderEasing = 0;

	function isFolder(id) {
		return $files.byId[id].type == "folder";
	}

	/**
 * Select folder `File` when we drag over it, or it's children.
 * Unless folder isRoot, in which case there is no visible parent `File`,
 * so we select nothing.
 */
	function onDragOver() {
		$$invalidate(5, isDragTarget = true);
	}

	function onDragLeave() {
		$$invalidate(5, isDragTarget = false);
	}

	function onDrop(evt) {
		console.log(evt);
		$$invalidate(5, isDragTarget = false);
		const file = evt.dataTransfer.files[0];
		window.api.send("moveOrCopyIntoFolder", file.path, folder.path, evt.altKey);
	}

	const writable_props = ["subtree", "listIds", "isRoot", "nestDepth"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Folder> was created with unknown prop '${key}'`);
	});

	const dragover_handler = () => {
		if (isRoot) onDragOver();
	};

	const dragleave_handler = () => {
		if (isRoot) onDragLeave();
	};

	const drop_handler = evt => {
		console.log("drop");
		if (isRoot) onDrop(evt);
	};

	$$self.$$set = $$props => {
		if ("subtree" in $$props) $$invalidate(0, subtree = $$props.subtree);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("isRoot" in $$props) $$invalidate(2, isRoot = $$props.isRoot);
		if ("nestDepth" in $$props) $$invalidate(3, nestDepth = $$props.nestDepth);
	};

	$$self.$capture_state = () => ({
		File,
		state,
		sidebar,
		files,
		flip,
		css,
		standardEase,
		slideUp,
		getContext,
		subtree,
		listIds,
		isRoot,
		nestDepth,
		isDragTarget,
		tabId,
		oldNumVisibleDescendants,
		folderHeight,
		folderEasing,
		isFolder,
		onDragOver,
		onDragLeave,
		onDrop,
		duration,
		$state,
		folder,
		$files,
		isExpanded,
		$sidebar
	});

	$$self.$inject_state = $$props => {
		if ("subtree" in $$props) $$invalidate(0, subtree = $$props.subtree);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("isRoot" in $$props) $$invalidate(2, isRoot = $$props.isRoot);
		if ("nestDepth" in $$props) $$invalidate(3, nestDepth = $$props.nestDepth);
		if ("isDragTarget" in $$props) $$invalidate(5, isDragTarget = $$props.isDragTarget);
		if ("oldNumVisibleDescendants" in $$props) $$invalidate(14, oldNumVisibleDescendants = $$props.oldNumVisibleDescendants);
		if ("folderHeight" in $$props) $$invalidate(6, folderHeight = $$props.folderHeight);
		if ("folderEasing" in $$props) $$invalidate(7, folderEasing = $$props.folderEasing);
		if ("duration" in $$props) $$invalidate(8, duration = $$props.duration);
		if ("folder" in $$props) $$invalidate(4, folder = $$props.folder);
		if ("isExpanded" in $$props) $$invalidate(9, isExpanded = $$props.isExpanded);
	};

	let duration;
	let folder;
	let isExpanded;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$state*/ 32768) {
			 $$invalidate(8, duration = $state.timing.treeListFolder);
		}

		if ($$self.$$.dirty & /*subtree, oldNumVisibleDescendants*/ 16385) {
			 {
				if (subtree.numVisibleDescendants !== oldNumVisibleDescendants) {
					const hasGrown = subtree.numVisibleDescendants > oldNumVisibleDescendants;
					$$invalidate(7, folderEasing = hasGrown ? "step-start" : "step-end");
					$$invalidate(6, folderHeight = subtree.numVisibleDescendants * 29);
					$$invalidate(14, oldNumVisibleDescendants = subtree.numVisibleDescendants);
				}
			}
		}

		if ($$self.$$.dirty & /*$files, subtree*/ 65537) {
			 $$invalidate(4, folder = $files.byId[subtree.id]);
		}

		if ($$self.$$.dirty & /*isRoot, folder, $sidebar*/ 131092) {
			 $$invalidate(9, isExpanded = isRoot || folder.numChildren > 0 && $sidebar.tabsById.project.expanded.includes(folder.id));
		}
	};

	return [
		subtree,
		listIds,
		isRoot,
		nestDepth,
		folder,
		isDragTarget,
		folderHeight,
		folderEasing,
		duration,
		isExpanded,
		isFolder,
		onDragOver,
		onDragLeave,
		onDrop,
		oldNumVisibleDescendants,
		$state,
		$files,
		$sidebar,
		dragover_handler,
		dragleave_handler,
		drop_handler
	];
}

class Folder extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1vd77vl-style")) add_css$y();

		init(this, options, instance$y, create_fragment$y, safe_not_equal, {
			subtree: 0,
			listIds: 1,
			isRoot: 2,
			nestDepth: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Folder",
			options,
			id: create_fragment$y.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*subtree*/ ctx[0] === undefined && !("subtree" in props)) {
			console_1$2.warn("<Folder> was created without expected prop 'subtree'");
		}

		if (/*listIds*/ ctx[1] === undefined && !("listIds" in props)) {
			console_1$2.warn("<Folder> was created without expected prop 'listIds'");
		}
	}

	get subtree() {
		throw new Error("<Folder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtree(value) {
		throw new Error("<Folder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<Folder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<Folder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isRoot() {
		throw new Error("<Folder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isRoot(value) {
		throw new Error("<Folder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nestDepth() {
		throw new Error("<Folder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nestDepth(value) {
		throw new Error("<Folder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/list/TreeList.svelte generated by Svelte v3.30.1 */
const file$x = "src/js/renderer/component/sidebar/list/TreeList.svelte";

function add_css$z() {
	var style = element("style");
	style.id = "svelte-v2eeud-style";
	style.textContent = "@keyframes svelte-v2eeud-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.list.svelte-v2eeud{padding:10px 10px 0 10px;flex-grow:1;overflow-y:scroll;position:relative}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJlZUxpc3Quc3ZlbHRlIiwic291cmNlcyI6WyJUcmVlTGlzdC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgcHJvamVjdCwgc2lkZWJhciB9IGZyb20gJy4uLy4uLy4uL1N0YXRlTWFuYWdlcidcbiAgaW1wb3J0IHsgZmlsZXMgfSBmcm9tICcuLi8uLi8uLi9GaWxlc01hbmFnZXInXG5cdGltcG9ydCB7IGFycm93TGVmdFJpZ2h0LCBhcnJvd1VwRG93bn0gZnJvbSAnLi9pbnRlcmFjdGlvbnMnXG4gIGltcG9ydCBGb2xkZXIgZnJvbSAnLi9Gb2xkZXIuc3ZlbHRlJztcbiAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSc7XG5cblx0ZXhwb3J0IGxldCBzdWJ0cmVlID0ge31cbiAgZXhwb3J0IGxldCBsaXN0SWRzID0gW11cbiAgXG4gIGNvbnN0IHRhYklkID0gZ2V0Q29udGV4dCgndGFiSWQnKVxuICAkOiB0YWIgPSAkc2lkZWJhci50YWJzQnlJZFt0YWJJZF1cbiAgJDogaXNTaWRlYmFyRm9jdXNlZCA9ICRwcm9qZWN0LmZvY3VzZWRTZWN0aW9uSWQgPT0gJ3NpZGViYXInXG4gIFxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLmxpc3Qge1xuICBwYWRkaW5nOiAxMHB4IDEwcHggMCAxMHB4O1xuICBmbGV4LWdyb3c6IDE7XG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufTwvc3R5bGU+XG5cbjxzdmVsdGU6d2luZG93IG9uOmtleWRvd249eyhldnQpID0+IHtcblx0aWYgKCFpc1NpZGViYXJGb2N1c2VkKSByZXR1cm5cbiAgc3dpdGNoIChldnQua2V5KSB7XG4gICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBhcnJvd0xlZnRSaWdodChldnQua2V5LCB0YWIsIHRhYklkLCBsaXN0SWRzLCAkZmlsZXMpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgYXJyb3dVcERvd24oZXZ0LmtleSwgZXZ0LnNoaWZ0S2V5LCBldnQuYWx0S2V5LCB0YWIsIHRhYklkLCBsaXN0SWRzLCAkZmlsZXMsICRwcm9qZWN0KVxuICAgICAgYnJlYWtcbiAgfVxufX0gLz5cblxuPGRpdiBjbGFzcz1cImxpc3RcIj5cblx0PEZvbGRlciB7c3VidHJlZX0ge2xpc3RJZHN9IC8+XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0J3QixXQUFXLHlCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsS0FBSyxjQUFDLENBQUMsQUFDTCxPQUFPLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN6QixTQUFTLENBQUUsQ0FBQyxDQUNaLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLFFBQVEsQ0FBRSxRQUFRLEFBQ3BCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$z(ctx) {
	let div;
	let folder;
	let current;
	let mounted;
	let dispose;

	folder = new Folder({
			props: {
				subtree: /*subtree*/ ctx[0],
				listIds: /*listIds*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(folder.$$.fragment);
			attr_dev(div, "class", "list svelte-v2eeud");
			add_location(div, file$x, 47, 0, 1213);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(folder, div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window, "keydown", /*keydown_handler*/ ctx[8], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const folder_changes = {};
			if (dirty & /*subtree*/ 1) folder_changes.subtree = /*subtree*/ ctx[0];
			if (dirty & /*listIds*/ 2) folder_changes.listIds = /*listIds*/ ctx[1];
			folder.$set(folder_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(folder.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(folder.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(folder);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$z($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(7, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(2, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TreeList", slots, []);
	let { subtree = {} } = $$props;
	let { listIds = [] } = $$props;
	const tabId = getContext("tabId");
	const writable_props = ["subtree", "listIds"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TreeList> was created with unknown prop '${key}'`);
	});

	const keydown_handler = evt => {
		if (!isSidebarFocused) return;

		switch (evt.key) {
			case "ArrowLeft":
			case "ArrowRight":
				evt.preventDefault();
				arrowLeftRight(evt.key, tab, tabId, listIds, $files);
				break;
			case "ArrowUp":
			case "ArrowDown":
				evt.preventDefault();
				arrowUpDown(evt.key, evt.shiftKey, evt.altKey, tab, tabId, listIds, $files, $project);
				break;
		}
	};

	$$self.$$set = $$props => {
		if ("subtree" in $$props) $$invalidate(0, subtree = $$props.subtree);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
	};

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		arrowLeftRight,
		arrowUpDown,
		Folder,
		getContext,
		subtree,
		listIds,
		tabId,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("subtree" in $$props) $$invalidate(0, subtree = $$props.subtree);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("tab" in $$props) $$invalidate(3, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) $$invalidate(4, isSidebarFocused = $$props.isSidebarFocused);
	};

	let tab;
	let isSidebarFocused;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 128) {
			 $$invalidate(3, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 4) {
			 $$invalidate(4, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}
	};

	return [
		subtree,
		listIds,
		$project,
		tab,
		isSidebarFocused,
		$files,
		tabId,
		$sidebar,
		keydown_handler
	];
}

class TreeList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-v2eeud-style")) add_css$z();
		init(this, options, instance$z, create_fragment$z, safe_not_equal, { subtree: 0, listIds: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TreeList",
			options,
			id: create_fragment$z.name
		});
	}

	get subtree() {
		throw new Error("<TreeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtree(value) {
		throw new Error("<TreeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<TreeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<TreeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/list/DocList.svelte generated by Svelte v3.30.1 */
const file$y = "src/js/renderer/component/sidebar/list/DocList.svelte";

function add_css$A() {
	var style = element("style");
	style.id = "svelte-1li18s7-style";
	style.textContent = "@keyframes svelte-1li18s7-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.list.svelte-1li18s7{padding:10px;flex-grow:1;overflow-y:scroll;position:relative}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jTGlzdC5zdmVsdGUiLCJzb3VyY2VzIjpbIkRvY0xpc3Quc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCB7IHByb2plY3QsIHNpZGViYXIgfSBmcm9tICcuLi8uLi8uLi9TdGF0ZU1hbmFnZXInXG5cdGltcG9ydCB7IGZpbGVzIH0gZnJvbSAnLi4vLi4vLi4vRmlsZXNNYW5hZ2VyJ1xuXHRpbXBvcnQgeyBhcnJvd1VwRG93bn0gZnJvbSAnLi9pbnRlcmFjdGlvbnMnXG4gIGltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xuXHRcblx0ZXhwb3J0IGxldCBsaXN0SWRzID0gW11cbiAgZXhwb3J0IGxldCBjb21wb25lbnRcbiAgZXhwb3J0IGxldCBzaG93VGFncyA9IGZhbHNlXG4gIFxuICBjb25zdCB0YWJJZCA9IGdldENvbnRleHQoJ3RhYklkJylcbiAgJDogdGFiID0gJHNpZGViYXIudGFic0J5SWRbdGFiSWRdXG5cdCQ6IGlzU2lkZWJhckZvY3VzZWQgPSAkcHJvamVjdC5mb2N1c2VkU2VjdGlvbklkID09ICdzaWRlYmFyJ1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4ubGlzdCB7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGZsZXgtZ3JvdzogMTtcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59PC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3cgb246a2V5ZG93bj17KGV2dCkgPT4ge1xuXHRpZiAoIWlzU2lkZWJhckZvY3VzZWQpIHJldHVyblxuICBzd2l0Y2ggKGV2dC5rZXkpIHtcbiAgICBjYXNlICdBcnJvd1VwJzpcbiAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGFycm93VXBEb3duKGV2dC5rZXksIGV2dC5zaGlmdEtleSwgZXZ0LmFsdEtleSwgdGFiLCB0YWJJZCwgbGlzdElkcywgJGZpbGVzLCAkcHJvamVjdClcbiAgICAgIGJyZWFrXG4gIH1cbn19IC8+XG5cbjxkaXYgY2xhc3M9XCJsaXN0XCI+XG5cdHsjZWFjaCBsaXN0SWRzIGFzIGlkIChpZCl9XG5cdFx0PHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17Y29tcG9uZW50fSB7aWR9IHtsaXN0SWRzfSAvPlxuXHR7L2VhY2h9XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0J3QixXQUFXLDBCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsS0FBSyxlQUFDLENBQUMsQUFDTCxPQUFPLENBQUUsSUFBSSxDQUNiLFNBQVMsQ0FBRSxDQUFDLENBQ1osVUFBVSxDQUFFLE1BQU0sQ0FDbEIsUUFBUSxDQUFFLFFBQVEsQUFDcEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (44:1) {#each listIds as id (id)}
function create_each_block$3(key_1, ctx) {
	let first;
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*component*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				id: /*id*/ ctx[10],
				listIds: /*listIds*/ ctx[0]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);

			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty & /*listIds*/ 1) switch_instance_changes.id = /*id*/ ctx[10];
			if (dirty & /*listIds*/ 1) switch_instance_changes.listIds = /*listIds*/ ctx[0];

			if (switch_value !== (switch_value = /*component*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(44:1) {#each listIds as id (id)}",
		ctx
	});

	return block;
}

function create_fragment$A(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	let each_value = /*listIds*/ ctx[0];
	validate_each_argument(each_value);
	const get_key = ctx => /*id*/ ctx[10];
	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$3(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "list svelte-1li18s7");
			add_location(div, file$y, 42, 0, 1026);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(window, "keydown", /*keydown_handler*/ ctx[9], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*component, listIds*/ 3) {
				const each_value = /*listIds*/ ctx[0];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$A.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$A($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(8, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(2, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("DocList", slots, []);
	let { listIds = [] } = $$props;
	let { component } = $$props;
	let { showTags = false } = $$props;
	const tabId = getContext("tabId");
	const writable_props = ["listIds", "component", "showTags"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DocList> was created with unknown prop '${key}'`);
	});

	const keydown_handler = evt => {
		if (!isSidebarFocused) return;

		switch (evt.key) {
			case "ArrowUp":
			case "ArrowDown":
				evt.preventDefault();
				arrowUpDown(evt.key, evt.shiftKey, evt.altKey, tab, tabId, listIds, $files, $project);
				break;
		}
	};

	$$self.$$set = $$props => {
		if ("listIds" in $$props) $$invalidate(0, listIds = $$props.listIds);
		if ("component" in $$props) $$invalidate(1, component = $$props.component);
		if ("showTags" in $$props) $$invalidate(7, showTags = $$props.showTags);
	};

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		arrowUpDown,
		getContext,
		listIds,
		component,
		showTags,
		tabId,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("listIds" in $$props) $$invalidate(0, listIds = $$props.listIds);
		if ("component" in $$props) $$invalidate(1, component = $$props.component);
		if ("showTags" in $$props) $$invalidate(7, showTags = $$props.showTags);
		if ("tab" in $$props) $$invalidate(3, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) $$invalidate(4, isSidebarFocused = $$props.isSidebarFocused);
	};

	let tab;
	let isSidebarFocused;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 256) {
			 $$invalidate(3, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 4) {
			 $$invalidate(4, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}
	};

	return [
		listIds,
		component,
		$project,
		tab,
		isSidebarFocused,
		$files,
		tabId,
		showTags,
		$sidebar,
		keydown_handler
	];
}

class DocList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1li18s7-style")) add_css$A();
		init(this, options, instance$A, create_fragment$A, safe_not_equal, { listIds: 0, component: 1, showTags: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DocList",
			options,
			id: create_fragment$A.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*component*/ ctx[1] === undefined && !("component" in props)) {
			console.warn("<DocList> was created without expected prop 'component'");
		}
	}

	get listIds() {
		throw new Error("<DocList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<DocList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get component() {
		throw new Error("<DocList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set component(value) {
		throw new Error("<DocList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showTags() {
		throw new Error("<DocList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showTags(value) {
		throw new Error("<DocList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var moment = createCommonjsModule(function (module, exports) {
(function (global, factory) {
     module.exports = factory() ;
}(commonjsGlobal, (function () {
    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            'object' !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.1';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));
});

/* src/js/renderer/component/sidebar/Project.svelte generated by Svelte v3.30.1 */
const file$z = "src/js/renderer/component/sidebar/Project.svelte";

// (232:2) <Header title={tab.title} hoverToShowSlot={true}>
function create_default_slot$6(ctx) {
	let sortmenu;
	let current;

	sortmenu = new SortMenu({
			props: { items: /*sortOptions*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sortmenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sortmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sortmenu_changes = {};
			if (dirty & /*sortOptions*/ 8) sortmenu_changes.items = /*sortOptions*/ ctx[3];
			sortmenu.$set(sortmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sortmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sortmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sortmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(232:2) <Header title={tab.title} hoverToShowSlot={true}>",
		ctx
	});

	return block;
}

// (239:2) {:else}
function create_else_block$9(ctx) {
	let doclist;
	let current;

	doclist = new DocList({
			props: {
				listIds: /*data*/ ctx[2].allIds,
				component: File
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(doclist.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(doclist, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const doclist_changes = {};
			if (dirty & /*data*/ 4) doclist_changes.listIds = /*data*/ ctx[2].allIds;
			doclist.$set(doclist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(doclist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$9.name,
		type: "else",
		source: "(239:2) {:else}",
		ctx
	});

	return block;
}

// (237:2) {#if query == ''}
function create_if_block$h(ctx) {
	let treelist;
	let current;

	treelist = new TreeList({
			props: {
				subtree: /*data*/ ctx[2].tree[0],
				listIds: /*data*/ ctx[2].allIds
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(treelist.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(treelist, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const treelist_changes = {};
			if (dirty & /*data*/ 4) treelist_changes.subtree = /*data*/ ctx[2].tree[0];
			if (dirty & /*data*/ 4) treelist_changes.listIds = /*data*/ ctx[2].allIds;
			treelist.$set(treelist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(treelist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(treelist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(treelist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$h.name,
		type: "if",
		source: "(237:2) {#if query == ''}",
		ctx
	});

	return block;
}

function create_fragment$B(ctx) {
	let div;
	let header;
	let t0;
	let separator;
	let t1;
	let searchfield;
	let updating_query;
	let t2;
	let current_block_type_index;
	let if_block;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true,
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	function searchfield_query_binding(value) {
		/*searchfield_query_binding*/ ctx[6].call(null, value);
	}

	let searchfield_props = {
		icon: "img-magnifyingglass",
		focused: true,
		placeholder: "Name",
		margin: "10px 10px 0"
	};

	if (/*query*/ ctx[0] !== void 0) {
		searchfield_props.query = /*query*/ ctx[0];
	}

	searchfield = new SearchField({ props: searchfield_props, $$inline: true });
	binding_callbacks.push(() => bind(searchfield, "query", searchfield_query_binding));
	const if_block_creators = [create_if_block$h, create_else_block$9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*query*/ ctx[0] == "") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator.$$.fragment);
			t1 = space();
			create_component(searchfield.$$.fragment);
			t2 = space();
			if_block.c();
			attr_dev(div, "class", "section");
			add_location(div, file$z, 230, 0, 7950);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(header, div, null);
			append_dev(div, t0);
			mount_component(separator, div, null);
			append_dev(div, t1);
			mount_component(searchfield, div, null);
			append_dev(div, t2);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;

			if (dirty & /*$$scope, sortOptions*/ 8200) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const searchfield_changes = {};

			if (!updating_query && dirty & /*query*/ 1) {
				updating_query = true;
				searchfield_changes.query = /*query*/ ctx[0];
				add_flush_callback(() => updating_query = false);
			}

			searchfield.$set(searchfield_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(searchfield.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(searchfield.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(separator);
			destroy_component(searchfield);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$B.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$B($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(4, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Project", slots, []);
	let query = ""; // Bound to search field
	let tabId = "project";
	setContext("tabId", tabId);

	/* ---- How file updating works ----
 - User makes changes to project directory (e.g. adds a file).
 - Watcher chokidar instance catches. (main)
 - Updates its `files`, then sends patches to render process.
 - StateManager receives patches (render)
 - Applies them to it's 1:1 copy of files (`filesAsObject`), to keep them in sync.
 - Updates its files store (`files`). Which is exported.
 - Svelte components import `files` store.
 - Creates immutabale copy using immer, in `makeStore`
 - Updates whenever `$files` store from StateManager updates.
 - Immutable child components see their dependencies have updated, but only update when their objects are replaced.
 */
	// -------- DATA -------- //
	let data = { tree: {}, allIds: [] };

	/**
 * Create the data tree that we'll use to list of files and folders. Start with `files.tree[0]` and create an immutable clone that is sorted, pruned of non-visible items, and that has empty rows inserted (see `insertEmptyRows` documentation for why). Also create a flattened list of the ids.
*/
	function getData() {
		// Use immer to apply changes immutably (leaving $files untouched).
		// console.log($files)
		$$invalidate(2, data = an($files, draft => {
			// If the project is just a single empty folder, return.
			// This handles first-run scenarios.
			const isSingleEmptyFolder = draft.allIds.length == 1;

			if (isSingleEmptyFolder) return;

			// If query is empty, render list as tree, and show all files.
			// Else, render list as DocList, and only show files that match query criteria.
			if (query == "") {
				// Delete `byId` array
				delete draft.byId;

				// Make tree of files
				sortSubTree(draft.tree[0]);

				mapVisibleDescendants(draft.tree[0], true);
				insertEmptyRows(draft.tree[0]);

				// Make flat array of files
				draft.allIds = lib.createFlatHierarchy(draft.tree[0].children);

				draft.allIds = draft.allIds.filter(file => !file.id.includes("empty")).map(f => f.id);
			} else {
				// Filter draft.allIds to files that match query
				// Then build tree of results
				const QUERY = query.toUpperCase();

				draft.allIds = draft.allIds.filter(id => {
					const file = draft.byId[id];
					const NAME = file.name.toUpperCase();
					const TITLE = file.type == "doc" ? file.title.toUpperCase() : "";

					if (file.type !== "folder" && (NAME.includes(QUERY) || TITLE.includes(QUERY))) {
						return true;
					} else {
						return false;
					}
				});

				// Delete `byId` array and `tree`. For displaying search results, we only need the array of ids from `allIds`.
				delete draft.tree;

				delete draft.byId;
			}

			// While searching, set selection. First try to maintain the current selection. But if none of the search results are already selected, then select the first result.
			if (query) {
				let noResultsAreSelected = !tab.selected.some(selectedId => {
					return draft.allIds.some(id => id == selectedId);
				});

				if (noResultsAreSelected) {
					const firstResultId = draft.allIds[0];

					window.api.send("dispatch", {
						type: "SIDEBAR_SET_SELECTED",
						tabId: "project",
						lastSelected: firstResultId,
						selected: [firstResultId]
					});
				}
			}
		}));
	}

	/** 
 * For a given list of items, sort by the sort criteria 
 */
	function sort(items) {
		items.sort((a, b) => {
			const itemA = $files.byId[a.id];
			const itemB = $files.byId[b.id];

			if (tab.sortBy == "By Title") {
				if (tab.sortOrder == "Ascending") {
					return itemA.name.localeCompare(itemB.name);
				} else {
					return itemB.name.localeCompare(itemA.name);
				}
			} else if (tab.sortBy == "By Modified") {
				if (tab.sortOrder == "Ascending") {
					return moment(itemA.modified).isBefore(itemB.modified);
				} else {
					return moment(itemB.modified).isBefore(itemA.modified);
				}
			}
		});
	}

	/**
 * Sort tree items by sorting criteria.
*/
	function sortSubTree(folder) {
		// Sort
		sort(folder.children);

		folder.children.forEach(c => {
			const type = $files.byId[c.id].type;

			if (type == "folder" && c.children.length) {
				// If folder is not expanded, remove children.
				// Else, recursively sort
				const isExpanded = tab.expanded.includes(c.id);

				if (!isExpanded) {
					c.children = [];
				} else {
					sortSubTree(c);
				}
			}
		});
	}

	/**
 * Determine how many visible descendants each expanded folder has.
 * We use these values to determine how many "empty" row items to insert.
*/
	function mapVisibleDescendants(folder, isRoot = false) {
		folder.numVisibleDescendants = 0;
		const isExpanded = tab.expanded.some(id => id == folder.id);
		if (!isRoot && !isExpanded) return { numVisibleDescendants: 0 };

		folder.children.forEach(c => {
			folder.numVisibleDescendants++;
			const file = $files.byId[c.id];

			if (file.type == "folder") {
				const { numVisibleDescendants } = mapVisibleDescendants(c);
				folder.numVisibleDescendants += numVisibleDescendants;
			}
		});

		return {
			numVisibleDescendants: folder.numVisibleDescendants
		};
	}

	/**
 * For each visible descendant of an expanded folder, insert an empty sibling row. Empty rows are just empty, invsible divs, of the same height as normal rows. We use them to create spaces in the lists where child folders and their children render. We use this overall so we can take advantage of Svelte's FLIP animate directive, which automatically tweens elements in keyed {#each} loops their new positions when their order changes.
*/
	function insertEmptyRows(folder) {
		// For each expanded folder, insert empty sibling elements equal to the length of folder's visible descendants.
		for (var i = 0; i < folder.children.length; i++) {
			let c = folder.children[i];
			if (c.id.includes("empty")) continue;
			const file = $files.byId[c.id];
			const isExpandedFolder = file.type == "folder" && tab.expanded.some(id => id == c.id);

			if (isExpandedFolder) {
				let emptyItems = [];

				for (var x = 0; x < c.numVisibleDescendants; x++) {
					emptyItems.push({ id: `empty-${c.id}-${x}` });
				}

				folder.children.splice(i + 1, 0, ...emptyItems);
				insertEmptyRows(c);
			}
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Project> was created with unknown prop '${key}'`);
	});

	function searchfield_query_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		createTreeHierarchy: lib.createTreeHierarchy,
		createFlatHierarchy: lib.createFlatHierarchy,
		produce: an,
		Header,
		SortMenu,
		SearchField,
		Separator,
		TreeList,
		DocList,
		File,
		setContext,
		moment,
		query,
		tabId,
		data,
		getData,
		sort,
		sortSubTree,
		mapVisibleDescendants,
		insertEmptyRows,
		tab,
		$sidebar,
		sortOptions,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("tabId" in $$props) $$invalidate(7, tabId = $$props.tabId);
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("sortOptions" in $$props) $$invalidate(3, sortOptions = $$props.sortOptions);
	};

	let tab;
	let sortOptions;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 16) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*tab*/ 2) {
			 $$invalidate(3, sortOptions = [
				{
					label: "By Title",
					group: "sortBy",
					checked: tab.sortBy == "By Title"
				},
				{
					label: "By Modified",
					group: "sortBy",
					checked: tab.sortBy == "By Modified",
					separatorAfter: true
				},
				{
					label: "Ascending",
					group: "sortOrder",
					checked: tab.sortOrder == "Ascending"
				},
				{
					label: "Descending",
					group: "sortOrder",
					checked: tab.sortOrder == "Descending"
				}
			]);
		}

		if ($$self.$$.dirty & /*$files, tab, query*/ 35) {
			 (tab.expanded, getData());
		}
	};

	return [query, tab, data, sortOptions, $sidebar, $files, searchfield_query_binding];
}

class Project extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$B, create_fragment$B, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Project",
			options,
			id: create_fragment$B.name
		});
	}
}

/* src/js/renderer/component/ui/Token.svelte generated by Svelte v3.30.1 */
const file$A = "src/js/renderer/component/ui/Token.svelte";

function add_css$B() {
	var style = element("style");
	style.id = "svelte-1xbuykj-style";
	style.textContent = "@keyframes svelte-1xbuykj-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.token.svelte-1xbuykj{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--secondaryLabelColor);padding:0 4px;border-radius:3px;background-color:rgba(var(--foregroundColor), 0.08);margin-left:3px;height:16px;display:inline-flex;align-items:center;user-select:none;white-space:nowrap}.token.svelte-1xbuykj:first-child{margin:0}.isSelected.svelte-1xbuykj{color:var(--controlColor);background-color:rgba(var(--foregroundColor), 0.3)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW4uc3ZlbHRlIiwic291cmNlcyI6WyJUb2tlbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICBleHBvcnQgbGV0IGlzU2VsZWN0ZWQgPSBmYWxzZVxuICBleHBvcnQgbGV0IGxhYmVsID0gJydcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLnRva2VuIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbiAgcGFkZGluZzogMCA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1mb3JlZ3JvdW5kQ29sb3IpLCAwLjA4KTtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG5cbi50b2tlbjpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbjogMDtcbn1cblxuLmlzU2VsZWN0ZWQge1xuICBjb2xvcjogdmFyKC0tY29udHJvbENvbG9yKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1mb3JlZ3JvdW5kQ29sb3IpLCAwLjMpO1xufTwvc3R5bGU+XG5cbjxzcGFuIGNsYXNzPVwidG9rZW5cIiBjbGFzczppc1NlbGVjdGVkIG9uOmNsaWNrPXsoZXZ0KSA9PiBkaXNwYXRjaCgnc2VsZWN0JywgeyBkb21FdmVudDogZXZ0LCB0YWc6IGxhYmVsIH0pfT5cbiAge2xhYmVsfVxuPC9zcGFuPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELE1BQU0sZUFBQyxDQUFDLEFBQ04sV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixLQUFLLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxDQUNqQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FDZCxhQUFhLENBQUUsR0FBRyxDQUNsQixnQkFBZ0IsQ0FBRSxLQUFLLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNwRCxXQUFXLENBQUUsR0FBRyxDQUNoQixNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxXQUFXLENBQ3BCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFdBQVcsQ0FBRSxNQUFNLEFBQ3JCLENBQUMsQUFFRCxxQkFBTSxZQUFZLEFBQUMsQ0FBQyxBQUNsQixNQUFNLENBQUUsQ0FBQyxBQUNYLENBQUMsQUFFRCxXQUFXLGVBQUMsQ0FBQyxBQUNYLEtBQUssQ0FBRSxJQUFJLGNBQWMsQ0FBQyxDQUMxQixnQkFBZ0IsQ0FBRSxLQUFLLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxBQUNyRCxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$C(ctx) {
	let span;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*label*/ ctx[1]);
			attr_dev(span, "class", "token svelte-1xbuykj");
			toggle_class(span, "isSelected", /*isSelected*/ ctx[0]);
			add_location(span, file$A, 44, 0, 936);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 2) set_data_dev(t, /*label*/ ctx[1]);

			if (dirty & /*isSelected*/ 1) {
				toggle_class(span, "isSelected", /*isSelected*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$C.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$C($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Token", slots, []);
	const dispatch = createEventDispatcher();
	let { isSelected = false } = $$props;
	let { label = "" } = $$props;
	const writable_props = ["isSelected", "label"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Token> was created with unknown prop '${key}'`);
	});

	const click_handler = evt => dispatch("select", { domEvent: evt, tag: label });

	$$self.$$set = $$props => {
		if ("isSelected" in $$props) $$invalidate(0, isSelected = $$props.isSelected);
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		dispatch,
		isSelected,
		label
	});

	$$self.$inject_state = $$props => {
		if ("isSelected" in $$props) $$invalidate(0, isSelected = $$props.isSelected);
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isSelected, label, dispatch, click_handler];
}

class Token extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1xbuykj-style")) add_css$B();
		init(this, options, instance$C, create_fragment$C, safe_not_equal, { isSelected: 0, label: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Token",
			options,
			id: create_fragment$C.name
		});
	}

	get isSelected() {
		throw new Error("<Token>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSelected(value) {
		throw new Error("<Token>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Token>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Token>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/list/Doc.svelte generated by Svelte v3.30.1 */
const file_1$1 = "src/js/renderer/component/sidebar/list/Doc.svelte";

function add_css$C() {
	var style = element("style");
	style.id = "svelte-1aclmy5-style";
	style.textContent = "@keyframes svelte-1aclmy5-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.doc.svelte-1aclmy5.svelte-1aclmy5{contain:strict;user-select:none;border-radius:0;margin:0;padding:7px 0.75em;width:100%;height:80px;border-bottom:1px solid var(--separatorColor)}.title.svelte-1aclmy5.svelte-1aclmy5{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;line-height:16px}.tags.svelte-1aclmy5.svelte-1aclmy5{margin-bottom:3px;white-space:nowrap;overflow:hidden}.excerpt.svelte-1aclmy5.svelte-1aclmy5{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--secondaryLabelColor);display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3;overflow:hidden;pointer-events:none;word-break:break-word;line-break:auto;line-height:16px}.excerpt.svelte-1aclmy5 .highlight{text-decoration:underline}.showTags.svelte-1aclmy5 .excerpt.svelte-1aclmy5{-webkit-line-clamp:2}.isSelected.svelte-1aclmy5.svelte-1aclmy5{border-radius:4px;border-bottom:0;height:79px;margin-bottom:1px}.isSelected.svelte-1aclmy5 .title.svelte-1aclmy5,.isSelected.svelte-1aclmy5 .excerpt.svelte-1aclmy5{color:var(--selectedMenuItemTextColor)}.isSelected.isSidebarFocused.svelte-1aclmy5.svelte-1aclmy5{background-color:var(--selectedContentBackgroundColor)}.isSelected.svelte-1aclmy5.svelte-1aclmy5:not(.isSidebarFocused){background-color:var(--disabledControlTextColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jLnN2ZWx0ZSIsInNvdXJjZXMiOlsiRG9jLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgeyBwcm9qZWN0LCBzaWRlYmFyIH0gZnJvbSAnLi4vLi4vLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gJy4uLy4uLy4uL0ZpbGVzTWFuYWdlcidcblx0aW1wb3J0IFRva2VuIGZyb20gJy4uLy4uL3VpL1Rva2VuLnN2ZWx0ZSdcbiAgaW1wb3J0IHsgb25Nb3VzZWRvd24sIG9uTW91c2V1cCB9IGZyb20gJy4vaW50ZXJhY3Rpb25zJ1xuICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnc3ZlbHRlJztcblxuXHQvLyBPcHRpb25hbGx5IHBhc3MgaW4gZmlsZSB0byB1c2UgZm9yIGRvYy4gSWYgdW5kZWZpbmVkLCB3ZSdsbCBnZXQgZG9jIGZyb20gJGZpbGVzXG5cdC8vIEdpdmVzIHVzIGZsZXhpYmlsaXR5LiBJbiBtb3N0IGNhc2VzIHdlJ2xsIHdhbnQgdGhlIHZlcnNpb24gZnJvbSBmaWxlcywgYnV0XG5cdC8vIGluIGNhc2Ugb2Ygc2VhcmNoIHJlc3VsdHMsIHdlIHdhbnQgdG8gcGFzcyBpbiBtb2RpZmllZCB2ZXJzaW9uIG9mIGZpbGUsIHdpdGhcblx0Ly8gaGlnaGxpZ2h0ZWQgZXhjZXJwdCwgZXRjLlxuXHRleHBvcnQgbGV0IGZpbGUgPSB1bmRlZmluZWRcblx0ZXhwb3J0IGxldCBpZCA9ICcnXG5cdGV4cG9ydCBsZXQgbGlzdElkcyA9IFtdXG5cdGV4cG9ydCBsZXQgc2hvd1RhZ3MgPSBmYWxzZVxuXHRcblx0Y29uc3QgdGFiSWQgPSBnZXRDb250ZXh0KCd0YWJJZCcpXG5cdCQ6IHRhYiA9ICRzaWRlYmFyLnRhYnNCeUlkW3RhYklkXVxuXHQkOiBkb2MgPSBmaWxlID8gZmlsZSA6ICRmaWxlcy5ieUlkW2lkXVxuXHQkOiBpc1NlbGVjdGVkID0gdGFiLnNlbGVjdGVkLnNvbWUoKGlkKSA9PiBpZCA9PSBkb2MuaWQpXG5cdCQ6IGlzU2lkZWJhckZvY3VzZWQgPSAkcHJvamVjdC5mb2N1c2VkU2VjdGlvbklkID09ICdzaWRlYmFyJ1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4uZG9jIHtcbiAgY29udGFpbjogc3RyaWN0O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiA3cHggMC43NWVtO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA4MHB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tc2VwYXJhdG9yQ29sb3IpO1xufVxuXG4udGl0bGUge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGxpbmUtaGVpZ2h0OiAxNnB4O1xufVxuXG4udGFncyB7XG4gIG1hcmdpbi1ib3R0b206IDNweDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLmV4Y2VycHQge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgY29sb3I6IHZhcigtLXNlY29uZGFyeUxhYmVsQ29sb3IpO1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAzO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcbiAgbGluZS1icmVhazogYXV0bztcbiAgbGluZS1oZWlnaHQ6IDE2cHg7XG59XG4uZXhjZXJwdCBsaSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgdGV4dC1pbmRlbnQ6IDA7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgY29sb3I6IHJlZDtcbn1cblxuLmV4Y2VycHQgOmdsb2JhbCguaGlnaGxpZ2h0KSB7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuXG4uc2hvd1RhZ3MgLmV4Y2VycHQge1xuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XG59XG5cbi5pc1NlbGVjdGVkIHtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBib3JkZXItYm90dG9tOiAwO1xuICBoZWlnaHQ6IDc5cHg7XG4gIG1hcmdpbi1ib3R0b206IDFweDtcbn1cbi5pc1NlbGVjdGVkIC50aXRsZSwgLmlzU2VsZWN0ZWQgLmV4Y2VycHQge1xuICBjb2xvcjogdmFyKC0tc2VsZWN0ZWRNZW51SXRlbVRleHRDb2xvcik7XG59XG4uaXNTZWxlY3RlZC5pc1NpZGViYXJGb2N1c2VkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VsZWN0ZWRDb250ZW50QmFja2dyb3VuZENvbG9yKTtcbn1cbi5pc1NlbGVjdGVkOm5vdCguaXNTaWRlYmFyRm9jdXNlZCkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kaXNhYmxlZENvbnRyb2xUZXh0Q29sb3IpO1xufTwvc3R5bGU+XG5cbjxzdmVsdGU6b3B0aW9ucyBpbW11dGFibGU9e3RydWV9IC8+XG5cbjxkaXZcblx0Y2xhc3M9XCJkb2NcIlxuXHRjbGFzczpzaG93VGFnc1xuXHRjbGFzczppc1NlbGVjdGVkXG5cdGNsYXNzOmlzU2lkZWJhckZvY3VzZWRcblx0b246bW91c2Vkb3duPXsoZXZ0KSA9PiBvbk1vdXNlZG93bihldnQsIGlkLCBpc1NlbGVjdGVkLCB0YWIsIHRhYklkLCBsaXN0SWRzLCAkZmlsZXMpfVxuXHRvbjptb3VzZXVwPXsoZXZ0KSA9PiBvbk1vdXNldXAoZXZ0LCBpZCwgdGFiLCB0YWJJZCwgJHByb2plY3QucGFuZWxzWyRwcm9qZWN0LmZvY3VzZWRQYW5lbEluZGV4XSwgJGZpbGVzKX1cblx0PlxuXHRcdDxkaXYgY2xhc3M9XCJ0aXRsZVwiPntkb2MudGl0bGUgPyBkb2MudGl0bGUgOiBkb2MubmFtZX08L2Rpdj5cblx0XHRcdHsjaWYgc2hvd1RhZ3N9XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJ0YWdzXCI+XG5cdFx0XHRcdFx0eyNlYWNoIGRvYy50YWdzIGFzIHRhZ31cblx0XHRcdFx0XHRcdDxUb2tlbiBsYWJlbD17dGFnfSAvPlxuXHRcdFx0XHRcdHsvZWFjaH1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHR7L2lmfVxuXHRcdDxkaXYgY2xhc3M9XCJleGNlcnB0XCI+e0BodG1sIGRvYy5leGNlcnB0fTwvZGl2PlxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELElBQUksOEJBQUMsQ0FBQyxBQUNKLE9BQU8sQ0FBRSxNQUFNLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsYUFBYSxDQUFFLENBQUMsQ0FDaEIsTUFBTSxDQUFFLENBQUMsQ0FDVCxPQUFPLENBQUUsR0FBRyxDQUFDLE1BQU0sQ0FDbkIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLGFBQWEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQUFDaEQsQ0FBQyxBQUVELE1BQU0sOEJBQUMsQ0FBQyxBQUNOLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLE9BQU8sQ0FDdkIsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLENBQ3hCLGFBQWEsQ0FBRSxRQUFRLENBQ3ZCLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFdBQVcsQ0FBRSxJQUFJLEFBQ25CLENBQUMsQUFFRCxLQUFLLDhCQUFDLENBQUMsQUFDTCxhQUFhLENBQUUsR0FBRyxDQUNsQixXQUFXLENBQUUsTUFBTSxDQUNuQixRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFDLEFBRUQsUUFBUSw4QkFBQyxDQUFDLEFBQ1IsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixLQUFLLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxDQUNqQyxPQUFPLENBQUUsV0FBVyxDQUNwQixrQkFBa0IsQ0FBRSxRQUFRLENBQzVCLGtCQUFrQixDQUFFLENBQUMsQ0FDckIsUUFBUSxDQUFFLE1BQU0sQ0FDaEIsY0FBYyxDQUFFLElBQUksQ0FDcEIsVUFBVSxDQUFFLFVBQVUsQ0FDdEIsVUFBVSxDQUFFLElBQUksQ0FDaEIsV0FBVyxDQUFFLElBQUksQUFDbkIsQ0FBQyxBQVNELHVCQUFRLENBQUMsQUFBUSxVQUFVLEFBQUUsQ0FBQyxBQUM1QixlQUFlLENBQUUsU0FBUyxBQUM1QixDQUFDLEFBRUQsd0JBQVMsQ0FBQyxRQUFRLGVBQUMsQ0FBQyxBQUNsQixrQkFBa0IsQ0FBRSxDQUFDLEFBQ3ZCLENBQUMsQUFFRCxXQUFXLDhCQUFDLENBQUMsQUFDWCxhQUFhLENBQUUsR0FBRyxDQUNsQixhQUFhLENBQUUsQ0FBQyxDQUNoQixNQUFNLENBQUUsSUFBSSxDQUNaLGFBQWEsQ0FBRSxHQUFHLEFBQ3BCLENBQUMsQUFDRCwwQkFBVyxDQUFDLHFCQUFNLENBQUUsMEJBQVcsQ0FBQyxRQUFRLGVBQUMsQ0FBQyxBQUN4QyxLQUFLLENBQUUsSUFBSSwyQkFBMkIsQ0FBQyxBQUN6QyxDQUFDLEFBQ0QsV0FBVyxpQkFBaUIsOEJBQUMsQ0FBQyxBQUM1QixnQkFBZ0IsQ0FBRSxJQUFJLGdDQUFnQyxDQUFDLEFBQ3pELENBQUMsQUFDRCx5Q0FBVyxLQUFLLGlCQUFpQixDQUFDLEFBQUMsQ0FBQyxBQUNsQyxnQkFBZ0IsQ0FBRSxJQUFJLDBCQUEwQixDQUFDLEFBQ25ELENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (122:3) {#if showTags}
function create_if_block$i(ctx) {
	let div;
	let current;
	let each_value = /*doc*/ ctx[4].tags;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "tags svelte-1aclmy5");
			add_location(div, file_1$1, 122, 4, 2956);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*doc*/ 16) {
				each_value = /*doc*/ ctx[4].tags;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$i.name,
		type: "if",
		source: "(122:3) {#if showTags}",
		ctx
	});

	return block;
}

// (124:5) {#each doc.tags as tag}
function create_each_block$4(ctx) {
	let token;
	let current;

	token = new Token({
			props: { label: /*tag*/ ctx[14] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(token.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(token, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const token_changes = {};
			if (dirty & /*doc*/ 16) token_changes.label = /*tag*/ ctx[14];
			token.$set(token_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(token.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(token.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(token, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(124:5) {#each doc.tags as tag}",
		ctx
	});

	return block;
}

function create_fragment$D(ctx) {
	let div2;
	let div0;

	let t0_value = (/*doc*/ ctx[4].title
	? /*doc*/ ctx[4].title
	: /*doc*/ ctx[4].name) + "";

	let t0;
	let t1;
	let t2;
	let div1;
	let raw_value = /*doc*/ ctx[4].excerpt + "";
	let current;
	let mounted;
	let dispose;
	let if_block = /*showTags*/ ctx[2] && create_if_block$i(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			div1 = element("div");
			attr_dev(div0, "class", "title svelte-1aclmy5");
			add_location(div0, file_1$1, 120, 2, 2874);
			attr_dev(div1, "class", "excerpt svelte-1aclmy5");
			add_location(div1, file_1$1, 128, 2, 3067);
			attr_dev(div2, "class", "doc svelte-1aclmy5");
			toggle_class(div2, "showTags", /*showTags*/ ctx[2]);
			toggle_class(div2, "isSelected", /*isSelected*/ ctx[7]);
			toggle_class(div2, "isSidebarFocused", /*isSidebarFocused*/ ctx[8]);
			add_location(div2, file_1$1, 112, 0, 2599);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, t0);
			append_dev(div2, t1);
			if (if_block) if_block.m(div2, null);
			append_dev(div2, t2);
			append_dev(div2, div1);
			div1.innerHTML = raw_value;
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div2, "mousedown", /*mousedown_handler*/ ctx[12], false, false, false),
					listen_dev(div2, "mouseup", /*mouseup_handler*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*doc*/ 16) && t0_value !== (t0_value = (/*doc*/ ctx[4].title
			? /*doc*/ ctx[4].title
			: /*doc*/ ctx[4].name) + "")) set_data_dev(t0, t0_value);

			if (/*showTags*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showTags*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$i(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*doc*/ 16) && raw_value !== (raw_value = /*doc*/ ctx[4].excerpt + "")) div1.innerHTML = raw_value;
			if (dirty & /*showTags*/ 4) {
				toggle_class(div2, "showTags", /*showTags*/ ctx[2]);
			}

			if (dirty & /*isSelected*/ 128) {
				toggle_class(div2, "isSelected", /*isSelected*/ ctx[7]);
			}

			if (dirty & /*isSidebarFocused*/ 256) {
				toggle_class(div2, "isSidebarFocused", /*isSidebarFocused*/ ctx[8]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$D.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$D($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	let $project;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(11, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(6, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Doc", slots, []);
	let { file = undefined } = $$props;
	let { id = "" } = $$props;
	let { listIds = [] } = $$props;
	let { showTags = false } = $$props;
	const tabId = getContext("tabId");
	const writable_props = ["file", "id", "listIds", "showTags"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Doc> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = evt => onMousedown(evt, id, isSelected, tab, tabId, listIds);
	const mouseup_handler = evt => onMouseup(evt, id, tab, tabId, $project.panels[$project.focusedPanelIndex], $files);

	$$self.$$set = $$props => {
		if ("file" in $$props) $$invalidate(10, file = $$props.file);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("showTags" in $$props) $$invalidate(2, showTags = $$props.showTags);
	};

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		Token,
		onMousedown,
		onMouseup,
		getContext,
		file,
		id,
		listIds,
		showTags,
		tabId,
		tab,
		$sidebar,
		doc,
		$files,
		isSelected,
		isSidebarFocused,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("file" in $$props) $$invalidate(10, file = $$props.file);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("showTags" in $$props) $$invalidate(2, showTags = $$props.showTags);
		if ("tab" in $$props) $$invalidate(3, tab = $$props.tab);
		if ("doc" in $$props) $$invalidate(4, doc = $$props.doc);
		if ("isSelected" in $$props) $$invalidate(7, isSelected = $$props.isSelected);
		if ("isSidebarFocused" in $$props) $$invalidate(8, isSidebarFocused = $$props.isSidebarFocused);
	};

	let tab;
	let doc;
	let isSelected;
	let isSidebarFocused;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 2048) {
			 $$invalidate(3, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*file, $files, id*/ 1057) {
			 $$invalidate(4, doc = file ? file : $files.byId[id]);
		}

		if ($$self.$$.dirty & /*tab, doc*/ 24) {
			 $$invalidate(7, isSelected = tab.selected.some(id => id == doc.id));
		}

		if ($$self.$$.dirty & /*$project*/ 64) {
			 $$invalidate(8, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}
	};

	return [
		id,
		listIds,
		showTags,
		tab,
		doc,
		$files,
		$project,
		isSelected,
		isSidebarFocused,
		tabId,
		file,
		$sidebar,
		mousedown_handler,
		mouseup_handler
	];
}

class Doc extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1aclmy5-style")) add_css$C();
		init(this, options, instance$D, create_fragment$D, not_equal, { file: 10, id: 0, listIds: 1, showTags: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Doc",
			options,
			id: create_fragment$D.name
		});
	}

	get file() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set file(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showTags() {
		throw new Error("<Doc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showTags(value) {
		throw new Error("<Doc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/AllDocuments.svelte generated by Svelte v3.30.1 */
const file$B = "src/js/renderer/component/sidebar/AllDocuments.svelte";

// (76:2) <Header title={tab.title} hoverToShowSlot={true}>
function create_default_slot$7(ctx) {
	let sortmenu;
	let current;

	sortmenu = new SortMenu({
			props: { items: /*sortOptions*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sortmenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sortmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sortmenu_changes = {};
			if (dirty & /*sortOptions*/ 8) sortmenu_changes.items = /*sortOptions*/ ctx[3];
			sortmenu.$set(sortmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sortmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sortmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sortmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(76:2) <Header title={tab.title} hoverToShowSlot={true}>",
		ctx
	});

	return block;
}

function create_fragment$E(ctx) {
	let div;
	let header;
	let t0;
	let separator;
	let t1;
	let searchfield;
	let updating_query;
	let t2;
	let doclist;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true,
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	function searchfield_query_binding(value) {
		/*searchfield_query_binding*/ ctx[7].call(null, value);
	}

	let searchfield_props = {
		focused: true,
		placeholder: "Name",
		margin: "10px 10px 0"
	};

	if (/*query*/ ctx[0] !== void 0) {
		searchfield_props.query = /*query*/ ctx[0];
	}

	searchfield = new SearchField({ props: searchfield_props, $$inline: true });
	binding_callbacks.push(() => bind(searchfield, "query", searchfield_query_binding));

	doclist = new DocList({
			props: { listIds: /*data*/ ctx[2], component: Doc },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator.$$.fragment);
			t1 = space();
			create_component(searchfield.$$.fragment);
			t2 = space();
			create_component(doclist.$$.fragment);
			attr_dev(div, "class", "section");
			add_location(div, file$B, 74, 0, 2205);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(header, div, null);
			append_dev(div, t0);
			mount_component(separator, div, null);
			append_dev(div, t1);
			mount_component(searchfield, div, null);
			append_dev(div, t2);
			mount_component(doclist, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;

			if (dirty & /*$$scope, sortOptions*/ 2056) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const searchfield_changes = {};

			if (!updating_query && dirty & /*query*/ 1) {
				updating_query = true;
				searchfield_changes.query = /*query*/ ctx[0];
				add_flush_callback(() => updating_query = false);
			}

			searchfield.$set(searchfield_changes);
			const doclist_changes = {};
			if (dirty & /*data*/ 4) doclist_changes.listIds = /*data*/ ctx[2];
			doclist.$set(doclist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(searchfield.$$.fragment, local);
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(searchfield.$$.fragment, local);
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(separator);
			destroy_component(searchfield);
			destroy_component(doclist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$E.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$E($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(4, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(5, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(6, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AllDocuments", slots, []);
	let query = ""; // Bound to search field
	let tabId = "allDocs";
	setContext("tabId", tabId);

	// -------- DATA -------- //
	let data = [];

	function getData() {
		$$invalidate(2, data = an($files.allIds, draft => {
			// Get ids with file type 'doc'
			draft = draft.filter(id => $files.byId[id].type == "doc");

			// Filter by query 
			if (query) {
				draft = draft.filter(id => $files.byId[id].name.includes(query));
			}

			// Sort
			draft = draft.sort((a, b) => {
				const itemA = $files.byId[a];
				const itemB = $files.byId[b];

				if (tab.sortBy == "By Title") {
					if (tab.sortOrder == "Ascending") {
						return itemA.name.localeCompare(itemB.name);
					} else {
						return itemB.name.localeCompare(itemA.name);
					}
				} else if (tab.sortBy == "By Modified") {
					if (tab.sortOrder == "Ascending") {
						return moment(itemA.modified).isBefore(itemB.modified);
					} else {
						return moment(itemB.modified).isBefore(itemA.modified);
					}
				}
			});

			return draft;
		}));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AllDocuments> was created with unknown prop '${key}'`);
	});

	function searchfield_query_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		produce: an,
		Header,
		SortMenu,
		SearchField,
		Separator,
		DocList,
		Doc,
		setContext,
		moment,
		query,
		tabId,
		data,
		getData,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		sortOptions,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("tabId" in $$props) $$invalidate(9, tabId = $$props.tabId);
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) isSidebarFocused = $$props.isSidebarFocused;
		if ("sortOptions" in $$props) $$invalidate(3, sortOptions = $$props.sortOptions);
	};

	let tab;
	let isSidebarFocused;
	let sortOptions;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 16) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			 isSidebarFocused = $project.focusedSectionId == "sidebar";
		}

		if ($$self.$$.dirty & /*tab*/ 2) {
			 $$invalidate(3, sortOptions = [
				{
					label: "By Title",
					group: "sortBy",
					checked: tab.sortBy == "By Title"
				},
				{
					label: "By Modified",
					group: "sortBy",
					checked: tab.sortBy == "By Modified",
					separatorAfter: true
				},
				{
					label: "Ascending",
					group: "sortOrder",
					checked: tab.sortOrder == "Ascending"
				},
				{
					label: "Descending",
					group: "sortOrder",
					checked: tab.sortOrder == "Descending"
				}
			]);
		}

		if ($$self.$$.dirty & /*$files, query, tab*/ 67) {
			 (tab.sortBy, tab.sortOrder, getData());
		}
	};

	return [
		query,
		tab,
		data,
		sortOptions,
		$sidebar,
		$project,
		$files,
		searchfield_query_binding
	];
}

class AllDocuments extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$E, create_fragment$E, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AllDocuments",
			options,
			id: create_fragment$E.name
		});
	}
}

/* src/js/renderer/component/sidebar/MostRecent.svelte generated by Svelte v3.30.1 */
const file$C = "src/js/renderer/component/sidebar/MostRecent.svelte";

// (67:2) <Header title={tab.title} hoverToShowSlot={true}>
function create_default_slot$8(ctx) {
	let sortmenu;
	let current;

	sortmenu = new SortMenu({
			props: { options: /*sortOptions*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sortmenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sortmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sortmenu_changes = {};
			if (dirty & /*sortOptions*/ 8) sortmenu_changes.options = /*sortOptions*/ ctx[3];
			sortmenu.$set(sortmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sortmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sortmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sortmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$8.name,
		type: "slot",
		source: "(67:2) <Header title={tab.title} hoverToShowSlot={true}>",
		ctx
	});

	return block;
}

function create_fragment$F(ctx) {
	let div;
	let header;
	let t0;
	let separator;
	let t1;
	let searchfield;
	let updating_query;
	let t2;
	let doclist;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true,
				$$slots: { default: [create_default_slot$8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	function searchfield_query_binding(value) {
		/*searchfield_query_binding*/ ctx[7].call(null, value);
	}

	let searchfield_props = {
		focused: true,
		placeholder: "Name",
		margin: "10px 10px 0"
	};

	if (/*query*/ ctx[0] !== void 0) {
		searchfield_props.query = /*query*/ ctx[0];
	}

	searchfield = new SearchField({ props: searchfield_props, $$inline: true });
	binding_callbacks.push(() => bind(searchfield, "query", searchfield_query_binding));

	doclist = new DocList({
			props: { listIds: /*data*/ ctx[2], component: Doc },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator.$$.fragment);
			t1 = space();
			create_component(searchfield.$$.fragment);
			t2 = space();
			create_component(doclist.$$.fragment);
			attr_dev(div, "class", "section");
			add_location(div, file$C, 65, 0, 1737);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(header, div, null);
			append_dev(div, t0);
			mount_component(separator, div, null);
			append_dev(div, t1);
			mount_component(searchfield, div, null);
			append_dev(div, t2);
			mount_component(doclist, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;

			if (dirty & /*$$scope, sortOptions*/ 2056) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const searchfield_changes = {};

			if (!updating_query && dirty & /*query*/ 1) {
				updating_query = true;
				searchfield_changes.query = /*query*/ ctx[0];
				add_flush_callback(() => updating_query = false);
			}

			searchfield.$set(searchfield_changes);
			const doclist_changes = {};
			if (dirty & /*data*/ 4) doclist_changes.listIds = /*data*/ ctx[2];
			doclist.$set(doclist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(searchfield.$$.fragment, local);
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(searchfield.$$.fragment, local);
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(separator);
			destroy_component(searchfield);
			destroy_component(doclist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$F.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$F($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(4, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(5, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(6, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("MostRecent", slots, []);
	let query = ""; // Bound to search field
	let tabId = "mostRecent";
	setContext("tabId", tabId);

	// -------- DATA -------- //
	let data = [];

	function getData() {
		$$invalidate(2, data = an($files.allIds, draft => {
			// Get ids with file type 'doc'
			draft = draft.filter(id => $files.byId[id].type == "doc");

			// Filter by query 
			if (query) {
				draft = draft.filter(id => $files.byId[id].name.includes(query));
			}

			// Sort
			draft = draft.sort((a, b) => {
				const itemA = $files.byId[a];
				const itemB = $files.byId[b];

				if (tab.sortOrder == "Ascending") {
					return moment(itemA.modified).isBefore(itemB.modified);
				} else {
					return moment(itemB.modified).isBefore(itemA.modified);
				}
			});

			return draft;
		}));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MostRecent> was created with unknown prop '${key}'`);
	});

	function searchfield_query_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		produce: an,
		Header,
		SortMenu,
		SearchField,
		Separator,
		DocList,
		Doc,
		setContext,
		moment,
		query,
		tabId,
		data,
		getData,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		sortOptions,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("tabId" in $$props) $$invalidate(9, tabId = $$props.tabId);
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) isSidebarFocused = $$props.isSidebarFocused;
		if ("sortOptions" in $$props) $$invalidate(3, sortOptions = $$props.sortOptions);
	};

	let tab;
	let isSidebarFocused;
	let sortOptions;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 16) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			 isSidebarFocused = $project.focusedSectionId == "sidebar";
		}

		if ($$self.$$.dirty & /*tab*/ 2) {
			 $$invalidate(3, sortOptions = [
				{
					label: "Ascending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Ascending"
				},
				{
					label: "Descending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Descending"
				}
			]);
		}

		if ($$self.$$.dirty & /*$files, query, tab*/ 67) {
			 (tab.sortBy, tab.sortOrder, getData());
		}
	};

	return [
		query,
		tab,
		data,
		sortOptions,
		$sidebar,
		$project,
		$files,
		searchfield_query_binding
	];
}

class MostRecent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$F, create_fragment$F, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MostRecent",
			options,
			id: create_fragment$F.name
		});
	}
}

/* src/js/renderer/component/sidebar/Tags.svelte generated by Svelte v3.30.1 */

const { Object: Object_1 } = globals;
const file$D = "src/js/renderer/component/sidebar/Tags.svelte";

function add_css$D() {
	var style = element("style");
	style.id = "svelte-88j505-style";
	style.textContent = "@keyframes svelte-88j505-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#tagsList.svelte-88j505{padding:8px 10px}.noTags.svelte-88j505{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--secondaryLabelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFncy5zdmVsdGUiLCJzb3VyY2VzIjpbIlRhZ3Muc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHByb2plY3QsIHNpZGViYXIgfSBmcm9tICcuLi8uLi9TdGF0ZU1hbmFnZXInXG4gIGltcG9ydCB7IGZpbGVzIH0gZnJvbSAnLi4vLi4vRmlsZXNNYW5hZ2VyJ1xuICBpbXBvcnQgcHJvZHVjZSBmcm9tICdpbW1lcidcbiAgaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlci5zdmVsdGUnXG4gIGltcG9ydCBTb3J0TWVudSBmcm9tICcuL1NvcnRNZW51LnN2ZWx0ZSdcbiAgaW1wb3J0IFRva2VuIGZyb20gJy4uL3VpL1Rva2VuLnN2ZWx0ZSdcbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJ1xuICBpbXBvcnQgRG9jTGlzdCBmcm9tICcuL2xpc3QvRG9jTGlzdC5zdmVsdGUnXG4gIGltcG9ydCBEb2MgZnJvbSAnLi9saXN0L0RvYy5zdmVsdGUnXG4gIGltcG9ydCB7IHNldENvbnRleHQgfSBmcm9tICdzdmVsdGUnXG4gIGltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xuICBcbiAgbGV0IHRhYklkID0gJ3RhZ3MnXG4gIHNldENvbnRleHQoJ3RhYklkJywgdGFiSWQpO1xuICAkOiB0YWIgPSAkc2lkZWJhci50YWJzQnlJZFt0YWJJZF1cblxuICAvLyBEZWZpbmUgc29ydCBvcHRpb25cbiAgJDogc29ydE9wdGlvbnMgPSBbXG4gICAgeyBsYWJlbDogJ0J5IFRpdGxlJywgZ3JvdXA6ICdzb3J0QnknLCBpc0NoZWNrZWQ6IHRhYi5zb3J0QnkgPT0gJ0J5IFRpdGxlJyB9LFxuICAgIHsgbGFiZWw6ICdCeSBNb2RpZmllZCcsIGdyb3VwOiAnc29ydEJ5JywgaXNDaGVja2VkOiB0YWIuc29ydEJ5ID09ICdCeSBNb2RpZmllZCcgfSxcbiAgICB7IGxhYmVsOiAnc2VwYXJhdG9yJyB9LFxuICAgIHsgbGFiZWw6ICdBc2NlbmRpbmcnLCBncm91cDogJ3NvcnRPcmRlcicsIGlzQ2hlY2tlZDogdGFiLnNvcnRPcmRlciA9PSAnQXNjZW5kaW5nJyB9LFxuICAgIHsgbGFiZWw6ICdEZXNjZW5kaW5nJywgZ3JvdXA6ICdzb3J0T3JkZXInLCBpc0NoZWNrZWQ6IHRhYi5zb3J0T3JkZXIgPT0gJ0Rlc2NlbmRpbmcnIH0sXG4gIF1cblxuICAvLyAkOiBpc1NpZGViYXJGb2N1c2VkID0gJHByb2plY3QuZm9jdXNlZFNlY3Rpb25JZCA9PSAnc2lkZWJhcidcblxuICBsZXQgYWxsVGFncyA9IFtdXG4gICQ6IHNlbGVjdGVkVGFncyA9IHRhYi5zZWxlY3RlZFRhZ3NcbiAgXG4gICQ6ICRmaWxlcy5ieUlkLCBnZXRUYWdzKClcblxuICAvKipcbiAgICogQnVpbGQgbGlzdCBvZiB0YWdzIGZyb20gZmlsZXMuIFxuICAgKiBBZGQgZWFjaCB1bmlxdWUgdGFnIGluIGVhY2ggZmlsZSB0byB0aGUgbGlzdC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFRhZ3MoKSB7XG4gICAgYWxsVGFncyA9IFtdXG4gICAgXG4gICAgZm9yIChjb25zdCBbaWQsIGZpbGVdIG9mIE9iamVjdC5lbnRyaWVzKCRmaWxlcy5ieUlkKSkge1xuICAgICAgZmlsZS50YWdzPy5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICAgICAgaWYgKCFhbGxUYWdzLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgICAgICBhbGxUYWdzLnB1c2godGFnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNvcnQgYWxwaGFiZXRpY2FsbHlcbiAgICBhbGxUYWdzLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tIERBVEEgLS0tLS0tLS0gLy9cblxuICBsZXQgZGF0YSA9IFtdXG5cbiAgJDogJGZpbGVzLCBzZWxlY3RlZFRhZ3MsIHRhYi5zb3J0QnksIHRhYi5zb3J0T3JkZXIsIGdldERhdGEoKVxuXG4gIGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgZGF0YSA9IHByb2R1Y2UoJGZpbGVzLmFsbElkcywgKGRyYWZ0KSA9PiB7XG4gICAgICBcbiAgICAgIC8vIEdldCBpZHMgd2l0aCBmaWxlIHR5cGUgJ2RvYydcbiAgICAgIGRyYWZ0ID0gZHJhZnQuZmlsdGVyKChpZCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlID0gJGZpbGVzLmJ5SWRbaWRdXG4gICAgICAgIGNvbnN0IGlzRG9jID0gZmlsZS50eXBlID09ICdkb2MnXG4gICAgICAgIGNvbnN0IGhhc1RhZyA9IGZpbGUudGFncz8uc29tZSgoZmlsZVRhZykgPT4gc2VsZWN0ZWRUYWdzLmluY2x1ZGVzKGZpbGVUYWcpKVxuICAgICAgICByZXR1cm4gaXNEb2MgJiYgaGFzVGFnXG4gICAgICB9KVxuICAgIFxuICAgICAgXG4gICAgICAvLyBTb3J0XG4gICAgICBkcmFmdCA9IGRyYWZ0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbUEgPSAkZmlsZXMuYnlJZFthXVxuICAgICAgICBjb25zdCBpdGVtQiA9ICRmaWxlcy5ieUlkW2JdXG5cbiAgICAgICAgaWYgKHRhYi5zb3J0QnkgPT0gJ0J5IFRpdGxlJykge1xuICAgICAgICAgIGlmICh0YWIuc29ydE9yZGVyID09ICdBc2NlbmRpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbUEubmFtZS5sb2NhbGVDb21wYXJlKGl0ZW1CLm5hbWUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtQi5uYW1lLmxvY2FsZUNvbXBhcmUoaXRlbUEubmFtZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFiLnNvcnRCeSA9PSAnQnkgTW9kaWZpZWQnKSB7XG4gICAgICAgICAgaWYgKHRhYi5zb3J0T3JkZXIgPT0gJ0FzY2VuZGluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoaXRlbUEubW9kaWZpZWQpLmlzQmVmb3JlKGl0ZW1CLm1vZGlmaWVkKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGl0ZW1CLm1vZGlmaWVkKS5pc0JlZm9yZShpdGVtQS5tb2RpZmllZClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gZHJhZnRcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0KGV2dCkge1xuXG4gICAgY29uc3QgeyB0YWcsIGRvbUV2ZW50IH0gPSBldnQuZGV0YWlsXG4gICAgbGV0IG5ld1NlbGVjdGVkID0gW11cblxuICAgIC8vIElmIG1ldGEga2V5IGlzIGhlbGQsIGFkZCBvciByZW1vdmUgZnJvbSBleGlzdGluZyBzZWxlY3Rpb25cbiAgICAvLyBFbHNlLCBzZWxlY3QgdGhlIGNsaWNrZWQgdGFnIChpZiBpdCdzIG5vdCBhbHJlYWR5IHNlbGVjdGVkKS5cbiAgICBpZiAoZG9tRXZlbnQubWV0YUtleSkge1xuXG4gICAgICBuZXdTZWxlY3RlZCA9IFsuLi5zZWxlY3RlZFRhZ3NdXG4gICAgICBcbiAgICAgIC8vIElmIHRhZyBpcyBhbHJlYWR5IHNlbGVjdGVkLCByZW1vdmUgaXQuIEVsc2UsIGFkZCBpdC5cbiAgICAgIGlmIChzZWxlY3RlZFRhZ3MuaW5jbHVkZXModGFnKSkge1xuICAgICAgICBjb25zdCBpbmRleFRvUmVtb3ZlID0gc2VsZWN0ZWRUYWdzLmluZGV4T2YodGFnKVxuICAgICAgICBuZXdTZWxlY3RlZC5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1NlbGVjdGVkLnB1c2godGFnKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTZWxlY3RlZCA9IFt0YWddXG4gICAgfVxuXG4gICAgaWYgKG5ld1NlbGVjdGVkID09IFtdKSByZXR1cm5cblxuICAgIHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7XG4gICAgICB0eXBlOiAnU0lERUJBUl9TRUxFQ1RfVEFHUycsXG4gICAgICB0YWJJZDogdGFiSWQsXG4gICAgICB0YWdzOiBuZXdTZWxlY3RlZCxcbiAgICB9KVxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbiN0YWdzTGlzdCB7XG4gIHBhZGRpbmc6IDhweCAxMHB4O1xufVxuXG4ubm9UYWdzIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbn08L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwic2VjdGlvblwiPlxuICA8SGVhZGVyIHRpdGxlPXt0YWIudGl0bGV9IGhvdmVyVG9TaG93U2xvdD17dHJ1ZX0+XG4gICAgPFNvcnRNZW51IG9wdGlvbnM9e3NvcnRPcHRpb25zfSAvPlxuICA8L0hlYWRlcj5cbiAgPFNlcGFyYXRvciBtYXJnaW49eycwIDEwcHgnfSAvPlxuICA8ZGl2IGlkPVwidGFnc0xpc3RcIj5cbiAgICB7I2lmIGFsbFRhZ3MubGVuZ3RoID4gMH1cbiAgICAgIHsjZWFjaCBhbGxUYWdzIGFzIHRhZ31cbiAgICAgICAgPFRva2VuIGxhYmVsPXt0YWd9IGlzU2VsZWN0ZWQ9e3RhYi5zZWxlY3RlZFRhZ3MuaW5jbHVkZXModGFnKX0gb246c2VsZWN0PXtzZWxlY3R9IC8+XG4gICAgICB7L2VhY2h9XG4gICAgezplbHNlfVxuICAgICAgPHNwYW4gY2xhc3M9XCJub1RhZ3NcIj5ObyB0YWdzIGZvdW5kPC9zcGFuPlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuICA8U2VwYXJhdG9yIG1hcmdpbj17JzAgMTBweCd9IC8+XG4gIDwhLS0gPFNlYXJjaEZpZWxkIGZvY3VzZWQgYmluZDpxdWVyeSBwbGFjZWhvbGRlcj17J05hbWUnfSAvPiAtLT5cbiAgPERvY0xpc3QgbGlzdElkcz17ZGF0YX0gY29tcG9uZW50PXtEb2N9IHNob3dUYWdzPXtzZWxlY3RlZFRhZ3MubGVuZ3RoID4gMX0gLz5cbjwvZGl2PlxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEh3QixXQUFXLHlCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsU0FBUyxjQUFDLENBQUMsQUFDVCxPQUFPLENBQUUsR0FBRyxDQUFDLElBQUksQUFDbkIsQ0FBQyxBQUVELE9BQU8sY0FBQyxDQUFDLEFBQ1AsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixLQUFLLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxBQUNuQyxDQUFDIn0= */";
	append_dev(document.head, style);
}

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (149:2) <Header title={tab.title} hoverToShowSlot={true}>
function create_default_slot$9(ctx) {
	let sortmenu;
	let current;

	sortmenu = new SortMenu({
			props: { options: /*sortOptions*/ ctx[4] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sortmenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sortmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sortmenu_changes = {};
			if (dirty & /*sortOptions*/ 16) sortmenu_changes.options = /*sortOptions*/ ctx[4];
			sortmenu.$set(sortmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sortmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sortmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sortmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$9.name,
		type: "slot",
		source: "(149:2) <Header title={tab.title} hoverToShowSlot={true}>",
		ctx
	});

	return block;
}

// (158:4) {:else}
function create_else_block$a(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "No tags found";
			attr_dev(span, "class", "noTags svelte-88j505");
			add_location(span, file$D, 158, 6, 4272);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$a.name,
		type: "else",
		source: "(158:4) {:else}",
		ctx
	});

	return block;
}

// (154:4) {#if allTags.length > 0}
function create_if_block$j(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*allTags*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*allTags, tab, select*/ 37) {
				each_value = /*allTags*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$j.name,
		type: "if",
		source: "(154:4) {#if allTags.length > 0}",
		ctx
	});

	return block;
}

// (155:6) {#each allTags as tag}
function create_each_block$5(ctx) {
	let token;
	let current;

	token = new Token({
			props: {
				label: /*tag*/ ctx[11],
				isSelected: /*tab*/ ctx[0].selectedTags.includes(/*tag*/ ctx[11])
			},
			$$inline: true
		});

	token.$on("select", /*select*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(token.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(token, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const token_changes = {};
			if (dirty & /*allTags*/ 4) token_changes.label = /*tag*/ ctx[11];
			if (dirty & /*tab, allTags*/ 5) token_changes.isSelected = /*tab*/ ctx[0].selectedTags.includes(/*tag*/ ctx[11]);
			token.$set(token_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(token.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(token.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(token, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$5.name,
		type: "each",
		source: "(155:6) {#each allTags as tag}",
		ctx
	});

	return block;
}

function create_fragment$G(ctx) {
	let div1;
	let header;
	let t0;
	let separator0;
	let t1;
	let div0;
	let current_block_type_index;
	let if_block;
	let t2;
	let separator1;
	let t3;
	let doclist;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[0].title,
				hoverToShowSlot: true,
				$$slots: { default: [create_default_slot$9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator0 = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	const if_block_creators = [create_if_block$j, create_else_block$a];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*allTags*/ ctx[2].length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	separator1 = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	doclist = new DocList({
			props: {
				listIds: /*data*/ ctx[3],
				component: Doc,
				showTags: /*selectedTags*/ ctx[1].length > 1
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator0.$$.fragment);
			t1 = space();
			div0 = element("div");
			if_block.c();
			t2 = space();
			create_component(separator1.$$.fragment);
			t3 = space();
			create_component(doclist.$$.fragment);
			attr_dev(div0, "id", "tagsList");
			attr_dev(div0, "class", "svelte-88j505");
			add_location(div0, file$D, 152, 2, 4069);
			attr_dev(div1, "class", "section");
			add_location(div1, file$D, 147, 0, 3908);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(header, div1, null);
			append_dev(div1, t0);
			mount_component(separator0, div1, null);
			append_dev(div1, t1);
			append_dev(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append_dev(div1, t2);
			mount_component(separator1, div1, null);
			append_dev(div1, t3);
			mount_component(doclist, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 1) header_changes.title = /*tab*/ ctx[0].title;

			if (dirty & /*$$scope, sortOptions*/ 16400) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			const doclist_changes = {};
			if (dirty & /*data*/ 8) doclist_changes.listIds = /*data*/ ctx[3];
			if (dirty & /*selectedTags*/ 2) doclist_changes.showTags = /*selectedTags*/ ctx[1].length > 1;
			doclist.$set(doclist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator0.$$.fragment, local);
			transition_in(if_block);
			transition_in(separator1.$$.fragment, local);
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator0.$$.fragment, local);
			transition_out(if_block);
			transition_out(separator1.$$.fragment, local);
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(header);
			destroy_component(separator0);
			if_blocks[current_block_type_index].d();
			destroy_component(separator1);
			destroy_component(doclist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$G.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$G($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(6, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(7, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tags", slots, []);
	let tabId = "tags";
	setContext("tabId", tabId);

	// $: isSidebarFocused = $project.focusedSectionId == 'sidebar'
	let allTags = [];

	/**
 * Build list of tags from files. 
 * Add each unique tag in each file to the list.
 */
	function getTags() {
		$$invalidate(2, allTags = []);

		for (const [id, file] of Object.entries($files.byId)) {
			file.tags?.forEach(tag => {
				if (!allTags.includes(tag)) {
					allTags.push(tag);
				}
			});
		}

		// Sort alphabetically
		allTags.sort((a, b) => a.localeCompare(b));
	}

	// -------- DATA -------- //
	let data = [];

	function getData() {
		$$invalidate(3, data = an($files.allIds, draft => {
			// Get ids with file type 'doc'
			draft = draft.filter(id => {
				const file = $files.byId[id];
				const isDoc = file.type == "doc";
				const hasTag = file.tags?.some(fileTag => selectedTags.includes(fileTag));
				return isDoc && hasTag;
			});

			// Sort
			draft = draft.sort((a, b) => {
				const itemA = $files.byId[a];
				const itemB = $files.byId[b];

				if (tab.sortBy == "By Title") {
					if (tab.sortOrder == "Ascending") {
						return itemA.name.localeCompare(itemB.name);
					} else {
						return itemB.name.localeCompare(itemA.name);
					}
				} else if (tab.sortBy == "By Modified") {
					if (tab.sortOrder == "Ascending") {
						return moment(itemA.modified).isBefore(itemB.modified);
					} else {
						return moment(itemB.modified).isBefore(itemA.modified);
					}
				}
			});

			return draft;
		}));
	}

	function select(evt) {
		const { tag, domEvent } = evt.detail;
		let newSelected = [];

		// If meta key is held, add or remove from existing selection
		// Else, select the clicked tag (if it's not already selected).
		if (domEvent.metaKey) {
			newSelected = [...selectedTags];

			// If tag is already selected, remove it. Else, add it.
			if (selectedTags.includes(tag)) {
				const indexToRemove = selectedTags.indexOf(tag);
				newSelected.splice(indexToRemove, 1);
			} else {
				newSelected.push(tag);
			}
		} else {
			newSelected = [tag];
		}

		if (newSelected == []) return;

		window.api.send("dispatch", {
			type: "SIDEBAR_SELECT_TAGS",
			tabId,
			tags: newSelected
		});
	}

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tags> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		produce: an,
		Header,
		SortMenu,
		Token,
		Separator,
		DocList,
		Doc,
		setContext,
		moment,
		tabId,
		allTags,
		getTags,
		data,
		getData,
		select,
		tab,
		$sidebar,
		sortOptions,
		selectedTags,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("tabId" in $$props) $$invalidate(8, tabId = $$props.tabId);
		if ("allTags" in $$props) $$invalidate(2, allTags = $$props.allTags);
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("tab" in $$props) $$invalidate(0, tab = $$props.tab);
		if ("sortOptions" in $$props) $$invalidate(4, sortOptions = $$props.sortOptions);
		if ("selectedTags" in $$props) $$invalidate(1, selectedTags = $$props.selectedTags);
	};

	let tab;
	let sortOptions;
	let selectedTags;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 64) {
			 $$invalidate(0, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*tab*/ 1) {
			// Define sort option
			 $$invalidate(4, sortOptions = [
				{
					label: "By Title",
					group: "sortBy",
					isChecked: tab.sortBy == "By Title"
				},
				{
					label: "By Modified",
					group: "sortBy",
					isChecked: tab.sortBy == "By Modified"
				},
				{ label: "separator" },
				{
					label: "Ascending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Ascending"
				},
				{
					label: "Descending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Descending"
				}
			]);
		}

		if ($$self.$$.dirty & /*tab*/ 1) {
			 $$invalidate(1, selectedTags = tab.selectedTags);
		}

		if ($$self.$$.dirty & /*$files*/ 128) {
			 ($files.byId, getTags());
		}

		if ($$self.$$.dirty & /*$files, selectedTags, tab*/ 131) {
			 (tab.sortBy, tab.sortOrder, getData());
		}
	};

	return [tab, selectedTags, allTags, data, sortOptions, select, $sidebar, $files];
}

class Tags extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-88j505-style")) add_css$D();
		init(this, options, instance$G, create_fragment$G, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tags",
			options,
			id: create_fragment$G.name
		});
	}
}

/* src/js/renderer/component/ui/Label.svelte generated by Svelte v3.30.1 */
const file$E = "src/js/renderer/component/ui/Label.svelte";

function add_css$E() {
	var style = element("style");
	style.id = "svelte-1ttwsfj-style";
	style.textContent = "@keyframes svelte-1ttwsfj-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-1ttwsfj-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}div.svelte-1ttwsfj,span.svelte-1ttwsfj{--opacity:1;--align:1;opacity:var(--opacity);text-align:var(--align)}.isSelected.svelte-1ttwsfj{color:var(--controlColor) !important}div.svelte-1ttwsfj{flex-grow:1}.primary.svelte-1ttwsfj{color:var(--labelColor)}.secondary.svelte-1ttwsfj{color:var(--secondaryLabelColor)}.tertiary.svelte-1ttwsfj{color:var(--tertiaryLabelColor)}.quaternary.svelte-1ttwsfj{color:var(--quaternaryLabelColor)}.label-normal.svelte-1ttwsfj{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px}.label-normal-bold.svelte-1ttwsfj{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px}.label-normal-small.svelte-1ttwsfj{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px}.label-normal-small-bold.svelte-1ttwsfj{font-family:system-ui;font-weight:bold;font-size:11px;line-height:13px}.label-large-bold.svelte-1ttwsfj{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px}.column.svelte-1ttwsfj{font-family:system-ui;font-weight:500;font-size:12px;line-height:16px;letter-spacing:-0.07px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFiZWwuc3ZlbHRlIiwic291cmNlcyI6WyJMYWJlbC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3NzIH0gZnJvbSAnLi4vdWkvYWN0aW9ucydcbiAgXG4gIGV4cG9ydCBsZXQgb3BhY2l0eSA9ICcxJ1xuICBleHBvcnQgbGV0IGRpc3BsYXkgPSAnYmxvY2snXG4gIGV4cG9ydCBsZXQgYWxpZ24gPSAnbGVmdCdcbiAgZXhwb3J0IGxldCBjb2xvciA9ICdwcmltYXJ5J1xuICBleHBvcnQgbGV0IHR5cG9ncmFwaHkgPSAnbGFiZWwtbm9ybWFsJ1xuICBleHBvcnQgbGV0IGlzU2VsZWN0ZWQgPSBmYWxzZVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG5kaXYsIHNwYW4ge1xuICAtLW9wYWNpdHk6IDE7XG4gIC0tYWxpZ246IDE7XG4gIG9wYWNpdHk6IHZhcigtLW9wYWNpdHkpO1xuICB0ZXh0LWFsaWduOiB2YXIoLS1hbGlnbik7XG59XG5cbi5pc1NlbGVjdGVkIHtcbiAgY29sb3I6IHZhcigtLWNvbnRyb2xDb2xvcikgIWltcG9ydGFudDtcbn1cblxuZGl2IHtcbiAgZmxleC1ncm93OiAxO1xufVxuXG4ucHJpbWFyeSB7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cblxuLnNlY29uZGFyeSB7XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbn1cblxuLnRlcnRpYXJ5IHtcbiAgY29sb3I6IHZhcigtLXRlcnRpYXJ5TGFiZWxDb2xvcik7XG59XG5cbi5xdWF0ZXJuYXJ5IHtcbiAgY29sb3I6IHZhcigtLXF1YXRlcm5hcnlMYWJlbENvbG9yKTtcbn1cblxuLmxhYmVsLW5vcm1hbCB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wOHB4O1xufVxuXG4ubGFiZWwtbm9ybWFsLWJvbGQge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjA4cHg7XG59XG5cbi5sYWJlbC1ub3JtYWwtc21hbGwge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDExcHg7XG4gIGxpbmUtaGVpZ2h0OiAxM3B4O1xuICBsZXR0ZXItc3BhY2luZzogMHB4O1xufVxuXG4ubGFiZWwtbm9ybWFsLXNtYWxsLWJvbGQge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbn1cblxuLmxhYmVsLWxhcmdlLWJvbGQge1xuICBmb250LWZhbWlseTogXCJTRiBQcm8gRGlzcGxheVwiO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjRweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjEycHg7XG59XG5cbi5jb2x1bW4ge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXNpemU6IDEycHg7XG4gIGxpbmUtaGVpZ2h0OiAxNnB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDdweDtcbn08L3N0eWxlPlxuXG57I2lmIGRpc3BsYXkgPT0gJ2Jsb2NrJ31cbiAgPGRpdiBjbGFzcz1cImxhYmVsIHtjb2xvcn0ge3R5cG9ncmFwaHl9XCIgY2xhc3M6aXNTZWxlY3RlZCB1c2U6Y3NzPXt7b3BhY2l0eSwgYWxpZ259fT5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gIDwvZGl2PlxuezplbHNlIGlmIGRpc3BsYXkgPT0gJ2lubGluZSd9XG4gIDxzcGFuIGNsYXNzPVwibGFiZWwge2NvbG9yfSB7dHlwb2dyYXBoeX1cIiBjbGFzczppc1NlbGVjdGVkIHVzZTpjc3M9e3tvcGFjaXR5LCBhbGlnbn19PlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgPC9zcGFuPlxuey9pZn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELFdBQVcsMEJBQVksQ0FBQyxBQUN0QixJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxrQkFBRyxDQUFFLElBQUksZUFBQyxDQUFDLEFBQ1QsU0FBUyxDQUFFLENBQUMsQ0FDWixPQUFPLENBQUUsQ0FBQyxDQUNWLE9BQU8sQ0FBRSxJQUFJLFNBQVMsQ0FBQyxDQUN2QixVQUFVLENBQUUsSUFBSSxPQUFPLENBQUMsQUFDMUIsQ0FBQyxBQUVELFdBQVcsZUFBQyxDQUFDLEFBQ1gsS0FBSyxDQUFFLElBQUksY0FBYyxDQUFDLENBQUMsVUFBVSxBQUN2QyxDQUFDLEFBRUQsR0FBRyxlQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsQ0FBQyxBQUNkLENBQUMsQUFFRCxRQUFRLGVBQUMsQ0FBQyxBQUNSLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxBQUMxQixDQUFDLEFBRUQsVUFBVSxlQUFDLENBQUMsQUFDVixLQUFLLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxBQUNuQyxDQUFDLEFBRUQsU0FBUyxlQUFDLENBQUMsQUFDVCxLQUFLLENBQUUsSUFBSSxvQkFBb0IsQ0FBQyxBQUNsQyxDQUFDLEFBRUQsV0FBVyxlQUFDLENBQUMsQUFDWCxLQUFLLENBQUUsSUFBSSxzQkFBc0IsQ0FBQyxBQUNwQyxDQUFDLEFBRUQsYUFBYSxlQUFDLENBQUMsQUFDYixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLEFBQ3pCLENBQUMsQUFFRCxrQkFBa0IsZUFBQyxDQUFDLEFBQ2xCLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLE9BQU8sQUFDekIsQ0FBQyxBQUVELG1CQUFtQixlQUFDLENBQUMsQUFDbkIsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsR0FBRyxBQUNyQixDQUFDLEFBRUQsd0JBQXdCLGVBQUMsQ0FBQyxBQUN4QixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsSUFBSSxDQUNqQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLEFBQ25CLENBQUMsQUFFRCxpQkFBaUIsZUFBQyxDQUFDLEFBQ2pCLFdBQVcsQ0FBRSxnQkFBZ0IsQ0FDN0IsV0FBVyxDQUFFLElBQUksQ0FDakIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxBQUN6QixDQUFDLEFBRUQsT0FBTyxlQUFDLENBQUMsQUFDUCxXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsR0FBRyxDQUNoQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLEFBQ3pCLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (111:30) 
function create_if_block_1$b(ctx) {
	let span;
	let span_class_value;
	let css_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr_dev(span, "class", span_class_value = "label " + /*color*/ ctx[3] + " " + /*typography*/ ctx[4] + " svelte-1ttwsfj");
			toggle_class(span, "isSelected", /*isSelected*/ ctx[5]);
			add_location(span, file$E, 111, 2, 2047);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(css_action = css.call(null, span, {
					opacity: /*opacity*/ ctx[0],
					align: /*align*/ ctx[2]
				}));

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*color, typography*/ 24 && span_class_value !== (span_class_value = "label " + /*color*/ ctx[3] + " " + /*typography*/ ctx[4] + " svelte-1ttwsfj")) {
				attr_dev(span, "class", span_class_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*opacity, align*/ 5) css_action.update.call(null, {
				opacity: /*opacity*/ ctx[0],
				align: /*align*/ ctx[2]
			});

			if (dirty & /*color, typography, isSelected*/ 56) {
				toggle_class(span, "isSelected", /*isSelected*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$b.name,
		type: "if",
		source: "(111:30) ",
		ctx
	});

	return block;
}

// (107:0) {#if display == 'block'}
function create_if_block$k(ctx) {
	let div;
	let div_class_value;
	let css_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", div_class_value = "label " + /*color*/ ctx[3] + " " + /*typography*/ ctx[4] + " svelte-1ttwsfj");
			toggle_class(div, "isSelected", /*isSelected*/ ctx[5]);
			add_location(div, file$E, 107, 2, 1902);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(css_action = css.call(null, div, {
					opacity: /*opacity*/ ctx[0],
					align: /*align*/ ctx[2]
				}));

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*color, typography*/ 24 && div_class_value !== (div_class_value = "label " + /*color*/ ctx[3] + " " + /*typography*/ ctx[4] + " svelte-1ttwsfj")) {
				attr_dev(div, "class", div_class_value);
			}

			if (css_action && is_function(css_action.update) && dirty & /*opacity, align*/ 5) css_action.update.call(null, {
				opacity: /*opacity*/ ctx[0],
				align: /*align*/ ctx[2]
			});

			if (dirty & /*color, typography, isSelected*/ 56) {
				toggle_class(div, "isSelected", /*isSelected*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$k.name,
		type: "if",
		source: "(107:0) {#if display == 'block'}",
		ctx
	});

	return block;
}

function create_fragment$H(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$k, create_if_block_1$b];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*display*/ ctx[1] == "block") return 0;
		if (/*display*/ ctx[1] == "inline") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$H.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$H($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Label", slots, ['default']);
	let { opacity = "1" } = $$props;
	let { display = "block" } = $$props;
	let { align = "left" } = $$props;
	let { color = "primary" } = $$props;
	let { typography = "label-normal" } = $$props;
	let { isSelected = false } = $$props;
	const writable_props = ["opacity", "display", "align", "color", "typography", "isSelected"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Label> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("opacity" in $$props) $$invalidate(0, opacity = $$props.opacity);
		if ("display" in $$props) $$invalidate(1, display = $$props.display);
		if ("align" in $$props) $$invalidate(2, align = $$props.align);
		if ("color" in $$props) $$invalidate(3, color = $$props.color);
		if ("typography" in $$props) $$invalidate(4, typography = $$props.typography);
		if ("isSelected" in $$props) $$invalidate(5, isSelected = $$props.isSelected);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		css,
		opacity,
		display,
		align,
		color,
		typography,
		isSelected
	});

	$$self.$inject_state = $$props => {
		if ("opacity" in $$props) $$invalidate(0, opacity = $$props.opacity);
		if ("display" in $$props) $$invalidate(1, display = $$props.display);
		if ("align" in $$props) $$invalidate(2, align = $$props.align);
		if ("color" in $$props) $$invalidate(3, color = $$props.color);
		if ("typography" in $$props) $$invalidate(4, typography = $$props.typography);
		if ("isSelected" in $$props) $$invalidate(5, isSelected = $$props.isSelected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [opacity, display, align, color, typography, isSelected, $$scope, slots];
}

class Label extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1ttwsfj-style")) add_css$E();

		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
			opacity: 0,
			display: 1,
			align: 2,
			color: 3,
			typography: 4,
			isSelected: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label",
			options,
			id: create_fragment$H.name
		});
	}

	get opacity() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set opacity(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get display() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set display(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get align() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set align(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get typography() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set typography(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSelected() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSelected(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/Thumbnail.svelte generated by Svelte v3.30.1 */

const file$F = "src/js/renderer/component/ui/Thumbnail.svelte";

function add_css$F() {
	var style = element("style");
	style.id = "svelte-71l3ux-style";
	style.textContent = "@keyframes svelte-71l3ux-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.thumbnail.svelte-71l3ux{overflow:hidden;width:100%;height:100%}img.svelte-71l3ux{width:100%;height:100%;object-fit:contain;object-position:center}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGh1bWJuYWlsLnN2ZWx0ZSIsInNvdXJjZXMiOlsiVGh1bWJuYWlsLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IHNyY1xuICBleHBvcnQgbGV0IG1hcmdpbiA9ICcwIDAgMCAwJ1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLnRodW1ibmFpbCB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbmltZyB7XG4gIC8qIFNjYWxlIHRoZSBpbWFnZSBzbyBpdCBjb3ZlcnMgd2hvbGUgYXJlYSwgdGh1cyB3aWxsIGxpa2VseSBjcm9wICovXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG4gIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xufTwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJ0aHVtYm5haWxcIiBzdHlsZT1cIm1hcmdpbjoge21hcmdpbn1cIj5cbiAgeyNpZiBzcmN9XG4gICAgPGltZyB7c3JjfSAvPlxuICB7OmVsc2V9XG4gICAgPGltZyBzcmM9XCJwbGFjZWhvbGRlclwiIC8+XG4gIHsvaWZ9XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELFVBQVUsY0FBQyxDQUFDLEFBQ1YsUUFBUSxDQUFFLE1BQU0sQ0FDaEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxBQUNkLENBQUMsQUFFRCxHQUFHLGNBQUMsQ0FBQyxBQUVILEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixVQUFVLENBQUUsT0FBTyxDQUNuQixlQUFlLENBQUUsTUFBTSxBQUN6QixDQUFDIn0= */";
	append_dev(document.head, style);
}

// (31:2) {:else}
function create_else_block$b(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			if (img.src !== (img_src_value = "placeholder")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-71l3ux");
			add_location(img, file$F, 31, 4, 627);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$b.name,
		type: "else",
		source: "(31:2) {:else}",
		ctx
	});

	return block;
}

// (29:2) {#if src}
function create_if_block$l(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			if (img.src !== (img_src_value = /*src*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-71l3ux");
			add_location(img, file$F, 29, 4, 599);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*src*/ 1 && img.src !== (img_src_value = /*src*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$l.name,
		type: "if",
		source: "(29:2) {#if src}",
		ctx
	});

	return block;
}

function create_fragment$I(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*src*/ ctx[0]) return create_if_block$l;
		return create_else_block$b;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "thumbnail svelte-71l3ux");
			set_style(div, "margin", /*margin*/ ctx[1]);
			add_location(div, file$F, 27, 0, 534);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty & /*margin*/ 2) {
				set_style(div, "margin", /*margin*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$I.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$I($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Thumbnail", slots, []);
	let { src } = $$props;
	let { margin = "0 0 0 0" } = $$props;
	const writable_props = ["src", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Thumbnail> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({ src, margin });

	$$self.$inject_state = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [src, margin];
}

class Thumbnail extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-71l3ux-style")) add_css$F();
		init(this, options, instance$I, create_fragment$I, safe_not_equal, { src: 0, margin: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Thumbnail",
			options,
			id: create_fragment$I.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Thumbnail> was created without expected prop 'src'");
		}
	}

	get src() {
		throw new Error("<Thumbnail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Thumbnail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<Thumbnail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Thumbnail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/list/Media.svelte generated by Svelte v3.30.1 */
const file_1$2 = "src/js/renderer/component/sidebar/list/Media.svelte";

function add_css$G() {
	var style = element("style");
	style.id = "svelte-6zlj8e-style";
	style.textContent = "@keyframes svelte-6zlj8e-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-6zlj8e-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.media.svelte-6zlj8e.svelte-6zlj8e{contain:strict;user-select:none;border-radius:0;margin:0;padding:7px 0.75em;width:100%;height:68px;border-bottom:1px solid var(--separatorColor);display:flex}.thumb.svelte-6zlj8e.svelte-6zlj8e{flex-grow:0;flex-basis:60px;flex-shrink:0;overflow:hidden;margin-right:10px;background:#D8D8D8;border:2px solid #FFFFFF;box-shadow:0 0 2px 0 rgba(0, 0, 0, 0.13), inset 0 0 1px 2px rgba(0, 0, 0, 0.06)}.thumb.svelte-6zlj8e img.svelte-6zlj8e{width:100%;height:100%;object-fit:cover;object-position:center}.details.svelte-6zlj8e.svelte-6zlj8e{flex-grow:1}.filename.svelte-6zlj8e.svelte-6zlj8e{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;line-height:16px}.metadata.svelte-6zlj8e.svelte-6zlj8e{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--secondaryLabelColor);display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3;overflow:hidden;pointer-events:none;word-break:break-word;line-break:auto;line-height:16px}.isSelected.svelte-6zlj8e.svelte-6zlj8e{border-radius:4px;border-bottom:0;height:67px;margin-bottom:1px}.isSelected.svelte-6zlj8e .filename.svelte-6zlj8e,.isSelected.svelte-6zlj8e .metadata.svelte-6zlj8e{color:var(--controlColor)}.isSelected.isSidebarFocused.svelte-6zlj8e.svelte-6zlj8e{background-color:var(--selectedContentBackgroundColor)}.isSelected.svelte-6zlj8e.svelte-6zlj8e:not(.isSidebarFocused){background-color:var(--disabledControlTextColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$J(ctx) {
	let div4;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let div1;
	let t1_value = /*file*/ ctx[3].name + "";
	let t1;
	let t2;
	let div2;
	let t3_value = /*file*/ ctx[3].format.toUpperCase() + "";
	let t3;
	let t4;
	let t5_value = prettySize(/*file*/ ctx[3].sizeInBytes, " ") + "";
	let t5;
	let br;
	let t6;
	let t7_value = /*file*/ ctx[3].dimensions.width + "";
	let t7;
	let t8;
	let t9_value = /*file*/ ctx[3].dimensions.height + "";
	let t9;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			div2 = element("div");
			t3 = text(t3_value);
			t4 = text(" - ");
			t5 = text(t5_value);
			br = element("br");
			t6 = space();
			t7 = text(t7_value);
			t8 = text(" x ");
			t9 = text(t9_value);
			if (img.src !== (img_src_value = /*file*/ ctx[3].path)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-6zlj8e");
			add_location(img, file_1$2, 126, 6, 2933);
			attr_dev(div0, "class", "thumb svelte-6zlj8e");
			add_location(div0, file_1$2, 125, 4, 2907);
			attr_dev(div1, "class", "filename svelte-6zlj8e");
			add_location(div1, file_1$2, 129, 6, 3000);
			add_location(br, file_1$2, 131, 73, 3142);
			attr_dev(div2, "class", "metadata svelte-6zlj8e");
			add_location(div2, file_1$2, 130, 6, 3046);
			attr_dev(div3, "class", "details svelte-6zlj8e");
			add_location(div3, file_1$2, 128, 4, 2972);
			attr_dev(div4, "class", "media svelte-6zlj8e");
			toggle_class(div4, "isSelected", /*isSelected*/ ctx[5]);
			toggle_class(div4, "isSidebarFocused", /*isSidebarFocused*/ ctx[6]);
			add_location(div4, file_1$2, 119, 0, 2750);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, img);
			append_dev(div4, t0);
			append_dev(div4, div3);
			append_dev(div3, div1);
			append_dev(div1, t1);
			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, t3);
			append_dev(div2, t4);
			append_dev(div2, t5);
			append_dev(div2, br);
			append_dev(div2, t6);
			append_dev(div2, t7);
			append_dev(div2, t8);
			append_dev(div2, t9);

			if (!mounted) {
				dispose = listen_dev(div4, "mousedown", /*mousedown_handler*/ ctx[11], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*file*/ 8 && img.src !== (img_src_value = /*file*/ ctx[3].path)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*file*/ 8 && t1_value !== (t1_value = /*file*/ ctx[3].name + "")) set_data_dev(t1, t1_value);
			if (dirty & /*file*/ 8 && t3_value !== (t3_value = /*file*/ ctx[3].format.toUpperCase() + "")) set_data_dev(t3, t3_value);
			if (dirty & /*file*/ 8 && t5_value !== (t5_value = prettySize(/*file*/ ctx[3].sizeInBytes, " ") + "")) set_data_dev(t5, t5_value);
			if (dirty & /*file*/ 8 && t7_value !== (t7_value = /*file*/ ctx[3].dimensions.width + "")) set_data_dev(t7, t7_value);
			if (dirty & /*file*/ 8 && t9_value !== (t9_value = /*file*/ ctx[3].dimensions.height + "")) set_data_dev(t9, t9_value);

			if (dirty & /*isSelected*/ 32) {
				toggle_class(div4, "isSelected", /*isSelected*/ ctx[5]);
			}

			if (dirty & /*isSidebarFocused*/ 64) {
				toggle_class(div4, "isSidebarFocused", /*isSidebarFocused*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$J.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$J($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	let $project;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(9, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(4, $files = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(10, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Media", slots, []);
	let { id } = $$props;
	let { listIds } = $$props;
	let { showTags = false } = $$props; // Not used
	const tabId = getContext("tabId");
	const writable_props = ["id", "listIds", "showTags"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Media> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = evt => onMousedown(evt, id, isSelected, tab, tabId, listIds);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("showTags" in $$props) $$invalidate(8, showTags = $$props.showTags);
	};

	$$self.$capture_state = () => ({
		prettySize,
		createEventDispatcher,
		afterUpdate,
		state,
		project,
		sidebar,
		files,
		onMousedown,
		getContext,
		Label,
		Thumbnail,
		id,
		listIds,
		showTags,
		tabId,
		tab,
		$sidebar,
		file,
		$files,
		isSelected,
		isSidebarFocused,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("listIds" in $$props) $$invalidate(1, listIds = $$props.listIds);
		if ("showTags" in $$props) $$invalidate(8, showTags = $$props.showTags);
		if ("tab" in $$props) $$invalidate(2, tab = $$props.tab);
		if ("file" in $$props) $$invalidate(3, file = $$props.file);
		if ("isSelected" in $$props) $$invalidate(5, isSelected = $$props.isSelected);
		if ("isSidebarFocused" in $$props) $$invalidate(6, isSidebarFocused = $$props.isSidebarFocused);
	};

	let tab;
	let file;
	let isSelected;
	let isSidebarFocused;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 512) {
			 $$invalidate(2, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$files, id*/ 17) {
			 $$invalidate(3, file = $files.byId[id]);
		}

		if ($$self.$$.dirty & /*tab, file*/ 12) {
			 $$invalidate(5, isSelected = tab.selected.some(id => id == file.id));
		}

		if ($$self.$$.dirty & /*$project*/ 1024) {
			 $$invalidate(6, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}
	};

	return [
		id,
		listIds,
		tab,
		file,
		$files,
		isSelected,
		isSidebarFocused,
		tabId,
		showTags,
		$sidebar,
		$project,
		mousedown_handler
	];
}

class Media extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-6zlj8e-style")) add_css$G();
		init(this, options, instance$J, create_fragment$J, not_equal, { id: 0, listIds: 1, showTags: 8 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Media",
			options,
			id: create_fragment$J.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<Media> was created without expected prop 'id'");
		}

		if (/*listIds*/ ctx[1] === undefined && !("listIds" in props)) {
			console.warn("<Media> was created without expected prop 'listIds'");
		}
	}

	get id() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showTags() {
		throw new Error("<Media>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showTags(value) {
		throw new Error("<Media>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/Media.svelte generated by Svelte v3.30.1 */
const file$G = "src/js/renderer/component/sidebar/Media.svelte";

// (77:2) <Header title={tab.title} hoverToShowSlot={true}>
function create_default_slot$a(ctx) {
	let sortmenu;
	let current;

	sortmenu = new SortMenu({
			props: { options: /*sortOptions*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(sortmenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(sortmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const sortmenu_changes = {};
			if (dirty & /*sortOptions*/ 8) sortmenu_changes.options = /*sortOptions*/ ctx[3];
			sortmenu.$set(sortmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sortmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sortmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sortmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$a.name,
		type: "slot",
		source: "(77:2) <Header title={tab.title} hoverToShowSlot={true}>",
		ctx
	});

	return block;
}

function create_fragment$K(ctx) {
	let div;
	let header;
	let t0;
	let separator;
	let t1;
	let searchfield;
	let updating_query;
	let t2;
	let doclist;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true,
				$$slots: { default: [create_default_slot$a] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	function searchfield_query_binding(value) {
		/*searchfield_query_binding*/ ctx[7].call(null, value);
	}

	let searchfield_props = {
		focused: true,
		placeholder: "Name",
		margin: "10px 10px 0"
	};

	if (/*query*/ ctx[0] !== void 0) {
		searchfield_props.query = /*query*/ ctx[0];
	}

	searchfield = new SearchField({ props: searchfield_props, $$inline: true });
	binding_callbacks.push(() => bind(searchfield, "query", searchfield_query_binding));

	doclist = new DocList({
			props: {
				listIds: /*data*/ ctx[2],
				component: Media
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator.$$.fragment);
			t1 = space();
			create_component(searchfield.$$.fragment);
			t2 = space();
			create_component(doclist.$$.fragment);
			attr_dev(div, "class", "section");
			add_location(div, file$G, 75, 0, 2267);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(header, div, null);
			append_dev(div, t0);
			mount_component(separator, div, null);
			append_dev(div, t1);
			mount_component(searchfield, div, null);
			append_dev(div, t2);
			mount_component(doclist, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;

			if (dirty & /*$$scope, sortOptions*/ 2056) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			const searchfield_changes = {};

			if (!updating_query && dirty & /*query*/ 1) {
				updating_query = true;
				searchfield_changes.query = /*query*/ ctx[0];
				add_flush_callback(() => updating_query = false);
			}

			searchfield.$set(searchfield_changes);
			const doclist_changes = {};
			if (dirty & /*data*/ 4) doclist_changes.listIds = /*data*/ ctx[2];
			doclist.$set(doclist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(searchfield.$$.fragment, local);
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(searchfield.$$.fragment, local);
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(separator);
			destroy_component(searchfield);
			destroy_component(doclist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$K.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$K($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(4, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(5, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(6, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Media", slots, []);
	let query = ""; // Bound to search field
	let tabId = "media";
	setContext("tabId", tabId);

	// -------- DATA -------- //
	let data = [];

	function getData() {
		$$invalidate(2, data = an($files.allIds, draft => {
			// Get ids with file type 'img' or 'av'
			draft = draft.filter(id => $files.byId[id].type == "img" || $files.byId[id].type == "av");

			// Filter by query 
			if (query) {
				draft = draft.filter(id => $files.byId[id].name.includes(query));
			}

			// Sort
			draft = draft.sort((a, b) => {
				const itemA = $files.byId[a];
				const itemB = $files.byId[b];

				if (tab.sortBy == "By Name") {
					if (tab.sortOrder == "Ascending") {
						return itemA.name.localeCompare(itemB.name);
					} else {
						return itemB.name.localeCompare(itemA.name);
					}
				} else if (tab.sortBy == "By Modified") {
					if (tab.sortOrder == "Ascending") {
						return moment(itemA.modified).isBefore(itemB.modified);
					} else {
						return moment(itemB.modified).isBefore(itemA.modified);
					}
				}
			});

			return draft;
		}));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Media> was created with unknown prop '${key}'`);
	});

	function searchfield_query_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		produce: an,
		Header,
		SortMenu,
		SearchField,
		Separator,
		DocList,
		Media,
		setContext,
		moment,
		query,
		tabId,
		data,
		getData,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		sortOptions,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("tabId" in $$props) $$invalidate(9, tabId = $$props.tabId);
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) isSidebarFocused = $$props.isSidebarFocused;
		if ("sortOptions" in $$props) $$invalidate(3, sortOptions = $$props.sortOptions);
	};

	let tab;
	let isSidebarFocused;
	let sortOptions;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 16) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			 isSidebarFocused = $project.focusedSectionId == "sidebar";
		}

		if ($$self.$$.dirty & /*tab*/ 2) {
			 $$invalidate(3, sortOptions = [
				{
					label: "By Name",
					group: "sortBy",
					isChecked: tab.sortBy == "By Name"
				},
				{
					label: "By Modified",
					group: "sortBy",
					isChecked: tab.sortBy == "By Modified"
				},
				{ label: "separator" },
				{
					label: "Ascending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Ascending"
				},
				{
					label: "Descending",
					group: "sortOrder",
					isChecked: tab.sortOrder == "Descending"
				}
			]);
		}

		if ($$self.$$.dirty & /*$files, query, tab*/ 67) {
			 (tab.sortBy, tab.sortOrder, getData());
		}
	};

	return [
		query,
		tab,
		data,
		sortOptions,
		$sidebar,
		$project,
		$files,
		searchfield_query_binding
	];
}

class Media_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Media_1",
			options,
			id: create_fragment$K.name
		});
	}
}

/* src/js/renderer/component/sidebar/list/Citation.svelte generated by Svelte v3.30.1 */

function add_css$H() {
	var style = element("style");
	style.id = "svelte-wv7751-style";
	style.textContent = "@keyframes svelte-wv7751-selectField{{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2l0YXRpb24uc3ZlbHRlIiwic291cmNlcyI6WyJDaXRhdGlvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59PC9zdHlsZT5cblxuQ2l0YXRpb24hIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUV3QixXQUFXLHlCQUFZLENBQUMsQUFDekMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNFLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$L(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Citation!");
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$L.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$L($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Citation", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Citation> was created with unknown prop '${key}'`);
	});

	return [];
}

class Citation$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-wv7751-style")) add_css$H();
		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Citation",
			options,
			id: create_fragment$L.name
		});
	}
}

/* src/js/renderer/component/sidebar/Citations.svelte generated by Svelte v3.30.1 */
const file$H = "src/js/renderer/component/sidebar/Citations.svelte";

function add_css$I() {
	var style = element("style");
	style.id = "svelte-jeohqc-style";
	style.textContent = "@keyframes svelte-jeohqc-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-jeohqc-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.selectCitationsPrompt.svelte-jeohqc{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;padding:0 10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2l0YXRpb25zLnN2ZWx0ZSIsInNvdXJjZXMiOlsiQ2l0YXRpb25zLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBwcm9qZWN0LCBzaWRlYmFyIH0gZnJvbSAnLi4vLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gJy4uLy4uL0ZpbGVzTWFuYWdlcidcbiAgaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlci5zdmVsdGUnXG4gIGltcG9ydCBTZXBhcmF0b3IgZnJvbSAnLi4vdWkvU2VwYXJhdG9yLnN2ZWx0ZSdcbiAgaW1wb3J0IFNlYXJjaEZpZWxkIGZyb20gJy4uL3VpL1NlYXJjaEZpZWxkLnN2ZWx0ZSdcbiAgaW1wb3J0IERvY0xpc3QgZnJvbSAnLi9saXN0L0RvY0xpc3Quc3ZlbHRlJ1xuICBpbXBvcnQgQ2l0YXRpb24gZnJvbSAnLi9saXN0L0NpdGF0aW9uLnN2ZWx0ZSdcbiAgaW1wb3J0IHsgc2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSdcblxuICBsZXQgcXVlcnkgPSAnJyAvLyBCb3VuZCB0byBzZWFyY2ggZmllbGRcblxuICBsZXQgdGFiSWQgPSAnY2l0YXRpb25zJ1xuICBzZXRDb250ZXh0KCd0YWJJZCcsIHRhYklkKTtcbiAgJDogdGFiID0gJHNpZGViYXIudGFic0J5SWRbdGFiSWRdXG5cbiAgJDogY2l0YXRpb25zID0gJHByb2plY3QuY2l0YXRpb25zXG5cbiAgLy8gLS0tLS0tLS0gREFUQSAtLS0tLS0tLSAvL1xuXG4gIGxldCBkYXRhID0gW11cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuQGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuLnNlbGVjdENpdGF0aW9uc1Byb21wdCB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wOHB4O1xuICBwYWRkaW5nOiAwIDEwcHg7XG59PC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInNlY3Rpb25cIj5cbiAgPEhlYWRlciB0aXRsZT17dGFiLnRpdGxlfSBob3ZlclRvU2hvd1Nsb3Q9e3RydWV9PlxuICAgIDwhLS0gPFNvcnRNZW51IG9wdGlvbnM9e3NvcnRPcHRpb25zfSAvPiAtLT5cbiAgPC9IZWFkZXI+XG4gIDxTZXBhcmF0b3IgbWFyZ2luPXsnMCAxMHB4J30gLz5cbiAgeyNpZiBjaXRhdGlvbnN9XG4gICAgPFNlYXJjaEZpZWxkIGZvY3VzZWQgYmluZDpxdWVyeSBwbGFjZWhvbGRlcj17J1RpdGxlIG9yIEtleSd9IC8+XG4gICAgPERvY0xpc3QgbGlzdElkcz17ZGF0YX0gY29tcG9uZW50PXtDaXRhdGlvbn0gLz5cbiAgezplbHNlfVxuICAgIDxkaXYgY2xhc3M9XCJzZWxlY3RDaXRhdGlvbnNQcm9tcHRcIj5cbiAgICAgIDxwPlNlbGVjdCBhIDxhIGhyZWY9XCJodHRwczovL2NpdGVwcm9jLWpzLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9jc2wtanNvbi9tYXJrdXAuaHRtbFwiPkNTTC1KU09OPC9hPiBmaWxlIGNvbnRhaW5pbmcgY2l0YXRpb25zLjwvcD5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywgeyB0eXBlOiAnU0VMRUNUX0NJVEFUSU9OU19GSUxFX0ZST01fRElBTE9HJyB9KVxuICAgICAgICB9fT5cbiAgICAgICAgQ2hvb3NlIENpdGF0aW9ucyBGaWxlLi4uXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgey9pZn1cbjwvZGl2PlxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0J3QixXQUFXLHlCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsV0FBVyx5QkFBWSxDQUFDLEFBQ3RCLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELHNCQUFzQixjQUFDLENBQUMsQUFDdEIsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixPQUFPLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDakIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

// (58:2) {:else}
function create_else_block$c(ctx) {
	let div;
	let p;
	let t0;
	let a;
	let t2;
	let t3;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text("Select a ");
			a = element("a");
			a.textContent = "CSL-JSON";
			t2 = text(" file containing citations.");
			t3 = space();
			button = element("button");
			button.textContent = "Choose Citations File...";
			attr_dev(a, "href", "https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html");
			add_location(a, file$H, 59, 18, 1596);
			add_location(p, file$H, 59, 6, 1584);
			add_location(button, file$H, 60, 6, 1722);
			attr_dev(div, "class", "selectCitationsPrompt svelte-jeohqc");
			add_location(div, file$H, 58, 4, 1542);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(p, a);
			append_dev(p, t2);
			append_dev(div, t3);
			append_dev(div, button);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$c.name,
		type: "else",
		source: "(58:2) {:else}",
		ctx
	});

	return block;
}

// (55:2) {#if citations}
function create_if_block$m(ctx) {
	let searchfield;
	let updating_query;
	let t;
	let doclist;
	let current;

	function searchfield_query_binding(value) {
		/*searchfield_query_binding*/ ctx[6].call(null, value);
	}

	let searchfield_props = {
		focused: true,
		placeholder: "Title or Key"
	};

	if (/*query*/ ctx[0] !== void 0) {
		searchfield_props.query = /*query*/ ctx[0];
	}

	searchfield = new SearchField({ props: searchfield_props, $$inline: true });
	binding_callbacks.push(() => bind(searchfield, "query", searchfield_query_binding));

	doclist = new DocList({
			props: {
				listIds: /*data*/ ctx[3],
				component: Citation$1
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(searchfield.$$.fragment);
			t = space();
			create_component(doclist.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(searchfield, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(doclist, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const searchfield_changes = {};

			if (!updating_query && dirty & /*query*/ 1) {
				updating_query = true;
				searchfield_changes.query = /*query*/ ctx[0];
				add_flush_callback(() => updating_query = false);
			}

			searchfield.$set(searchfield_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchfield.$$.fragment, local);
			transition_in(doclist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchfield.$$.fragment, local);
			transition_out(doclist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(searchfield, detaching);
			if (detaching) detach_dev(t);
			destroy_component(doclist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$m.name,
		type: "if",
		source: "(55:2) {#if citations}",
		ctx
	});

	return block;
}

function create_fragment$M(ctx) {
	let div;
	let header;
	let t0;
	let separator;
	let t1;
	let current_block_type_index;
	let if_block;
	let current;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true
			},
			$$inline: true
		});

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	const if_block_creators = [create_if_block$m, create_else_block$c];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*citations*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator.$$.fragment);
			t1 = space();
			if_block.c();
			attr_dev(div, "class", "section");
			add_location(div, file$H, 49, 0, 1222);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(header, div, null);
			append_dev(div, t0);
			mount_component(separator, div, null);
			append_dev(div, t1);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;

			if (dirty & /*$$scope*/ 512) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(separator);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$M.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$M($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(4, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(5, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Citations", slots, []);
	let query = ""; // Bound to search field
	let tabId = "citations";
	setContext("tabId", tabId);

	// -------- DATA -------- //
	let data = [];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Citations> was created with unknown prop '${key}'`);
	});

	function searchfield_query_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	const click_handler = () => {
		window.api.send("dispatch", {
			type: "SELECT_CITATIONS_FILE_FROM_DIALOG"
		});
	};

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		Header,
		Separator,
		SearchField,
		DocList,
		Citation: Citation$1,
		setContext,
		query,
		tabId,
		data,
		tab,
		$sidebar,
		citations,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("tabId" in $$props) $$invalidate(8, tabId = $$props.tabId);
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("citations" in $$props) $$invalidate(2, citations = $$props.citations);
	};

	let tab;
	let citations;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 16) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$project*/ 32) {
			 $$invalidate(2, citations = $project.citations);
		}
	};

	return [
		query,
		tab,
		citations,
		data,
		$sidebar,
		$project,
		searchfield_query_binding,
		click_handler
	];
}

class Citations extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-jeohqc-style")) add_css$I();
		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Citations",
			options,
			id: create_fragment$M.name
		});
	}
}

/* src/js/renderer/component/ui/Checkbox.svelte generated by Svelte v3.30.1 */
const file$I = "src/js/renderer/component/ui/Checkbox.svelte";

function add_css$J() {
	var style = element("style");
	style.id = "svelte-96hgg3-style";
	style.textContent = "@keyframes svelte-96hgg3-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.checkbox.svelte-96hgg3.svelte-96hgg3.svelte-96hgg3{display:inline-flex;vertical-align:top;gap:0 5px;min-height:20px}.checkbox.svelte-96hgg3 .input.svelte-96hgg3.svelte-96hgg3{display:flex}.checkbox.svelte-96hgg3 input.svelte-96hgg3.svelte-96hgg3{opacity:0;width:0;height:0;margin:0}.checkbox.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{display:grid;place-items:center;transform:translate(0, 3px);width:14px;height:14px;border-radius:3px}.checkbox.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{content:\"\";-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;width:100%;height:100%;transform:translate(0, 0.5px);-webkit-mask-size:10px;-webkit-mask-image:var(--img-checkmark-heavy)}.checkbox.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::after{content:\"\";position:absolute;border-radius:inherit;top:0;left:0;width:100%;height:100%}.checkbox.svelte-96hgg3 .label.svelte-96hgg3.svelte-96hgg3{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);transform:translate(0, 3px);user-select:none}.compact.checkbox.svelte-96hgg3.svelte-96hgg3.svelte-96hgg3{gap:0 4px;min-height:16px}.compact.checkbox.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{width:12px;height:12px;border-radius:2.5px;transform:translate(0, 2px)}.compact.checkbox.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{-webkit-mask-size:8px !important;transform:translate(0, 0) !important}.compact.checkbox.svelte-96hgg3 .label.svelte-96hgg3.svelte-96hgg3{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;transform:translate(0, 1.5px)}@media(prefers-color-scheme: dark){.control.svelte-96hgg3.svelte-96hgg3.svelte-96hgg3{background:linear-gradient(rgba(255, 255, 255, 0.27), rgba(255, 255, 255, 0.38)), var(--buttonBackgroundColor);box-shadow:inset 0 1px 0 0 rgba(255, 255, 255, 0.15), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.control.svelte-96hgg3.svelte-96hgg3.svelte-96hgg3{background:var(--buttonBackgroundColor);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}.control.svelte-96hgg3.svelte-96hgg3.svelte-96hgg3::before{opacity:0}.checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){.checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.3), 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}@media(prefers-color-scheme: light){.checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{box-shadow:none}}.checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{background:white;opacity:1}@media(prefers-color-scheme: dark){.checkbox.svelte-96hgg3:not(.disabled):not(.checked) input.svelte-96hgg3:active+.control.svelte-96hgg3{filter:brightness(1.25)}}@media(prefers-color-scheme: light){.checkbox.svelte-96hgg3:not(.disabled):not(.checked) input.svelte-96hgg3:active+.control.svelte-96hgg3{filter:brightness(0.95)}}@media(prefers-color-scheme: dark){.checkbox:not(.disabled).checked.svelte-96hgg3 input.svelte-96hgg3:active+.control.svelte-96hgg3{filter:brightness(1.25)}}@media(prefers-color-scheme: light){.checkbox:not(.disabled).checked.svelte-96hgg3 input.svelte-96hgg3:active+.control.svelte-96hgg3{background:linear-gradient(rgba(0, 0, 0, 0.15), rgba(0, 0, 0, 0.15)), linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}}.disabled.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{opacity:0.6}.disabled.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{opacity:0.5}@media(prefers-color-scheme: dark){.disabled.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{background:linear-gradient(rgba(255, 255, 255, 0.27), rgba(255, 255, 255, 0.38)), var(--buttonBackgroundColor);box-shadow:inset 0 1px 0 0 rgba(255, 255, 255, 0.15), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.disabled.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{background:var(--buttonBackgroundColor);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}.disabled.checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{background:var(--labelColor)}.disabled.svelte-96hgg3 .label.svelte-96hgg3.svelte-96hgg3{opacity:0.35}@media(prefers-color-scheme: dark){.checkbox:not(.windowFocused).checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{background:linear-gradient(rgba(255, 255, 255, 0.27), rgba(255, 255, 255, 0.38)), var(--buttonBackgroundColor);box-shadow:inset 0 1px 0 0 rgba(255, 255, 255, 0.15), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.checkbox:not(.windowFocused).checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3{background:var(--buttonBackgroundColor);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}.checkbox:not(.windowFocused).checked.svelte-96hgg3 .control.svelte-96hgg3.svelte-96hgg3::before{background:var(--labelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$N(ctx) {
	let label_1;
	let span1;
	let input;
	let t0;
	let span0;
	let t1;
	let span2;
	let t2;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label_1 = element("label");
			span1 = element("span");
			input = element("input");
			t0 = space();
			span0 = element("span");
			t1 = space();
			span2 = element("span");
			t2 = text(/*label*/ ctx[0]);
			attr_dev(input, "type", "checkbox");
			input.disabled = /*disabled*/ ctx[3];
			input.checked = /*checked*/ ctx[2];
			attr_dev(input, "class", "svelte-96hgg3");
			add_location(input, file$I, 203, 4, 5116);
			attr_dev(span0, "class", "control svelte-96hgg3");
			add_location(span0, file$I, 204, 4, 5167);
			attr_dev(span1, "class", "input svelte-96hgg3");
			add_location(span1, file$I, 202, 2, 5091);
			attr_dev(span2, "class", "label svelte-96hgg3");
			add_location(span2, file$I, 206, 2, 5209);
			attr_dev(label_1, "class", "checkbox svelte-96hgg3");
			toggle_class(label_1, "compact", /*compact*/ ctx[1]);
			toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[5]);
			toggle_class(label_1, "disabled", /*disabled*/ ctx[3]);
			toggle_class(label_1, "checked", /*checked*/ ctx[2]);
			add_location(label_1, file$I, 194, 0, 4932);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, span1);
			append_dev(span1, input);
			append_dev(span1, t0);
			append_dev(span1, span0);
			append_dev(label_1, t1);
			append_dev(label_1, span2);
			append_dev(span2, t2);

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, label_1, { margin: /*margin*/ ctx[4] })),
					listen_dev(label_1, "click", /*click_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*disabled*/ 8) {
				prop_dev(input, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*checked*/ 4) {
				prop_dev(input, "checked", /*checked*/ ctx[2]);
			}

			if (dirty & /*label*/ 1) set_data_dev(t2, /*label*/ ctx[0]);
			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 16) setSize_action.update.call(null, { margin: /*margin*/ ctx[4] });

			if (dirty & /*compact*/ 2) {
				toggle_class(label_1, "compact", /*compact*/ ctx[1]);
			}

			if (dirty & /*$isWindowFocused*/ 32) {
				toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[5]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*checked*/ 4) {
				toggle_class(label_1, "checked", /*checked*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$N.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$N($$self, $$props, $$invalidate) {
	let $isWindowFocused;
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(5, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Checkbox", slots, []);
	let { label = "Label" } = $$props;
	let { compact = false } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { margin = "0" } = $$props;
	const writable_props = ["label", "compact", "checked", "disabled", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Checkbox> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("checked" in $$props) $$invalidate(2, checked = $$props.checked);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		setSize,
		label,
		compact,
		checked,
		disabled,
		margin,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("checked" in $$props) $$invalidate(2, checked = $$props.checked);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [label, compact, checked, disabled, margin, $isWindowFocused, click_handler];
}

class Checkbox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-96hgg3-style")) add_css$J();

		init(this, options, instance$N, create_fragment$N, safe_not_equal, {
			label: 0,
			compact: 1,
			checked: 2,
			disabled: 3,
			margin: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox",
			options,
			id: create_fragment$N.name
		});
	}

	get label() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/PopupButton.svelte generated by Svelte v3.30.1 */
const file$J = "src/js/renderer/component/ui/PopupButton.svelte";

function add_css$K() {
	var style = element("style");
	style.id = "svelte-e9qc3k-style";
	style.textContent = "@keyframes svelte-e9qc3k-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}button.svelte-e9qc3k.svelte-e9qc3k{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;display:inline-flex;align-items:center;color:var(--labelColor);border:none;outline:none;height:20px;padding:2px;padding-left:8px;border-radius:5.5px}.label.svelte-e9qc3k.svelte-e9qc3k{flex-grow:1;display:flex;align-items:center;text-align:left;overflow:hidden;word-wrap:none;user-select:none;line-height:20px;transform:translate(0, -0.5px);pointer-events:none}.icon.svelte-e9qc3k.svelte-e9qc3k{width:16px;height:16px;border-radius:4px;display:grid;place-items:center;pointer-events:none}.icon.svelte-e9qc3k.svelte-e9qc3k::before{content:\"\";-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;width:100%;height:100%;transform:translate(0, 0.5px);-webkit-mask-size:8px auto;-webkit-mask-image:var(--img-chevron-up-down)}button.compact.svelte-e9qc3k.svelte-e9qc3k{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;height:16px;padding-left:6px;border-radius:4px}button.compact.svelte-e9qc3k .label.svelte-e9qc3k{line-height:16px}button.compact.svelte-e9qc3k .icon.svelte-e9qc3k{width:12px;height:12px;border-radius:2.5px}button.compact.svelte-e9qc3k .icon.svelte-e9qc3k::before{transform:translate(0, 0);-webkit-mask-size:auto 10px}button.svelte-e9qc3k.svelte-e9qc3k{color:var(--labelColor)}@media(prefers-color-scheme: dark){button.svelte-e9qc3k.svelte-e9qc3k{background:var(--buttonBackgroundColor);box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){button.svelte-e9qc3k.svelte-e9qc3k{background:var(--buttonBackgroundColor);box-shadow:0 0 0 0.5px rgba(0, 0, 0, 0.08), 0 0.5px 1px 0.5px rgba(0, 0, 0, 0.1)}}.icon.svelte-e9qc3k.svelte-e9qc3k{background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){.icon.svelte-e9qc3k.svelte-e9qc3k{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}.icon.svelte-e9qc3k.svelte-e9qc3k::before{background:white}@media(prefers-color-scheme: dark){button.menuOpen.svelte-e9qc3k.svelte-e9qc3k,button.svelte-e9qc3k.svelte-e9qc3k:active:not(.disabled){filter:brightness(1.25)}}@media(prefers-color-scheme: light){button.menuOpen.svelte-e9qc3k.svelte-e9qc3k,button.svelte-e9qc3k.svelte-e9qc3k:active:not(.disabled){filter:brightness(0.9)}}.disabled.svelte-e9qc3k.svelte-e9qc3k{opacity:0.35}.disabled.svelte-e9qc3k .icon.svelte-e9qc3k{background:none;box-shadow:none}.disabled.svelte-e9qc3k .icon.svelte-e9qc3k::before{background:var(--labelColor)}button.svelte-e9qc3k:not(.windowFocused) .icon.svelte-e9qc3k{background:none;box-shadow:none}button.svelte-e9qc3k:not(.windowFocused) .icon.svelte-e9qc3k::before{background:var(--labelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$O(ctx) {
	let button;
	let div0;
	let t0;
	let t1;
	let div1;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			div0 = element("div");
			t0 = text(/*label*/ ctx[6]);
			t1 = space();
			div1 = element("div");
			attr_dev(div0, "class", "label svelte-e9qc3k");
			add_location(div0, file$J, 197, 2, 4633);
			attr_dev(div1, "class", "icon svelte-e9qc3k");
			add_location(div1, file$J, 198, 2, 4668);
			attr_dev(button, "class", "svelte-e9qc3k");
			toggle_class(button, "compact", /*compact*/ ctx[1]);
			toggle_class(button, "disabled", /*disabled*/ ctx[2]);
			toggle_class(button, "menuOpen", /*$menu*/ ctx[5].isOpen && /*$menu*/ ctx[5].id == /*id*/ ctx[10]);
			toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[9]);
			add_location(button, file$J, 180, 0, 4253);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div0);
			append_dev(div0, t0);
			append_dev(button, t1);
			append_dev(button, div1);

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, button, {
						width: /*width*/ ctx[3],
						height: /*height*/ ctx[7],
						margin: /*margin*/ ctx[4]
					})),
					listen_dev(button, "mousedown", /*mousedown_handler*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 64) set_data_dev(t0, /*label*/ ctx[6]);

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, height, margin*/ 152) setSize_action.update.call(null, {
				width: /*width*/ ctx[3],
				height: /*height*/ ctx[7],
				margin: /*margin*/ ctx[4]
			});

			if (dirty & /*compact*/ 2) {
				toggle_class(button, "compact", /*compact*/ ctx[1]);
			}

			if (dirty & /*disabled*/ 4) {
				toggle_class(button, "disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*$menu, id*/ 1056) {
				toggle_class(button, "menuOpen", /*$menu*/ ctx[5].isOpen && /*$menu*/ ctx[5].id == /*id*/ ctx[10]);
			}

			if (dirty & /*$isWindowFocused*/ 512) {
				toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[9]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$O.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$O($$self, $$props, $$invalidate) {
	let $menu;
	let $isWindowFocused;
	validate_store(menu, "menu");
	component_subscribe($$self, menu, $$value => $$invalidate(5, $menu = $$value));
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(9, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PopupButton", slots, []);
	const dispatch = createEventDispatcher();
	let { items = [] } = $$props;
	let { compact = false } = $$props;
	let { disabled = false } = $$props;
	let { width = "100px" } = $$props;
	let { margin = "0" } = $$props;

	// Unique ID. Used to match menu with component that opens it.
	let id = nanoid();

	function checkForMenuSelection() {
		const selectionWasMade = !$menu.isOpen && $menu.id == id && $menu.selectedItem;

		if (selectionWasMade) {
			dispatch("selectItem", { item: $menu.selectedItem });
		}
	}

	const writable_props = ["items", "compact", "disabled", "width", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PopupButton> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = domEvent => {
		if (disabled) return;

		openMenu(domEvent.target, {
			id,
			items,
			type: "popup",
			width: menuWidth,
			compact
		});
	};

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		menu,
		openMenu,
		setSize,
		nanoid,
		createEventDispatcher,
		dispatch,
		items,
		compact,
		disabled,
		width,
		margin,
		id,
		checkForMenuSelection,
		label,
		height,
		menuWidth,
		$menu,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
		if ("id" in $$props) $$invalidate(10, id = $$props.id);
		if ("label" in $$props) $$invalidate(6, label = $$props.label);
		if ("height" in $$props) $$invalidate(7, height = $$props.height);
		if ("menuWidth" in $$props) $$invalidate(8, menuWidth = $$props.menuWidth);
	};

	let label;
	let height;
	let menuWidth;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 1) {
			// Set label text to the checked option
			 $$invalidate(6, label = items.find(i => i.checked)?.label);
		}

		if ($$self.$$.dirty & /*compact*/ 2) {
			 $$invalidate(7, height = compact ? "16px" : "20px");
		}

		if ($$self.$$.dirty & /*width, compact*/ 10) {
			// For text buttons like PopupButton and PulldownButton, we want the menu width to match the button's, plus some padding.
			 $$invalidate(8, menuWidth = `${parseInt(width) + (compact ? 6 : 12)}px`);
		}

		if ($$self.$$.dirty & /*$menu*/ 32) {
			// Was a selection made? If yes, dispatch event. Criteria is: when `menu` store changes, is it: 1) closed, 2) set to this component instance's `id`, and 3) set to a valid `selectedItem` value (not undefined)
			 (checkForMenuSelection());
		}
	};

	return [
		items,
		compact,
		disabled,
		width,
		margin,
		$menu,
		label,
		height,
		menuWidth,
		$isWindowFocused,
		id,
		mousedown_handler
	];
}

class PopupButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-e9qc3k-style")) add_css$K();

		init(this, options, instance$O, create_fragment$O, safe_not_equal, {
			items: 0,
			compact: 1,
			disabled: 2,
			width: 3,
			margin: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PopupButton",
			options,
			id: create_fragment$O.name
		});
	}

	get items() {
		throw new Error("<PopupButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<PopupButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<PopupButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<PopupButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<PopupButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<PopupButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<PopupButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<PopupButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<PopupButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<PopupButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/PushButton.svelte generated by Svelte v3.30.1 */
const file$K = "src/js/renderer/component/ui/PushButton.svelte";

function add_css$L() {
	var style = element("style");
	style.id = "svelte-14n4jmd-style";
	style.textContent = "@keyframes svelte-14n4jmd-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}button.svelte-14n4jmd.svelte-14n4jmd{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);border:none;outline:none;height:20px;padding:0;border-radius:5.5px}button.svelte-14n4jmd .label.svelte-14n4jmd{user-select:none;transform:translate(0, -0.5px)}button.compact.svelte-14n4jmd.svelte-14n4jmd{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;height:16px;border-radius:4px}button.compact.svelte-14n4jmd .label.svelte-14n4jmd{line-height:16px;height:16px}button.svelte-14n4jmd.svelte-14n4jmd:not(.emphasized){color:var(--labelColor)}@media(prefers-color-scheme: dark){button.svelte-14n4jmd.svelte-14n4jmd:not(.emphasized){background:var(--buttonBackgroundColor);box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){button.svelte-14n4jmd.svelte-14n4jmd:not(.emphasized){background:var(--buttonBackgroundColor);box-shadow:0 0 0 0.5px rgba(0, 0, 0, 0.08), 0 0.5px 1px 0.5px rgba(0, 0, 0, 0.1)}}button.emphasized.svelte-14n4jmd.svelte-14n4jmd{color:white;background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){button.emphasized.svelte-14n4jmd.svelte-14n4jmd{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15)}}button.svelte-14n4jmd.svelte-14n4jmd:active:not(.disabled){color:white;background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){button.svelte-14n4jmd.svelte-14n4jmd:active:not(.disabled){filter:brightness(1.25)}}@media(prefers-color-scheme: light){button.svelte-14n4jmd.svelte-14n4jmd:active:not(.disabled){filter:brightness(0.9);box-shadow:none}}.disabled.svelte-14n4jmd.svelte-14n4jmd{opacity:0.35}button.emphasized.svelte-14n4jmd.svelte-14n4jmd:not(.windowFocused){color:var(--labelColor)}@media(prefers-color-scheme: dark){button.emphasized.svelte-14n4jmd.svelte-14n4jmd:not(.windowFocused){background:var(--buttonBackgroundColor);box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){button.emphasized.svelte-14n4jmd.svelte-14n4jmd:not(.windowFocused){background:var(--buttonBackgroundColor);box-shadow:0 0 0 0.5px rgba(0, 0, 0, 0.08), 0 0.5px 1px 0.5px rgba(0, 0, 0, 0.1)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$P(ctx) {
	let button;
	let div;
	let t;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			div = element("div");
			t = text(/*label*/ ctx[0]);
			attr_dev(div, "class", "label svelte-14n4jmd");
			add_location(div, file$K, 123, 2, 3067);
			attr_dev(button, "class", "svelte-14n4jmd");
			toggle_class(button, "compact", /*compact*/ ctx[1]);
			toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "emphasized", /*emphasized*/ ctx[2]);
			toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			add_location(button, file$K, 115, 0, 2912);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div);
			append_dev(div, t);

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, button, {
						width: /*width*/ ctx[4],
						margin: /*margin*/ ctx[5]
					})),
					listen_dev(button, "mousedown", /*mousedown_handler*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, margin*/ 48) setSize_action.update.call(null, {
				width: /*width*/ ctx[4],
				margin: /*margin*/ ctx[5]
			});

			if (dirty & /*compact*/ 2) {
				toggle_class(button, "compact", /*compact*/ ctx[1]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*emphasized*/ 4) {
				toggle_class(button, "emphasized", /*emphasized*/ ctx[2]);
			}

			if (dirty & /*$isWindowFocused*/ 64) {
				toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$P.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$P($$self, $$props, $$invalidate) {
	let $isWindowFocused;
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(6, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PushButton", slots, []);
	let { label = "" } = $$props;
	let { compact = false } = $$props;
	let { emphasized = false } = $$props;
	let { disabled = false } = $$props;
	let { width = "100px" } = $$props;
	let { margin = "0" } = $$props;
	const writable_props = ["label", "compact", "emphasized", "disabled", "width", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PushButton> was created with unknown prop '${key}'`);
	});

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("emphasized" in $$props) $$invalidate(2, emphasized = $$props.emphasized);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		setSize,
		label,
		compact,
		emphasized,
		disabled,
		width,
		margin,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("compact" in $$props) $$invalidate(1, compact = $$props.compact);
		if ("emphasized" in $$props) $$invalidate(2, emphasized = $$props.emphasized);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		label,
		compact,
		emphasized,
		disabled,
		width,
		margin,
		$isWindowFocused,
		mousedown_handler
	];
}

class PushButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-14n4jmd-style")) add_css$L();

		init(this, options, instance$P, create_fragment$P, safe_not_equal, {
			label: 0,
			compact: 1,
			emphasized: 2,
			disabled: 3,
			width: 4,
			margin: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PushButton",
			options,
			id: create_fragment$P.name
		});
	}

	get label() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get emphasized() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set emphasized(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/list/SearchResult.svelte generated by Svelte v3.30.1 */
const file$L = "src/js/renderer/component/sidebar/list/SearchResult.svelte";

function add_css$M() {
	var style = element("style");
	style.id = "svelte-1m6kzod-style";
	style.textContent = "@charset \"UTF-8\";@keyframes svelte-1m6kzod-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.result.svelte-1m6kzod.svelte-1m6kzod{user-select:none;border-radius:0;margin:0;padding:7px 0.75em;width:100%;border-bottom:1px solid var(--separatorColor)}.header.svelte-1m6kzod.svelte-1m6kzod{display:flex}.header.svelte-1m6kzod .title.svelte-1m6kzod{flex-grow:1;font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;line-height:16px}.hits.svelte-1m6kzod.svelte-1m6kzod{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin:0;padding:0;text-indent:0;list-style-type:none;color:var(--secondaryLabelColor);pointer-events:none}.hits.svelte-1m6kzod li.svelte-1m6kzod{margin:0;padding:0;text-indent:0;list-style-type:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.hits.svelte-1m6kzod li.svelte-1m6kzod::before{content:\"•\";margin-right:5px}.hits.svelte-1m6kzod .highlight{text-decoration:underline}.isSelected.svelte-1m6kzod.svelte-1m6kzod{border-radius:4px;border-bottom:0;margin-bottom:1px}.isSelected.svelte-1m6kzod .title.svelte-1m6kzod,.isSelected.svelte-1m6kzod .hits.svelte-1m6kzod{color:var(--selectedMenuItemTextColor)}.isSelected.isSidebarFocused.svelte-1m6kzod.svelte-1m6kzod{background-color:var(--selectedContentBackgroundColor)}.isSelected.svelte-1m6kzod.svelte-1m6kzod:not(.isSidebarFocused){background-color:var(--disabledControlTextColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoUmVzdWx0LnN2ZWx0ZSIsInNvdXJjZXMiOlsiU2VhcmNoUmVzdWx0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgeyBwcm9qZWN0LCBzaWRlYmFyIH0gZnJvbSAnLi4vLi4vLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gJy4uLy4uLy4uL0ZpbGVzTWFuYWdlcidcbiAgaW1wb3J0IHsgb25Nb3VzZWRvd24sIG9uTW91c2V1cCB9IGZyb20gJy4vaW50ZXJhY3Rpb25zJ1xuICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnc3ZlbHRlJztcblxuXHRleHBvcnQgbGV0IGlkID0gJydcblx0ZXhwb3J0IGxldCBoaXRzID0gW11cblx0ZXhwb3J0IGxldCBsaXN0SWRzID0gW11cblx0JDogbnVtSGl0cyA9IGhpdHMubGVuZ3RoXG5cdFxuXHRjb25zdCB0YWJJZCA9IGdldENvbnRleHQoJ3RhYklkJylcblx0JDogdGFiID0gJHNpZGViYXIudGFic0J5SWRbdGFiSWRdXG5cdCQ6IGRvYyA9ICRmaWxlcy5ieUlkW2lkXVxuXHQkOiBpc1NlbGVjdGVkID0gdGFiLnNlbGVjdGVkLnNvbWUoKGlkKSA9PiBpZCA9PSBkb2MuaWQpXG5cdCQ6IGlzU2lkZWJhckZvY3VzZWQgPSAkcHJvamVjdC5mb2N1c2VkU2VjdGlvbklkID09ICdzaWRlYmFyJ1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5AY2hhcnNldCBcIlVURi04XCI7XG5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4ucmVzdWx0IHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDA7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogN3B4IDAuNzVlbTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1zZXBhcmF0b3JDb2xvcik7XG59XG5cbi5oZWFkZXIge1xuICBkaXNwbGF5OiBmbGV4O1xufVxuLmhlYWRlciAudGl0bGUge1xuICBmbGV4LWdyb3c6IDE7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbGluZS1oZWlnaHQ6IDE2cHg7XG59XG4uaGVhZGVyIC5udW1IaXRzIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgY29sb3I6IHZhcigtLXNlY29uZGFyeUxhYmVsQ29sb3IpO1xuICBmbGV4LXNocmluazogMDtcbn1cblxuLmhpdHMge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICB0ZXh0LWluZGVudDogMDtcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5TGFiZWxDb2xvcik7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuLmhpdHMgbGkge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIHRleHQtaW5kZW50OiAwO1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuLmhpdHMgbGk6OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi4oCiXCI7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xufVxuXG4uaGl0cyA6Z2xvYmFsKC5oaWdobGlnaHQpIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbi5pc1NlbGVjdGVkIHtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBib3JkZXItYm90dG9tOiAwO1xuICBtYXJnaW4tYm90dG9tOiAxcHg7XG59XG4uaXNTZWxlY3RlZCAudGl0bGUsIC5pc1NlbGVjdGVkIC5udW1IaXRzLCAuaXNTZWxlY3RlZCAuaGl0cyB7XG4gIGNvbG9yOiB2YXIoLS1zZWxlY3RlZE1lbnVJdGVtVGV4dENvbG9yKTtcbn1cbi5pc1NlbGVjdGVkLmlzU2lkZWJhckZvY3VzZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWxlY3RlZENvbnRlbnRCYWNrZ3JvdW5kQ29sb3IpO1xufVxuLmlzU2VsZWN0ZWQ6bm90KC5pc1NpZGViYXJGb2N1c2VkKSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRpc2FibGVkQ29udHJvbFRleHRDb2xvcik7XG59PC9zdHlsZT5cblxuPHN2ZWx0ZTpvcHRpb25zIGltbXV0YWJsZT17dHJ1ZX0gLz5cblxuPGRpdlxuXHRjbGFzcz1cInJlc3VsdFwiXG5cdGNsYXNzOmlzU2VsZWN0ZWRcblx0Y2xhc3M6aXNTaWRlYmFyRm9jdXNlZFxuXHRvbjptb3VzZWRvd249eyhldnQpID0+IG9uTW91c2Vkb3duKGV2dCwgaWQsIGlzU2VsZWN0ZWQsIHRhYiwgdGFiSWQsIGxpc3RJZHMsICRmaWxlcyl9XG5cdG9uOm1vdXNldXA9eyhldnQpID0+IG9uTW91c2V1cChldnQsIGlkLCB0YWIsIHRhYklkLCBsaXN0SWRzLCAkcHJvamVjdC5wYW5lbHNbJHByb2plY3QuZm9jdXNlZFBhbmVsSW5kZXhdLCAkZmlsZXMpfVxuXHQ+XG5cdFx0PGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPntkb2MudGl0bGUgPyBkb2MudGl0bGUgOiBkb2MubmFtZX08L3NwYW4+XG4gICAgICA8IS0tIDxzcGFuIGNsYXNzPVwibnVtSGl0c1wiPntudW1IaXRzfTwvc3Bhbj4gLS0+XG4gICAgPC9kaXY+XG4gICAgPHVsIGNsYXNzPVwiaGl0c1wiPlxuICAgICAgeyNlYWNoIGhpdHMgYXMgaGl0fVxuICAgICAgICA8bGk+e0BodG1sIGhpdH08L2xpPlxuICAgICAgey9lYWNofVxuICAgIDwvdWw+XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJ3QixTQUFTLE9BQU8sQ0FBQyxBQUN6QyxXQUFXLDBCQUFZLENBQUMsQUFDdEIsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsT0FBTyw4QkFBQyxDQUFDLEFBQ1AsV0FBVyxDQUFFLElBQUksQ0FDakIsYUFBYSxDQUFFLENBQUMsQ0FDaEIsTUFBTSxDQUFFLENBQUMsQ0FDVCxPQUFPLENBQUUsR0FBRyxDQUFDLE1BQU0sQ0FDbkIsS0FBSyxDQUFFLElBQUksQ0FDWCxhQUFhLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEFBQ2hELENBQUMsQUFFRCxPQUFPLDhCQUFDLENBQUMsQUFDUCxPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFDRCxzQkFBTyxDQUFDLE1BQU0sZUFBQyxDQUFDLEFBQ2QsU0FBUyxDQUFFLENBQUMsQ0FDWixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsSUFBSSxDQUNqQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUN4QixhQUFhLENBQUUsUUFBUSxDQUN2QixRQUFRLENBQUUsTUFBTSxDQUNoQixXQUFXLENBQUUsTUFBTSxDQUNuQixXQUFXLENBQUUsSUFBSSxBQUNuQixDQUFDLEFBV0QsS0FBSyw4QkFBQyxDQUFDLEFBQ0wsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsT0FBTyxDQUN2QixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLENBQ1YsV0FBVyxDQUFFLENBQUMsQ0FDZCxlQUFlLENBQUUsSUFBSSxDQUNyQixLQUFLLENBQUUsSUFBSSxxQkFBcUIsQ0FBQyxDQUNqQyxjQUFjLENBQUUsSUFBSSxBQUN0QixDQUFDLEFBQ0Qsb0JBQUssQ0FBQyxFQUFFLGVBQUMsQ0FBQyxBQUNSLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQ0FDVixXQUFXLENBQUUsQ0FBQyxDQUNkLGVBQWUsQ0FBRSxJQUFJLENBQ3JCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLGFBQWEsQ0FBRSxRQUFRLEFBQ3pCLENBQUMsQUFDRCxvQkFBSyxDQUFDLGlCQUFFLFFBQVEsQUFBQyxDQUFDLEFBQ2hCLE9BQU8sQ0FBRSxHQUFHLENBQ1osWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQyxBQUVELG9CQUFLLENBQUMsQUFBUSxVQUFVLEFBQUUsQ0FBQyxBQUN6QixlQUFlLENBQUUsU0FBUyxBQUM1QixDQUFDLEFBRUQsV0FBVyw4QkFBQyxDQUFDLEFBQ1gsYUFBYSxDQUFFLEdBQUcsQ0FDbEIsYUFBYSxDQUFFLENBQUMsQ0FDaEIsYUFBYSxDQUFFLEdBQUcsQUFDcEIsQ0FBQyxBQUNELDBCQUFXLENBQUMscUJBQU0sQ0FBd0IsMEJBQVcsQ0FBQyxLQUFLLGVBQUMsQ0FBQyxBQUMzRCxLQUFLLENBQUUsSUFBSSwyQkFBMkIsQ0FBQyxBQUN6QyxDQUFDLEFBQ0QsV0FBVyxpQkFBaUIsOEJBQUMsQ0FBQyxBQUM1QixnQkFBZ0IsQ0FBRSxJQUFJLGdDQUFnQyxDQUFDLEFBQ3pELENBQUMsQUFDRCx5Q0FBVyxLQUFLLGlCQUFpQixDQUFDLEFBQUMsQ0FBQyxBQUNsQyxnQkFBZ0IsQ0FBRSxJQUFJLDBCQUEwQixDQUFDLEFBQ25ELENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (124:6) {#each hits as hit}
function create_each_block$6(ctx) {
	let li;
	let raw_value = /*hit*/ ctx[14] + "";

	const block = {
		c: function create() {
			li = element("li");
			attr_dev(li, "class", "svelte-1m6kzod");
			add_location(li, file$L, 124, 8, 2851);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			li.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*hits*/ 2 && raw_value !== (raw_value = /*hit*/ ctx[14] + "")) li.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$6.name,
		type: "each",
		source: "(124:6) {#each hits as hit}",
		ctx
	});

	return block;
}

function create_fragment$Q(ctx) {
	let div1;
	let div0;
	let span;

	let t0_value = (/*doc*/ ctx[4].title
	? /*doc*/ ctx[4].title
	: /*doc*/ ctx[4].name) + "";

	let t0;
	let t1;
	let ul;
	let mounted;
	let dispose;
	let each_value = /*hits*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(span, "class", "title svelte-1m6kzod");
			add_location(span, file$L, 119, 6, 2668);
			attr_dev(div0, "class", "header svelte-1m6kzod");
			add_location(div0, file$L, 118, 2, 2641);
			attr_dev(ul, "class", "hits svelte-1m6kzod");
			add_location(ul, file$L, 122, 4, 2799);
			attr_dev(div1, "class", "result svelte-1m6kzod");
			toggle_class(div1, "isSelected", /*isSelected*/ ctx[7]);
			toggle_class(div1, "isSidebarFocused", /*isSidebarFocused*/ ctx[8]);
			add_location(div1, file$L, 111, 0, 2370);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(span, t0);
			append_dev(div1, t1);
			append_dev(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(div1, "mousedown", /*mousedown_handler*/ ctx[11], false, false, false),
					listen_dev(div1, "mouseup", /*mouseup_handler*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*doc*/ 16 && t0_value !== (t0_value = (/*doc*/ ctx[4].title
			? /*doc*/ ctx[4].title
			: /*doc*/ ctx[4].name) + "")) set_data_dev(t0, t0_value);

			if (dirty & /*hits*/ 2) {
				each_value = /*hits*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*isSelected*/ 128) {
				toggle_class(div1, "isSelected", /*isSelected*/ ctx[7]);
			}

			if (dirty & /*isSidebarFocused*/ 256) {
				toggle_class(div1, "isSidebarFocused", /*isSidebarFocused*/ ctx[8]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Q($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	let $project;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(10, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(6, $project = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SearchResult", slots, []);
	let { id = "" } = $$props;
	let { hits = [] } = $$props;
	let { listIds = [] } = $$props;
	const tabId = getContext("tabId");
	const writable_props = ["id", "hits", "listIds"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchResult> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = evt => onMousedown(evt, id, isSelected, tab, tabId, listIds);
	const mouseup_handler = evt => onMouseup(evt, id, tab, tabId, listIds, $project.panels[$project.focusedPanelIndex]);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("hits" in $$props) $$invalidate(1, hits = $$props.hits);
		if ("listIds" in $$props) $$invalidate(2, listIds = $$props.listIds);
	};

	$$self.$capture_state = () => ({
		project,
		sidebar,
		files,
		onMousedown,
		onMouseup,
		getContext,
		id,
		hits,
		listIds,
		tabId,
		numHits,
		tab,
		$sidebar,
		doc,
		$files,
		isSelected,
		isSidebarFocused,
		$project
	});

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("hits" in $$props) $$invalidate(1, hits = $$props.hits);
		if ("listIds" in $$props) $$invalidate(2, listIds = $$props.listIds);
		if ("numHits" in $$props) numHits = $$props.numHits;
		if ("tab" in $$props) $$invalidate(3, tab = $$props.tab);
		if ("doc" in $$props) $$invalidate(4, doc = $$props.doc);
		if ("isSelected" in $$props) $$invalidate(7, isSelected = $$props.isSelected);
		if ("isSidebarFocused" in $$props) $$invalidate(8, isSidebarFocused = $$props.isSidebarFocused);
	};

	let numHits;
	let tab;
	let doc;
	let isSelected;
	let isSidebarFocused;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*hits*/ 2) {
			 numHits = hits.length;
		}

		if ($$self.$$.dirty & /*$sidebar*/ 1024) {
			 $$invalidate(3, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty & /*$files, id*/ 33) {
			 $$invalidate(4, doc = $files.byId[id]);
		}

		if ($$self.$$.dirty & /*tab, doc*/ 24) {
			 $$invalidate(7, isSelected = tab.selected.some(id => id == doc.id));
		}

		if ($$self.$$.dirty & /*$project*/ 64) {
			 $$invalidate(8, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}
	};

	return [
		id,
		hits,
		listIds,
		tab,
		doc,
		$files,
		$project,
		isSelected,
		isSidebarFocused,
		tabId,
		$sidebar,
		mousedown_handler,
		mouseup_handler
	];
}

class SearchResult extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1m6kzod-style")) add_css$M();
		init(this, options, instance$Q, create_fragment$Q, not_equal, { id: 0, hits: 1, listIds: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchResult",
			options,
			id: create_fragment$Q.name
		});
	}

	get id() {
		throw new Error("<SearchResult>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<SearchResult>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hits() {
		throw new Error("<SearchResult>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hits(value) {
		throw new Error("<SearchResult>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get listIds() {
		throw new Error("<SearchResult>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set listIds(value) {
		throw new Error("<SearchResult>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/sidebar/Search.svelte generated by Svelte v3.30.1 */

const { window: window_1 } = globals;
const file$M = "src/js/renderer/component/sidebar/Search.svelte";

function add_css$N() {
	var style = element("style");
	style.id = "svelte-sqxjgh-style";
	style.textContent = "@keyframes svelte-sqxjgh-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.numberOfResults.svelte-sqxjgh{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:var(--labelColor);min-height:25px;white-space:nowrap;overflow:hidden;display:flex;align-items:center;justify-content:center}.listOfResults.svelte-sqxjgh{padding:5px 10px 10px;flex-grow:1;overflow-y:scroll;position:relative}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	return child_ctx;
}

// (233:4) {#if tab.options.isOpen}
function create_if_block_2$7(ctx) {
	let formrow0;
	let t;
	let formrow1;
	let current;

	formrow0 = new FormRow({
			props: {
				label: "Match:",
				margin: "4px 10px 8px",
				leftColumn: "50px",
				outroDelay: 200,
				compact: true,
				$$slots: { default: [create_default_slot_4$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "Look In:",
				margin: "4px 10px 8px",
				leftColumn: "50px",
				outroDelay: 200,
				compact: true,
				$$slots: { default: [create_default_slot_3$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow0.$$.fragment);
			t = space();
			create_component(formrow1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(formrow1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow0_changes = {};

			if (dirty[0] & /*options*/ 8 | dirty[1] & /*$$scope*/ 1) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty[0] & /*lookInOptions*/ 64 | dirty[1] & /*$$scope*/ 1) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(formrow1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$7.name,
		type: "if",
		source: "(233:4) {#if tab.options.isOpen}",
		ctx
	});

	return block;
}

// (236:6) <FormRow label={'Match:'} margin={'4px 10px 8px'} leftColumn={'50px'} outroDelay={200} compact={true} >
function create_default_slot_4$2(ctx) {
	let checkbox0;
	let t;
	let checkbox1;
	let current;

	checkbox0 = new Checkbox({
			props: {
				label: "Case",
				checked: /*options*/ ctx[3].matchCase,
				margin: "0 5px 0 0",
				compact: true
			},
			$$inline: true
		});

	checkbox0.$on("click", /*click_handler*/ ctx[17]);

	checkbox1 = new Checkbox({
			props: {
				label: "Exact Phrase",
				checked: /*options*/ ctx[3].matchExactPhrase,
				compact: true
			},
			$$inline: true
		});

	checkbox1.$on("click", /*click_handler_1*/ ctx[18]);

	const block = {
		c: function create() {
			create_component(checkbox0.$$.fragment);
			t = space();
			create_component(checkbox1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(checkbox1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const checkbox0_changes = {};
			if (dirty[0] & /*options*/ 8) checkbox0_changes.checked = /*options*/ ctx[3].matchCase;
			checkbox0.$set(checkbox0_changes);
			const checkbox1_changes = {};
			if (dirty[0] & /*options*/ 8) checkbox1_changes.checked = /*options*/ ctx[3].matchExactPhrase;
			checkbox1.$set(checkbox1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox0.$$.fragment, local);
			transition_in(checkbox1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox0.$$.fragment, local);
			transition_out(checkbox1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(checkbox1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$2.name,
		type: "slot",
		source: "(236:6) <FormRow label={'Match:'} margin={'4px 10px 8px'} leftColumn={'50px'} outroDelay={200} compact={true} >",
		ctx
	});

	return block;
}

// (254:6) <FormRow label={'Look In:'} margin={'4px 10px 8px'} leftColumn={'50px'} outroDelay={200} compact={true}>
function create_default_slot_3$4(ctx) {
	let popupbutton;
	let current;

	popupbutton = new PopupButton({
			props: {
				compact: "true",
				items: /*lookInOptions*/ ctx[6],
				width: "110px"
			},
			$$inline: true
		});

	popupbutton.$on("selectItem", /*selectItem_handler*/ ctx[19]);

	const block = {
		c: function create() {
			create_component(popupbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(popupbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const popupbutton_changes = {};
			if (dirty[0] & /*lookInOptions*/ 64) popupbutton_changes.items = /*lookInOptions*/ ctx[6];
			popupbutton.$set(popupbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(popupbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(popupbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(popupbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$4.name,
		type: "slot",
		source: "(254:6) <FormRow label={'Look In:'} margin={'4px 10px 8px'} leftColumn={'50px'} outroDelay={200} compact={true}>",
		ctx
	});

	return block;
}

// (220:2) <Expandable      title={'Options:'}      maxExpandedHeight={75}     margin={'0 8px'}      isOpen={tab.options.isOpen}      on:toggle={() =>        window.api.send('dispatch', {         type: 'SIDEBAR_TOGGLE_EXPANDABLE',          tabId: tabId,          expandable: 'options'     })   }>
function create_default_slot_2$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*tab*/ ctx[1].options.isOpen && create_if_block_2$7(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*tab*/ ctx[1].options.isOpen) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*tab*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$4.name,
		type: "slot",
		source: "(220:2) <Expandable      title={'Options:'}      maxExpandedHeight={75}     margin={'0 8px'}      isOpen={tab.options.isOpen}      on:toggle={() =>        window.api.send('dispatch', {         type: 'SIDEBAR_TOGGLE_EXPANDABLE',          tabId: tabId,          expandable: 'options'     })   }>",
		ctx
	});

	return block;
}

// (286:4) {#if tab.replace.isOpen}
function create_if_block_1$c(ctx) {
	let formrow;
	let current;

	formrow = new FormRow({
			props: {
				margin: "4px 10px 8px",
				outroDelay: 200,
				compact: true,
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(formrow.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(formrow, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const formrow_changes = {};

			if (dirty[0] & /*replaceWith*/ 32 | dirty[1] & /*$$scope*/ 1) {
				formrow_changes.$$scope = { dirty, ctx };
			}

			formrow.$set(formrow_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(formrow, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$c.name,
		type: "if",
		source: "(286:4) {#if tab.replace.isOpen}",
		ctx
	});

	return block;
}

// (287:6) <FormRow margin={'4px 10px 8px'} outroDelay={200} compact={true}>
function create_default_slot_1$5(ctx) {
	let inputtext;
	let updating_value;
	let t;
	let pushbutton;
	let current;

	function inputtext_value_binding_1(value) {
		/*inputtext_value_binding_1*/ ctx[21].call(null, value);
	}

	let inputtext_props = {
		placeholder: "Replace",
		width: "100%",
		compact: true
	};

	if (/*replaceWith*/ ctx[5] !== void 0) {
		inputtext_props.value = /*replaceWith*/ ctx[5];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding_1));
	inputtext.$on("input", /*input_handler*/ ctx[22]);

	pushbutton = new PushButton({
			props: {
				label: "Replace All",
				width: "120px",
				margin: "0 0 0 5px",
				compact: false
			},
			$$inline: true
		});

	pushbutton.$on("mousedown", /*mousedown_handler*/ ctx[23]);

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
			t = space();
			create_component(pushbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(pushbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputtext_changes = {};

			if (!updating_value && dirty[0] & /*replaceWith*/ 32) {
				updating_value = true;
				inputtext_changes.value = /*replaceWith*/ ctx[5];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			transition_in(pushbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			transition_out(pushbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(pushbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$5.name,
		type: "slot",
		source: "(287:6) <FormRow margin={'4px 10px 8px'} outroDelay={200} compact={true}>",
		ctx
	});

	return block;
}

// (273:2) <Expandable      title={'Replace:'}      maxExpandedHeight={55}     margin={'0 8px'}      isOpen={tab.replace.isOpen}      on:toggle={() =>        window.api.send('dispatch', {         type: 'SIDEBAR_TOGGLE_EXPANDABLE',          tabId: tabId,          expandable: 'replace'       })     }   >
function create_default_slot$b(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*tab*/ ctx[1].replace.isOpen && create_if_block_1$c(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*tab*/ ctx[1].replace.isOpen) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*tab*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$c(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$b.name,
		type: "slot",
		source: "(273:2) <Expandable      title={'Replace:'}      maxExpandedHeight={55}     margin={'0 8px'}      isOpen={tab.replace.isOpen}      on:toggle={() =>        window.api.send('dispatch', {         type: 'SIDEBAR_TOGGLE_EXPANDABLE',          tabId: tabId,          expandable: 'replace'       })     }   >",
		ctx
	});

	return block;
}

// (314:2) {#if query}
function create_if_block$n(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3_value = /*results*/ ctx[7].length + "";
	let t3;
	let t4;
	let t5;
	let separator;
	let current;

	separator = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("Found ");
			t1 = text(/*numHits*/ ctx[9]);
			t2 = text(" results in ");
			t3 = text(t3_value);
			t4 = text(" documents");
			t5 = space();
			create_component(separator.$$.fragment);
			attr_dev(div, "class", "numberOfResults svelte-sqxjgh");
			add_location(div, file$M, 314, 4, 9092);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			append_dev(div, t3);
			append_dev(div, t4);
			insert_dev(target, t5, anchor);
			mount_component(separator, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*numHits*/ 512) set_data_dev(t1, /*numHits*/ ctx[9]);
			if ((!current || dirty[0] & /*results*/ 128) && t3_value !== (t3_value = /*results*/ ctx[7].length + "")) set_data_dev(t3, t3_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t5);
			destroy_component(separator, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$n.name,
		type: "if",
		source: "(314:2) {#if query}",
		ctx
	});

	return block;
}

// (319:4) {#each results as result (result.id)}
function create_each_block$7(key_1, ctx) {
	let first;
	let searchresult;
	let current;

	searchresult = new SearchResult({
			props: {
				id: /*result*/ ctx[28].id,
				hits: /*result*/ ctx[28].hits,
				listIds: /*resultIds*/ ctx[8]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(searchresult.$$.fragment);
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(searchresult, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const searchresult_changes = {};
			if (dirty[0] & /*results*/ 128) searchresult_changes.id = /*result*/ ctx[28].id;
			if (dirty[0] & /*results*/ 128) searchresult_changes.hits = /*result*/ ctx[28].hits;
			if (dirty[0] & /*resultIds*/ 256) searchresult_changes.listIds = /*resultIds*/ ctx[8];
			searchresult.$set(searchresult_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchresult.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchresult.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(searchresult, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$7.name,
		type: "each",
		source: "(319:4) {#each results as result (result.id)}",
		ctx
	});

	return block;
}

function create_fragment$R(ctx) {
	let div1;
	let header;
	let t0;
	let separator0;
	let t1;
	let inputtext;
	let updating_value;
	let t2;
	let separator1;
	let t3;
	let expandable0;
	let t4;
	let separator2;
	let t5;
	let expandable1;
	let t6;
	let separator3;
	let t7;
	let t8;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;

	header = new Header({
			props: {
				title: /*tab*/ ctx[1].title,
				hoverToShowSlot: true
			},
			$$inline: true
		});

	separator0 = new Separator({
			props: { margin: "0 10px 8px" },
			$$inline: true
		});

	function inputtext_value_binding(value) {
		/*inputtext_value_binding*/ ctx[16].call(null, value);
	}

	let inputtext_props = {
		icon: "img-magnifyingglass",
		placeholder: "Name",
		margin: "0 10px 0",
		compact: true
	};

	if (/*query*/ ctx[0] !== void 0) {
		inputtext_props.value = /*query*/ ctx[0];
	}

	inputtext = new InputText({ props: inputtext_props, $$inline: true });
	binding_callbacks.push(() => bind(inputtext, "value", inputtext_value_binding));

	separator1 = new Separator({
			props: { margin: "8px 10px 0" },
			$$inline: true
		});

	expandable0 = new Expandable({
			props: {
				title: "Options:",
				maxExpandedHeight: 75,
				margin: "0 8px",
				isOpen: /*tab*/ ctx[1].options.isOpen,
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	expandable0.$on("toggle", /*toggle_handler*/ ctx[20]);

	separator2 = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	expandable1 = new Expandable({
			props: {
				title: "Replace:",
				maxExpandedHeight: 55,
				margin: "0 8px",
				isOpen: /*tab*/ ctx[1].replace.isOpen,
				$$slots: { default: [create_default_slot$b] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	expandable1.$on("toggle", /*toggle_handler_1*/ ctx[24]);

	separator3 = new Separator({
			props: { margin: "0 10px" },
			$$inline: true
		});

	let if_block = /*query*/ ctx[0] && create_if_block$n(ctx);
	let each_value = /*results*/ ctx[7];
	validate_each_argument(each_value);
	const get_key = ctx => /*result*/ ctx[28].id;
	validate_each_keys(ctx, each_value, get_each_context$7, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$7(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$7(key, child_ctx));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(separator0.$$.fragment);
			t1 = space();
			create_component(inputtext.$$.fragment);
			t2 = space();
			create_component(separator1.$$.fragment);
			t3 = space();
			create_component(expandable0.$$.fragment);
			t4 = space();
			create_component(separator2.$$.fragment);
			t5 = space();
			create_component(expandable1.$$.fragment);
			t6 = space();
			create_component(separator3.$$.fragment);
			t7 = space();
			if (if_block) if_block.c();
			t8 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "listOfResults svelte-sqxjgh");
			add_location(div0, file$M, 317, 2, 9229);
			attr_dev(div1, "class", "section");
			add_location(div1, file$M, 208, 0, 6200);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(header, div1, null);
			append_dev(div1, t0);
			mount_component(separator0, div1, null);
			append_dev(div1, t1);
			mount_component(inputtext, div1, null);
			append_dev(div1, t2);
			mount_component(separator1, div1, null);
			append_dev(div1, t3);
			mount_component(expandable0, div1, null);
			append_dev(div1, t4);
			mount_component(separator2, div1, null);
			append_dev(div1, t5);
			mount_component(expandable1, div1, null);
			append_dev(div1, t6);
			mount_component(separator3, div1, null);
			append_dev(div1, t7);
			if (if_block) if_block.m(div1, null);
			append_dev(div1, t8);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "keydown", /*keydown_handler*/ ctx[15], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const header_changes = {};
			if (dirty[0] & /*tab*/ 2) header_changes.title = /*tab*/ ctx[1].title;
			header.$set(header_changes);
			const inputtext_changes = {};

			if (!updating_value && dirty[0] & /*query*/ 1) {
				updating_value = true;
				inputtext_changes.value = /*query*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			inputtext.$set(inputtext_changes);
			const expandable0_changes = {};
			if (dirty[0] & /*tab*/ 2) expandable0_changes.isOpen = /*tab*/ ctx[1].options.isOpen;

			if (dirty[0] & /*lookInOptions, options, tab*/ 74 | dirty[1] & /*$$scope*/ 1) {
				expandable0_changes.$$scope = { dirty, ctx };
			}

			expandable0.$set(expandable0_changes);
			const expandable1_changes = {};
			if (dirty[0] & /*tab*/ 2) expandable1_changes.isOpen = /*tab*/ ctx[1].replace.isOpen;

			if (dirty[0] & /*replaceWith, tab*/ 34 | dirty[1] & /*$$scope*/ 1) {
				expandable1_changes.$$scope = { dirty, ctx };
			}

			expandable1.$set(expandable1_changes);

			if (/*query*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*query*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$n(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t8);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty[0] & /*results, resultIds*/ 384) {
				const each_value = /*results*/ ctx[7];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$7, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block$7, null, get_each_context$7);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(separator0.$$.fragment, local);
			transition_in(inputtext.$$.fragment, local);
			transition_in(separator1.$$.fragment, local);
			transition_in(expandable0.$$.fragment, local);
			transition_in(separator2.$$.fragment, local);
			transition_in(expandable1.$$.fragment, local);
			transition_in(separator3.$$.fragment, local);
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(separator0.$$.fragment, local);
			transition_out(inputtext.$$.fragment, local);
			transition_out(separator1.$$.fragment, local);
			transition_out(expandable0.$$.fragment, local);
			transition_out(separator2.$$.fragment, local);
			transition_out(expandable1.$$.fragment, local);
			transition_out(separator3.$$.fragment, local);
			transition_out(if_block);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(header);
			destroy_component(separator0);
			destroy_component(inputtext);
			destroy_component(separator1);
			destroy_component(expandable0);
			destroy_component(separator2);
			destroy_component(expandable1);
			destroy_component(separator3);
			if (if_block) if_block.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$R.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$R($$self, $$props, $$invalidate) {
	let $sidebar;
	let $project;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(14, $sidebar = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(2, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(4, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Search", slots, []);
	let query = ""; // Bound to search field
	let replaceWith = ""; // Bound to replace field
	let tabId = "search";
	setContext("tabId", tabId);

	/**
 * Update state when the user modifies the params in the 'Options' section.
 */
	function updateOptions(key, value) {
		let newOptions = { ...options };
		newOptions[key] = value;

		window.api.send("dispatch", {
			type: "SIDEBAR_SET_SEARCH_OPTIONS",
			options: newOptions
		});
	}

	let lookInOptions = [];

	/**
 * Add each folder in the project as an option in the 'Look In:' menu.
 * First option is "All Folders". Below that, we list the folders.
 */
	function setLookInMenuOptions() {
		// Starting options
		$$invalidate(6, lookInOptions = [
			{
				label: "All Folders",
				id: "*",
				checked: options.lookIn == "*",
				separatorAfter: true
			}
		]);

		// Add each folder
		$files.allIds.forEach(id => {
			const file = $files.byId[id];

			if (file.type == "folder") {
				lookInOptions.push({
					label: file.name,
					id,
					checked: options.lookIn == id
				});
			}
		});
	}

	// -------- RESULTS -------- //
	const whitespaceAtStartRegex = new RegExp(/^\W*/);

	let results = [];
	let resultIds = [];
	let numHits = 0; // Total # of hits across all result docs

	async function getResults() {
		// If query is empty, set empty variables and return.
		if (!query) {
			$$invalidate(7, results = []);
			$$invalidate(8, resultIds = []);
			$$invalidate(9, numHits = 0);
			return;
		}

		// We use `temp` values to avoid flickering while the values are being tallied.
		// We assign these to the actual values at the very end.
		let tempResults = [];

		let tempResultIds = [];
		let tempNumHits = 0;

		// We pass these params to DB
		const params = {
			query,
			path: options.lookIn == "*"
			? $project.directory
			: $files.byId[options.lookIn].path,
			matchExactPhrase: options.matchExactPhrase
		};

		// Query DB. If no results, return.
		const dbResults = await window.api.invoke("queryDb", params);

		if (!dbResults) return;

		// Save regexp to find all highlight instances in results from db. Case-insensitive.
		const highlightRegex = new RegExp(`(<span class="highlight">.*?)(${query})(.*?)(<\/span>)`, "gi");

		// Get results from db, find matches we care about (e.g. check case, if matchCase is true)
		// and format to highlight query only, instead of whole token. We're having to work around
		// limitations of sqlite FTS5 here. Push `file` (with id, list of hits, etc) into `results`.
		dbResults.forEach(r => {
			// Get file
			const file = { ...$files.byId[r.id] };

			file.hits = [];

			// Find each hit in the doc, format it, and add string to `hits`
			const matches = r.body.matchAll(highlightRegex);

			for (const match of matches) {
				// If matchCase is false, always add to hits
				// If matchCase is true, only add to hits if query is an exact match.
				if (!options.matchCase || options.matchCase && match[2] == query) {
					// Tweak formatting so highlight only applies to query string——not entire token.
					// For query = 'mark'
					// Before: '<span class="highlight">Marked</span>'
					// After: '<span class="highlight">Mark</span>ed'
					const newVersion = `${match[1]}${match[2]}${match[4]}${match[3]}`;

					const start = match.index;
					const end = match[0].length;
					const before = r.body.substr(start - 10, 10).replace(whitespaceAtStartRegex, "");
					const after = r.body.substr(start + end, 20);
					file.hits.push(`${before}${newVersion}${after}`);

					// Increment `tempNumHits`
					tempNumHits++;
				}
			}

			// If the file contains hits, push it to results array, and add the id.
			if (file.hits.length) {
				tempResults.push(file);
				tempResultIds.push(file.id);
			}
		});

		// When above is done, tell svelte to update to the new values
		$$invalidate(7, results = tempResults);

		$$invalidate(8, resultIds = tempResultIds);
		$$invalidate(9, numHits = tempNumHits);
	}

	// -------- REPLACE -------- //
	/**
 * Triggered by pressing 'Replace All' button
 */
	function replaceAll(isMetaKey) {
		if (replaceWith) {
			const filePaths = results.map(r => r.path);
			window.api.send("replaceAll", query, replaceWith, filePaths, options.matchCase, options.matchExactPhrase, isMetaKey);
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Search> was created with unknown prop '${key}'`);
	});

	const keydown_handler = evt => {
		if (!isSidebarFocused) return;

		switch (evt.key) {
			case "ArrowUp":
			case "ArrowDown":
				evt.preventDefault();
				arrowUpDown(evt.key, evt.shiftKey, evt.altKey, tab, tabId, resultIds, $files, $project);
				break;
		}
	};

	function inputtext_value_binding(value) {
		query = value;
		$$invalidate(0, query);
	}

	const click_handler = evt => updateOptions("matchCase", !options.matchCase);
	const click_handler_1 = evt => updateOptions("matchExactPhrase", !options.matchExactPhrase);
	const selectItem_handler = evt => updateOptions("lookIn", evt.detail.item.id);

	const toggle_handler = () => window.api.send("dispatch", {
		type: "SIDEBAR_TOGGLE_EXPANDABLE",
		tabId,
		expandable: "options"
	});

	function inputtext_value_binding_1(value) {
		replaceWith = value;
		$$invalidate(5, replaceWith);
	}

	const input_handler = evt => {
		if (evt.key == "Enter") {
			replaceAll(evt.metaKey);
		}
	};

	const mousedown_handler = evt => replaceAll(evt.metaKey);

	const toggle_handler_1 = () => window.api.send("dispatch", {
		type: "SIDEBAR_TOGGLE_EXPANDABLE",
		tabId,
		expandable: "replace"
	});

	$$self.$capture_state = () => ({
		arrowUpDown,
		project,
		sidebar,
		files,
		setContext,
		Checkbox,
		Expandable,
		Header,
		PopupButton,
		PushButton,
		InputText,
		SearchResult,
		Separator,
		FormRow,
		query,
		replaceWith,
		tabId,
		updateOptions,
		lookInOptions,
		setLookInMenuOptions,
		whitespaceAtStartRegex,
		results,
		resultIds,
		numHits,
		getResults,
		replaceAll,
		tab,
		$sidebar,
		isSidebarFocused,
		$project,
		options,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("query" in $$props) $$invalidate(0, query = $$props.query);
		if ("replaceWith" in $$props) $$invalidate(5, replaceWith = $$props.replaceWith);
		if ("tabId" in $$props) $$invalidate(11, tabId = $$props.tabId);
		if ("lookInOptions" in $$props) $$invalidate(6, lookInOptions = $$props.lookInOptions);
		if ("results" in $$props) $$invalidate(7, results = $$props.results);
		if ("resultIds" in $$props) $$invalidate(8, resultIds = $$props.resultIds);
		if ("numHits" in $$props) $$invalidate(9, numHits = $$props.numHits);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("isSidebarFocused" in $$props) $$invalidate(10, isSidebarFocused = $$props.isSidebarFocused);
		if ("options" in $$props) $$invalidate(3, options = $$props.options);
	};

	let tab;
	let isSidebarFocused;
	let options;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$sidebar*/ 16384) {
			 $$invalidate(1, tab = $sidebar.tabsById[tabId]);
		}

		if ($$self.$$.dirty[0] & /*$project*/ 4) {
			 $$invalidate(10, isSidebarFocused = $project.focusedSectionId == "sidebar");
		}

		if ($$self.$$.dirty[0] & /*tab*/ 2) {
			// -------- OPTIONS -------- //
			 $$invalidate(3, options = tab.options);
		}

		if ($$self.$$.dirty[0] & /*$files, tab*/ 18) {
			 (setLookInMenuOptions());
		}

		if ($$self.$$.dirty[0] & /*$files, query, options*/ 25) {
			 (getResults());
		}
	};

	return [
		query,
		tab,
		$project,
		options,
		$files,
		replaceWith,
		lookInOptions,
		results,
		resultIds,
		numHits,
		isSidebarFocused,
		tabId,
		updateOptions,
		replaceAll,
		$sidebar,
		keydown_handler,
		inputtext_value_binding,
		click_handler,
		click_handler_1,
		selectItem_handler,
		toggle_handler,
		inputtext_value_binding_1,
		input_handler,
		mousedown_handler,
		toggle_handler_1
	];
}

class Search extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-sqxjgh-style")) add_css$N();
		init(this, options, instance$R, create_fragment$R, safe_not_equal, {}, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Search",
			options,
			id: create_fragment$R.name
		});
	}
}

/* src/js/renderer/component/sidebar/Preview.svelte generated by Svelte v3.30.1 */

const { console: console_1$3 } = globals;
const file_1$3 = "src/js/renderer/component/sidebar/Preview.svelte";

function add_css$O() {
	var style = element("style");
	style.id = "svelte-1w3ftin-style";
	style.textContent = "@keyframes svelte-1w3ftin-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#preview.svelte-1w3ftin.svelte-1w3ftin{display:flex;flex-shrink:0;flex-direction:column;transition:flex 250ms ease-out;max-height:215px;overflow:hidden}#preview.isOpen.svelte-1w3ftin.svelte-1w3ftin{flex-basis:215px}#preview.svelte-1w3ftin.svelte-1w3ftin:not(.isOpen){flex-basis:30px}.content.svelte-1w3ftin.svelte-1w3ftin{flex-grow:1;margin:5px 10px 10px;display:flex;flex-direction:column}.doc-excerpt.svelte-1w3ftin.svelte-1w3ftin,.img-thumb.svelte-1w3ftin.svelte-1w3ftin{flex-grow:1;flex-basis:0;flex-shrink:0;overflow:hidden}.img-thumb.svelte-1w3ftin.svelte-1w3ftin{margin-bottom:10px}.doc-excerpt.svelte-1w3ftin p.svelte-1w3ftin{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:10;overflow:hidden;pointer-events:none;word-break:break-word;line-break:auto;line-height:16px;padding:0 0.75em;margin:0}.doc-excerpt.svelte-1w3ftin p .title.svelte-1w3ftin{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor)}.metadata.svelte-1w3ftin.svelte-1w3ftin{flex-grow:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (134:2) <Header title={'Details'}>
function create_default_slot_1$6(ctx) {
	let disclosurebutton;
	let current;

	disclosurebutton = new DisclosureButton({
			props: {
				width: 14,
				height: 14,
				padding: 6,
				left: /*$sidebar*/ ctx[0].width - 20,
				rotation: /*$sidebar*/ ctx[0].isPreviewOpen ? -90 : 90,
				tooltip: "Toggle Expanded"
			},
			$$inline: true
		});

	disclosurebutton.$on("toggle", /*toggle_handler*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(disclosurebutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(disclosurebutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const disclosurebutton_changes = {};
			if (dirty & /*$sidebar*/ 1) disclosurebutton_changes.left = /*$sidebar*/ ctx[0].width - 20;
			if (dirty & /*$sidebar*/ 1) disclosurebutton_changes.rotation = /*$sidebar*/ ctx[0].isPreviewOpen ? -90 : 90;
			disclosurebutton.$set(disclosurebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(disclosurebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(disclosurebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(disclosurebutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$6.name,
		type: "slot",
		source: "(134:2) <Header title={'Details'}>",
		ctx
	});

	return block;
}

// (187:32) 
function create_if_block_2$8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("AV");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$8.name,
		type: "if",
		source: "(187:32) ",
		ctx
	});

	return block;
}

// (167:33) 
function create_if_block_1$d(ctx) {
	let div0;
	let thumbnail;
	let t;
	let div1;
	let label;
	let current;

	thumbnail = new Thumbnail({
			props: {
				src: /*file*/ ctx[1].path,
				margin: "0 0 0 0"
			},
			$$inline: true
		});

	label = new Label({
			props: {
				align: "center",
				color: "primary",
				opacity: 0.75,
				typography: "label-normal-small",
				$$slots: { default: [create_default_slot$c] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(thumbnail.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(label.$$.fragment);
			attr_dev(div0, "class", "img-thumb svelte-1w3ftin");
			add_location(div0, file_1$3, 170, 6, 3666);
			attr_dev(div1, "class", "metadata svelte-1w3ftin");
			add_location(div1, file_1$3, 173, 6, 3766);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(thumbnail, div0, null);
			insert_dev(target, t, anchor);
			insert_dev(target, div1, anchor);
			mount_component(label, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const thumbnail_changes = {};
			if (dirty & /*file*/ 2) thumbnail_changes.src = /*file*/ ctx[1].path;
			thumbnail.$set(thumbnail_changes);
			const label_changes = {};

			if (dirty & /*$$scope, file*/ 66) {
				label_changes.$$scope = { dirty, ctx };
			}

			label.$set(label_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(thumbnail.$$.fragment, local);
			transition_in(label.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(thumbnail.$$.fragment, local);
			transition_out(label.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(thumbnail);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div1);
			destroy_component(label);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$d.name,
		type: "if",
		source: "(167:33) ",
		ctx
	});

	return block;
}

// (148:4) {#if file.type == 'doc'}
function create_if_block$o(ctx) {
	let div;
	let p;
	let span;

	let t0_value = (/*file*/ ctx[1].title
	? /*file*/ ctx[1].title
	: /*file*/ ctx[1].name) + "";

	let t0;
	let t1;
	let t2;
	let t3_value = /*file*/ ctx[1].excerpt + "";
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			span = element("span");
			t0 = text(t0_value);
			t1 = text(" -");
			t2 = space();
			t3 = text(t3_value);
			attr_dev(span, "class", "title svelte-1w3ftin");
			add_location(span, file_1$3, 153, 10, 3211);
			attr_dev(p, "class", "svelte-1w3ftin");
			add_location(p, file_1$3, 152, 8, 3197);
			attr_dev(div, "class", "doc-excerpt svelte-1w3ftin");
			add_location(div, file_1$3, 151, 6, 3163);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, span);
			append_dev(span, t0);
			append_dev(span, t1);
			append_dev(p, t2);
			append_dev(p, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*file*/ 2 && t0_value !== (t0_value = (/*file*/ ctx[1].title
			? /*file*/ ctx[1].title
			: /*file*/ ctx[1].name) + "")) set_data_dev(t0, t0_value);

			if (dirty & /*file*/ 2 && t3_value !== (t3_value = /*file*/ ctx[1].excerpt + "")) set_data_dev(t3, t3_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$o.name,
		type: "if",
		source: "(148:4) {#if file.type == 'doc'}",
		ctx
	});

	return block;
}

// (178:8) <Label align="center" color={'primary'} opacity={0.75} typography={'label-normal-small'}>
function create_default_slot$c(ctx) {
	let t0_value = prettySize(/*file*/ ctx[1].sizeInBytes, " ") + "";
	let t0;
	let t1;
	let t2_value = /*file*/ ctx[1].dimensions.width + "";
	let t2;
	let t3;
	let t4_value = /*file*/ ctx[1].dimensions.height + "";
	let t4;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = text(" - \n          ");
			t2 = text(t2_value);
			t3 = text(" x ");
			t4 = text(t4_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, t4, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*file*/ 2 && t0_value !== (t0_value = prettySize(/*file*/ ctx[1].sizeInBytes, " ") + "")) set_data_dev(t0, t0_value);
			if (dirty & /*file*/ 2 && t2_value !== (t2_value = /*file*/ ctx[1].dimensions.width + "")) set_data_dev(t2, t2_value);
			if (dirty & /*file*/ 2 && t4_value !== (t4_value = /*file*/ ctx[1].dimensions.height + "")) set_data_dev(t4, t4_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(t4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$c.name,
		type: "slot",
		source: "(178:8) <Label align=\\\"center\\\" color={'primary'} opacity={0.75} typography={'label-normal-small'}>",
		ctx
	});

	return block;
}

function create_fragment$S(ctx) {
	let div1;
	let separator;
	let t0;
	let header;
	let t1;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	separator = new Separator({ $$inline: true });

	header = new Header({
			props: {
				title: "Details",
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$o, create_if_block_1$d, create_if_block_2$8];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*file*/ ctx[1].type == "doc") return 0;
		if (/*file*/ ctx[1].type == "img") return 1;
		if (/*file*/ ctx[1].type == "av") return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(separator.$$.fragment);
			t0 = space();
			create_component(header.$$.fragment);
			t1 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			attr_dev(div0, "class", "content svelte-1w3ftin");
			add_location(div0, file_1$3, 146, 2, 3085);
			attr_dev(div1, "id", "preview");
			attr_dev(div1, "class", "svelte-1w3ftin");
			toggle_class(div1, "isOpen", /*isOpen*/ ctx[2]);
			add_location(div1, file_1$3, 129, 0, 2687);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(separator, div1, null);
			append_dev(div1, t0);
			mount_component(header, div1, null);
			append_dev(div1, t1);
			append_dev(div1, div0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div0, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};

			if (dirty & /*$$scope, $sidebar*/ 65) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div0, null);
				} else {
					if_block = null;
				}
			}

			if (dirty & /*isOpen*/ 4) {
				toggle_class(div1, "isOpen", /*isOpen*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(separator.$$.fragment, local);
			transition_in(header.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(separator.$$.fragment, local);
			transition_out(header.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(separator);
			destroy_component(header);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$S.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function shortenPath() {
	
}

function showFileOnDrive(filepath) {
	console.log(filepath);
}

function instance$S($$self, $$props, $$invalidate) {
	let $sidebar;
	let $files;
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(0, $sidebar = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(4, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Preview", slots, []);
	let file = {};
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<Preview> was created with unknown prop '${key}'`);
	});

	const toggle_handler = () => {
		window.api.send("dispatch", { type: "TOGGLE_SIDEBAR_PREVIEW" });
	};

	$$self.$capture_state = () => ({
		prettySize,
		sidebar,
		files,
		DisclosureButton,
		Header,
		Label,
		Separator,
		Thumbnail,
		file,
		shortenPath,
		showFileOnDrive,
		isOpen,
		$sidebar,
		activeTab,
		$files
	});

	$$self.$inject_state = $$props => {
		if ("file" in $$props) $$invalidate(1, file = $$props.file);
		if ("isOpen" in $$props) $$invalidate(2, isOpen = $$props.isOpen);
		if ("activeTab" in $$props) $$invalidate(3, activeTab = $$props.activeTab);
	};

	let isOpen;
	let activeTab;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sidebar*/ 1) {
			 $$invalidate(2, isOpen = $sidebar.isPreviewOpen);
		}

		if ($$self.$$.dirty & /*$sidebar*/ 1) {
			 $$invalidate(3, activeTab = $sidebar.tabsById[$sidebar.activeTabId]);
		}

		if ($$self.$$.dirty & /*activeTab, $files*/ 24) {
			 {
				if (activeTab.selected.length) {
					const fileId = activeTab.selected[activeTab.selected.length - 1];
					$$invalidate(1, file = $files.byId[fileId]);
				}
			}
		}
	};

	return [$sidebar, file, isOpen, activeTab, $files, toggle_handler];
}

class Preview$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1w3ftin-style")) add_css$O();
		init(this, options, instance$S, create_fragment$S, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Preview",
			options,
			id: create_fragment$S.name
		});
	}
}

/* src/js/renderer/component/sidebar/SideBar.svelte generated by Svelte v3.30.1 */
const file$N = "src/js/renderer/component/sidebar/SideBar.svelte";

function add_css$P() {
	var style = element("style");
	style.id = "svelte-1xwlo6a-style";
	style.textContent = "@keyframes svelte-1xwlo6a-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#sidebar.svelte-1xwlo6a.svelte-1xwlo6a{--state-sideBarWidth:100px;width:var(--state-sideBarWidth);height:100%;position:absolute;margin:0;display:flex;flex-direction:column;border-right:1px solid var(--separatorColor)}#sidebar.svelte-1xwlo6a>div.svelte-1xwlo6a{max-height:100%}#top-area.svelte-1xwlo6a.svelte-1xwlo6a{-webkit-app-region:drag;height:40px;flex:none}#tabs.svelte-1xwlo6a.svelte-1xwlo6a{height:30px;flex:none;display:flex;justify-content:center}#tabs.svelte-1xwlo6a ul.svelte-1xwlo6a{padding:0;margin:0;list-style-type:none;display:flex;flex-direction:row;align-items:center}#sidebar.svelte-1xwlo6a>.section{display:flex;flex-direction:column;flex-grow:1;overflow-y:hidden;overflow-x:visible}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lkZUJhci5zdmVsdGUiLCJzb3VyY2VzIjpbIlNpZGVCYXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHN0YXRlLCBwcm9qZWN0LCBzaWRlYmFyIH0gZnJvbSAnLi4vLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgVGFiIGZyb20gJy4vVGFiLnN2ZWx0ZSdcbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuLi91aS9TZXBhcmF0b3Iuc3ZlbHRlJ1xuICBpbXBvcnQgUHJvamVjdCBmcm9tICcuL1Byb2plY3Quc3ZlbHRlJ1xuICBpbXBvcnQgQWxsRG9jdW1lbnRzIGZyb20gJy4vQWxsRG9jdW1lbnRzLnN2ZWx0ZSdcbiAgaW1wb3J0IE1vc3RSZWNlbnQgZnJvbSAnLi9Nb3N0UmVjZW50LnN2ZWx0ZSdcbiAgaW1wb3J0IFRhZ3MgZnJvbSAnLi9UYWdzLnN2ZWx0ZSdcbiAgaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEuc3ZlbHRlJ1xuICBpbXBvcnQgQ2l0YXRpb25zIGZyb20gJy4vQ2l0YXRpb25zLnN2ZWx0ZSdcbiAgaW1wb3J0IFNlYXJjaCBmcm9tICcuL1NlYXJjaC5zdmVsdGUnXG4gIGltcG9ydCBQcmV2aWV3IGZyb20gJy4vUHJldmlldy5zdmVsdGUnXG4gIGltcG9ydCB7IHNldExheW91dEZvY3VzIH0gZnJvbSAnLi4vdWkvYWN0aW9ucyc7XG5cbiAgJDogbW9ub0NvbG9ycyA9ICRzdGF0ZS50aGVtZS5hY2NlbnRDb2xvciA9PSAnbW9ubydcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuI3NpZGViYXIge1xuICAtLXN0YXRlLXNpZGVCYXJXaWR0aDogMTAwcHg7XG4gIHdpZHRoOiB2YXIoLS1zdGF0ZS1zaWRlQmFyV2lkdGgpO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbWFyZ2luOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB2YXIoLS1zZXBhcmF0b3JDb2xvcik7XG59XG4jc2lkZWJhciA+IGRpdiB7XG4gIG1heC1oZWlnaHQ6IDEwMCU7XG59XG5cbiN0b3AtYXJlYSB7XG4gIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcbiAgaGVpZ2h0OiA0MHB4O1xuICBmbGV4OiBub25lO1xufVxuXG4jdGFicyB7XG4gIGhlaWdodDogMzBweDtcbiAgZmxleDogbm9uZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4jdGFicyB1bCB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4jc2lkZWJhciA+IDpnbG9iYWwoLnNlY3Rpb24pIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleC1ncm93OiAxO1xuICBvdmVyZmxvdy15OiBoaWRkZW47XG4gIG92ZXJmbG93LXg6IHZpc2libGU7XG59PC9zdHlsZT5cblxuPGRpdiBcbiAgaWQgPVwic2lkZWJhclwiIFxuICBzdHlsZT1cIi0tc3RhdGUtc2lkZUJhcldpZHRoOiAyNTBweFwiIFxuICBjbGFzczptb25vQ29sb3JzXG4gIHVzZTpzZXRMYXlvdXRGb2N1cz17e2N1cnJlbnQ6ICRwcm9qZWN0LmZvY3VzZWRTZWN0aW9uSWQsIHNldFRvOiAnc2lkZWJhcid9fVxuPlxuICBcbiAgPCEtLSBUb3AgYXJlYSAoZHJhZ2dhYmxlKSAtLT5cbiAgPGRpdiBpZD1cInRvcC1hcmVhXCI+XG4gIDwvZGl2PlxuXG4gIDwhLS0gVGFicyAtLT5cbiAgPGRpdiBpZD1cInRhYnNcIj5cbiAgICA8dWw+XG4gICAgICB7I2VhY2ggJHNpZGViYXIudGFic0FsbCBhcyBpZH1cbiAgICAgICAgPFRhYiB7aWR9IC8+XG4gICAgICB7L2VhY2h9XG4gICAgPC91bD5cbiAgPC9kaXY+XG5cbiAgPFNlcGFyYXRvciAvPlxuXG4gIDwhLS0gU2VjdGlvbnMgLS0+XG4gIHsjaWYgJHNpZGViYXIuYWN0aXZlVGFiSWQgPT0gJ3Byb2plY3QnfVxuICAgIDxQcm9qZWN0IC8+XG4gIHs6ZWxzZSBpZiAkc2lkZWJhci5hY3RpdmVUYWJJZCA9PSAnYWxsRG9jcyd9XG4gICAgPEFsbERvY3VtZW50cyAvPlxuICB7OmVsc2UgaWYgJHNpZGViYXIuYWN0aXZlVGFiSWQgPT0gJ21vc3RSZWNlbnQnfVxuICAgIDxNb3N0UmVjZW50IC8+XG4gIHs6ZWxzZSBpZiAkc2lkZWJhci5hY3RpdmVUYWJJZCA9PSAndGFncyd9XG4gICAgPFRhZ3MgLz5cbiAgezplbHNlIGlmICRzaWRlYmFyLmFjdGl2ZVRhYklkID09ICdtZWRpYSd9XG4gICAgPE1lZGlhIC8+XG4gIHs6ZWxzZSBpZiAkc2lkZWJhci5hY3RpdmVUYWJJZCA9PSAnY2l0YXRpb25zJ31cbiAgICA8Q2l0YXRpb25zIC8+XG4gIHs6ZWxzZSBpZiAkc2lkZWJhci5hY3RpdmVUYWJJZCA9PSAnc2VhcmNoJ31cbiAgICA8U2VhcmNoIC8+XG4gIHsvaWZ9XG5cbiAgPCEtLSA8UHJldmlldy8+IC0tPlxuXG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQndCLFdBQVcsMEJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxRQUFRLDhCQUFDLENBQUMsQUFDUixvQkFBb0IsQ0FBRSxLQUFLLENBQzNCLEtBQUssQ0FBRSxJQUFJLG9CQUFvQixDQUFDLENBQ2hDLE1BQU0sQ0FBRSxJQUFJLENBQ1osUUFBUSxDQUFFLFFBQVEsQ0FDbEIsTUFBTSxDQUFFLENBQUMsQ0FDVCxPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxNQUFNLENBQ3RCLFlBQVksQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksZ0JBQWdCLENBQUMsQUFDL0MsQ0FBQyxBQUNELHVCQUFRLENBQUcsR0FBRyxlQUFDLENBQUMsQUFDZCxVQUFVLENBQUUsSUFBSSxBQUNsQixDQUFDLEFBRUQsU0FBUyw4QkFBQyxDQUFDLEFBQ1Qsa0JBQWtCLENBQUUsSUFBSSxDQUN4QixNQUFNLENBQUUsSUFBSSxDQUNaLElBQUksQ0FBRSxJQUFJLEFBQ1osQ0FBQyxBQUVELEtBQUssOEJBQUMsQ0FBQyxBQUNMLE1BQU0sQ0FBRSxJQUFJLENBQ1osSUFBSSxDQUFFLElBQUksQ0FDVixPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxNQUFNLEFBQ3pCLENBQUMsQUFDRCxvQkFBSyxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQ1IsT0FBTyxDQUFFLENBQUMsQ0FDVixNQUFNLENBQUUsQ0FBQyxDQUNULGVBQWUsQ0FBRSxJQUFJLENBQ3JCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsV0FBVyxDQUFFLE1BQU0sQUFDckIsQ0FBQyxBQUVELHVCQUFRLENBQVcsUUFBUSxBQUFFLENBQUMsQUFDNUIsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsTUFBTSxDQUN0QixTQUFTLENBQUUsQ0FBQyxDQUNaLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLFVBQVUsQ0FBRSxPQUFPLEFBQ3JCLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (84:6) {#each $sidebar.tabsAll as id}
function create_each_block$8(ctx) {
	let tab;
	let current;

	tab = new Tab({
			props: { id: /*id*/ ctx[4] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(tab, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tab_changes = {};
			if (dirty & /*$sidebar*/ 4) tab_changes.id = /*id*/ ctx[4];
			tab.$set(tab_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tab.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$8.name,
		type: "each",
		source: "(84:6) {#each $sidebar.tabsAll as id}",
		ctx
	});

	return block;
}

// (105:45) 
function create_if_block_6$1(ctx) {
	let search;
	let current;
	search = new Search({ $$inline: true });

	const block = {
		c: function create() {
			create_component(search.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(search, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(105:45) ",
		ctx
	});

	return block;
}

// (103:48) 
function create_if_block_5$1(ctx) {
	let citations;
	let current;
	citations = new Citations({ $$inline: true });

	const block = {
		c: function create() {
			create_component(citations.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(citations, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(citations.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(citations.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(citations, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(103:48) ",
		ctx
	});

	return block;
}

// (101:44) 
function create_if_block_4$3(ctx) {
	let media;
	let current;
	media = new Media_1({ $$inline: true });

	const block = {
		c: function create() {
			create_component(media.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(media, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(media.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(media.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(media, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$3.name,
		type: "if",
		source: "(101:44) ",
		ctx
	});

	return block;
}

// (99:43) 
function create_if_block_3$4(ctx) {
	let tags;
	let current;
	tags = new Tags({ $$inline: true });

	const block = {
		c: function create() {
			create_component(tags.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(tags, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tags.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tags.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tags, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$4.name,
		type: "if",
		source: "(99:43) ",
		ctx
	});

	return block;
}

// (97:49) 
function create_if_block_2$9(ctx) {
	let mostrecent;
	let current;
	mostrecent = new MostRecent({ $$inline: true });

	const block = {
		c: function create() {
			create_component(mostrecent.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(mostrecent, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mostrecent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mostrecent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mostrecent, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$9.name,
		type: "if",
		source: "(97:49) ",
		ctx
	});

	return block;
}

// (95:46) 
function create_if_block_1$e(ctx) {
	let alldocuments;
	let current;
	alldocuments = new AllDocuments({ $$inline: true });

	const block = {
		c: function create() {
			create_component(alldocuments.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(alldocuments, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(alldocuments.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(alldocuments.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(alldocuments, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$e.name,
		type: "if",
		source: "(95:46) ",
		ctx
	});

	return block;
}

// (93:2) {#if $sidebar.activeTabId == 'project'}
function create_if_block$p(ctx) {
	let project_1;
	let current;
	project_1 = new Project({ $$inline: true });

	const block = {
		c: function create() {
			create_component(project_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(project_1, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(project_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(project_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(project_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$p.name,
		type: "if",
		source: "(93:2) {#if $sidebar.activeTabId == 'project'}",
		ctx
	});

	return block;
}

function create_fragment$T(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let ul;
	let t1;
	let separator;
	let t2;
	let current_block_type_index;
	let if_block;
	let setLayoutFocus_action;
	let current;
	let mounted;
	let dispose;
	let each_value = /*$sidebar*/ ctx[2].tabsAll;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	separator = new Separator({ $$inline: true });

	const if_block_creators = [
		create_if_block$p,
		create_if_block_1$e,
		create_if_block_2$9,
		create_if_block_3$4,
		create_if_block_4$3,
		create_if_block_5$1,
		create_if_block_6$1
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$sidebar*/ ctx[2].activeTabId == "project") return 0;
		if (/*$sidebar*/ ctx[2].activeTabId == "allDocs") return 1;
		if (/*$sidebar*/ ctx[2].activeTabId == "mostRecent") return 2;
		if (/*$sidebar*/ ctx[2].activeTabId == "tags") return 3;
		if (/*$sidebar*/ ctx[2].activeTabId == "media") return 4;
		if (/*$sidebar*/ ctx[2].activeTabId == "citations") return 5;
		if (/*$sidebar*/ ctx[2].activeTabId == "search") return 6;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			attr_dev(div0, "id", "top-area");
			attr_dev(div0, "class", "svelte-1xwlo6a");
			add_location(div0, file$N, 77, 2, 1728);
			attr_dev(ul, "class", "svelte-1xwlo6a");
			add_location(ul, file$N, 82, 4, 1796);
			attr_dev(div1, "id", "tabs");
			attr_dev(div1, "class", "svelte-1xwlo6a");
			add_location(div1, file$N, 81, 2, 1776);
			attr_dev(div2, "id", "sidebar");
			set_style(div2, "--state-sideBarWidth", "250px");
			attr_dev(div2, "class", "svelte-1xwlo6a");
			toggle_class(div2, "monoColors", /*monoColors*/ ctx[0]);
			add_location(div2, file$N, 69, 0, 1530);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(div2, t1);
			mount_component(separator, div2, null);
			append_dev(div2, t2);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(setLayoutFocus_action = setLayoutFocus.call(null, div2, {
					current: /*$project*/ ctx[1].focusedSectionId,
					setTo: "sidebar"
				}));

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$sidebar*/ 4) {
				each_value = /*$sidebar*/ ctx[2].tabsAll;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$8(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$8(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div2, null);
				} else {
					if_block = null;
				}
			}

			if (setLayoutFocus_action && is_function(setLayoutFocus_action.update) && dirty & /*$project*/ 2) setLayoutFocus_action.update.call(null, {
				current: /*$project*/ ctx[1].focusedSectionId,
				setTo: "sidebar"
			});

			if (dirty & /*monoColors*/ 1) {
				toggle_class(div2, "monoColors", /*monoColors*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(separator.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(separator.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			destroy_component(separator);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$T.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$T($$self, $$props, $$invalidate) {
	let $state;
	let $project;
	let $sidebar;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(3, $state = $$value));
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(1, $project = $$value));
	validate_store(sidebar, "sidebar");
	component_subscribe($$self, sidebar, $$value => $$invalidate(2, $sidebar = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SideBar", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SideBar> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		state,
		project,
		sidebar,
		Tab,
		Separator,
		Project,
		AllDocuments,
		MostRecent,
		Tags,
		Media: Media_1,
		Citations,
		Search,
		Preview: Preview$1,
		setLayoutFocus,
		monoColors,
		$state,
		$project,
		$sidebar
	});

	$$self.$inject_state = $$props => {
		if ("monoColors" in $$props) $$invalidate(0, monoColors = $$props.monoColors);
	};

	let monoColors;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$state*/ 8) {
			 $$invalidate(0, monoColors = $state.theme.accentColor == "mono");
		}
	};

	return [monoColors, $project, $sidebar, $state];
}

class SideBar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1xwlo6a-style")) add_css$P();
		init(this, options, instance$T, create_fragment$T, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SideBar",
			options,
			id: create_fragment$T.name
		});
	}
}

/* src/js/renderer/component/main/Toolbar.svelte generated by Svelte v3.30.1 */
const file$O = "src/js/renderer/component/main/Toolbar.svelte";

function add_css$Q() {
	var style = element("style");
	style.id = "svelte-7nqc2a-style";
	style.textContent = "@keyframes svelte-7nqc2a-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#address-bar.svelte-7nqc2a{-webkit-app-region:drag;width:100%;height:40px;flex:none;display:flex;flex-direction:row;align-items:center;padding:0 5px;overflow:hidden;position:relative}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbGJhci5zdmVsdGUiLCJzb3VyY2VzIjpbIlRvb2xiYXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCBJY29uQnV0dG9uIGZyb20gXCIuLi91aS9JY29uQnV0dG9uLnN2ZWx0ZVwiO1xuXHRpbXBvcnQgQWRkcmVzc0JhciBmcm9tIFwiLi9BZGRyZXNzQmFyLnN2ZWx0ZVwiO1xuXG5cdGZ1bmN0aW9uIHRvZG8oKSB7XG5cdFx0Ly8gVE9ET1xuXHR9XG5cdFx0XG48L3NjcmlwdD5cblxuPHN0eWxlIHR5cGU9XCJ0ZXh0L3Njc3NcIj5Aa2V5ZnJhbWVzIHNlbGVjdEZpZWxkIHtcbiAgZnJvbSB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMjBweCB0cmFuc3BhcmVudCwgMCAwIDAgMjBweCB0cmFuc3BhcmVudDtcbiAgfVxuICB0byB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSksIDAgMCAwIDRweCB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICB9XG59XG4jYWRkcmVzcy1iYXIge1xuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZsZXg6IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgNXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59PC9zdHlsZT5cblxuPGRpdiBpZD1cImFkZHJlc3MtYmFyXCI+XG5cdDxJY29uQnV0dG9uIHRvb2x0aXA9eydTaG93IHNpZGViYXInfSBpY29uPXsnaW1nLXNpZGViYXItbGVmdCd9IG9uOm1vdXNlZG93bj17dG9kb30gLz5cblx0PEFkZHJlc3NCYXIgLz5cblx0PEljb25CdXR0b24gaWNvbj17J2ltZy1yZWN0YW5nbGUtZ3JpZC0yeDInfSBvbjptb3VzZWRvd249e3RvZG99IC8+XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVXdCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxZQUFZLGNBQUMsQ0FBQyxBQUNaLGtCQUFrQixDQUFFLElBQUksQ0FDeEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLElBQUksQ0FBRSxJQUFJLENBQ1YsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsR0FBRyxDQUNuQixXQUFXLENBQUUsTUFBTSxDQUNuQixPQUFPLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FDZCxRQUFRLENBQUUsTUFBTSxDQUNoQixRQUFRLENBQUUsUUFBUSxBQUNwQixDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$U(ctx) {
	let div;
	let iconbutton0;
	let t0;
	let addressbar;
	let t1;
	let iconbutton1;
	let current;

	iconbutton0 = new IconButton({
			props: {
				tooltip: "Show sidebar",
				icon: "img-sidebar-left"
			},
			$$inline: true
		});

	iconbutton0.$on("mousedown", todo);
	addressbar = new AddressBar({ $$inline: true });

	iconbutton1 = new IconButton({
			props: { icon: "img-rectangle-grid-2x2" },
			$$inline: true
		});

	iconbutton1.$on("mousedown", todo);

	const block = {
		c: function create() {
			div = element("div");
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			create_component(addressbar.$$.fragment);
			t1 = space();
			create_component(iconbutton1.$$.fragment);
			attr_dev(div, "id", "address-bar");
			attr_dev(div, "class", "svelte-7nqc2a");
			add_location(div, file$O, 31, 0, 605);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(iconbutton0, div, null);
			append_dev(div, t0);
			mount_component(addressbar, div, null);
			append_dev(div, t1);
			mount_component(iconbutton1, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(addressbar.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(addressbar.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(iconbutton0);
			destroy_component(addressbar);
			destroy_component(iconbutton1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$U.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function todo() {
	
} // TODO

function instance$U($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Toolbar", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Toolbar> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ IconButton, AddressBar, todo });
	return [];
}

class Toolbar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-7nqc2a-style")) add_css$Q();
		init(this, options, instance$U, create_fragment$U, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Toolbar",
			options,
			id: create_fragment$U.name
		});
	}
}

/* src/js/renderer/component/ui/Menu.svelte generated by Svelte v3.30.1 */
const file$P = "src/js/renderer/component/ui/Menu.svelte";

function add_css$R() {
	var style = element("style");
	style.id = "svelte-1fwu7h0-style";
	style.textContent = "@keyframes svelte-1fwu7h0-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#menuCover.svelte-1fwu7h0.svelte-1fwu7h0{position:fixed;width:100%;height:100%;background:transparent;z-index:99}.menu.isOpen.svelte-1fwu7h0.svelte-1fwu7h0{display:block}.menu.svelte-1fwu7h0.svelte-1fwu7h0:not(.isOpen){display:none}.menu.svelte-1fwu7h0.svelte-1fwu7h0{margin:0;padding:0;text-indent:0;list-style-type:none;position:fixed;user-select:none;z-index:100;overflow:hidden;backdrop-filter:blur(8px);border-radius:5.5px;padding:5px}.menu.svelte-1fwu7h0 li.svelte-1fwu7h0{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;cursor:default;white-space:nowrap;display:flex;align-items:center;outline:none;border-radius:4px;height:22px}.menu.svelte-1fwu7h0 li.svelte-1fwu7h0::before{content:\"\";-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;display:inline-block;width:9px;height:9px;margin:0 5px 0 5px;-webkit-mask-size:contain;-webkit-mask-image:var(--img-checkmark-heavy)}.menu.svelte-1fwu7h0 hr.svelte-1fwu7h0{border:none;border-bottom:1px solid var(--separatorColor);margin:5px 10px}.menu.compact.svelte-1fwu7h0 li.svelte-1fwu7h0{height:20px;border-radius:3.5px}.menu.svelte-1fwu7h0.svelte-1fwu7h0{background:var(--menuBackgroundColor)}@media(prefers-color-scheme: dark){.menu.svelte-1fwu7h0.svelte-1fwu7h0{border:1px solid rgba(255, 255, 255, 0.2);box-shadow:0 0 0 0.5px black}}@media(prefers-color-scheme: light){.menu.svelte-1fwu7h0.svelte-1fwu7h0{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.5), 0 0 0 0.5px rgba(0, 0, 0, 0.12), 0 5px 16px 0 rgba(0, 0, 0, 0.2)}}li.svelte-1fwu7h0.svelte-1fwu7h0{color:var(--labelColor)}li.svelte-1fwu7h0.svelte-1fwu7h0::before{opacity:0;background:var(--labelColor)}li.checked.svelte-1fwu7h0.svelte-1fwu7h0::before{opacity:1}li.hover.svelte-1fwu7h0.svelte-1fwu7h0{background-color:var(--controlAccentColor);color:white}li.hover.svelte-1fwu7h0.svelte-1fwu7h0::before{background:white}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudS5zdmVsdGUiLCJzb3VyY2VzIjpbIk1lbnUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgaW1wb3J0IHsgd2FpdCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscyc7XG4gIGltcG9ydCB7IGNsb3NlTWVudSwgbWVudSB9IGZyb20gXCIuLi8uLi9NZW51TWFuYWdlclwiO1xuICBpbXBvcnQgeyBpc1dpbmRvd0ZvY3VzZWQgfSBmcm9tIFwiLi4vLi4vU3RhdGVNYW5hZ2VyXCI7XG4gIGltcG9ydCB7IHNldFNpemUgfSBmcm9tICcuL2FjdGlvbnMnO1xuICBpbXBvcnQgeyB0aWNrIH0gZnJvbSAnc3ZlbHRlJztcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGxldCBpc09wZW4gPSBmYWxzZVxuICBsZXQgaWQgPSAnJ1xuICBsZXQgaXRlbXMgPSBbXVxuICBsZXQgc2VsZWN0ZWRJdGVtID0gdW5kZWZpbmVkXG4gIGxldCB0eXBlID0gJ3B1bGxkb3duJ1xuICBsZXQgY29tcGFjdCA9IGZhbHNlXG4gIGxldCBwb3NpdGlvbiA9IHsgeDogMCwgeTogMH1cbiAgbGV0IHdpZHRoID0gJzBweCdcblxuICBsZXQgaXNMaXZlID0gZmFsc2VcbiAgbGV0IGlzQ2xvc2luZyA9IGZhbHNlXG4gIGxldCBzZWxmIC8vIGB1bGAgZG9tIGVsZW1lbnRcblxuICAkOiBzZWxlY3RlZEluZGV4ID0gdW5kZWZpbmVkIC8vIHRyYWNrcyB3aGljaCBpdGVtIGlzICdzZWxlY3RlZCcgKGhvdmVyZWQsIGFycm93ZWQtdG8sIGV0YylcbiAgXG4gICAkOiAkbWVudSwgZGV0ZXJtaW5lU3RhdGUoKVxuXG4gICBhc3luYyBmdW5jdGlvbiBkZXRlcm1pbmVTdGF0ZSgpIHtcblxuICAgIGNvbnN0IHdhc0Nsb3NlZElzT3BlbiA9ICFpc09wZW4gJiYgJG1lbnUuaXNPcGVuXG4gICAgY29uc3Qgd2FzT3BlbklzQ2xvc2VkID0gaXNPcGVuICYmICEkbWVudS5pc09wZW5cblxuICAgIGlmICh3YXNDbG9zZWRJc09wZW4pIHtcbiAgICAgIGlzTGl2ZSA9IGZhbHNlXG4gICAgICB1cGRhdGVWYWx1ZXMoKVxuICAgICAgYXdhaXQgdGljaygpO1xuICAgICAgc2V0UG9zaXRpb24oKVxuICAgICAgb3BlbigpXG4gICAgfSBlbHNlIGlmICh3YXNPcGVuSXNDbG9zZWQpIHtcbiAgICAgIC8vIHVwZGF0ZVZhbHVlcygpXG4gICAgICBpc09wZW4gPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGF0ZSBsb2NhbCBjb3BpZXMgb2Ygc3RvcmUgdmFsdWVzLiBUaGVzZSB2YWx1ZXMgZHJpdmUgbG9jYWwgcmVhY3Rpdml0eSwgYW5kIGFyZSB1c2VkIHRvIGRldGVybWluZSB3aGF0IGNoYW5nZWQgaW4gc3RhdGUuXG4gICAqL1xuICAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKCkge1xuXG4gICAgaXNPcGVuID0gJG1lbnUuaXNPcGVuXG4gICAgaWQgPSAkbWVudS5pZFxuICAgIGl0ZW1zID0gJG1lbnUuaXRlbXNcbiAgICB0eXBlID0gJG1lbnUudHlwZVxuICAgIGNvbXBhY3QgPSAkbWVudS5jb21wYWN0XG4gICAgcG9zaXRpb24gPSAkbWVudS5wb3NpdGlvblxuICAgIHdpZHRoID0gJG1lbnUud2lkdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcG9zaXRpb24sIGRlcGVuZGluZyBvbiB0aGUgbWVudSB0eXBlLiBQb3B1cHMgYXBwZWFyIHdpdGggdGhlIGNoZWNrZWQgaXRlbSBwb3NpdGlvbmVkIGRpcmVjdGx5IG92ZXIgdGhlIGJ1dHRvbi4gUHVsbGRvd25zIGFwcGVhYXIgYmVsb3cgdGhlIGJ1dHRvbi5cbiAgICovXG4gICBhc3luYyBmdW5jdGlvbiBzZXRQb3NpdGlvbigpIHtcbiAgICBpZiAoIXNlbGYpIHJldHVyblxuICAgIGNvbnN0IHsgeCwgeSB9ID0gcG9zaXRpb25cbiAgICBpZiAodHlwZSA9PSAncHVsbGRvd24nKSB7XG4gICAgICBzZWxmLnN0eWxlLnRvcCA9IGAke3l9cHhgXG4gICAgICBzZWxmLnN0eWxlLmxlZnQgPSBgJHt4fXB4YFxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncG9wdXAnKSB7XG4gICAgICBjb25zdCBjaGVja2VkRWwgPSBzZWxmLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2VkJylcbiAgICAgIHNlbGYuc3R5bGUudG9wID0gYCR7eSAtIGNoZWNrZWRFbC5vZmZzZXRUb3AgLSBjaGVja2VkRWwub2Zmc2V0SGVpZ2h0fXB4YFxuICAgICAgc2VsZi5zdHlsZS5sZWZ0ID0gYCR7eCAtIGNoZWNrZWRFbC5vZmZzZXRMZWZ0IC0gKGNvbXBhY3QgPyA2IDogMTIpfXB4YFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGEgZmV3IGJlYXRzIGJlZm9yZSBcImFybWluZ1wiIHRoZSBidXR0b25zLiBXZSBkbyB0aGlzIHNvIHdlIGNhbiAxKSBjbGljayB0aGUgbWVudSB3aXRob3V0IHRoZSBtb3VzZXVwIGV2ZW50IHRyaWdnZXJpbmcgYSBzZWxlY3Rpb24gKHdpdGhpbiB0aGUgYXJtaW5nIHRpbWVyIHdpbmRvdyksIG9yIDIpIHByZXNzLWhvbGQtcmVsZWFzZSB0byBzZWxlY3QgYW4gaXRlbSAoYWZ0ZXIgdGhlIGFybWluZyB0aW1pbmcgd2luZG93IGlzIGZpbmlzaGVkKS5cbiAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gb3BlbigpIHtcbiAgICBzZWxlY3RlZEluZGV4ID0gdW5kZWZpbmVkIC8vIFNvIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIGF0IGZpcnN0LlxuICAgIGlzQ2xvc2luZyA9IGZhbHNlXG4gICAgYXdhaXQgd2FpdCgyNTApXG4gICAgaXNMaXZlID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIE9uIGl0ZW0gc2VsZWN0ZWQsIHBsYXkgZXhpdCBhbmltYXRpb24sIHRoZW4gY2FsbCBgY2xvc2VNZW51YCB0byB1cGRhdGUgc3RvcmUgYGlzT3BlbmAgc3RhdGUuXG4gICAqL1xuICAgYXN5bmMgZnVuY3Rpb24gc2VsZWN0SXRlbShzZWxlY3RlZEl0ZW0pIHtcblxuICAgIGlzQ2xvc2luZyA9IHRydWVcblxuICAgIGNvbnN0IHNlbGVjdGVkRWwgPSBzZWxmLnF1ZXJ5U2VsZWN0b3IoJy5ob3ZlcicpXG5cbiAgICAvLyBGbGFzaCBob3ZlciBzdGF0ZSBvbi9vZmZcbiAgICBzZWxlY3RlZEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyJylcbiAgICBhd2FpdCB3YWl0KDYwKVxuICAgIHNlbGVjdGVkRWwuY2xhc3NMaXN0LmFkZCgnaG92ZXInKVxuXG4gICAgLy8gRmFkZSBvdXQgbWVudVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IHNlbGYuYW5pbWF0ZShbXG4gICAgICB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIHsgb3BhY2l0eTogMCB9LFxuICAgIF0sIDI1MClcbiAgICBcbiAgICAvLyBVcGRhdGUgc3RvcmVcbiAgICBhbmltYXRpb24ub25maW5pc2ggPSAoKSA9PiB7XG4gICAgICBjbG9zZU1lbnUoc2VsZWN0ZWRJdGVtKVxuICAgIH1cbiAgfVxuXG4gIFxuICAvKipcbiAgICogVHJpZ2dlcmVkIGJ5IGBrZXlkb3duYCBvbiB3aW5kb3cuIExldHMgdGhlIHVzZXIgaW50ZXJhY3Qgd2l0aCB0aGUgbWVudSB2aWEgdGhlIGtleWJvYXJkLlxuICAgKi9cbiAgZnVuY3Rpb24gb25LZXlkb3duKGRvbUV2ZW50KSB7XG4gICAgaWYgKCFpc09wZW4gfHwgIWlzTGl2ZSB8fCBpc0Nsb3NpbmcpIHJldHVyblxuICAgIGRvbUV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIHN3aXRjaCAoZG9tRXZlbnQuY29kZSkge1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgY2xvc2VNZW51KHVuZGVmaW5lZClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtID0gaXRlbXNbc2VsZWN0ZWRJbmRleF1cbiAgICAgICAgc2VsZWN0SXRlbShzZWxlY3RlZEl0ZW0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPiAwKSB7XG4gICAgICAgICAgc2VsZWN0ZWRJbmRleC0tXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRJbmRleCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxlY3RlZEluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBzZWxlY3RlZEluZGV4KytcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZEluZGV4ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSAwXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuI21lbnVDb3ZlciB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIHotaW5kZXg6IDk5O1xufVxuXG4ubWVudS5pc09wZW4ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLm1lbnU6bm90KC5pc09wZW4pIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLm1lbnUge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIHRleHQtaW5kZW50OiAwO1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHotaW5kZXg6IDEwMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDhweCk7XG4gIGJvcmRlci1yYWRpdXM6IDUuNXB4O1xuICBwYWRkaW5nOiA1cHg7XG59XG4ubWVudSBsaSB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wOHB4O1xuICBjdXJzb3I6IGRlZmF1bHQ7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgaGVpZ2h0OiAyMnB4O1xufVxuLm1lbnUgbGk6OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIC13ZWJraXQtbWFzay1zaXplOiBjb250YWluO1xuICAtd2Via2l0LW1hc2stcG9zaXRpb246IGNlbnRlcjtcbiAgLXdlYmtpdC1tYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiA5cHg7XG4gIGhlaWdodDogOXB4O1xuICBtYXJnaW46IDAgNXB4IDAgNXB4O1xuICAtd2Via2l0LW1hc2stc2l6ZTogY29udGFpbjtcbiAgLXdlYmtpdC1tYXNrLWltYWdlOiB2YXIoLS1pbWctY2hlY2ttYXJrLWhlYXZ5KTtcbn1cbi5tZW51IGhyIHtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tc2VwYXJhdG9yQ29sb3IpO1xuICBtYXJnaW46IDVweCAxMHB4O1xufVxuXG4ubWVudS5jb21wYWN0IGxpIHtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAzLjVweDtcbn1cblxuLm1lbnUge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1tZW51QmFja2dyb3VuZENvbG9yKTtcbn1cbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcbiAgLm1lbnUge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjVweCBibGFjaztcbiAgfVxufVxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpIHtcbiAgLm1lbnUge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMC41cHggMCAwIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMCAwIDAgMC41cHggcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCA1cHggMTZweCAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgfVxufVxuXG5saSB7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cbmxpOjpiZWZvcmUge1xuICBvcGFjaXR5OiAwO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cblxubGkuY2hlY2tlZDo6YmVmb3JlIHtcbiAgb3BhY2l0eTogMTtcbn1cblxubGkuaG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb250cm9sQWNjZW50Q29sb3IpO1xuICBjb2xvcjogd2hpdGU7XG59XG5saS5ob3Zlcjo6YmVmb3JlIHtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG59PC9zdHlsZT5cblxuPHN2ZWx0ZTpvcHRpb25zIGFjY2Vzc29ycz17dHJ1ZX0vPlxuXG48c3ZlbHRlOndpbmRvdyBvbjprZXlkb3duPXtvbktleWRvd259IC8+XG5cbjx1bFxuICBjbGFzcz1cIm1lbnVcIlxuICBjbGFzczppc09wZW5cbiAgY2xhc3M6Y29tcGFjdFxuICBiaW5kOnRoaXM9e3NlbGZ9XG4gIHVzZTpzZXRTaXplPXt7d2lkdGh9fVxuICBvbjptb3VzZWxlYXZlPXsoKSA9PiB7XG4gICAgaWYgKGlzQ2xvc2luZykgcmV0dXJuXG4gICAgc2VsZWN0ZWRJbmRleCA9IHVuZGVmaW5lZFxuICB9fVxuPlxuICB7I2VhY2ggaXRlbXMgYXMgaXRlbSwgaW5kZXh9XG4gICAgPGxpXG4gICAgICBjbGFzczpjaGVja2VkPXtpdGVtLmNoZWNrZWR9XG4gICAgICBjbGFzczpob3Zlcj17aW5kZXggPT0gc2VsZWN0ZWRJbmRleH1cbiAgICAgIG9uOm1vdXNlZW50ZXI9eygpID0+IHtcbiAgICAgICAgaWYgKGlzQ2xvc2luZykgcmV0dXJuIFxuICAgICAgICBzZWxlY3RlZEluZGV4ID0gaW5kZXhcbiAgICAgIH19XG4gICAgICBvbjptb3VzZXVwPXsoKSA9PiB7XG4gICAgICAgIGlmICghaXNMaXZlKSByZXR1cm5cbiAgICAgICAgc2VsZWN0SXRlbShpdGVtKVxuICAgICAgfX1cbiAgICAgID5cbiAgICAgIHtpdGVtLmxhYmVsfVxuICAgIDwvbGk+XG4gICAgeyNpZiBpdGVtLnNlcGFyYXRvckFmdGVyfVxuICAgICAgPGhyIG9uOm1vdXNlZW50ZXI9eygpID0+IHtcbiAgICAgICAgaWYgKGlzQ2xvc2luZykgcmV0dXJuXG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSB1bmRlZmluZWRcbiAgICAgIH19Lz5cbiAgICB7L2lmfVxuICB7L2VhY2h9XG48L3VsPlxuXG48IS0tICBcbkNsb3NlIHRoZSBtZW51IHdoZW4gdGhlIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIG1lbnUuIE5PVEU6IElmIHRoZSB1c2VyIGNsaWNrcyB0aGUgYnV0dG9uIHRoYXQgb3BlbmVkIHRoZSBtZW51LCB0aGF0IHdpbGwgYWxzbyBjbG9zZSB0aGUgbWVudS4gVGhlIGJ1dHRvbiBsb2dpYyB3aWxsIGhhbmRsZSB0aGUgY2xvc2UgYWN0aW9uIGFuZCBzdG9wIGV2ZW50IHByb3BhZ2F0aW9uLCBhbmQgdGhpcyBjb2RlIHBhdGggd2lsbCBub3QgYmUgcmVhY2hlZC4gSWYgd2UgZG9uJ3QgdGFrZSB0aGlzIGFwcHJvYWNoLCB0aGlzIGNvZGUgd2lsbCBjbG9zZSB0aGUgbWVudSBhcyBzb29uIGFzIGl0J3Mgb3BlbmVkLlxuLS0+XG57I2lmIGlzT3BlbiAmJiBpc0xpdmV9XG4gIDxkaXYgXG4gICAgaWQ9XCJtZW51Q292ZXJcIlxuICAgIG9uOm1vdXNlZG93bj17KCkgPT4ge1xuICAgICAgLy8gQ2FsbCBgY2xvc2VNZW51YCB0byB1cGRhdGUgc3RvcmUgYGlzT3BlbmAgc3RhdGVcbiAgICAgIGNsb3NlTWVudSh1bmRlZmluZWQpXG4gICAgfX1cbiAgPlxuICA8L2Rpdj5cbnsvaWZ9Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlKd0IsV0FBVywwQkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELFVBQVUsOEJBQUMsQ0FBQyxBQUNWLFFBQVEsQ0FBRSxLQUFLLENBQ2YsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxXQUFXLENBQ3ZCLE9BQU8sQ0FBRSxFQUFFLEFBQ2IsQ0FBQyxBQUVELEtBQUssT0FBTyw4QkFBQyxDQUFDLEFBQ1osT0FBTyxDQUFFLEtBQUssQUFDaEIsQ0FBQyxBQUVELG1DQUFLLEtBQUssT0FBTyxDQUFDLEFBQUMsQ0FBQyxBQUNsQixPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFFRCxLQUFLLDhCQUFDLENBQUMsQUFDTCxNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLENBQ1YsV0FBVyxDQUFFLENBQUMsQ0FDZCxlQUFlLENBQUUsSUFBSSxDQUNyQixRQUFRLENBQUUsS0FBSyxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLE9BQU8sQ0FBRSxHQUFHLENBQ1osUUFBUSxDQUFFLE1BQU0sQ0FDaEIsZUFBZSxDQUFFLEtBQUssR0FBRyxDQUFDLENBQzFCLGFBQWEsQ0FBRSxLQUFLLENBQ3BCLE9BQU8sQ0FBRSxHQUFHLEFBQ2QsQ0FBQyxBQUNELG9CQUFLLENBQUMsRUFBRSxlQUFDLENBQUMsQUFDUixXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLE1BQU0sQ0FBRSxPQUFPLENBQ2YsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsT0FBTyxDQUFFLElBQUksQ0FDYixXQUFXLENBQUUsTUFBTSxDQUNuQixPQUFPLENBQUUsSUFBSSxDQUNiLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLE1BQU0sQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUNELG9CQUFLLENBQUMsaUJBQUUsUUFBUSxBQUFDLENBQUMsQUFDaEIsT0FBTyxDQUFFLEVBQUUsQ0FDWCxpQkFBaUIsQ0FBRSxPQUFPLENBQzFCLHFCQUFxQixDQUFFLE1BQU0sQ0FDN0IsbUJBQW1CLENBQUUsU0FBUyxDQUM5QixPQUFPLENBQUUsWUFBWSxDQUNyQixLQUFLLENBQUUsR0FBRyxDQUNWLE1BQU0sQ0FBRSxHQUFHLENBQ1gsTUFBTSxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FDbkIsaUJBQWlCLENBQUUsT0FBTyxDQUMxQixrQkFBa0IsQ0FBRSxJQUFJLHFCQUFxQixDQUFDLEFBQ2hELENBQUMsQUFDRCxvQkFBSyxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQ1IsTUFBTSxDQUFFLElBQUksQ0FDWixhQUFhLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixDQUFDLENBQzlDLE1BQU0sQ0FBRSxHQUFHLENBQUMsSUFBSSxBQUNsQixDQUFDLEFBRUQsS0FBSyx1QkFBUSxDQUFDLEVBQUUsZUFBQyxDQUFDLEFBQ2hCLE1BQU0sQ0FBRSxJQUFJLENBQ1osYUFBYSxDQUFFLEtBQUssQUFDdEIsQ0FBQyxBQUVELEtBQUssOEJBQUMsQ0FBQyxBQUNMLFVBQVUsQ0FBRSxJQUFJLHFCQUFxQixDQUFDLEFBQ3hDLENBQUMsQUFDRCxNQUFNLEFBQUMsdUJBQXVCLElBQUksQ0FBQyxBQUFDLENBQUMsQUFDbkMsS0FBSyw4QkFBQyxDQUFDLEFBQ0wsTUFBTSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDMUMsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEFBQy9CLENBQUMsQUFDSCxDQUFDLEFBQ0QsTUFBTSxBQUFDLHVCQUF1QixLQUFLLENBQUMsQUFBQyxDQUFDLEFBQ3BDLEtBQUssOEJBQUMsQ0FBQyxBQUNMLFVBQVUsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxBQUMxSCxDQUFDLEFBQ0gsQ0FBQyxBQUVELEVBQUUsOEJBQUMsQ0FBQyxBQUNGLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxBQUMxQixDQUFDLEFBQ0QsZ0NBQUUsUUFBUSxBQUFDLENBQUMsQUFDVixPQUFPLENBQUUsQ0FBQyxDQUNWLFVBQVUsQ0FBRSxJQUFJLFlBQVksQ0FBQyxBQUMvQixDQUFDLEFBRUQsRUFBRSxzQ0FBUSxRQUFRLEFBQUMsQ0FBQyxBQUNsQixPQUFPLENBQUUsQ0FBQyxBQUNaLENBQUMsQUFFRCxFQUFFLE1BQU0sOEJBQUMsQ0FBQyxBQUNSLGdCQUFnQixDQUFFLElBQUksb0JBQW9CLENBQUMsQ0FDM0MsS0FBSyxDQUFFLEtBQUssQUFDZCxDQUFDLEFBQ0QsRUFBRSxvQ0FBTSxRQUFRLEFBQUMsQ0FBQyxBQUNoQixVQUFVLENBQUUsS0FBSyxBQUNuQixDQUFDIn0= */";
	append_dev(document.head, style);
}

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

// (285:4) {#if item.separatorAfter}
function create_if_block_1$f(ctx) {
	let hr;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			hr = element("hr");
			attr_dev(hr, "class", "svelte-1fwu7h0");
			add_location(hr, file$P, 285, 6, 6510);
		},
		m: function mount(target, anchor) {
			insert_dev(target, hr, anchor);

			if (!mounted) {
				dispose = listen_dev(hr, "mouseenter", /*mouseenter_handler_1*/ ctx[13], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(hr);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$f.name,
		type: "if",
		source: "(285:4) {#if item.separatorAfter}",
		ctx
	});

	return block;
}

// (270:2) {#each items as item, index}
function create_each_block$9(ctx) {
	let li;
	let t0_value = /*item*/ ctx[26].label + "";
	let t0;
	let t1;
	let if_block_anchor;
	let mounted;
	let dispose;

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[11](/*index*/ ctx[28]);
	}

	function mouseup_handler() {
		return /*mouseup_handler*/ ctx[12](/*item*/ ctx[26]);
	}

	let if_block = /*item*/ ctx[26].separatorAfter && create_if_block_1$f(ctx);

	const block = {
		c: function create() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(li, "class", "svelte-1fwu7h0");
			toggle_class(li, "checked", /*item*/ ctx[26].checked);
			toggle_class(li, "hover", /*index*/ ctx[28] == /*selectedIndex*/ ctx[7]);
			add_location(li, file$P, 270, 4, 6168);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(li, "mouseenter", mouseenter_handler, false, false, false),
					listen_dev(li, "mouseup", mouseup_handler, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*items*/ 2 && t0_value !== (t0_value = /*item*/ ctx[26].label + "")) set_data_dev(t0, t0_value);

			if (dirty & /*items*/ 2) {
				toggle_class(li, "checked", /*item*/ ctx[26].checked);
			}

			if (dirty & /*selectedIndex*/ 128) {
				toggle_class(li, "hover", /*index*/ ctx[28] == /*selectedIndex*/ ctx[7]);
			}

			if (/*item*/ ctx[26].separatorAfter) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$f(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$9.name,
		type: "each",
		source: "(270:2) {#each items as item, index}",
		ctx
	});

	return block;
}

// (297:0) {#if isOpen && isLive}
function create_if_block$q(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "id", "menuCover");
			attr_dev(div, "class", "svelte-1fwu7h0");
			add_location(div, file$P, 297, 2, 7018);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "mousedown", /*mousedown_handler*/ ctx[16], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$q.name,
		type: "if",
		source: "(297:0) {#if isOpen && isLive}",
		ctx
	});

	return block;
}

function create_fragment$V(ctx) {
	let ul;
	let setSize_action;
	let t;
	let if_block_anchor;
	let mounted;
	let dispose;
	let each_value = /*items*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
	}

	let if_block = /*isOpen*/ ctx[0] && /*isLive*/ ctx[4] && create_if_block$q(ctx);

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(ul, "class", "menu svelte-1fwu7h0");
			toggle_class(ul, "isOpen", /*isOpen*/ ctx[0]);
			toggle_class(ul, "compact", /*compact*/ ctx[2]);
			add_location(ul, file$P, 258, 0, 5952);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			/*ul_binding*/ ctx[14](ul);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(window, "keydown", /*onKeydown*/ ctx[9], false, false, false),
					action_destroyer(setSize_action = setSize.call(null, ul, { width: /*width*/ ctx[3] })),
					listen_dev(ul, "mouseleave", /*mouseleave_handler*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isClosing, selectedIndex, undefined, items, isLive, selectItem*/ 434) {
				each_value = /*items*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$9(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$9(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width*/ 8) setSize_action.update.call(null, { width: /*width*/ ctx[3] });

			if (dirty & /*isOpen*/ 1) {
				toggle_class(ul, "isOpen", /*isOpen*/ ctx[0]);
			}

			if (dirty & /*compact*/ 4) {
				toggle_class(ul, "compact", /*compact*/ ctx[2]);
			}

			if (/*isOpen*/ ctx[0] && /*isLive*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$q(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			/*ul_binding*/ ctx[14](null);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$V.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$V($$self, $$props, $$invalidate) {
	let $menu;
	validate_store(menu, "menu");
	component_subscribe($$self, menu, $$value => $$invalidate(10, $menu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Menu", slots, []);
	const dispatch = createEventDispatcher();
	let isOpen = false;
	let id = "";
	let items = [];
	let selectedItem = undefined;
	let type = "pulldown";
	let compact = false;
	let position = { x: 0, y: 0 };
	let width = "0px";
	let isLive = false;
	let isClosing = false;
	let self; // `ul` dom element

	async function determineState() {
		const wasClosedIsOpen = !isOpen && $menu.isOpen;
		const wasOpenIsClosed = isOpen && !$menu.isOpen;

		if (wasClosedIsOpen) {
			$$invalidate(4, isLive = false);
			updateValues();
			await tick$1();
			setPosition();
			open();
		} else if (wasOpenIsClosed) {
			// updateValues()
			$$invalidate(0, isOpen = false);
		}
	}

	/**
 * Upate local copies of store values. These values drive local reactivity, and are used to determine what changed in state.
 */
	function updateValues() {
		$$invalidate(0, isOpen = $menu.isOpen);
		id = $menu.id;
		$$invalidate(1, items = $menu.items);
		type = $menu.type;
		$$invalidate(2, compact = $menu.compact);
		position = $menu.position;
		$$invalidate(3, width = $menu.width);
	}

	/**
 * Set position, depending on the menu type. Popups appear with the checked item positioned directly over the button. Pulldowns appeaar below the button.
 */
	async function setPosition() {
		if (!self) return;
		const { x, y } = position;

		if (type == "pulldown") {
			$$invalidate(6, self.style.top = `${y}px`, self);
			$$invalidate(6, self.style.left = `${x}px`, self);
		} else if (type == "popup") {
			const checkedEl = self.querySelector(".checked");
			$$invalidate(6, self.style.top = `${y - checkedEl.offsetTop - checkedEl.offsetHeight}px`, self);
			$$invalidate(6, self.style.left = `${x - checkedEl.offsetLeft - (compact ? 6 : 12)}px`, self);
		}
	}

	/**
 * Wait a few beats before "arming" the buttons. We do this so we can 1) click the menu without the mouseup event triggering a selection (within the arming timer window), or 2) press-hold-release to select an item (after the arming timing window is finished).
*/
	async function open() {
		$$invalidate(7, selectedIndex = undefined); // So nothing is selected, at first.
		$$invalidate(5, isClosing = false);
		await wait$1(250);
		$$invalidate(4, isLive = true);
	}

	/**
 * On item selected, play exit animation, then call `closeMenu` to update store `isOpen` state.
 */
	async function selectItem(selectedItem) {
		$$invalidate(5, isClosing = true);
		const selectedEl = self.querySelector(".hover");

		// Flash hover state on/off
		selectedEl.classList.remove("hover");

		await wait$1(60);
		selectedEl.classList.add("hover");

		// Fade out menu
		const animation = self.animate([{ opacity: 1 }, { opacity: 0 }], 250);

		// Update store
		animation.onfinish = () => {
			closeMenu(selectedItem);
		};
	}

	/**
 * Triggered by `keydown` on window. Lets the user interact with the menu via the keyboard.
 */
	function onKeydown(domEvent) {
		if (!isOpen || !isLive || isClosing) return;
		domEvent.preventDefault();

		switch (domEvent.code) {
			case "Escape":
				closeMenu(undefined);
				break;
			case "Enter":
				const selectedItem = items[selectedIndex];
				selectItem(selectedItem);
				break;
			case "ArrowUp":
				if (selectedIndex > 0) {
					$$invalidate(7, selectedIndex--, selectedIndex);
				} else if (selectedIndex == undefined) {
					$$invalidate(7, selectedIndex = items.length - 1);
				}
				break;
			case "ArrowDown":
				if (selectedIndex < items.length - 1) {
					$$invalidate(7, selectedIndex++, selectedIndex);
				} else if (selectedIndex == undefined) {
					$$invalidate(7, selectedIndex = 0);
				}
				break;
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Menu> was created with unknown prop '${key}'`);
	});

	const mouseenter_handler = index => {
		if (isClosing) return;
		$$invalidate(7, selectedIndex = index);
	};

	const mouseup_handler = item => {
		if (!isLive) return;
		selectItem(item);
	};

	const mouseenter_handler_1 = () => {
		if (isClosing) return;
		$$invalidate(7, selectedIndex = undefined);
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			self = $$value;
			$$invalidate(6, self);
		});
	}

	const mouseleave_handler = () => {
		if (isClosing) return;
		$$invalidate(7, selectedIndex = undefined);
	};

	const mousedown_handler = () => {
		// Call `closeMenu` to update store `isOpen` state
		closeMenu(undefined);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		wait: wait$1,
		closeMenu,
		menu,
		isWindowFocused,
		setSize,
		tick: tick$1,
		dispatch,
		isOpen,
		id,
		items,
		selectedItem,
		type,
		compact,
		position,
		width,
		isLive,
		isClosing,
		self,
		determineState,
		updateValues,
		setPosition,
		open,
		selectItem,
		onKeydown,
		selectedIndex,
		$menu
	});

	$$self.$inject_state = $$props => {
		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
		if ("id" in $$props) id = $$props.id;
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("selectedItem" in $$props) selectedItem = $$props.selectedItem;
		if ("type" in $$props) type = $$props.type;
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("position" in $$props) position = $$props.position;
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
		if ("isLive" in $$props) $$invalidate(4, isLive = $$props.isLive);
		if ("isClosing" in $$props) $$invalidate(5, isClosing = $$props.isClosing);
		if ("self" in $$props) $$invalidate(6, self = $$props.self);
		if ("selectedIndex" in $$props) $$invalidate(7, selectedIndex = $$props.selectedIndex);
	};

	let selectedIndex;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$menu*/ 1024) {
			 (determineState());
		}
	};

	 $$invalidate(7, selectedIndex = undefined); // tracks which item is 'selected' (hovered, arrowed-to, etc)

	return [
		isOpen,
		items,
		compact,
		width,
		isLive,
		isClosing,
		self,
		selectedIndex,
		selectItem,
		onKeydown,
		$menu,
		mouseenter_handler,
		mouseup_handler,
		mouseenter_handler_1,
		ul_binding,
		mouseleave_handler,
		mousedown_handler
	];
}

class Menu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1fwu7h0-style")) add_css$R();
		init(this, options, instance$V, create_fragment$V, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Menu",
			options,
			id: create_fragment$V.name
		});
	}
}

/* src/js/renderer/component/ui/Tooltip.svelte generated by Svelte v3.30.1 */
const file$Q = "src/js/renderer/component/ui/Tooltip.svelte";

function add_css$S() {
	var style = element("style");
	style.id = "svelte-bn7rdn-style";
	style.textContent = "@keyframes svelte-bn7rdn-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#tooltip.svelte-bn7rdn{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;line-height:14px;display:flex;align-items:center;pointer-events:none;position:fixed;max-width:264px;height:18px;padding:2px 5px;z-index:1000;opacity:0;transform:translate(calc(var(--x) * 1px), calc(var(--y) * 1px));transition:opacity 500ms ease-in-out;color:var(--labelColor);background:var(--windowBackgroundColor)}@media(prefers-color-scheme: dark){#tooltip.svelte-bn7rdn{filter:brightness(0.8);box-shadow:0 0 0 0.5px #666666, 0 0 0 1px rgba(0, 0, 0, 0.5), 0 2px 6px 0 rgba(0, 0, 0, 0.1)}}@media(prefers-color-scheme: light){#tooltip.svelte-bn7rdn{box-shadow:0 0 0 0.5px rgba(0, 0, 0, 0.125), 0 2px 6px 0 rgba(0, 0, 0, 0.2)}}#tooltip.visible.svelte-bn7rdn{opacity:1;transition:opacity 1ms calc(var(--msDelayUntilShow) * 1ms)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbHRpcC5zdmVsdGUiLCJzb3VyY2VzIjpbIlRvb2x0aXAuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHRvb2x0aXAgfSBmcm9tICcuLi8uLi9Ub29sdGlwTWFuYWdlcidcbiAgaW1wb3J0IHsgY3NzIH0gZnJvbSAnLi9hY3Rpb25zJ1xuXG4gIGxldCB2aXNpYmxlID0gZmFsc2VcbiAgbGV0IHRleHQgPSAnJ1xuICBsZXQgeCA9IDBcbiAgbGV0IHkgPSAwXG5cbiAgY29uc3QgbXNEZWxheVVudGlsU2hvdyA9IDE2MDBcbiAgY29uc3QgbXNEZWxheVVudGlsVXBkYXRlID0gMjUwXG4gIGNvbnN0IG1zRGVsYXlVbnRpbEhpZGUgPSA1MDBcblxuICBsZXQgb2xkU3RhdHVzLCBvbGRUZXh0XG4gIGxldCB1cGRhdGVEZWxheVRpbWVyXG4gIGxldCBoaWRlRGVsYXlUaW1lclxuXG4gIC8qXG4gIFRvb2x0aXAgZnVuY3Rpb25hbGl0eSBpcyBkcml2ZW4gZnJvbSB0cmVlIHBsYWNlczogXG4gICogVGhlIGBzZXRUb29sdGlwYCBhY3Rpb24sIHdoaWNoIGlzIGFwcGxpZWQgdG8gY29tcG9uZW50cyB0aGF0IG5lZWQgYSB0b29sdGlwLiBJdCBsaXN0ZW5zIGZvciBtb3VzZSBldmVudHMgb24gdGhlIGNvbXBvbmVudCwgYW5kIHVwZGF0ZXMuLi5cbiAgKiBUaGUgdG9vbHRpcCBzdG9yZSwgaW4gU3RhdGVNYW5hZ2VyLiBJdCBpcyB1cGRhdGVkIGJ5IHRoZSBjb21wb25lbnRzLCB3aGljaCB0ZWxsIGl0IHdoYXQgdGV4dCB0byBkaXNwbGF5LCBhbmQgY29vcmRpbmF0ZXMuXG4gICogVGhpcyBjb21wb25lbnQsIHdoaWNoIGxpc3RlbnMgZm9yIGNoYW5nZXMgdG8gdGhlIHRvb2x0aXAgc3RvcmUsIGFuZCB1cGRhdGVzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSB0b29sdGlwIGFjY29yZGluZ2x5LiBNb3N0IG9mIHRoZSBjb2RlIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50IGJlbG93IGlzIGNvbmNlcm5lZCB3aXRoIHRoZSB0aW1pbmcgb2Ygc2hvd2luZy9oaWRpbmcgdGhlIHRvb2x0aXAuIFxuICAqL1xuXG4gICQ6ICR0b29sdGlwLCB1cGRhdGUoKVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIXZhbHVlc0hhdmVDaGFuZ2VkKSByZXR1cm5cbiAgICBcbiAgICBpZiAodXBkYXRlRGVsYXlUaW1lcikgY2xlYXJUaW1lb3V0KHVwZGF0ZURlbGF5VGltZXIpXG4gICAgaWYgKGhpZGVEZWxheVRpbWVyKSBjbGVhclRpbWVvdXQoaGlkZURlbGF5VGltZXIpXG4gICAgXG4gICAgc3dpdGNoICgkdG9vbHRpcC5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ3Nob3cnOlxuXG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgLy8gSWYgdG9vbHRpcCBpcyBhbHJlYWR5IHZpc2libGUsIGFuZCB3ZSd2ZSBtb3VzZWQgb3ZlciBhIG5ldyB0YXJnZXQgKHdoaWNoIHdlIGtub3cgd2VlIGhhdmUsIGlmIHZhbHVlc0hhdmVDaGFuZ2VkIGFuZCBzdGF0dXMgPT0gJ3Nob3cnKSB3YWl0IGEgbW9tZW50IGJlZm9yZSB1cGRhdGluZy4gXG4gICAgICAgICAgdXBkYXRlRGVsYXlUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGV4dCA9ICR0b29sdGlwLnRleHRcbiAgICAgICAgICAgIHggPSAkdG9vbHRpcC54XG4gICAgICAgICAgICB5ID0gJHRvb2x0aXAueVxuICAgICAgICAgIH0sIG1zRGVsYXlVbnRpbFVwZGF0ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTaG93IGFmdGVyIGRlbGF5LiBJcyB0cmlnZ2VyZWQgb24gbW91c2VvdmVyLiBEZWxheSBpcyBpbXBsZW1lbnRlZCBieSB0aGUgYHZpc2libGVgIGNsYXNzIHRyYW5zaXRpb24tZGVsYXkuIElmIGEgaGlkZSB0aW1lciBpcyBhY3RpdmUsIGNhbmNlbCBpdC5cbiAgICAgICAgICB2aXNpYmxlID0gdHJ1ZVxuICAgICAgICAgIHRleHQgPSAkdG9vbHRpcC50ZXh0XG4gICAgICAgICAgeCA9ICR0b29sdGlwLnhcbiAgICAgICAgICB5ID0gJHRvb2x0aXAueVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdoaWRlJzpcbiAgICAgICAgLy8gSGlkZSBpbW1lZGlhdGVseS4gSXMgdHJpZ2dlcmVkIGJ5IGNsaWNraW5nLlxuICAgICAgICB2aXNpYmxlID0gZmFsc2VcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2hpZGVBZnRlckRlbGF5JzpcbiAgICAgICAgLy8gSGlkZSBhZnRlciBkZWxheS4gSXMgdHJpZ2dlcmVkIHdoZW4gbW91c2luZyBvdXQuXG4gICAgICAgIGhpZGVEZWxheVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdmlzaWJsZSA9IGZhbHNlXG4gICAgICAgIH0sIG1zRGVsYXlVbnRpbEhpZGUpO1xuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIG9sZFN0YXR1cyA9ICR0b29sdGlwLnN0YXR1c1xuICAgIG9sZFRleHQgPSAkdG9vbHRpcC50ZXh0XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXNIYXZlQ2hhbmdlZCgpIHtcbiAgICByZXR1cm4gb2xkU3RhdHVzICE9PSAkdG9vbHRpcC5zdGF0dXMgfHwgb2xkVGV4dCAhPT0gJHRvb2x0aXAudGV4dFxuICB9XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbiN0b29sdGlwIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC13aWR0aDogMjY0cHg7XG4gIGhlaWdodDogMThweDtcbiAgcGFkZGluZzogMnB4IDVweDtcbiAgei1pbmRleDogMTAwMDtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoY2FsYyh2YXIoLS14KSAqIDFweCksIGNhbGModmFyKC0teSkgKiAxcHgpKTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSA1MDBtcyBlYXNlLWluLW91dDtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS13aW5kb3dCYWNrZ3JvdW5kQ29sb3IpO1xufVxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xuICAjdG9vbHRpcCB7XG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDAuOCk7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC41cHggIzY2NjY2NiwgMCAwIDAgMXB4IHJnYmEoMCwgMCwgMCwgMC41KSwgMCAycHggNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG59XG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBsaWdodCkge1xuICAjdG9vbHRpcCB7XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC41cHggcmdiYSgwLCAwLCAwLCAwLjEyNSksIDAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgfVxufVxuI3Rvb2x0aXAudmlzaWJsZSB7XG4gIG9wYWNpdHk6IDE7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMW1zIGNhbGModmFyKC0tbXNEZWxheVVudGlsU2hvdykgKiAxbXMpO1xufTwvc3R5bGU+XG5cbjxkaXYgaWQ9XCJ0b29sdGlwXCIgY2xhc3M6dmlzaWJsZSB1c2U6Y3NzPXt7eCwgeSwgdGV4dCwgbXNEZWxheVVudGlsU2hvd319PlxuICB7dGV4dH1cbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RXdCLFdBQVcseUJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxRQUFRLGNBQUMsQ0FBQyxBQUNSLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsV0FBVyxDQUFFLElBQUksQ0FDakIsT0FBTyxDQUFFLElBQUksQ0FDYixXQUFXLENBQUUsTUFBTSxDQUNuQixjQUFjLENBQUUsSUFBSSxDQUNwQixRQUFRLENBQUUsS0FBSyxDQUNmLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLEdBQUcsQ0FBQyxHQUFHLENBQ2hCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsT0FBTyxDQUFFLENBQUMsQ0FDVixTQUFTLENBQUUsVUFBVSxLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNoRSxVQUFVLENBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3JDLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUN4QixVQUFVLENBQUUsSUFBSSx1QkFBdUIsQ0FBQyxBQUMxQyxDQUFDLEFBQ0QsTUFBTSxBQUFDLHVCQUF1QixJQUFJLENBQUMsQUFBQyxDQUFDLEFBQ25DLFFBQVEsY0FBQyxDQUFDLEFBQ1IsTUFBTSxDQUFFLFdBQVcsR0FBRyxDQUFDLENBQ3ZCLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFDL0YsQ0FBQyxBQUNILENBQUMsQUFDRCxNQUFNLEFBQUMsdUJBQXVCLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDcEMsUUFBUSxjQUFDLENBQUMsQUFDUixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFDOUUsQ0FBQyxBQUNILENBQUMsQUFDRCxRQUFRLFFBQVEsY0FBQyxDQUFDLEFBQ2hCLE9BQU8sQ0FBRSxDQUFDLENBQ1YsVUFBVSxDQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxBQUM3RCxDQUFDIn0= */";
	append_dev(document.head, style);
}

function create_fragment$W(ctx) {
	let div;
	let t;
	let css_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			attr_dev(div, "id", "tooltip");
			attr_dev(div, "class", "svelte-bn7rdn");
			toggle_class(div, "visible", /*visible*/ ctx[0]);
			add_location(div, file$Q, 117, 0, 3478);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);

			if (!mounted) {
				dispose = action_destroyer(css_action = css.call(null, div, {
					x: /*x*/ ctx[2],
					y: /*y*/ ctx[3],
					text: /*text*/ ctx[1],
					msDelayUntilShow
				}));

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*text*/ 2) set_data_dev(t, /*text*/ ctx[1]);

			if (css_action && is_function(css_action.update) && dirty & /*x, y, text*/ 14) css_action.update.call(null, {
				x: /*x*/ ctx[2],
				y: /*y*/ ctx[3],
				text: /*text*/ ctx[1],
				msDelayUntilShow
			});

			if (dirty & /*visible*/ 1) {
				toggle_class(div, "visible", /*visible*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$W.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const msDelayUntilShow = 1600;
const msDelayUntilUpdate = 250;
const msDelayUntilHide = 500;

function instance$W($$self, $$props, $$invalidate) {
	let $tooltip;
	validate_store(tooltip, "tooltip");
	component_subscribe($$self, tooltip, $$value => $$invalidate(4, $tooltip = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tooltip", slots, []);
	let visible = false;
	let text = "";
	let x = 0;
	let y = 0;
	let oldStatus, oldText;
	let updateDelayTimer;
	let hideDelayTimer;

	function update() {
		if (!valuesHaveChanged) return;
		if (updateDelayTimer) clearTimeout(updateDelayTimer);
		if (hideDelayTimer) clearTimeout(hideDelayTimer);

		switch ($tooltip.status) {
			case "show":
				if (visible) {
					// If tooltip is already visible, and we've moused over a new target (which we know wee have, if valuesHaveChanged and status == 'show') wait a moment before updating. 
					updateDelayTimer = setTimeout(
						() => {
							$$invalidate(1, text = $tooltip.text);
							$$invalidate(2, x = $tooltip.x);
							$$invalidate(3, y = $tooltip.y);
						},
						msDelayUntilUpdate
					);
				} else {
					// Show after delay. Is triggered on mouseover. Delay is implemented by the `visible` class transition-delay. If a hide timer is active, cancel it.
					$$invalidate(0, visible = true);

					$$invalidate(1, text = $tooltip.text);
					$$invalidate(2, x = $tooltip.x);
					$$invalidate(3, y = $tooltip.y);
				}
				break;
			case "hide":
				// Hide immediately. Is triggered by clicking.
				$$invalidate(0, visible = false);
				break;
			case "hideAfterDelay":
				// Hide after delay. Is triggered when mousing out.
				hideDelayTimer = setTimeout(
					() => {
						$$invalidate(0, visible = false);
					},
					msDelayUntilHide
				);
				break;
		}

		oldStatus = $tooltip.status;
		oldText = $tooltip.text;
	}

	function valuesHaveChanged() {
		return oldStatus !== $tooltip.status || oldText !== $tooltip.text;
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tooltip> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		tooltip,
		css,
		visible,
		text,
		x,
		y,
		msDelayUntilShow,
		msDelayUntilUpdate,
		msDelayUntilHide,
		oldStatus,
		oldText,
		updateDelayTimer,
		hideDelayTimer,
		update,
		valuesHaveChanged,
		$tooltip
	});

	$$self.$inject_state = $$props => {
		if ("visible" in $$props) $$invalidate(0, visible = $$props.visible);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("x" in $$props) $$invalidate(2, x = $$props.x);
		if ("y" in $$props) $$invalidate(3, y = $$props.y);
		if ("oldStatus" in $$props) oldStatus = $$props.oldStatus;
		if ("oldText" in $$props) oldText = $$props.oldText;
		if ("updateDelayTimer" in $$props) updateDelayTimer = $$props.updateDelayTimer;
		if ("hideDelayTimer" in $$props) hideDelayTimer = $$props.hideDelayTimer;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$tooltip*/ 16) {
			/*
Tooltip functionality is driven from tree places: 
* The `setTooltip` action, which is applied to components that need a tooltip. It listens for mouse events on the component, and updates...
* The tooltip store, in StateManager. It is updated by the components, which tell it what text to display, and coordinates.
* This component, which listens for changes to the tooltip store, and updates the appearance of the tooltip accordingly. Most of the code in the switch statement below is concerned with the timing of showing/hiding the tooltip. 
*/
			 (update());
		}
	};

	return [visible, text, x, y, $tooltip];
}

class Tooltip extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-bn7rdn-style")) add_css$S();
		init(this, options, instance$W, create_fragment$W, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tooltip",
			options,
			id: create_fragment$W.name
		});
	}
}

/* src/js/renderer/component/dev/SwatchTable.svelte generated by Svelte v3.30.1 */

const { Object: Object_1$1 } = globals;
const file$R = "src/js/renderer/component/dev/SwatchTable.svelte";

function add_css$T() {
	var style = element("style");
	style.id = "svelte-18lrias-style";
	style.textContent = "@keyframes svelte-18lrias-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-18lrias-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}h3.svelte-18lrias.svelte-18lrias{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;margin:1em 0;color:var(--labelColor);display:block;padding:0;border-top:1px solid var(--gridColor);padding-top:0.4em}.table.svelte-18lrias.svelte-18lrias{display:grid;grid-template-columns:repeat(3, calc(25% - 0.4em)) 25%;grid-gap:0.4em}.table.svelte-18lrias .color.svelte-18lrias{display:flex;gap:0.5em}.table.svelte-18lrias .color .data.svelte-18lrias{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;flex-grow:1;overflow:scroll}.table.svelte-18lrias .color .data .name.svelte-18lrias{color:var(--labelColor)}.table.svelte-18lrias .color .data .value.svelte-18lrias{color:var(--secondaryLabelColor)}.table.svelte-18lrias .color .swatch.svelte-18lrias{flex-basis:2em;flex-shrink:0;position:relative}.table.svelte-18lrias .color .swatch .color.svelte-18lrias,.table.svelte-18lrias .color .swatch .grid.svelte-18lrias{width:100%;height:100%;position:absolute;top:0;left:0}.table.svelte-18lrias .color .swatch .color.svelte-18lrias{z-index:2}.table.svelte-18lrias .color .swatch .grid.svelte-18lrias{background-image:linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(135deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(135deg, transparent 75%, #ccc 75%);background-size:10px 10px;background-position:0 0, 5px 0, 5px -5px, 0px 5px;z-index:1}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dhdGNoVGFibGUuc3ZlbHRlIiwic291cmNlcyI6WyJTd2F0Y2hUYWJsZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0ZXhwb3J0IGxldCB0aXRsZSA9ICcnXG5cdGV4cG9ydCBsZXQgY29sb3JzID0ge31cbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbmgzIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgbWFyZ2luOiAxZW0gMDtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWdyaWRDb2xvcik7XG4gIHBhZGRpbmctdG9wOiAwLjRlbTtcbn1cblxuLnRhYmxlIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgY2FsYygyNSUgLSAwLjRlbSkpIDI1JTtcbiAgZ3JpZC1nYXA6IDAuNGVtO1xufVxuLnRhYmxlIC5jb2xvciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMC41ZW07XG59XG4udGFibGUgLmNvbG9yIC5kYXRhIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgZmxleC1ncm93OiAxO1xuICBvdmVyZmxvdzogc2Nyb2xsO1xufVxuLnRhYmxlIC5jb2xvciAuZGF0YSAubmFtZSB7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cbi50YWJsZSAuY29sb3IgLmRhdGEgLnZhbHVlIHtcbiAgY29sb3I6IHZhcigtLXNlY29uZGFyeUxhYmVsQ29sb3IpO1xufVxuLnRhYmxlIC5jb2xvciAuc3dhdGNoIHtcbiAgZmxleC1iYXNpczogMmVtO1xuICBmbGV4LXNocmluazogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLnRhYmxlIC5jb2xvciAuc3dhdGNoIC5jb2xvciwgLnRhYmxlIC5jb2xvciAuc3dhdGNoIC5ncmlkIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG59XG4udGFibGUgLmNvbG9yIC5zd2F0Y2ggLmNvbG9yIHtcbiAgei1pbmRleDogMjtcbn1cbi50YWJsZSAuY29sb3IgLnN3YXRjaCAuZ3JpZCB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg0NWRlZywgI2NjYyAyNSUsIHRyYW5zcGFyZW50IDI1JSksIGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICNjY2MgMjUlLCB0cmFuc3BhcmVudCAyNSUpLCBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHRyYW5zcGFyZW50IDc1JSwgI2NjYyA3NSUpLCBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCB0cmFuc3BhcmVudCA3NSUsICNjY2MgNzUlKTtcbiAgYmFja2dyb3VuZC1zaXplOiAxMHB4IDEwcHg7XG4gIC8qIE11c3QgYmUgYSBzcXVhcmUgKi9cbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwLCA1cHggMCwgNXB4IC01cHgsIDBweCA1cHg7XG4gIC8qIE11c3QgYmUgaGFsZiBvZiBvbmUgc2lkZSBvZiB0aGUgc3F1YXJlICovXG4gIHotaW5kZXg6IDE7XG59PC9zdHlsZT5cblxueyNpZiB0aXRsZX1cblx0PGgzPnt0aXRsZX08L2gzPlxuey9pZn1cbjxkaXYgY2xhc3M9XCJ0YWJsZVwiPlxuXHR7I2VhY2ggT2JqZWN0LmVudHJpZXMoY29sb3JzKSBhcyBbbmFtZSwgdmFsdWVdfVxuXHRcdDxkaXYgY2xhc3M9XCJjb2xvclwiPlxuXHRcdDxzcGFuIGNsYXNzPVwic3dhdGNoXCI+PHNwYW4gY2xhc3M9XCJjb2xvclwiIHN0eWxlPXtgYmFja2dyb3VuZC1jb2xvcjogJHt2YWx1ZX1gfT48L3NwYW4+PHNwYW4gY2xhc3M9XCJncmlkXCI+PC9zcGFuPjwvc3Bhbj5cblx0XHQ8c3BhbiBjbGFzcz1cImRhdGFcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJuYW1lXCI+e25hbWV9PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwidmFsdWVcIj57dmFsdWV9PC9kaXY+XG5cdFx0PC9zcGFuPlxuXHRcdDwvZGl2PlxuXHR7L2VhY2h9XG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS3dCLFdBQVcsMEJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxXQUFXLDBCQUFZLENBQUMsQUFDdEIsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsRUFBRSw4QkFBQyxDQUFDLEFBQ0YsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsR0FBRyxDQUNuQixNQUFNLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FDYixLQUFLLENBQUUsSUFBSSxZQUFZLENBQUMsQ0FDeEIsT0FBTyxDQUFFLEtBQUssQ0FDZCxPQUFPLENBQUUsQ0FBQyxDQUNWLFVBQVUsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLENBQ3RDLFdBQVcsQ0FBRSxLQUFLLEFBQ3BCLENBQUMsQUFFRCxNQUFNLDhCQUFDLENBQUMsQUFDTixPQUFPLENBQUUsSUFBSSxDQUNiLHFCQUFxQixDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUN2RCxRQUFRLENBQUUsS0FBSyxBQUNqQixDQUFDLEFBQ0QscUJBQU0sQ0FBQyxNQUFNLGVBQUMsQ0FBQyxBQUNiLE9BQU8sQ0FBRSxJQUFJLENBQ2IsR0FBRyxDQUFFLEtBQUssQUFDWixDQUFDLEFBQ0QscUJBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDbkIsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsR0FBRyxDQUNuQixTQUFTLENBQUUsQ0FBQyxDQUNaLFFBQVEsQ0FBRSxNQUFNLEFBQ2xCLENBQUMsQUFDRCxxQkFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDekIsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLEFBQzFCLENBQUMsQUFDRCxxQkFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxlQUFDLENBQUMsQUFDMUIsS0FBSyxDQUFFLElBQUkscUJBQXFCLENBQUMsQUFDbkMsQ0FBQyxBQUNELHFCQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sZUFBQyxDQUFDLEFBQ3JCLFVBQVUsQ0FBRSxHQUFHLENBQ2YsV0FBVyxDQUFFLENBQUMsQ0FDZCxRQUFRLENBQUUsUUFBUSxBQUNwQixDQUFDLEFBQ0QscUJBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLHFCQUFNLENBQUUscUJBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssZUFBQyxDQUFDLEFBQ3pELEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsQ0FBQyxDQUNOLElBQUksQ0FBRSxDQUFDLEFBQ1QsQ0FBQyxBQUNELHFCQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLGVBQUMsQ0FBQyxBQUM1QixPQUFPLENBQUUsQ0FBQyxBQUNaLENBQUMsQUFDRCxxQkFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxlQUFDLENBQUMsQUFDM0IsZ0JBQWdCLENBQUUsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzlOLGVBQWUsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUUxQixtQkFBbUIsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUVsRCxPQUFPLENBQUUsQ0FBQyxBQUNaLENBQUMifQ== */";
	append_dev(document.head, style);
}

function get_each_context$a(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i][0];
	child_ctx[3] = list[i][1];
	return child_ctx;
}

// (84:0) {#if title}
function create_if_block$r(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(/*title*/ ctx[0]);
			attr_dev(h3, "class", "svelte-18lrias");
			add_location(h3, file$R, 84, 1, 1933);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$r.name,
		type: "if",
		source: "(84:0) {#if title}",
		ctx
	});

	return block;
}

// (88:1) {#each Object.entries(colors) as [name, value]}
function create_each_block$a(ctx) {
	let div2;
	let span2;
	let span0;
	let span0_style_value;
	let span1;
	let t0;
	let span3;
	let div0;
	let t1_value = /*name*/ ctx[2] + "";
	let t1;
	let t2;
	let div1;
	let t3_value = /*value*/ ctx[3] + "";
	let t3;
	let t4;

	const block = {
		c: function create() {
			div2 = element("div");
			span2 = element("span");
			span0 = element("span");
			span1 = element("span");
			t0 = space();
			span3 = element("span");
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			attr_dev(span0, "class", "color svelte-18lrias");
			attr_dev(span0, "style", span0_style_value = `background-color: ${/*value*/ ctx[3]}`);
			add_location(span0, file$R, 89, 23, 2070);
			attr_dev(span1, "class", "grid svelte-18lrias");
			add_location(span1, file$R, 89, 87, 2134);
			attr_dev(span2, "class", "swatch svelte-18lrias");
			add_location(span2, file$R, 89, 2, 2049);
			attr_dev(div0, "class", "name svelte-18lrias");
			add_location(div0, file$R, 91, 3, 2193);
			attr_dev(div1, "class", "value svelte-18lrias");
			add_location(div1, file$R, 92, 3, 2227);
			attr_dev(span3, "class", "data svelte-18lrias");
			add_location(span3, file$R, 90, 2, 2170);
			attr_dev(div2, "class", "color svelte-18lrias");
			add_location(div2, file$R, 88, 2, 2027);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, span2);
			append_dev(span2, span0);
			append_dev(span2, span1);
			append_dev(div2, t0);
			append_dev(div2, span3);
			append_dev(span3, div0);
			append_dev(div0, t1);
			append_dev(span3, t2);
			append_dev(span3, div1);
			append_dev(div1, t3);
			append_dev(div2, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*colors*/ 2 && span0_style_value !== (span0_style_value = `background-color: ${/*value*/ ctx[3]}`)) {
				attr_dev(span0, "style", span0_style_value);
			}

			if (dirty & /*colors*/ 2 && t1_value !== (t1_value = /*name*/ ctx[2] + "")) set_data_dev(t1, t1_value);
			if (dirty & /*colors*/ 2 && t3_value !== (t3_value = /*value*/ ctx[3] + "")) set_data_dev(t3, t3_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$a.name,
		type: "each",
		source: "(88:1) {#each Object.entries(colors) as [name, value]}",
		ctx
	});

	return block;
}

function create_fragment$X(ctx) {
	let t;
	let div;
	let if_block = /*title*/ ctx[0] && create_if_block$r(ctx);
	let each_value = Object.entries(/*colors*/ ctx[1]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "table svelte-18lrias");
			add_location(div, file$R, 86, 0, 1956);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$r(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*Object, colors*/ 2) {
				each_value = Object.entries(/*colors*/ ctx[1]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$a(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$a(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$X.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$X($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SwatchTable", slots, []);
	let { title = "" } = $$props;
	let { colors = {} } = $$props;
	const writable_props = ["title", "colors"];

	Object_1$1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SwatchTable> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("colors" in $$props) $$invalidate(1, colors = $$props.colors);
	};

	$$self.$capture_state = () => ({ title, colors });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("colors" in $$props) $$invalidate(1, colors = $$props.colors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, colors];
}

class SwatchTable extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-18lrias-style")) add_css$T();
		init(this, options, instance$X, create_fragment$X, safe_not_equal, { title: 0, colors: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SwatchTable",
			options,
			id: create_fragment$X.name
		});
	}

	get title() {
		throw new Error("<SwatchTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SwatchTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colors() {
		throw new Error("<SwatchTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colors(value) {
		throw new Error("<SwatchTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/dev/SwatchLarge.svelte generated by Svelte v3.30.1 */
const file$S = "src/js/renderer/component/dev/SwatchLarge.svelte";

function add_css$U() {
	var style = element("style");
	style.id = "svelte-1xpvz5p-style";
	style.textContent = "@keyframes svelte-1xpvz5p-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}@keyframes svelte-1xpvz5p-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.isOverridden.svelte-1xpvz5p.svelte-1xpvz5p{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:salmon}div.svelte-1xpvz5p.svelte-1xpvz5p{width:10em;overflow:hidden;display:inline-block}div.svelte-1xpvz5p .swatch.svelte-1xpvz5p{position:relative;width:100%;height:2em}div.svelte-1xpvz5p .swatch .color.svelte-1xpvz5p,div.svelte-1xpvz5p .swatch .grid.svelte-1xpvz5p{position:absolute;top:0;width:100%;height:100%}div.svelte-1xpvz5p .swatch .color.svelte-1xpvz5p{background-color:var(--color);left:0;z-index:2}div.svelte-1xpvz5p .swatch .grid.svelte-1xpvz5p{background-image:linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(135deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(135deg, transparent 75%, #ccc 75%);background-size:10px 10px;background-position:0 0, 5px 0, 5px -5px, 0px 5px;right:0;width:2em;max-width:50%;z-index:1}div.svelte-1xpvz5p .textSample.svelte-1xpvz5p{width:100%;height:2em;display:flex;font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--color);align-items:center;justify-content:center;border:1px solid var(--color);margin:-0.3em 0 0}div.svelte-1xpvz5p h1.svelte-1xpvz5p,div.svelte-1xpvz5p p.svelte-1xpvz5p{margin:0.3em 0}div.svelte-1xpvz5p h1.svelte-1xpvz5p{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:var(--labelColor);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}div.svelte-1xpvz5p .comment.svelte-1xpvz5p{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:var(--secondaryLabelColor);overflow:hidden;white-space:normal}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

// (117:2) {#if isOverridden}
function create_if_block$s(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "Overridden";
			attr_dev(p, "class", "isOverridden svelte-1xpvz5p");
			add_location(p, file$S, 116, 20, 2576);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$s.name,
		type: "if",
		source: "(117:2) {#if isOverridden}",
		ctx
	});

	return block;
}

function create_fragment$Y(ctx) {
	let div4;
	let div2;
	let div0;
	let t0;
	let div1;
	let t1;
	let div3;
	let t2;
	let t3;
	let h1;
	let t4;
	let t5;
	let t6;
	let p;
	let css_action;
	let current;
	let mounted;
	let dispose;
	let if_block = /*isOverridden*/ ctx[2] && create_if_block$s(ctx);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div3 = element("div");
			t2 = text(/*color*/ ctx[1]);
			t3 = space();
			h1 = element("h1");
			t4 = text(/*name*/ ctx[0]);
			t5 = space();
			if (if_block) if_block.c();
			t6 = space();
			p = element("p");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "color svelte-1xpvz5p");
			add_location(div0, file$S, 110, 4, 2433);
			attr_dev(div1, "class", "grid svelte-1xpvz5p");
			add_location(div1, file$S, 111, 4, 2463);
			attr_dev(div2, "class", "swatch svelte-1xpvz5p");
			add_location(div2, file$S, 109, 2, 2408);
			attr_dev(div3, "class", "textSample svelte-1xpvz5p");
			add_location(div3, file$S, 113, 2, 2499);
			attr_dev(h1, "class", "svelte-1xpvz5p");
			add_location(h1, file$S, 115, 2, 2540);
			attr_dev(p, "class", "comment svelte-1xpvz5p");
			add_location(p, file$S, 117, 2, 2622);
			attr_dev(div4, "class", "svelte-1xpvz5p");
			add_location(div4, file$S, 108, 0, 2382);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div2);
			append_dev(div2, div0);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div4, t1);
			append_dev(div4, div3);
			append_dev(div3, t2);
			append_dev(div4, t3);
			append_dev(div4, h1);
			append_dev(h1, t4);
			append_dev(div4, t5);
			if (if_block) if_block.m(div4, null);
			append_dev(div4, t6);
			append_dev(div4, p);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(css_action = css.call(null, div4, { color: /*color*/ ctx[1] }));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*color*/ 2) set_data_dev(t2, /*color*/ ctx[1]);
			if (!current || dirty & /*name*/ 1) set_data_dev(t4, /*name*/ ctx[0]);

			if (/*isOverridden*/ ctx[2]) {
				if (if_block) ; else {
					if_block = create_if_block$s(ctx);
					if_block.c();
					if_block.m(div4, t6);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (css_action && is_function(css_action.update) && dirty & /*color*/ 2) css_action.update.call(null, { color: /*color*/ ctx[1] });
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Y($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SwatchLarge", slots, ['default']);
	let { name = "" } = $$props;
	let { colors = {} } = $$props;
	let { overriddenVariables = [] } = $$props;
	const writable_props = ["name", "colors", "overriddenVariables"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SwatchLarge> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("colors" in $$props) $$invalidate(3, colors = $$props.colors);
		if ("overriddenVariables" in $$props) $$invalidate(4, overriddenVariables = $$props.overriddenVariables);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		css,
		name,
		colors,
		overriddenVariables,
		color,
		isOverridden
	});

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("colors" in $$props) $$invalidate(3, colors = $$props.colors);
		if ("overriddenVariables" in $$props) $$invalidate(4, overriddenVariables = $$props.overriddenVariables);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("isOverridden" in $$props) $$invalidate(2, isOverridden = $$props.isOverridden);
	};

	let color;
	let isOverridden;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*colors, name*/ 9) {
			 $$invalidate(1, color = colors[name]);
		}

		if ($$self.$$.dirty & /*overriddenVariables, name*/ 17) {
			 $$invalidate(2, isOverridden = overriddenVariables.includes(name));
		}
	};

	return [name, color, isOverridden, colors, overriddenVariables, $$scope, slots];
}

class SwatchLarge extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1xpvz5p-style")) add_css$U();

		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {
			name: 0,
			colors: 3,
			overriddenVariables: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SwatchLarge",
			options,
			id: create_fragment$Y.name
		});
	}

	get name() {
		throw new Error("<SwatchLarge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<SwatchLarge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colors() {
		throw new Error("<SwatchLarge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colors(value) {
		throw new Error("<SwatchLarge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get overriddenVariables() {
		throw new Error("<SwatchLarge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set overriddenVariables(value) {
		throw new Error("<SwatchLarge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/dev/Colors.svelte generated by Svelte v3.30.1 */
const file$T = "src/js/renderer/component/dev/Colors.svelte";

function add_css$V() {
	var style = element("style");
	style.id = "svelte-95ujqs-style";
	style.textContent = "@keyframes svelte-95ujqs-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}section.svelte-95ujqs{padding:0rem 1rem}h1.svelte-95ujqs{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--labelColor)}h2.svelte-95ujqs{font-family:system-ui;font-weight:bold;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);margin:0;width:6em;display:inline;float:left}.swatches.svelte-95ujqs{display:flex;align-items:flex-start;flex-wrap:wrap;gap:1em;margin:0 0 1em}hr.svelte-95ujqs{margin:2em 0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context$b(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (206:6) <SwatchLarge name={'iconAccentColor'} {colors} {overriddenVariables}>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Icons backgrounds.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(206:6) <SwatchLarge name={'iconAccentColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (209:6) <SwatchLarge name={'controlAccentColor'} {colors} {overriddenVariables}>
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Hovered menu items. Button accents (in it's `darker` variation).");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(209:6) <SwatchLarge name={'controlAccentColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (212:6) <SwatchLarge name={'darkerControlAccentColor'} {colors} {overriddenVariables}>
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Used in button accents (via the `$btn-accent-bg` mixin). Darker variation of `controlAccentColor`, created by getColors().");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(212:6) <SwatchLarge name={'darkerControlAccentColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (215:6) <SwatchLarge name={'selectedContentBackgroundColor'} {colors} {overriddenVariables}>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Selected list item backgrounds.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(215:6) <SwatchLarge name={'selectedContentBackgroundColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (218:6) <SwatchLarge name={'keyboardFocusIndicatorColor'} {colors} {overriddenVariables}>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Drag highlights. E.g. Drag doc into panel.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(218:6) <SwatchLarge name={'keyboardFocusIndicatorColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (228:6) <SwatchLarge name={'labelColor'} {colors} {overriddenVariables}>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Button text. Background in a few places. Most-used variable.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(228:6) <SwatchLarge name={'labelColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (231:6) <SwatchLarge name={'secondaryLabelColor'} {colors} {overriddenVariables}>
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Same as labelColor. Second-most used variable.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(231:6) <SwatchLarge name={'secondaryLabelColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (234:6) <SwatchLarge name={'tertiaryLabelColor'} {colors} {overriddenVariables}>
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Used for unimportant info (e.g. counters on list items).");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(234:6) <SwatchLarge name={'tertiaryLabelColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (244:8) <SwatchLarge name={'textColor'} {colors} {overriddenVariables}>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Input text (e.g. search field). And eventually also editor text.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(244:8) <SwatchLarge name={'textColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (247:6) <SwatchLarge name={'placeholderTextColor'} {colors} {overriddenVariables}>
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Input placeholder text (e.g. search field).");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(247:6) <SwatchLarge name={'placeholderTextColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (250:6) <SwatchLarge name={'selectedMenuItemTextColor'} {colors} {overriddenVariables}>
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Color of selected menu items. Although I'm not completely consistent about using it.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(250:6) <SwatchLarge name={'selectedMenuItemTextColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (260:8) <SwatchLarge name={'buttonBackgroundColor'} {colors} {overriddenVariables}>
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Button backgrounds. Hovered menu. Has `darker` mixin.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(260:8) <SwatchLarge name={'buttonBackgroundColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (263:6) <SwatchLarge name={'controlColor'} {colors} {overriddenVariables}>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Bright in both dark and light modes. Slightly dimmer in dark.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(263:6) <SwatchLarge name={'controlColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (266:6) <SwatchLarge name={'controlTextColor'} {colors} {overriddenVariables}>
function create_default_slot_5$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Background color for some UI elements / icons.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$1.name,
		type: "slot",
		source: "(266:6) <SwatchLarge name={'controlTextColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (269:6) <SwatchLarge name={'disabledControlTextColor'} {colors} {overriddenVariables}>
function create_default_slot_4$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Unfocused list element backgrounds (Media and Doc).");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$3.name,
		type: "slot",
		source: "(269:6) <SwatchLarge name={'disabledControlTextColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (272:6) <SwatchLarge name={'errorColor'} {colors} {overriddenVariables}>
function create_default_slot_3$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Error states. E.g. Border on empty required input field.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$5.name,
		type: "slot",
		source: "(272:6) <SwatchLarge name={'errorColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (282:6) <SwatchLarge name={'separatorColor'} {colors} {overriddenVariables}>
function create_default_slot_2$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lines between sections in layouts.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$5.name,
		type: "slot",
		source: "(282:6) <SwatchLarge name={'separatorColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (285:6) <SwatchLarge name={'windowBackgroundColor'} {colors} {overriddenVariables}>
function create_default_slot_1$7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Window backgrounds.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$7.name,
		type: "slot",
		source: "(285:6) <SwatchLarge name={'windowBackgroundColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (288:6) <SwatchLarge name={'shadowColor'} {colors} {overriddenVariables}>
function create_default_slot$d(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Can be an alternative to separatorColor, for dark separations.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$d.name,
		type: "slot",
		source: "(288:6) <SwatchLarge name={'shadowColor'} {colors} {overriddenVariables}>",
		ctx
	});

	return block;
}

// (309:6) {#each unusedColors as name }
function create_each_block$b(ctx) {
	let swatchlarge;
	let current;

	swatchlarge = new SwatchLarge({
			props: {
				name: /*name*/ ctx[3],
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(swatchlarge.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(swatchlarge, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const swatchlarge_changes = {};
			if (dirty & /*unusedColors*/ 4) swatchlarge_changes.name = /*name*/ ctx[3];
			if (dirty & /*colors*/ 1) swatchlarge_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];
			swatchlarge.$set(swatchlarge_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swatchlarge.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(swatchlarge.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(swatchlarge, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$b.name,
		type: "each",
		source: "(309:6) {#each unusedColors as name }",
		ctx
	});

	return block;
}

function create_fragment$Z(ctx) {
	let section;
	let hr0;
	let t0;
	let h1;
	let t2;
	let div1;
	let h20;
	let t4;
	let div0;
	let swatchlarge0;
	let t5;
	let swatchlarge1;
	let t6;
	let swatchlarge2;
	let t7;
	let swatchlarge3;
	let t8;
	let swatchlarge4;
	let t9;
	let div3;
	let h21;
	let t11;
	let div2;
	let swatchlarge5;
	let t12;
	let swatchlarge6;
	let t13;
	let swatchlarge7;
	let t14;
	let div5;
	let h22;
	let t16;
	let div4;
	let swatchlarge8;
	let t17;
	let swatchlarge9;
	let t18;
	let swatchlarge10;
	let t19;
	let div7;
	let h23;
	let t21;
	let div6;
	let swatchlarge11;
	let t22;
	let swatchlarge12;
	let t23;
	let swatchlarge13;
	let t24;
	let swatchlarge14;
	let t25;
	let swatchlarge15;
	let t26;
	let div9;
	let h24;
	let t28;
	let div8;
	let swatchlarge16;
	let t29;
	let swatchlarge17;
	let t30;
	let swatchlarge18;
	let t31;
	let hr1;
	let t32;
	let div11;
	let h25;
	let t34;
	let div10;
	let current;

	swatchlarge0 = new SwatchLarge({
			props: {
				name: "iconAccentColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge1 = new SwatchLarge({
			props: {
				name: "controlAccentColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge2 = new SwatchLarge({
			props: {
				name: "darkerControlAccentColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge3 = new SwatchLarge({
			props: {
				name: "selectedContentBackgroundColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge4 = new SwatchLarge({
			props: {
				name: "keyboardFocusIndicatorColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge5 = new SwatchLarge({
			props: {
				name: "labelColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge6 = new SwatchLarge({
			props: {
				name: "secondaryLabelColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge7 = new SwatchLarge({
			props: {
				name: "tertiaryLabelColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge8 = new SwatchLarge({
			props: {
				name: "textColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge9 = new SwatchLarge({
			props: {
				name: "placeholderTextColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge10 = new SwatchLarge({
			props: {
				name: "selectedMenuItemTextColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge11 = new SwatchLarge({
			props: {
				name: "buttonBackgroundColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge12 = new SwatchLarge({
			props: {
				name: "controlColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge13 = new SwatchLarge({
			props: {
				name: "controlTextColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_5$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge14 = new SwatchLarge({
			props: {
				name: "disabledControlTextColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_4$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge15 = new SwatchLarge({
			props: {
				name: "errorColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_3$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge16 = new SwatchLarge({
			props: {
				name: "separatorColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_2$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge17 = new SwatchLarge({
			props: {
				name: "windowBackgroundColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot_1$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	swatchlarge18 = new SwatchLarge({
			props: {
				name: "shadowColor",
				colors: /*colors*/ ctx[0],
				overriddenVariables: /*overriddenVariables*/ ctx[1],
				$$slots: { default: [create_default_slot$d] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = /*unusedColors*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			section = element("section");
			hr0 = element("hr");
			t0 = space();
			h1 = element("h1");
			h1.textContent = "Colors";
			t2 = space();
			div1 = element("div");
			h20 = element("h2");
			h20.textContent = "Accent";
			t4 = space();
			div0 = element("div");
			create_component(swatchlarge0.$$.fragment);
			t5 = space();
			create_component(swatchlarge1.$$.fragment);
			t6 = space();
			create_component(swatchlarge2.$$.fragment);
			t7 = space();
			create_component(swatchlarge3.$$.fragment);
			t8 = space();
			create_component(swatchlarge4.$$.fragment);
			t9 = space();
			div3 = element("div");
			h21 = element("h2");
			h21.textContent = "Label";
			t11 = space();
			div2 = element("div");
			create_component(swatchlarge5.$$.fragment);
			t12 = space();
			create_component(swatchlarge6.$$.fragment);
			t13 = space();
			create_component(swatchlarge7.$$.fragment);
			t14 = space();
			div5 = element("div");
			h22 = element("h2");
			h22.textContent = "Text";
			t16 = space();
			div4 = element("div");
			create_component(swatchlarge8.$$.fragment);
			t17 = space();
			create_component(swatchlarge9.$$.fragment);
			t18 = space();
			create_component(swatchlarge10.$$.fragment);
			t19 = space();
			div7 = element("div");
			h23 = element("h2");
			h23.textContent = "Controls";
			t21 = space();
			div6 = element("div");
			create_component(swatchlarge11.$$.fragment);
			t22 = space();
			create_component(swatchlarge12.$$.fragment);
			t23 = space();
			create_component(swatchlarge13.$$.fragment);
			t24 = space();
			create_component(swatchlarge14.$$.fragment);
			t25 = space();
			create_component(swatchlarge15.$$.fragment);
			t26 = space();
			div9 = element("div");
			h24 = element("h2");
			h24.textContent = "Windows";
			t28 = space();
			div8 = element("div");
			create_component(swatchlarge16.$$.fragment);
			t29 = space();
			create_component(swatchlarge17.$$.fragment);
			t30 = space();
			create_component(swatchlarge18.$$.fragment);
			t31 = space();
			hr1 = element("hr");
			t32 = space();
			div11 = element("div");
			h25 = element("h2");
			h25.textContent = "Unused";
			t34 = space();
			div10 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(hr0, "class", "svelte-95ujqs");
			add_location(hr0, file$T, 192, 2, 5509);
			attr_dev(h1, "class", "svelte-95ujqs");
			add_location(h1, file$T, 194, 2, 5517);
			attr_dev(h20, "class", "svelte-95ujqs");
			add_location(h20, file$T, 203, 4, 5681);
			attr_dev(div0, "class", "swatches svelte-95ujqs");
			add_location(div0, file$T, 204, 4, 5701);
			add_location(div1, file$T, 202, 2, 5671);
			attr_dev(h21, "class", "svelte-95ujqs");
			add_location(h21, file$T, 225, 4, 6609);
			attr_dev(div2, "class", "swatches svelte-95ujqs");
			add_location(div2, file$T, 226, 4, 6628);
			add_location(div3, file$T, 224, 2, 6599);
			attr_dev(h22, "class", "svelte-95ujqs");
			add_location(h22, file$T, 241, 4, 7171);
			attr_dev(div4, "class", "swatches svelte-95ujqs");
			add_location(div4, file$T, 242, 4, 7189);
			add_location(div5, file$T, 240, 2, 7161);
			attr_dev(h23, "class", "svelte-95ujqs");
			add_location(h23, file$T, 257, 4, 7769);
			attr_dev(div6, "class", "swatches svelte-95ujqs");
			add_location(div6, file$T, 258, 4, 7791);
			add_location(div7, file$T, 256, 2, 7759);
			attr_dev(h24, "class", "svelte-95ujqs");
			add_location(h24, file$T, 279, 4, 8660);
			attr_dev(div8, "class", "swatches svelte-95ujqs");
			add_location(div8, file$T, 280, 4, 8681);
			add_location(div9, file$T, 278, 2, 8650);
			attr_dev(hr1, "class", "svelte-95ujqs");
			add_location(hr1, file$T, 303, 2, 9514);
			attr_dev(h25, "class", "svelte-95ujqs");
			add_location(h25, file$T, 306, 4, 9532);
			attr_dev(div10, "class", "swatches svelte-95ujqs");
			add_location(div10, file$T, 307, 4, 9552);
			add_location(div11, file$T, 305, 2, 9522);
			attr_dev(section, "class", "svelte-95ujqs");
			add_location(section, file$T, 190, 0, 5496);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, hr0);
			append_dev(section, t0);
			append_dev(section, h1);
			append_dev(section, t2);
			append_dev(section, div1);
			append_dev(div1, h20);
			append_dev(div1, t4);
			append_dev(div1, div0);
			mount_component(swatchlarge0, div0, null);
			append_dev(div0, t5);
			mount_component(swatchlarge1, div0, null);
			append_dev(div0, t6);
			mount_component(swatchlarge2, div0, null);
			append_dev(div0, t7);
			mount_component(swatchlarge3, div0, null);
			append_dev(div0, t8);
			mount_component(swatchlarge4, div0, null);
			append_dev(section, t9);
			append_dev(section, div3);
			append_dev(div3, h21);
			append_dev(div3, t11);
			append_dev(div3, div2);
			mount_component(swatchlarge5, div2, null);
			append_dev(div2, t12);
			mount_component(swatchlarge6, div2, null);
			append_dev(div2, t13);
			mount_component(swatchlarge7, div2, null);
			append_dev(section, t14);
			append_dev(section, div5);
			append_dev(div5, h22);
			append_dev(div5, t16);
			append_dev(div5, div4);
			mount_component(swatchlarge8, div4, null);
			append_dev(div4, t17);
			mount_component(swatchlarge9, div4, null);
			append_dev(div4, t18);
			mount_component(swatchlarge10, div4, null);
			append_dev(section, t19);
			append_dev(section, div7);
			append_dev(div7, h23);
			append_dev(div7, t21);
			append_dev(div7, div6);
			mount_component(swatchlarge11, div6, null);
			append_dev(div6, t22);
			mount_component(swatchlarge12, div6, null);
			append_dev(div6, t23);
			mount_component(swatchlarge13, div6, null);
			append_dev(div6, t24);
			mount_component(swatchlarge14, div6, null);
			append_dev(div6, t25);
			mount_component(swatchlarge15, div6, null);
			append_dev(section, t26);
			append_dev(section, div9);
			append_dev(div9, h24);
			append_dev(div9, t28);
			append_dev(div9, div8);
			mount_component(swatchlarge16, div8, null);
			append_dev(div8, t29);
			mount_component(swatchlarge17, div8, null);
			append_dev(div8, t30);
			mount_component(swatchlarge18, div8, null);
			append_dev(section, t31);
			append_dev(section, hr1);
			append_dev(section, t32);
			append_dev(section, div11);
			append_dev(div11, h25);
			append_dev(div11, t34);
			append_dev(div11, div10);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div10, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const swatchlarge0_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge0_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge0_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge0_changes.$$scope = { dirty, ctx };
			}

			swatchlarge0.$set(swatchlarge0_changes);
			const swatchlarge1_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge1_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge1_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge1_changes.$$scope = { dirty, ctx };
			}

			swatchlarge1.$set(swatchlarge1_changes);
			const swatchlarge2_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge2_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge2_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge2_changes.$$scope = { dirty, ctx };
			}

			swatchlarge2.$set(swatchlarge2_changes);
			const swatchlarge3_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge3_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge3_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge3_changes.$$scope = { dirty, ctx };
			}

			swatchlarge3.$set(swatchlarge3_changes);
			const swatchlarge4_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge4_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge4_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge4_changes.$$scope = { dirty, ctx };
			}

			swatchlarge4.$set(swatchlarge4_changes);
			const swatchlarge5_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge5_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge5_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge5_changes.$$scope = { dirty, ctx };
			}

			swatchlarge5.$set(swatchlarge5_changes);
			const swatchlarge6_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge6_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge6_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge6_changes.$$scope = { dirty, ctx };
			}

			swatchlarge6.$set(swatchlarge6_changes);
			const swatchlarge7_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge7_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge7_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge7_changes.$$scope = { dirty, ctx };
			}

			swatchlarge7.$set(swatchlarge7_changes);
			const swatchlarge8_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge8_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge8_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge8_changes.$$scope = { dirty, ctx };
			}

			swatchlarge8.$set(swatchlarge8_changes);
			const swatchlarge9_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge9_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge9_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge9_changes.$$scope = { dirty, ctx };
			}

			swatchlarge9.$set(swatchlarge9_changes);
			const swatchlarge10_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge10_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge10_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge10_changes.$$scope = { dirty, ctx };
			}

			swatchlarge10.$set(swatchlarge10_changes);
			const swatchlarge11_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge11_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge11_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge11_changes.$$scope = { dirty, ctx };
			}

			swatchlarge11.$set(swatchlarge11_changes);
			const swatchlarge12_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge12_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge12_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge12_changes.$$scope = { dirty, ctx };
			}

			swatchlarge12.$set(swatchlarge12_changes);
			const swatchlarge13_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge13_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge13_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge13_changes.$$scope = { dirty, ctx };
			}

			swatchlarge13.$set(swatchlarge13_changes);
			const swatchlarge14_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge14_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge14_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge14_changes.$$scope = { dirty, ctx };
			}

			swatchlarge14.$set(swatchlarge14_changes);
			const swatchlarge15_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge15_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge15_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge15_changes.$$scope = { dirty, ctx };
			}

			swatchlarge15.$set(swatchlarge15_changes);
			const swatchlarge16_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge16_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge16_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge16_changes.$$scope = { dirty, ctx };
			}

			swatchlarge16.$set(swatchlarge16_changes);
			const swatchlarge17_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge17_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge17_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge17_changes.$$scope = { dirty, ctx };
			}

			swatchlarge17.$set(swatchlarge17_changes);
			const swatchlarge18_changes = {};
			if (dirty & /*colors*/ 1) swatchlarge18_changes.colors = /*colors*/ ctx[0];
			if (dirty & /*overriddenVariables*/ 2) swatchlarge18_changes.overriddenVariables = /*overriddenVariables*/ ctx[1];

			if (dirty & /*$$scope*/ 64) {
				swatchlarge18_changes.$$scope = { dirty, ctx };
			}

			swatchlarge18.$set(swatchlarge18_changes);

			if (dirty & /*unusedColors, colors, overriddenVariables*/ 7) {
				each_value = /*unusedColors*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$b(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$b(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div10, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(swatchlarge0.$$.fragment, local);
			transition_in(swatchlarge1.$$.fragment, local);
			transition_in(swatchlarge2.$$.fragment, local);
			transition_in(swatchlarge3.$$.fragment, local);
			transition_in(swatchlarge4.$$.fragment, local);
			transition_in(swatchlarge5.$$.fragment, local);
			transition_in(swatchlarge6.$$.fragment, local);
			transition_in(swatchlarge7.$$.fragment, local);
			transition_in(swatchlarge8.$$.fragment, local);
			transition_in(swatchlarge9.$$.fragment, local);
			transition_in(swatchlarge10.$$.fragment, local);
			transition_in(swatchlarge11.$$.fragment, local);
			transition_in(swatchlarge12.$$.fragment, local);
			transition_in(swatchlarge13.$$.fragment, local);
			transition_in(swatchlarge14.$$.fragment, local);
			transition_in(swatchlarge15.$$.fragment, local);
			transition_in(swatchlarge16.$$.fragment, local);
			transition_in(swatchlarge17.$$.fragment, local);
			transition_in(swatchlarge18.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(swatchlarge0.$$.fragment, local);
			transition_out(swatchlarge1.$$.fragment, local);
			transition_out(swatchlarge2.$$.fragment, local);
			transition_out(swatchlarge3.$$.fragment, local);
			transition_out(swatchlarge4.$$.fragment, local);
			transition_out(swatchlarge5.$$.fragment, local);
			transition_out(swatchlarge6.$$.fragment, local);
			transition_out(swatchlarge7.$$.fragment, local);
			transition_out(swatchlarge8.$$.fragment, local);
			transition_out(swatchlarge9.$$.fragment, local);
			transition_out(swatchlarge10.$$.fragment, local);
			transition_out(swatchlarge11.$$.fragment, local);
			transition_out(swatchlarge12.$$.fragment, local);
			transition_out(swatchlarge13.$$.fragment, local);
			transition_out(swatchlarge14.$$.fragment, local);
			transition_out(swatchlarge15.$$.fragment, local);
			transition_out(swatchlarge16.$$.fragment, local);
			transition_out(swatchlarge17.$$.fragment, local);
			transition_out(swatchlarge18.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(swatchlarge0);
			destroy_component(swatchlarge1);
			destroy_component(swatchlarge2);
			destroy_component(swatchlarge3);
			destroy_component(swatchlarge4);
			destroy_component(swatchlarge5);
			destroy_component(swatchlarge6);
			destroy_component(swatchlarge7);
			destroy_component(swatchlarge8);
			destroy_component(swatchlarge9);
			destroy_component(swatchlarge10);
			destroy_component(swatchlarge11);
			destroy_component(swatchlarge12);
			destroy_component(swatchlarge13);
			destroy_component(swatchlarge14);
			destroy_component(swatchlarge15);
			destroy_component(swatchlarge16);
			destroy_component(swatchlarge17);
			destroy_component(swatchlarge18);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Z($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Colors", slots, []);
	let colors = {};
	let overriddenVariables = [];
	let unusedColors = [];

	onMount(async () => {
		// Setup listener for updated colors
		window.api.receive("updatedSystemColors", (newColors, newOverriddenVariables) => {
			$$invalidate(0, colors = newColors);
			$$invalidate(1, overriddenVariables = newOverriddenVariables);
		});

		// Get initial colors
		const initialValues = await window.api.invoke("getColors");

		$$invalidate(0, colors = initialValues.colors);
		$$invalidate(1, overriddenVariables = initialValues.overriddenVariables);

		$$invalidate(2, unusedColors = [
			"controlBackgroundColor",
			"quaternaryLabelColor",
			"alternateSelectedControlTextColor",
			"findHighlightColor",
			"gridColor",
			"headerTextColor",
			"highlightColor",
			"linkColor",
			"selectedControlTextColor",
			"selectedTextColor",
			"textBackgroundColor",
			"unemphasizedSelectedContentBackgroundColor",
			"unemphasizedSelectedTextBackgroundColor",
			"unemphasizedSelectedTextColor",
			"windowFrameTextColor"
		]);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Colors> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		stringify,
		state,
		SwatchTable,
		SwatchLarge,
		colors,
		overriddenVariables,
		unusedColors
	});

	$$self.$inject_state = $$props => {
		if ("colors" in $$props) $$invalidate(0, colors = $$props.colors);
		if ("overriddenVariables" in $$props) $$invalidate(1, overriddenVariables = $$props.overriddenVariables);
		if ("unusedColors" in $$props) $$invalidate(2, unusedColors = $$props.unusedColors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [colors, overriddenVariables, unusedColors];
}

class Colors extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-95ujqs-style")) add_css$V();
		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Colors",
			options,
			id: create_fragment$Z.name
		});
	}
}

/* src/js/renderer/component/ui/Description.svelte generated by Svelte v3.30.1 */
const file$U = "src/js/renderer/component/ui/Description.svelte";

function add_css$W() {
	var style = element("style");
	style.id = "svelte-1unwfsi-style";
	style.textContent = "@keyframes svelte-1unwfsi-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}p.svelte-1unwfsi{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;color:var(--secondaryLabelColor);flex-basis:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzY3JpcHRpb24uc3ZlbHRlIiwic291cmNlcyI6WyJEZXNjcmlwdGlvbi5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgc2V0U2l6ZSB9IGZyb20gXCIuL2FjdGlvbnNcIjtcbiAgZXhwb3J0IGxldCBjb21wYWN0ID0gZmFsc2VcbiAgZXhwb3J0IGxldCBtYXJnaW4gPSAnMCdcbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPkBrZXlmcmFtZXMgc2VsZWN0RmllbGQge1xuICBmcm9tIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAyMHB4IHRyYW5zcGFyZW50LCAwIDAgMCAyMHB4IHRyYW5zcGFyZW50O1xuICB9XG4gIHRvIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCA0cHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KSwgMCAwIDAgNHB4IHZhcigtLWNvbnRyb2xBY2NlbnRDb2xvcik7XG4gIH1cbn1cbnAge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDExcHg7XG4gIGxpbmUtaGVpZ2h0OiAxM3B4O1xuICBsZXR0ZXItc3BhY2luZzogMHB4O1xuICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5TGFiZWxDb2xvcik7XG4gIGZsZXgtYmFzaXM6IDEwMCU7XG59PC9zdHlsZT5cblxuPHAgXG4gIGNsYXNzOmNvbXBhY3RcbiAgdXNlOnNldFNpemU9e3ttYXJnaW59fVxuPlxuICA8c2xvdD48L3Nsb3Q+XG48L3A+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTXdCLFdBQVcsMEJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxDQUFDLGVBQUMsQ0FBQyxBQUNELFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsS0FBSyxDQUFFLElBQUkscUJBQXFCLENBQUMsQ0FDakMsVUFBVSxDQUFFLElBQUksQUFDbEIsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$_(ctx) {
	let p;
	let setSize_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			p = element("p");
			if (default_slot) default_slot.c();
			attr_dev(p, "class", "svelte-1unwfsi");
			toggle_class(p, "compact", /*compact*/ ctx[0]);
			add_location(p, file$U, 24, 0, 527);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(setSize_action = setSize.call(null, p, { margin: /*margin*/ ctx[1] }));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 2) setSize_action.update.call(null, { margin: /*margin*/ ctx[1] });

			if (dirty & /*compact*/ 1) {
				toggle_class(p, "compact", /*compact*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$_.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$_($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Description", slots, ['default']);
	let { compact = false } = $$props;
	let { margin = "0" } = $$props;
	const writable_props = ["compact", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Description> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("compact" in $$props) $$invalidate(0, compact = $$props.compact);
		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ setSize, compact, margin });

	$$self.$inject_state = $$props => {
		if ("compact" in $$props) $$invalidate(0, compact = $$props.compact);
		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [compact, margin, $$scope, slots];
}

class Description extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1unwfsi-style")) add_css$W();
		init(this, options, instance$_, create_fragment$_, safe_not_equal, { compact: 0, margin: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Description",
			options,
			id: create_fragment$_.name
		});
	}

	get compact() {
		throw new Error("<Description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<Description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<Description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/PulldownButton.svelte generated by Svelte v3.30.1 */
const file$V = "src/js/renderer/component/ui/PulldownButton.svelte";

function add_css$X() {
	var style = element("style");
	style.id = "svelte-kw501n-style";
	style.textContent = "@keyframes svelte-kw501n-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}button.svelte-kw501n.svelte-kw501n{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;display:inline-flex;align-items:center;color:var(--labelColor);border:none;outline:none;height:20px;padding:2px;padding-left:8px;border-radius:5.5px}.label.svelte-kw501n.svelte-kw501n{flex-grow:1;display:flex;align-items:center;text-align:left;overflow:hidden;word-wrap:none;user-select:none;line-height:20px;transform:translate(0, -0.5px);pointer-events:none}.icon.svelte-kw501n.svelte-kw501n{width:16px;height:16px;border-radius:4px;display:grid;place-items:center;pointer-events:none}.icon.svelte-kw501n.svelte-kw501n::before{content:\"\";-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;width:100%;height:100%;transform:translate(0, 1px);-webkit-mask-size:8px auto;-webkit-mask-image:var(--img-chevron-down-bold)}button.compact.svelte-kw501n.svelte-kw501n{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;height:16px;padding-left:6px;border-radius:4px}button.compact.svelte-kw501n .label.svelte-kw501n{line-height:16px}button.compact.svelte-kw501n .icon.svelte-kw501n{width:12px;height:12px;border-radius:2.5px}button.compact.svelte-kw501n .icon.svelte-kw501n::before{transform:translate(0, 0);-webkit-mask-size:6px auto}button.svelte-kw501n.svelte-kw501n{color:var(--labelColor)}@media(prefers-color-scheme: dark){button.svelte-kw501n.svelte-kw501n{background:var(--buttonBackgroundColor);box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15), 0 1px 1px 0 rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){button.svelte-kw501n.svelte-kw501n{background:var(--buttonBackgroundColor);box-shadow:0 0 0 0.5px rgba(0, 0, 0, 0.08), 0 0.5px 1px 0.5px rgba(0, 0, 0, 0.1)}}.icon.svelte-kw501n.svelte-kw501n{background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){.icon.svelte-kw501n.svelte-kw501n{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.25), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}.icon.svelte-kw501n.svelte-kw501n::before{background:white}@media(prefers-color-scheme: dark){button.menuOpen.svelte-kw501n.svelte-kw501n,button.svelte-kw501n.svelte-kw501n:active:not(.disabled){filter:brightness(1.25)}}@media(prefers-color-scheme: light){button.menuOpen.svelte-kw501n.svelte-kw501n,button.svelte-kw501n.svelte-kw501n:active:not(.disabled){filter:brightness(0.9)}}.disabled.svelte-kw501n.svelte-kw501n{opacity:0.35}.disabled.svelte-kw501n .icon.svelte-kw501n{background:none;box-shadow:none}.disabled.svelte-kw501n .icon.svelte-kw501n::before{background:var(--labelColor)}button.svelte-kw501n:not(.windowFocused) .icon.svelte-kw501n{background:none;box-shadow:none}button.svelte-kw501n:not(.windowFocused) .icon.svelte-kw501n::before{background:var(--labelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$$(ctx) {
	let button;
	let div0;
	let t0;
	let t1;
	let div1;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			div0 = element("div");
			t0 = text(/*label*/ ctx[0]);
			t1 = space();
			div1 = element("div");
			attr_dev(div0, "class", "label svelte-kw501n");
			add_location(div0, file$V, 197, 2, 4615);
			attr_dev(div1, "class", "icon svelte-kw501n");
			add_location(div1, file$V, 198, 2, 4650);
			attr_dev(button, "class", "svelte-kw501n");
			toggle_class(button, "compact", /*compact*/ ctx[2]);
			toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "menuOpen", /*$menu*/ ctx[6].isOpen && /*$menu*/ ctx[6].id == /*id*/ ctx[9]);
			toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[8]);
			add_location(button, file$V, 180, 0, 4240);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, div0);
			append_dev(div0, t0);
			append_dev(button, t1);
			append_dev(button, div1);

			if (!mounted) {
				dispose = [
					action_destroyer(setSize_action = setSize.call(null, button, {
						width: /*width*/ ctx[4],
						margin: /*margin*/ ctx[5]
					})),
					listen_dev(button, "mousedown", /*mousedown_handler*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 1) set_data_dev(t0, /*label*/ ctx[0]);

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width, margin*/ 48) setSize_action.update.call(null, {
				width: /*width*/ ctx[4],
				margin: /*margin*/ ctx[5]
			});

			if (dirty & /*compact*/ 4) {
				toggle_class(button, "compact", /*compact*/ ctx[2]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(button, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*$menu, id*/ 576) {
				toggle_class(button, "menuOpen", /*$menu*/ ctx[6].isOpen && /*$menu*/ ctx[6].id == /*id*/ ctx[9]);
			}

			if (dirty & /*$isWindowFocused*/ 256) {
				toggle_class(button, "windowFocused", /*$isWindowFocused*/ ctx[8]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$$.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$$($$self, $$props, $$invalidate) {
	let $menu;
	let $isWindowFocused;
	validate_store(menu, "menu");
	component_subscribe($$self, menu, $$value => $$invalidate(6, $menu = $$value));
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(8, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PulldownButton", slots, []);
	const dispatch = createEventDispatcher();
	let { label = "Label" } = $$props;
	let { items = [] } = $$props;
	let { compact = false } = $$props;
	let { disabled = false } = $$props;
	let { width = "100px" } = $$props;
	let { margin = "0" } = $$props;

	// Unique ID. Used to match menu with component that opens it.
	let id = nanoid();

	function checkForMenuSelection() {
		const selectionWasMade = !$menu.isOpen && $menu.id == id && $menu.selectedItem;

		if (selectionWasMade) {
			dispatch("selectItem", { item: $menu.selectedItem });
		}
	}

	const writable_props = ["label", "items", "compact", "disabled", "width", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PulldownButton> was created with unknown prop '${key}'`);
	});

	const mousedown_handler = domEvent => {
		if (disabled) return;

		openMenu(domEvent.target, {
			id,
			items,
			type: "pulldown",
			width: menuWidth,
			compact
		});
	};

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		menu,
		openMenu,
		setSize,
		nanoid,
		createEventDispatcher,
		dispatch,
		label,
		items,
		compact,
		disabled,
		width,
		margin,
		id,
		checkForMenuSelection,
		menuWidth,
		$menu,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("items" in $$props) $$invalidate(1, items = $$props.items);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
		if ("id" in $$props) $$invalidate(9, id = $$props.id);
		if ("menuWidth" in $$props) $$invalidate(7, menuWidth = $$props.menuWidth);
	};

	let menuWidth;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width, compact*/ 20) {
			// Button label == checked item label
			// $: label = items.find((i) => i.checked)?.label
			// For text buttons like PopupButton and PulldownButton, we want the menu width to match the button's, plus some padding.
			 $$invalidate(7, menuWidth = `${parseInt(width) + (compact ? 6 : 12)}px`);
		}

		if ($$self.$$.dirty & /*$menu*/ 64) {
			// Was a selection made? If yes, dispatch event. Criteria is: when `menu` store changes, is it: 1) closed, 2) set to this component instance's `id`, and 3) set to a valid `selectedItem` value (not undefined)
			 (checkForMenuSelection());
		}
	};

	return [
		label,
		items,
		compact,
		disabled,
		width,
		margin,
		$menu,
		menuWidth,
		$isWindowFocused,
		id,
		mousedown_handler
	];
}

class PulldownButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-kw501n-style")) add_css$X();

		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
			label: 0,
			items: 1,
			compact: 2,
			disabled: 3,
			width: 4,
			margin: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PulldownButton",
			options,
			id: create_fragment$$.name
		});
	}

	get label() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get items() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<PulldownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<PulldownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/RadioButton.svelte generated by Svelte v3.30.1 */
const file$W = "src/js/renderer/component/ui/RadioButton.svelte";

function add_css$Y() {
	var style = element("style");
	style.id = "svelte-h0ccc1-style";
	style.textContent = "@keyframes svelte-h0ccc1-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.radio.svelte-h0ccc1.svelte-h0ccc1.svelte-h0ccc1{display:flex;gap:0 5px;min-height:20px}.radio.svelte-h0ccc1 .input.svelte-h0ccc1.svelte-h0ccc1{display:flex}.radio.svelte-h0ccc1 input.svelte-h0ccc1.svelte-h0ccc1{opacity:0;width:0;height:0;margin:0}.radio.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{display:block;transform:translate(0, 3px);width:14px;height:14px;border-radius:50%}.radio.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1::before{content:\"\";position:absolute;top:0;left:0;border-radius:inherit;width:100%;height:100%;transform:scale(0.4)}.radio.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1::after{content:\"\";position:absolute;top:0;left:0;border-radius:inherit;width:100%;height:100%}.radio.svelte-h0ccc1 .label.svelte-h0ccc1.svelte-h0ccc1{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;transform:translate(0, 3px);color:var(--labelColor);user-select:none}@media(prefers-color-scheme: dark){.control.svelte-h0ccc1.svelte-h0ccc1.svelte-h0ccc1{background:linear-gradient(rgba(255, 255, 255, 0.27), rgba(255, 255, 255, 0.38)), var(--buttonBackgroundColor);box-shadow:inset 0 1px 0 0 rgba(255, 255, 255, 0.15), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.control.svelte-h0ccc1.svelte-h0ccc1.svelte-h0ccc1{background:var(--buttonBackgroundColor);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}.control.svelte-h0ccc1.svelte-h0ccc1.svelte-h0ccc1::before{opacity:0}.checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{background:linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}@media(prefers-color-scheme: dark){.checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.3), 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}@media(prefers-color-scheme: light){.checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{box-shadow:none}}.checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1::before{background:white;opacity:1}@media(prefers-color-scheme: dark){.radio.svelte-h0ccc1:not(.disabled):not(.checked) input.svelte-h0ccc1:active+.control.svelte-h0ccc1{filter:brightness(1.25)}}@media(prefers-color-scheme: light){.radio.svelte-h0ccc1:not(.disabled):not(.checked) input.svelte-h0ccc1:active+.control.svelte-h0ccc1{filter:brightness(0.95)}}@media(prefers-color-scheme: dark){.radio:not(.disabled).checked.svelte-h0ccc1 input.svelte-h0ccc1:active+.control.svelte-h0ccc1{filter:brightness(1.25)}}@media(prefers-color-scheme: light){.radio:not(.disabled).checked.svelte-h0ccc1 input.svelte-h0ccc1:active+.control.svelte-h0ccc1{background:linear-gradient(rgba(0, 0, 0, 0.15), rgba(0, 0, 0, 0.15)), linear-gradient(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)), var(--darkerControlAccentColor)}}@media(prefers-color-scheme: dark){}@media(prefers-color-scheme: light){}@media(prefers-color-scheme: dark){.radio:not(.windowFocused).checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{background:linear-gradient(rgba(255, 255, 255, 0.27), rgba(255, 255, 255, 0.38)), var(--buttonBackgroundColor);box-shadow:inset 0 1px 0 0 rgba(255, 255, 255, 0.15), 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.radio:not(.windowFocused).checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1{background:var(--buttonBackgroundColor);box-shadow:inset 0 1.5px 1px 0 rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}}.radio:not(.windowFocused).checked.svelte-h0ccc1 .control.svelte-h0ccc1.svelte-h0ccc1::before{background:var(--labelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$10(ctx) {
	let label_1;
	let span1;
	let input;
	let t0;
	let span0;
	let t1;
	let span2;
	let t2;
	let setSize_action;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label_1 = element("label");
			span1 = element("span");
			input = element("input");
			t0 = space();
			span0 = element("span");
			t1 = space();
			span2 = element("span");
			t2 = text(/*label*/ ctx[2]);
			attr_dev(input, "type", "radio");
			input.__value = /*value*/ ctx[1];
			input.value = input.__value;
			attr_dev(input, "class", "svelte-h0ccc1");
			/*$$binding_groups*/ ctx[10][0].push(input);
			add_location(input, file$W, 183, 4, 4556);
			attr_dev(span0, "class", "control svelte-h0ccc1");
			add_location(span0, file$W, 184, 4, 4606);
			attr_dev(span1, "class", "input svelte-h0ccc1");
			add_location(span1, file$W, 182, 2, 4531);
			attr_dev(span2, "class", "label svelte-h0ccc1");
			add_location(span2, file$W, 186, 2, 4648);
			attr_dev(label_1, "class", "radio svelte-h0ccc1");
			toggle_class(label_1, "compact", /*compact*/ ctx[3]);
			toggle_class(label_1, "checked", /*checked*/ ctx[5]);
			toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			add_location(label_1, file$W, 174, 0, 4389);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, span1);
			append_dev(span1, input);
			input.checked = input.__value === /*group*/ ctx[0];
			append_dev(span1, t0);
			append_dev(span1, span0);
			append_dev(label_1, t1);
			append_dev(label_1, span2);
			append_dev(span2, t2);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[9]),
					action_destroyer(setSize_action = setSize.call(null, label_1, { margin: /*margin*/ ctx[4] })),
					listen_dev(label_1, "click", /*click_handler*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 2) {
				prop_dev(input, "__value", /*value*/ ctx[1]);
				input.value = input.__value;
			}

			if (dirty & /*group*/ 1) {
				input.checked = input.__value === /*group*/ ctx[0];
			}

			if (dirty & /*label*/ 4) set_data_dev(t2, /*label*/ ctx[2]);
			if (setSize_action && is_function(setSize_action.update) && dirty & /*margin*/ 16) setSize_action.update.call(null, { margin: /*margin*/ ctx[4] });

			if (dirty & /*compact*/ 8) {
				toggle_class(label_1, "compact", /*compact*/ ctx[3]);
			}

			if (dirty & /*checked*/ 32) {
				toggle_class(label_1, "checked", /*checked*/ ctx[5]);
			}

			if (dirty & /*$isWindowFocused*/ 64) {
				toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			/*$$binding_groups*/ ctx[10][0].splice(/*$$binding_groups*/ ctx[10][0].indexOf(input), 1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$10.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$10($$self, $$props, $$invalidate) {
	let $isWindowFocused;
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(6, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("RadioButton", slots, []);
	let { group = undefined } = $$props;
	let { value = undefined } = $$props;
	let { label = "" } = $$props;
	let { compact = false } = $$props;
	let { disabled = false } = $$props;
	let { margin = "0" } = $$props;
	const writable_props = ["group", "value", "label", "compact", "disabled", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RadioButton> was created with unknown prop '${key}'`);
	});

	const $$binding_groups = [[]];

	function click_handler(event) {
		bubble($$self, event);
	}

	function input_change_handler() {
		group = this.__value;
		$$invalidate(0, group);
	}

	$$self.$$set = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("compact" in $$props) $$invalidate(3, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(7, disabled = $$props.disabled);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		setSize,
		group,
		value,
		label,
		compact,
		disabled,
		margin,
		checked,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("group" in $$props) $$invalidate(0, group = $$props.group);
		if ("value" in $$props) $$invalidate(1, value = $$props.value);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("compact" in $$props) $$invalidate(3, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(7, disabled = $$props.disabled);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
		if ("checked" in $$props) $$invalidate(5, checked = $$props.checked);
	};

	let checked;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*group, value*/ 3) {
			// Radio is checked when `group == value`
			 $$invalidate(5, checked = group == value);
		}
	};

	return [
		group,
		value,
		label,
		compact,
		margin,
		checked,
		$isWindowFocused,
		disabled,
		click_handler,
		input_change_handler,
		$$binding_groups
	];
}

class RadioButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-h0ccc1-style")) add_css$Y();

		init(this, options, instance$10, create_fragment$10, safe_not_equal, {
			group: 0,
			value: 1,
			label: 2,
			compact: 3,
			disabled: 7,
			margin: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RadioButton",
			options,
			id: create_fragment$10.name
		});
	}

	get group() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/ui/Stepper.svelte generated by Svelte v3.30.1 */
const file$X = "src/js/renderer/component/ui/Stepper.svelte";

function add_css$Z() {
	var style = element("style");
	style.id = "svelte-2dt8ye-style";
	style.textContent = "@keyframes svelte-2dt8ye-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.stepper.svelte-2dt8ye.svelte-2dt8ye{display:flex;gap:0 5px;min-height:20px}.stepper.svelte-2dt8ye .input.svelte-2dt8ye{position:relative}.stepper.svelte-2dt8ye .input.svelte-2dt8ye::after{content:\"\";position:absolute;border-radius:inherit;top:0;left:0;width:100%;height:100%}.stepper.svelte-2dt8ye input.svelte-2dt8ye{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;margin:0;height:20px;outline:none}.stepper.svelte-2dt8ye .buttons.svelte-2dt8ye{display:flex;flex-direction:column;border-radius:5.5px}.stepper.svelte-2dt8ye button.svelte-2dt8ye{position:relative;display:inline;border:none;outline:none;width:14px;height:10px;border-radius:5.5px 5.5px 0 0}.stepper.svelte-2dt8ye button.svelte-2dt8ye::before{content:\"\";-webkit-mask-size:contain;-webkit-mask-position:center;-webkit-mask-repeat:no-repeat;width:100%;height:100%;position:absolute;top:0;left:0;transform:rotateZ(180deg) scale(0.7);transform-origin:center;-webkit-mask-size:10px;-webkit-mask-image:var(--img-chevron-down-heavy)}.stepper.svelte-2dt8ye button.svelte-2dt8ye::after{content:\"\";width:100%;height:100%;position:absolute;top:0;left:0}.stepper.svelte-2dt8ye button.down.svelte-2dt8ye{transform:rotateZ(180deg)}.stepper.svelte-2dt8ye .label.svelte-2dt8ye{font-family:system-ui;font-weight:normal;font-size:13px;line-height:15px;letter-spacing:-0.08px;color:var(--labelColor);transform:translate(0, 3px);user-select:none;margin-left:5px}input.svelte-2dt8ye.svelte-2dt8ye{border:none}@media(prefers-color-scheme: dark){input.svelte-2dt8ye.svelte-2dt8ye{color:var(--textColor);background:rgba(var(--foregroundColor), 0.07);box-shadow:inset 0 -1px 0 0 rgba(255, 255, 255, 0.075), inset 0 0 0 0.5px rgba(255, 255, 255, 0.1), inset 0 1px 0.5px 0 rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){input.svelte-2dt8ye.svelte-2dt8ye{background:rgba(var(--foregroundColor), 1);box-shadow:inset 0 -1px 0 0 rgba(0, 0, 0, 0.15), inset 0 0 0 0.5px rgba(0, 0, 0, 0.15)}}@media(prefers-color-scheme: light){.buttons.svelte-2dt8ye.svelte-2dt8ye{box-shadow:0 0 2px 0 rgba(0, 0, 0, 0.1)}}@media(prefers-color-scheme: dark){button.svelte-2dt8ye.svelte-2dt8ye{background:var(--buttonBackgroundColor)}button.svelte-2dt8ye.svelte-2dt8ye::before{background:white}button.svelte-2dt8ye.svelte-2dt8ye::after{box-shadow:inset 0 -0.5px 0 0 rgba(0, 0, 0, 0.16)}}@media(prefers-color-scheme: light){button.svelte-2dt8ye.svelte-2dt8ye{background:linear-gradient(rgba(0, 0, 0, 0) 75%, rgba(0, 0, 0, 0.08) 99%), var(--buttonBackgroundColor);box-shadow:inset 0 0.5px 0 0.5px rgba(0, 0, 0, 0.1), inset 0 0 0 0.5px rgba(0, 0, 0, 0.2)}button.svelte-2dt8ye.svelte-2dt8ye::before{background:var(--labelColor)}}@media(prefers-color-scheme: dark){button.up.svelte-2dt8ye.svelte-2dt8ye{box-shadow:inset 0 0.5px 0 0 rgba(255, 255, 255, 0.1)}}.input.svelte-2dt8ye.svelte-2dt8ye:focus-within{border-radius:1px}.input.svelte-2dt8ye.svelte-2dt8ye:focus-within::after{animation-fill-mode:forwards;animation-name:svelte-2dt8ye-selectField;animation-duration:0.3s}@media(prefers-color-scheme: dark){.stepper.svelte-2dt8ye:not(.disabled) button.svelte-2dt8ye:active{filter:brightness(1.25)}}@media(prefers-color-scheme: light){.stepper.svelte-2dt8ye:not(.disabled) button.svelte-2dt8ye:active{filter:brightness(0.9)}}.disabled.svelte-2dt8ye .input.svelte-2dt8ye,.disabled.svelte-2dt8ye .buttons.svelte-2dt8ye{opacity:0.4}.disabled.svelte-2dt8ye .label.svelte-2dt8ye{opacity:0.3}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function create_fragment$11(ctx) {
	let label_1;
	let span0;
	let input;
	let setSize_action;
	let t0;
	let span1;
	let button0;
	let t1;
	let button1;
	let t2;
	let span2;
	let t3;
	let setSize_action_1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label_1 = element("label");
			span0 = element("span");
			input = element("input");
			t0 = space();
			span1 = element("span");
			button0 = element("button");
			t1 = space();
			button1 = element("button");
			t2 = space();
			span2 = element("span");
			t3 = text(/*label*/ ctx[1]);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "svelte-2dt8ye");
			add_location(input, file$X, 204, 4, 4173);
			attr_dev(span0, "class", "input svelte-2dt8ye");
			add_location(span0, file$X, 203, 2, 4148);
			attr_dev(button0, "class", "up svelte-2dt8ye");
			add_location(button0, file$X, 207, 4, 4265);
			attr_dev(button1, "class", "down svelte-2dt8ye");
			add_location(button1, file$X, 208, 4, 4312);
			attr_dev(span1, "class", "buttons svelte-2dt8ye");
			add_location(span1, file$X, 206, 2, 4238);
			attr_dev(span2, "class", "label svelte-2dt8ye");
			add_location(span2, file$X, 210, 2, 4371);
			attr_dev(label_1, "class", "stepper svelte-2dt8ye");
			toggle_class(label_1, "compact", /*compact*/ ctx[2]);
			toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			toggle_class(label_1, "disabled", /*disabled*/ ctx[3]);
			add_location(label_1, file$X, 196, 0, 4017);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label_1, anchor);
			append_dev(label_1, span0);
			append_dev(span0, input);
			set_input_value(input, /*value*/ ctx[0]);
			append_dev(label_1, t0);
			append_dev(label_1, span1);
			append_dev(span1, button0);
			append_dev(span1, t1);
			append_dev(span1, button1);
			append_dev(label_1, t2);
			append_dev(label_1, span2);
			append_dev(span2, t3);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[11]),
					action_destroyer(setSize_action = setSize.call(null, input, { width: /*width*/ ctx[4] })),
					listen_dev(button0, "click", /*up*/ ctx[7], false, false, false),
					listen_dev(button1, "click", /*down*/ ctx[8], false, false, false),
					action_destroyer(setSize_action_1 = setSize.call(null, label_1, { margin: /*margin*/ ctx[5] }))
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			if (setSize_action && is_function(setSize_action.update) && dirty & /*width*/ 16) setSize_action.update.call(null, { width: /*width*/ ctx[4] });
			if (dirty & /*label*/ 2) set_data_dev(t3, /*label*/ ctx[1]);
			if (setSize_action_1 && is_function(setSize_action_1.update) && dirty & /*margin*/ 32) setSize_action_1.update.call(null, { margin: /*margin*/ ctx[5] });

			if (dirty & /*compact*/ 4) {
				toggle_class(label_1, "compact", /*compact*/ ctx[2]);
			}

			if (dirty & /*$isWindowFocused*/ 64) {
				toggle_class(label_1, "windowFocused", /*$isWindowFocused*/ ctx[6]);
			}

			if (dirty & /*disabled*/ 8) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(label_1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$11.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onValueChanged() {
	
} // console.log('Value =', value)

function instance$11($$self, $$props, $$invalidate) {
	let $isWindowFocused;
	validate_store(isWindowFocused, "isWindowFocused");
	component_subscribe($$self, isWindowFocused, $$value => $$invalidate(6, $isWindowFocused = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Stepper", slots, []);
	let { label = "" } = $$props;
	let { min = 0 } = $$props;
	let { max = 5 } = $$props;
	let { value = 3 } = $$props;
	let { compact = false } = $$props;
	let { disabled = false } = $$props;
	let { width = "40px" } = $$props;
	let { margin = "0" } = $$props;

	function up() {
		if (!disabled && value < max) $$invalidate(0, value++, value);
	}

	function down() {
		if (!disabled && value > min) $$invalidate(0, value--, value);
	}

	const writable_props = ["label", "min", "max", "value", "compact", "disabled", "width", "margin"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Stepper> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("min" in $$props) $$invalidate(9, min = $$props.min);
		if ("max" in $$props) $$invalidate(10, max = $$props.max);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
	};

	$$self.$capture_state = () => ({
		isWindowFocused,
		setSize,
		label,
		min,
		max,
		value,
		compact,
		disabled,
		width,
		margin,
		onValueChanged,
		up,
		down,
		$isWindowFocused
	});

	$$self.$inject_state = $$props => {
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
		if ("min" in $$props) $$invalidate(9, min = $$props.min);
		if ("max" in $$props) $$invalidate(10, max = $$props.max);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("compact" in $$props) $$invalidate(2, compact = $$props.compact);
		if ("disabled" in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("margin" in $$props) $$invalidate(5, margin = $$props.margin);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) ;
	};

	return [
		value,
		label,
		compact,
		disabled,
		width,
		margin,
		$isWindowFocused,
		up,
		down,
		min,
		max,
		input_input_handler
	];
}

class Stepper extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-2dt8ye-style")) add_css$Z();

		init(this, options, instance$11, create_fragment$11, safe_not_equal, {
			label: 1,
			min: 9,
			max: 10,
			value: 0,
			compact: 2,
			disabled: 3,
			width: 4,
			margin: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Stepper",
			options,
			id: create_fragment$11.name
		});
	}

	get label() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get compact() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set compact(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get margin() {
		throw new Error("<Stepper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set margin(value) {
		throw new Error("<Stepper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/js/renderer/component/dev/UIElements.svelte generated by Svelte v3.30.1 */

const { console: console_1$4 } = globals;
const file$Y = "src/js/renderer/component/dev/UIElements.svelte";

function add_css$_() {
	var style = element("style");
	style.id = "svelte-1uj3hpe-style";
	style.textContent = "@keyframes svelte-1uj3hpe-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}.block.svelte-1uj3hpe{padding:0rem 1rem;overflow:scroll}h1.svelte-1uj3hpe{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--labelColor)}section.svelte-1uj3hpe{margin:10px 0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document.head, style);
}

function get_each_context$c(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (164:4) <FormRow label={'InputText:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_27(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "sidebar"
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "toolbar"
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "inline"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(164:4) <FormRow label={'InputText:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (170:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_26(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "sidebar",
				compact: true
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "toolbar",
				compact: true
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "inline",
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(170:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (176:4) <FormRow label={'Single line:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_25(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				width: "110px",
				style: "sidebar",
				value: "It was the best."
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				width: "110px",
				style: "toolbar",
				value: "It was the best of times, it was the Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us."
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				width: "110px",
				style: "inline",
				value: "It was the best of times, it was the Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us."
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(176:4) <FormRow label={'Single line:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (182:4) <FormRow label={'Multi line:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_24(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				multiLine: true,
				multiLineMaxHeight: 100,
				width: "110px",
				style: "sidebar",
				value: "It was the best."
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				multiLine: true,
				multiLineMaxHeight: 100,
				width: "110px",
				style: "toolbar",
				value: "It was the best of times, it was the Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us."
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				multiLine: true,
				multiLineMaxHeight: 100,
				width: "110px",
				style: "inline",
				value: "It was the best of times, it was the Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us."
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(182:4) <FormRow label={'Multi line:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (188:4) <FormRow label={'With icon:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_23(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "sidebar",
				icon: "img-magnifyingglass"
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "toolbar",
				icon: "img-magnifyingglass"
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "inline",
				icon: "img-magnifyingglass"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(188:4) <FormRow label={'With icon:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (194:4) <FormRow label={'With icon & compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_22(ctx) {
	let inputtext0;
	let t0;
	let inputtext1;
	let t1;
	let inputtext2;
	let current;

	inputtext0 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "sidebar",
				icon: "img-magnifyingglass",
				compact: true
			},
			$$inline: true
		});

	inputtext1 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "toolbar",
				icon: "img-magnifyingglass",
				compact: true
			},
			$$inline: true
		});

	inputtext2 = new InputText({
			props: {
				placeholder: "Replace",
				width: "110px",
				style: "inline",
				icon: "img-magnifyingglass",
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext0.$$.fragment);
			t0 = space();
			create_component(inputtext1.$$.fragment);
			t1 = space();
			create_component(inputtext2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(inputtext1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(inputtext2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext0.$$.fragment, local);
			transition_in(inputtext1.$$.fragment, local);
			transition_in(inputtext2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext0.$$.fragment, local);
			transition_out(inputtext1.$$.fragment, local);
			transition_out(inputtext2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(inputtext1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(inputtext2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(194:4) <FormRow label={'With icon & compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (202:6) <Description margin={'4px 0 0'}>
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("An image with alt text on an empty line will be interpreted as a figure element. The image’s alt text will be used as the caption.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(202:6) <Description margin={'4px 0 0'}>",
		ctx
	});

	return block;
}

// (200:4) <FormRow label={'With Description:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>
function create_default_slot_20(ctx) {
	let inputtext;
	let t;
	let description;
	let current;

	inputtext = new InputText({
			props: {
				placeholder: "Replace",
				width: "300px",
				style: "inline"
			},
			$$inline: true
		});

	description = new Description({
			props: {
				margin: "4px 0 0",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
			t = space();
			create_component(description.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(description, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const description_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				description_changes.$$scope = { dirty, ctx };
			}

			description.$set(description_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			transition_in(description.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			transition_out(description.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
			if (detaching) detach_dev(t);
			destroy_component(description, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(200:4) <FormRow label={'With Description:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>",
		ctx
	});

	return block;
}

// (207:4) <FormRow label={'Disabled:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>
function create_default_slot_19(ctx) {
	let inputtext;
	let current;

	inputtext = new InputText({
			props: {
				placeholder: "I am disabled",
				width: "300px",
				style: "inline",
				isDisabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(207:4) <FormRow label={'Disabled:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>",
		ctx
	});

	return block;
}

// (211:4) <FormRow label={'Error:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>
function create_default_slot_18$1(ctx) {
	let inputtext;
	let current;

	inputtext = new InputText({
			props: {
				placeholder: "I have an error",
				width: "300px",
				style: "inline",
				isError: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(inputtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(inputtext, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(inputtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18$1.name,
		type: "slot",
		source: "(211:4) <FormRow label={'Error:'} {maxWidth} {leftColumn} {gap} {margin} multiLine={true} labelTopOffset={'7px'}>",
		ctx
	});

	return block;
}

// (222:4) <FormRow label={'IconButton:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_17$1(ctx) {
	let iconbutton0;
	let t;
	let iconbutton1;
	let current;

	iconbutton0 = new IconButton({
			props: { tooltip: "Tooltip" },
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: { tooltip: "Tooltip", disabled: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t = space();
			create_component(iconbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(iconbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(iconbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17$1.name,
		type: "slot",
		source: "(222:4) <FormRow label={'IconButton:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (226:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_16$1(ctx) {
	let iconbutton0;
	let t;
	let iconbutton1;
	let current;

	iconbutton0 = new IconButton({
			props: { tooltip: "Tooltip", compact: true },
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				tooltip: "Tooltip",
				disabled: true,
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t = space();
			create_component(iconbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(iconbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(iconbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16$1.name,
		type: "slot",
		source: "(226:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (237:4) <FormRow label={'IconButton w/ Menu:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_15$1(ctx) {
	let iconbutton0;
	let t0;
	let iconbutton1;
	let t1;
	let iconbutton2;
	let current;

	iconbutton0 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: true
			},
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: false
			},
			$$inline: true
		});

	iconbutton2 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: true,
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			create_component(iconbutton2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(iconbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(iconbutton2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(iconbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(iconbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15$1.name,
		type: "slot",
		source: "(237:4) <FormRow label={'IconButton w/ Menu:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (242:4) <FormRow label={'IconButton w/ Menu (compact):'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_14$1(ctx) {
	let iconbutton0;
	let t0;
	let iconbutton1;
	let t1;
	let iconbutton2;
	let current;

	iconbutton0 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: true,
				compact: true
			},
			$$inline: true
		});

	iconbutton1 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: false,
				compact: true
			},
			$$inline: true
		});

	iconbutton2 = new IconButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				tooltip: "Tooltip",
				icon: "img-arrow-up-arrow-down",
				showCaret: true,
				disabled: true,
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton0.$$.fragment);
			t0 = space();
			create_component(iconbutton1.$$.fragment);
			t1 = space();
			create_component(iconbutton2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(iconbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(iconbutton2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton0.$$.fragment, local);
			transition_in(iconbutton1.$$.fragment, local);
			transition_in(iconbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton0.$$.fragment, local);
			transition_out(iconbutton1.$$.fragment, local);
			transition_out(iconbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(iconbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(iconbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14$1.name,
		type: "slot",
		source: "(242:4) <FormRow label={'IconButton w/ Menu (compact):'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (255:4) <FormRow label={'PopupButton:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_13$1(ctx) {
	let popupbutton0;
	let t;
	let popupbutton1;
	let current;

	popupbutton0 = new PopupButton({
			props: {
				items: /*popupMenuItems*/ ctx[5],
				width: "110px"
			},
			$$inline: true
		});

	popupbutton1 = new PopupButton({
			props: {
				items: /*popupMenuItems*/ ctx[5],
				width: "110px",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(popupbutton0.$$.fragment);
			t = space();
			create_component(popupbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(popupbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(popupbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(popupbutton0.$$.fragment, local);
			transition_in(popupbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(popupbutton0.$$.fragment, local);
			transition_out(popupbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(popupbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(popupbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13$1.name,
		type: "slot",
		source: "(255:4) <FormRow label={'PopupButton:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (260:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_12$1(ctx) {
	let popupbutton0;
	let t;
	let popupbutton1;
	let current;

	popupbutton0 = new PopupButton({
			props: {
				items: /*popupMenuItems*/ ctx[5],
				width: "110px",
				compact: true
			},
			$$inline: true
		});

	popupbutton1 = new PopupButton({
			props: {
				items: /*popupMenuItems*/ ctx[5],
				width: "110px",
				disabled: true,
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(popupbutton0.$$.fragment);
			t = space();
			create_component(popupbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(popupbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(popupbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(popupbutton0.$$.fragment, local);
			transition_in(popupbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(popupbutton0.$$.fragment, local);
			transition_out(popupbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(popupbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(popupbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12$1.name,
		type: "slot",
		source: "(260:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (271:4) <FormRow label={'PulldownButton:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_11$1(ctx) {
	let pulldownbutton0;
	let t;
	let pulldownbutton1;
	let current;

	pulldownbutton0 = new PulldownButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				width: "110px"
			},
			$$inline: true
		});

	pulldownbutton0.$on("select", /*select_handler*/ ctx[7]);

	pulldownbutton1 = new PulldownButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				width: "110px",
				disabled: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(pulldownbutton0.$$.fragment);
			t = space();
			create_component(pulldownbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(pulldownbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(pulldownbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(pulldownbutton0.$$.fragment, local);
			transition_in(pulldownbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pulldownbutton0.$$.fragment, local);
			transition_out(pulldownbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pulldownbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(pulldownbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11$1.name,
		type: "slot",
		source: "(271:4) <FormRow label={'PulldownButton:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (276:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_10$1(ctx) {
	let pulldownbutton0;
	let t;
	let pulldownbutton1;
	let current;

	pulldownbutton0 = new PulldownButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				width: "110px",
				compact: true
			},
			$$inline: true
		});

	pulldownbutton0.$on("select", /*select_handler_1*/ ctx[8]);

	pulldownbutton1 = new PulldownButton({
			props: {
				items: /*pulldownMenuItems*/ ctx[6],
				width: "110px",
				disabled: true,
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(pulldownbutton0.$$.fragment);
			t = space();
			create_component(pulldownbutton1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(pulldownbutton0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(pulldownbutton1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(pulldownbutton0.$$.fragment, local);
			transition_in(pulldownbutton1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pulldownbutton0.$$.fragment, local);
			transition_out(pulldownbutton1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pulldownbutton0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(pulldownbutton1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10$1.name,
		type: "slot",
		source: "(276:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (287:4) <FormRow label={'PushButton:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_9$1(ctx) {
	let pushbutton0;
	let t0;
	let pushbutton1;
	let t1;
	let pushbutton2;
	let current;

	pushbutton0 = new PushButton({
			props: { label: "Normal", width: "110px" },
			$$inline: true
		});

	pushbutton1 = new PushButton({
			props: {
				label: "Emphasized",
				emphasized: true,
				width: "110px"
			},
			$$inline: true
		});

	pushbutton2 = new PushButton({
			props: {
				label: "Disabled",
				disabled: true,
				width: "110px"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(pushbutton0.$$.fragment);
			t0 = space();
			create_component(pushbutton1.$$.fragment);
			t1 = space();
			create_component(pushbutton2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(pushbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(pushbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(pushbutton2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(pushbutton0.$$.fragment, local);
			transition_in(pushbutton1.$$.fragment, local);
			transition_in(pushbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pushbutton0.$$.fragment, local);
			transition_out(pushbutton1.$$.fragment, local);
			transition_out(pushbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pushbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(pushbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(pushbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$1.name,
		type: "slot",
		source: "(287:4) <FormRow label={'PushButton:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (293:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_8$1(ctx) {
	let pushbutton0;
	let t0;
	let pushbutton1;
	let t1;
	let pushbutton2;
	let current;

	pushbutton0 = new PushButton({
			props: {
				label: "Normal",
				width: "110px",
				compact: true
			},
			$$inline: true
		});

	pushbutton1 = new PushButton({
			props: {
				label: "Emphasized",
				emphasized: true,
				width: "110px",
				compact: true
			},
			$$inline: true
		});

	pushbutton2 = new PushButton({
			props: {
				label: "Disabled",
				disabled: true,
				width: "110px",
				compact: true
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(pushbutton0.$$.fragment);
			t0 = space();
			create_component(pushbutton1.$$.fragment);
			t1 = space();
			create_component(pushbutton2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(pushbutton0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(pushbutton1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(pushbutton2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(pushbutton0.$$.fragment, local);
			transition_in(pushbutton1.$$.fragment, local);
			transition_in(pushbutton2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pushbutton0.$$.fragment, local);
			transition_out(pushbutton1.$$.fragment, local);
			transition_out(pushbutton2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pushbutton0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(pushbutton1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(pushbutton2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$1.name,
		type: "slot",
		source: "(293:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (306:6) {#each radioList.items as item}
function create_each_block_1(ctx) {
	let radiobutton;
	let updating_group;
	let current;

	function radiobutton_group_binding(value) {
		/*radiobutton_group_binding*/ ctx[9].call(null, value);
	}

	let radiobutton_props = {
		value: /*item*/ ctx[12].id,
		label: /*item*/ ctx[12].label
	};

	if (/*radioList*/ ctx[0].selected !== void 0) {
		radiobutton_props.group = /*radioList*/ ctx[0].selected;
	}

	radiobutton = new RadioButton({ props: radiobutton_props, $$inline: true });
	binding_callbacks.push(() => bind(radiobutton, "group", radiobutton_group_binding));

	const block = {
		c: function create() {
			create_component(radiobutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radiobutton_changes = {};
			if (dirty & /*radioList*/ 1) radiobutton_changes.value = /*item*/ ctx[12].id;
			if (dirty & /*radioList*/ 1) radiobutton_changes.label = /*item*/ ctx[12].label;

			if (!updating_group && dirty & /*radioList*/ 1) {
				updating_group = true;
				radiobutton_changes.group = /*radioList*/ ctx[0].selected;
				add_flush_callback(() => updating_group = false);
			}

			radiobutton.$set(radiobutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(306:6) {#each radioList.items as item}",
		ctx
	});

	return block;
}

// (305:4) <FormRow label={'RadioButton:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_7$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*radioList*/ ctx[0].items;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*radioList*/ 1) {
				each_value_1 = /*radioList*/ ctx[0].items;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$1.name,
		type: "slot",
		source: "(305:4) <FormRow label={'RadioButton:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (312:6) {#each radioList.items as item}
function create_each_block$c(ctx) {
	let radiobutton;
	let updating_group;
	let current;

	function radiobutton_group_binding_1(value) {
		/*radiobutton_group_binding_1*/ ctx[10].call(null, value);
	}

	let radiobutton_props = {
		value: /*item*/ ctx[12].id,
		label: /*item*/ ctx[12].label,
		compact: true
	};

	if (/*radioList*/ ctx[0].selected !== void 0) {
		radiobutton_props.group = /*radioList*/ ctx[0].selected;
	}

	radiobutton = new RadioButton({ props: radiobutton_props, $$inline: true });
	binding_callbacks.push(() => bind(radiobutton, "group", radiobutton_group_binding_1));

	const block = {
		c: function create() {
			create_component(radiobutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radiobutton_changes = {};
			if (dirty & /*radioList*/ 1) radiobutton_changes.value = /*item*/ ctx[12].id;
			if (dirty & /*radioList*/ 1) radiobutton_changes.label = /*item*/ ctx[12].label;

			if (!updating_group && dirty & /*radioList*/ 1) {
				updating_group = true;
				radiobutton_changes.group = /*radioList*/ ctx[0].selected;
				add_flush_callback(() => updating_group = false);
			}

			radiobutton.$set(radiobutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$c.name,
		type: "each",
		source: "(312:6) {#each radioList.items as item}",
		ctx
	});

	return block;
}

// (311:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_6$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*radioList*/ ctx[0].items;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*radioList*/ 1) {
				each_value = /*radioList*/ ctx[0].items;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$c(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$c(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$1.name,
		type: "slot",
		source: "(311:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (323:4) <FormRow label={'Checkbox:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_5$2(ctx) {
	let checkbox0;
	let t0;
	let checkbox1;
	let t1;
	let checkbox2;
	let t2;
	let checkbox3;
	let current;

	checkbox0 = new Checkbox({
			props: { compact: false, checked: true },
			$$inline: true
		});

	checkbox1 = new Checkbox({
			props: { compact: false, checked: false },
			$$inline: true
		});

	checkbox2 = new Checkbox({
			props: {
				compact: false,
				disabled: true,
				checked: true
			},
			$$inline: true
		});

	checkbox3 = new Checkbox({
			props: {
				compact: false,
				disabled: true,
				checked: false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(checkbox0.$$.fragment);
			t0 = space();
			create_component(checkbox1.$$.fragment);
			t1 = space();
			create_component(checkbox2.$$.fragment);
			t2 = space();
			create_component(checkbox3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(checkbox1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(checkbox2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(checkbox3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox0.$$.fragment, local);
			transition_in(checkbox1.$$.fragment, local);
			transition_in(checkbox2.$$.fragment, local);
			transition_in(checkbox3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox0.$$.fragment, local);
			transition_out(checkbox1.$$.fragment, local);
			transition_out(checkbox2.$$.fragment, local);
			transition_out(checkbox3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(checkbox1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(checkbox2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(checkbox3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$2.name,
		type: "slot",
		source: "(323:4) <FormRow label={'Checkbox:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (332:6) <Description margin={'4px 0 0 20px'}>
function create_default_slot_4$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("An image with alt text on an empty line will be interpreted as a figure element. The image’s alt text will be used as the caption.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$4.name,
		type: "slot",
		source: "(332:6) <Description margin={'4px 0 0 20px'}>",
		ctx
	});

	return block;
}

// (330:4) <FormRow label={'Checkbox:'} {maxWidth} {leftColumn} {margin} multiLine={true} labelTopOffset={'3px'}>
function create_default_slot_3$6(ctx) {
	let checkbox;
	let t;
	let description;
	let current;

	checkbox = new Checkbox({
			props: { compact: false, checked: true },
			$$inline: true
		});

	description = new Description({
			props: {
				margin: "4px 0 0 20px",
				$$slots: { default: [create_default_slot_4$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(checkbox.$$.fragment);
			t = space();
			create_component(description.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(description, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const description_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				description_changes.$$scope = { dirty, ctx };
			}

			description.$set(description_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			transition_in(description.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox.$$.fragment, local);
			transition_out(description.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox, detaching);
			if (detaching) detach_dev(t);
			destroy_component(description, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$6.name,
		type: "slot",
		source: "(330:4) <FormRow label={'Checkbox:'} {maxWidth} {leftColumn} {margin} multiLine={true} labelTopOffset={'3px'}>",
		ctx
	});

	return block;
}

// (337:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>
function create_default_slot_2$6(ctx) {
	let checkbox0;
	let t0;
	let checkbox1;
	let t1;
	let checkbox2;
	let t2;
	let checkbox3;
	let current;

	checkbox0 = new Checkbox({
			props: { compact: true, checked: true },
			$$inline: true
		});

	checkbox1 = new Checkbox({
			props: { compact: true, checked: true },
			$$inline: true
		});

	checkbox2 = new Checkbox({
			props: {
				compact: true,
				disabled: true,
				checked: true
			},
			$$inline: true
		});

	checkbox3 = new Checkbox({
			props: {
				compact: true,
				disabled: true,
				checked: false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(checkbox0.$$.fragment);
			t0 = space();
			create_component(checkbox1.$$.fragment);
			t1 = space();
			create_component(checkbox2.$$.fragment);
			t2 = space();
			create_component(checkbox3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(checkbox0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(checkbox1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(checkbox2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(checkbox3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox0.$$.fragment, local);
			transition_in(checkbox1.$$.fragment, local);
			transition_in(checkbox2.$$.fragment, local);
			transition_in(checkbox3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox0.$$.fragment, local);
			transition_out(checkbox1.$$.fragment, local);
			transition_out(checkbox2.$$.fragment, local);
			transition_out(checkbox3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(checkbox0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(checkbox1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(checkbox2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(checkbox3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$6.name,
		type: "slot",
		source: "(337:4) <FormRow label={'Compact:'} {maxWidth} {leftColumn} {gap} {margin} compact={true}>",
		ctx
	});

	return block;
}

// (350:4) <FormRow label={'Stepper:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot_1$8(ctx) {
	let stepper;
	let current;

	stepper = new Stepper({
			props: { compact: false, label: "Label" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(stepper.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(stepper, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(stepper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stepper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(stepper, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$8.name,
		type: "slot",
		source: "(350:4) <FormRow label={'Stepper:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

// (353:4) <FormRow label={'Disabled:'} {maxWidth} {leftColumn} {gap} {margin}>
function create_default_slot$e(ctx) {
	let stepper;
	let current;

	stepper = new Stepper({
			props: {
				compact: false,
				disabled: true,
				label: "Label"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(stepper.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(stepper, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(stepper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stepper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(stepper, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$e.name,
		type: "slot",
		source: "(353:4) <FormRow label={'Disabled:'} {maxWidth} {leftColumn} {gap} {margin}>",
		ctx
	});

	return block;
}

function create_fragment$12(ctx) {
	let div;
	let h1;
	let t1;
	let section0;
	let formrow0;
	let t2;
	let formrow1;
	let t3;
	let formrow2;
	let t4;
	let formrow3;
	let t5;
	let formrow4;
	let t6;
	let formrow5;
	let t7;
	let formrow6;
	let t8;
	let formrow7;
	let t9;
	let formrow8;
	let t10;
	let separator0;
	let t11;
	let section1;
	let formrow9;
	let t12;
	let formrow10;
	let t13;
	let separator1;
	let t14;
	let section2;
	let formrow11;
	let t15;
	let formrow12;
	let t16;
	let separator2;
	let t17;
	let section3;
	let formrow13;
	let t18;
	let formrow14;
	let t19;
	let separator3;
	let t20;
	let section4;
	let formrow15;
	let t21;
	let formrow16;
	let t22;
	let separator4;
	let t23;
	let section5;
	let formrow17;
	let t24;
	let formrow18;
	let t25;
	let separator5;
	let t26;
	let section6;
	let formrow19;
	let t27;
	let formrow20;
	let t28;
	let separator6;
	let t29;
	let section7;
	let formrow21;
	let t30;
	let formrow22;
	let t31;
	let formrow23;
	let t32;
	let separator7;
	let t33;
	let section8;
	let formrow24;
	let t34;
	let formrow25;
	let t35;
	let separator8;
	let current;

	formrow0 = new FormRow({
			props: {
				label: "InputText:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow1 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow2 = new FormRow({
			props: {
				label: "Single line:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow3 = new FormRow({
			props: {
				label: "Multi line:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow4 = new FormRow({
			props: {
				label: "With icon:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow5 = new FormRow({
			props: {
				label: "With icon & compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow6 = new FormRow({
			props: {
				label: "With Description:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				multiLine: true,
				labelTopOffset: "7px",
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow7 = new FormRow({
			props: {
				label: "Disabled:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				multiLine: true,
				labelTopOffset: "7px",
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow8 = new FormRow({
			props: {
				label: "Error:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				multiLine: true,
				labelTopOffset: "7px",
				$$slots: { default: [create_default_slot_18$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator0 = new Separator({ $$inline: true });

	formrow9 = new FormRow({
			props: {
				label: "IconButton:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_17$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow10 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_16$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator1 = new Separator({ $$inline: true });

	formrow11 = new FormRow({
			props: {
				label: "IconButton w/ Menu:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_15$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow12 = new FormRow({
			props: {
				label: "IconButton w/ Menu (compact):",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_14$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator2 = new Separator({ $$inline: true });

	formrow13 = new FormRow({
			props: {
				label: "PopupButton:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_13$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow14 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_12$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator3 = new Separator({ $$inline: true });

	formrow15 = new FormRow({
			props: {
				label: "PulldownButton:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_11$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow16 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_10$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator4 = new Separator({ $$inline: true });

	formrow17 = new FormRow({
			props: {
				label: "PushButton:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_9$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow18 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_8$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator5 = new Separator({ $$inline: true });

	formrow19 = new FormRow({
			props: {
				label: "RadioButton:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_7$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow20 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_6$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator6 = new Separator({ $$inline: true });

	formrow21 = new FormRow({
			props: {
				label: "Checkbox:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_5$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow22 = new FormRow({
			props: {
				label: "Checkbox:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				margin: /*margin*/ ctx[4],
				multiLine: true,
				labelTopOffset: "3px",
				$$slots: { default: [create_default_slot_3$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow23 = new FormRow({
			props: {
				label: "Compact:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				compact: true,
				$$slots: { default: [create_default_slot_2$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator7 = new Separator({ $$inline: true });

	formrow24 = new FormRow({
			props: {
				label: "Stepper:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot_1$8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	formrow25 = new FormRow({
			props: {
				label: "Disabled:",
				maxWidth: /*maxWidth*/ ctx[1],
				leftColumn: /*leftColumn*/ ctx[2],
				gap: /*gap*/ ctx[3],
				margin: /*margin*/ ctx[4],
				$$slots: { default: [create_default_slot$e] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	separator8 = new Separator({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "UI Elements";
			t1 = space();
			section0 = element("section");
			create_component(formrow0.$$.fragment);
			t2 = space();
			create_component(formrow1.$$.fragment);
			t3 = space();
			create_component(formrow2.$$.fragment);
			t4 = space();
			create_component(formrow3.$$.fragment);
			t5 = space();
			create_component(formrow4.$$.fragment);
			t6 = space();
			create_component(formrow5.$$.fragment);
			t7 = space();
			create_component(formrow6.$$.fragment);
			t8 = space();
			create_component(formrow7.$$.fragment);
			t9 = space();
			create_component(formrow8.$$.fragment);
			t10 = space();
			create_component(separator0.$$.fragment);
			t11 = space();
			section1 = element("section");
			create_component(formrow9.$$.fragment);
			t12 = space();
			create_component(formrow10.$$.fragment);
			t13 = space();
			create_component(separator1.$$.fragment);
			t14 = space();
			section2 = element("section");
			create_component(formrow11.$$.fragment);
			t15 = space();
			create_component(formrow12.$$.fragment);
			t16 = space();
			create_component(separator2.$$.fragment);
			t17 = space();
			section3 = element("section");
			create_component(formrow13.$$.fragment);
			t18 = space();
			create_component(formrow14.$$.fragment);
			t19 = space();
			create_component(separator3.$$.fragment);
			t20 = space();
			section4 = element("section");
			create_component(formrow15.$$.fragment);
			t21 = space();
			create_component(formrow16.$$.fragment);
			t22 = space();
			create_component(separator4.$$.fragment);
			t23 = space();
			section5 = element("section");
			create_component(formrow17.$$.fragment);
			t24 = space();
			create_component(formrow18.$$.fragment);
			t25 = space();
			create_component(separator5.$$.fragment);
			t26 = space();
			section6 = element("section");
			create_component(formrow19.$$.fragment);
			t27 = space();
			create_component(formrow20.$$.fragment);
			t28 = space();
			create_component(separator6.$$.fragment);
			t29 = space();
			section7 = element("section");
			create_component(formrow21.$$.fragment);
			t30 = space();
			create_component(formrow22.$$.fragment);
			t31 = space();
			create_component(formrow23.$$.fragment);
			t32 = space();
			create_component(separator7.$$.fragment);
			t33 = space();
			section8 = element("section");
			create_component(formrow24.$$.fragment);
			t34 = space();
			create_component(formrow25.$$.fragment);
			t35 = space();
			create_component(separator8.$$.fragment);
			attr_dev(h1, "class", "svelte-1uj3hpe");
			add_location(h1, file$Y, 157, 2, 3320);
			attr_dev(section0, "class", "svelte-1uj3hpe");
			add_location(section0, file$Y, 161, 2, 3382);
			attr_dev(section1, "class", "svelte-1uj3hpe");
			add_location(section1, file$Y, 220, 2, 8285);
			attr_dev(section2, "class", "svelte-1uj3hpe");
			add_location(section2, file$Y, 235, 2, 8786);
			attr_dev(section3, "class", "svelte-1uj3hpe");
			add_location(section3, file$Y, 253, 2, 9852);
			attr_dev(section4, "class", "svelte-1uj3hpe");
			add_location(section4, file$Y, 269, 2, 10442);
			attr_dev(section5, "class", "svelte-1uj3hpe");
			add_location(section5, file$Y, 285, 2, 11155);
			attr_dev(section6, "class", "svelte-1uj3hpe");
			add_location(section6, file$Y, 303, 2, 11859);
			attr_dev(section7, "class", "svelte-1uj3hpe");
			add_location(section7, file$Y, 321, 2, 12434);
			attr_dev(section8, "class", "svelte-1uj3hpe");
			add_location(section8, file$Y, 348, 2, 13546);
			attr_dev(div, "class", "block svelte-1uj3hpe");
			add_location(div, file$Y, 156, 0, 3298);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(div, t1);
			append_dev(div, section0);
			mount_component(formrow0, section0, null);
			append_dev(section0, t2);
			mount_component(formrow1, section0, null);
			append_dev(section0, t3);
			mount_component(formrow2, section0, null);
			append_dev(section0, t4);
			mount_component(formrow3, section0, null);
			append_dev(section0, t5);
			mount_component(formrow4, section0, null);
			append_dev(section0, t6);
			mount_component(formrow5, section0, null);
			append_dev(section0, t7);
			mount_component(formrow6, section0, null);
			append_dev(section0, t8);
			mount_component(formrow7, section0, null);
			append_dev(section0, t9);
			mount_component(formrow8, section0, null);
			append_dev(div, t10);
			mount_component(separator0, div, null);
			append_dev(div, t11);
			append_dev(div, section1);
			mount_component(formrow9, section1, null);
			append_dev(section1, t12);
			mount_component(formrow10, section1, null);
			append_dev(div, t13);
			mount_component(separator1, div, null);
			append_dev(div, t14);
			append_dev(div, section2);
			mount_component(formrow11, section2, null);
			append_dev(section2, t15);
			mount_component(formrow12, section2, null);
			append_dev(div, t16);
			mount_component(separator2, div, null);
			append_dev(div, t17);
			append_dev(div, section3);
			mount_component(formrow13, section3, null);
			append_dev(section3, t18);
			mount_component(formrow14, section3, null);
			append_dev(div, t19);
			mount_component(separator3, div, null);
			append_dev(div, t20);
			append_dev(div, section4);
			mount_component(formrow15, section4, null);
			append_dev(section4, t21);
			mount_component(formrow16, section4, null);
			append_dev(div, t22);
			mount_component(separator4, div, null);
			append_dev(div, t23);
			append_dev(div, section5);
			mount_component(formrow17, section5, null);
			append_dev(section5, t24);
			mount_component(formrow18, section5, null);
			append_dev(div, t25);
			mount_component(separator5, div, null);
			append_dev(div, t26);
			append_dev(div, section6);
			mount_component(formrow19, section6, null);
			append_dev(section6, t27);
			mount_component(formrow20, section6, null);
			append_dev(div, t28);
			mount_component(separator6, div, null);
			append_dev(div, t29);
			append_dev(div, section7);
			mount_component(formrow21, section7, null);
			append_dev(section7, t30);
			mount_component(formrow22, section7, null);
			append_dev(section7, t31);
			mount_component(formrow23, section7, null);
			append_dev(div, t32);
			mount_component(separator7, div, null);
			append_dev(div, t33);
			append_dev(div, section8);
			mount_component(formrow24, section8, null);
			append_dev(section8, t34);
			mount_component(formrow25, section8, null);
			append_dev(div, t35);
			mount_component(separator8, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const formrow0_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow0_changes.$$scope = { dirty, ctx };
			}

			formrow0.$set(formrow0_changes);
			const formrow1_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow1_changes.$$scope = { dirty, ctx };
			}

			formrow1.$set(formrow1_changes);
			const formrow2_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow2_changes.$$scope = { dirty, ctx };
			}

			formrow2.$set(formrow2_changes);
			const formrow3_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow3_changes.$$scope = { dirty, ctx };
			}

			formrow3.$set(formrow3_changes);
			const formrow4_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow4_changes.$$scope = { dirty, ctx };
			}

			formrow4.$set(formrow4_changes);
			const formrow5_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow5_changes.$$scope = { dirty, ctx };
			}

			formrow5.$set(formrow5_changes);
			const formrow6_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow6_changes.$$scope = { dirty, ctx };
			}

			formrow6.$set(formrow6_changes);
			const formrow7_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow7_changes.$$scope = { dirty, ctx };
			}

			formrow7.$set(formrow7_changes);
			const formrow8_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow8_changes.$$scope = { dirty, ctx };
			}

			formrow8.$set(formrow8_changes);
			const formrow9_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow9_changes.$$scope = { dirty, ctx };
			}

			formrow9.$set(formrow9_changes);
			const formrow10_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow10_changes.$$scope = { dirty, ctx };
			}

			formrow10.$set(formrow10_changes);
			const formrow11_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow11_changes.$$scope = { dirty, ctx };
			}

			formrow11.$set(formrow11_changes);
			const formrow12_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow12_changes.$$scope = { dirty, ctx };
			}

			formrow12.$set(formrow12_changes);
			const formrow13_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow13_changes.$$scope = { dirty, ctx };
			}

			formrow13.$set(formrow13_changes);
			const formrow14_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow14_changes.$$scope = { dirty, ctx };
			}

			formrow14.$set(formrow14_changes);
			const formrow15_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow15_changes.$$scope = { dirty, ctx };
			}

			formrow15.$set(formrow15_changes);
			const formrow16_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow16_changes.$$scope = { dirty, ctx };
			}

			formrow16.$set(formrow16_changes);
			const formrow17_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow17_changes.$$scope = { dirty, ctx };
			}

			formrow17.$set(formrow17_changes);
			const formrow18_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow18_changes.$$scope = { dirty, ctx };
			}

			formrow18.$set(formrow18_changes);
			const formrow19_changes = {};

			if (dirty & /*$$scope, radioList*/ 131073) {
				formrow19_changes.$$scope = { dirty, ctx };
			}

			formrow19.$set(formrow19_changes);
			const formrow20_changes = {};

			if (dirty & /*$$scope, radioList*/ 131073) {
				formrow20_changes.$$scope = { dirty, ctx };
			}

			formrow20.$set(formrow20_changes);
			const formrow21_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow21_changes.$$scope = { dirty, ctx };
			}

			formrow21.$set(formrow21_changes);
			const formrow22_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow22_changes.$$scope = { dirty, ctx };
			}

			formrow22.$set(formrow22_changes);
			const formrow23_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow23_changes.$$scope = { dirty, ctx };
			}

			formrow23.$set(formrow23_changes);
			const formrow24_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow24_changes.$$scope = { dirty, ctx };
			}

			formrow24.$set(formrow24_changes);
			const formrow25_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				formrow25_changes.$$scope = { dirty, ctx };
			}

			formrow25.$set(formrow25_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(formrow0.$$.fragment, local);
			transition_in(formrow1.$$.fragment, local);
			transition_in(formrow2.$$.fragment, local);
			transition_in(formrow3.$$.fragment, local);
			transition_in(formrow4.$$.fragment, local);
			transition_in(formrow5.$$.fragment, local);
			transition_in(formrow6.$$.fragment, local);
			transition_in(formrow7.$$.fragment, local);
			transition_in(formrow8.$$.fragment, local);
			transition_in(separator0.$$.fragment, local);
			transition_in(formrow9.$$.fragment, local);
			transition_in(formrow10.$$.fragment, local);
			transition_in(separator1.$$.fragment, local);
			transition_in(formrow11.$$.fragment, local);
			transition_in(formrow12.$$.fragment, local);
			transition_in(separator2.$$.fragment, local);
			transition_in(formrow13.$$.fragment, local);
			transition_in(formrow14.$$.fragment, local);
			transition_in(separator3.$$.fragment, local);
			transition_in(formrow15.$$.fragment, local);
			transition_in(formrow16.$$.fragment, local);
			transition_in(separator4.$$.fragment, local);
			transition_in(formrow17.$$.fragment, local);
			transition_in(formrow18.$$.fragment, local);
			transition_in(separator5.$$.fragment, local);
			transition_in(formrow19.$$.fragment, local);
			transition_in(formrow20.$$.fragment, local);
			transition_in(separator6.$$.fragment, local);
			transition_in(formrow21.$$.fragment, local);
			transition_in(formrow22.$$.fragment, local);
			transition_in(formrow23.$$.fragment, local);
			transition_in(separator7.$$.fragment, local);
			transition_in(formrow24.$$.fragment, local);
			transition_in(formrow25.$$.fragment, local);
			transition_in(separator8.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(formrow0.$$.fragment, local);
			transition_out(formrow1.$$.fragment, local);
			transition_out(formrow2.$$.fragment, local);
			transition_out(formrow3.$$.fragment, local);
			transition_out(formrow4.$$.fragment, local);
			transition_out(formrow5.$$.fragment, local);
			transition_out(formrow6.$$.fragment, local);
			transition_out(formrow7.$$.fragment, local);
			transition_out(formrow8.$$.fragment, local);
			transition_out(separator0.$$.fragment, local);
			transition_out(formrow9.$$.fragment, local);
			transition_out(formrow10.$$.fragment, local);
			transition_out(separator1.$$.fragment, local);
			transition_out(formrow11.$$.fragment, local);
			transition_out(formrow12.$$.fragment, local);
			transition_out(separator2.$$.fragment, local);
			transition_out(formrow13.$$.fragment, local);
			transition_out(formrow14.$$.fragment, local);
			transition_out(separator3.$$.fragment, local);
			transition_out(formrow15.$$.fragment, local);
			transition_out(formrow16.$$.fragment, local);
			transition_out(separator4.$$.fragment, local);
			transition_out(formrow17.$$.fragment, local);
			transition_out(formrow18.$$.fragment, local);
			transition_out(separator5.$$.fragment, local);
			transition_out(formrow19.$$.fragment, local);
			transition_out(formrow20.$$.fragment, local);
			transition_out(separator6.$$.fragment, local);
			transition_out(formrow21.$$.fragment, local);
			transition_out(formrow22.$$.fragment, local);
			transition_out(formrow23.$$.fragment, local);
			transition_out(separator7.$$.fragment, local);
			transition_out(formrow24.$$.fragment, local);
			transition_out(formrow25.$$.fragment, local);
			transition_out(separator8.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(formrow0);
			destroy_component(formrow1);
			destroy_component(formrow2);
			destroy_component(formrow3);
			destroy_component(formrow4);
			destroy_component(formrow5);
			destroy_component(formrow6);
			destroy_component(formrow7);
			destroy_component(formrow8);
			destroy_component(separator0);
			destroy_component(formrow9);
			destroy_component(formrow10);
			destroy_component(separator1);
			destroy_component(formrow11);
			destroy_component(formrow12);
			destroy_component(separator2);
			destroy_component(formrow13);
			destroy_component(formrow14);
			destroy_component(separator3);
			destroy_component(formrow15);
			destroy_component(formrow16);
			destroy_component(separator4);
			destroy_component(formrow17);
			destroy_component(formrow18);
			destroy_component(separator5);
			destroy_component(formrow19);
			destroy_component(formrow20);
			destroy_component(separator6);
			destroy_component(formrow21);
			destroy_component(formrow22);
			destroy_component(formrow23);
			destroy_component(separator7);
			destroy_component(formrow24);
			destroy_component(formrow25);
			destroy_component(separator8);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$12.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$12($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("UIElements", slots, []);
	let maxWidth = "700px";
	let leftColumn = "250px";
	let gap = "0 10px";
	let margin = "8px 0";

	let popupMenuItems = [
		{
			label: "Option 1",
			id: "1",
			checked: false,
			separatorAfter: true
		},
		{
			label: "Option 2",
			id: "2",
			checked: true
		},
		{
			label: "Option 3",
			id: "3",
			checked: false
		}
	];

	let pulldownMenuItems = [
		{
			label: "Option 1",
			id: "1",
			checked: true,
			separatorAfter: true
		},
		{
			label: "Option 2",
			id: "2",
			checked: false
		},
		{
			label: "Option 3",
			id: "3",
			checked: false
		}
	];

	let radioList = {
		selected: "3s",
		items: [
			{ id: "1s", label: "One scoop" },
			{ id: "2s", label: "Two scoops" },
			{ id: "3s", label: "Three scoops" }
		]
	};

	let checkboxList = {
		selected: ["1s", "2s"],
		items: [
			{ id: "1s", label: "One scoop" },
			{ id: "2s", label: "Two scoops" },
			{ id: "3s", label: "Three scoops" }
		]
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn(`<UIElements> was created with unknown prop '${key}'`);
	});

	const select_handler = evt => console.log(evt.detail.item);
	const select_handler_1 = evt => console.log(evt.detail.item);

	function radiobutton_group_binding(value) {
		radioList.selected = value;
		$$invalidate(0, radioList);
	}

	function radiobutton_group_binding_1(value) {
		radioList.selected = value;
		$$invalidate(0, radioList);
	}

	$$self.$capture_state = () => ({
		state,
		project,
		sidebar,
		isWindowFocused,
		Checkbox,
		Description,
		FormRow,
		IconButton,
		InputText,
		PopupButton,
		PulldownButton,
		PushButton,
		RadioButton,
		Separator,
		Stepper,
		maxWidth,
		leftColumn,
		gap,
		margin,
		popupMenuItems,
		pulldownMenuItems,
		radioList,
		checkboxList
	});

	$$self.$inject_state = $$props => {
		if ("maxWidth" in $$props) $$invalidate(1, maxWidth = $$props.maxWidth);
		if ("leftColumn" in $$props) $$invalidate(2, leftColumn = $$props.leftColumn);
		if ("gap" in $$props) $$invalidate(3, gap = $$props.gap);
		if ("margin" in $$props) $$invalidate(4, margin = $$props.margin);
		if ("popupMenuItems" in $$props) $$invalidate(5, popupMenuItems = $$props.popupMenuItems);
		if ("pulldownMenuItems" in $$props) $$invalidate(6, pulldownMenuItems = $$props.pulldownMenuItems);
		if ("radioList" in $$props) $$invalidate(0, radioList = $$props.radioList);
		if ("checkboxList" in $$props) checkboxList = $$props.checkboxList;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		radioList,
		maxWidth,
		leftColumn,
		gap,
		margin,
		popupMenuItems,
		pulldownMenuItems,
		select_handler,
		select_handler_1,
		radiobutton_group_binding,
		radiobutton_group_binding_1
	];
}

class UIElements extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1uj3hpe-style")) add_css$_();
		init(this, options, instance$12, create_fragment$12, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UIElements",
			options,
			id: create_fragment$12.name
		});
	}
}

/* src/js/renderer/component/dev/Files.svelte generated by Svelte v3.30.1 */
const file$Z = "src/js/renderer/component/dev/Files.svelte";

function add_css$$() {
	var style = element("style");
	style.id = "svelte-n32e74-style";
	style.textContent = "@keyframes svelte-n32e74-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}section.svelte-n32e74.svelte-n32e74{padding:0rem 1rem;overflow:scroll}h1.svelte-n32e74.svelte-n32e74{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--labelColor)}.stateTable.svelte-n32e74.svelte-n32e74{border:1px solid var(--tertiaryLabelColor);border-radius:4px;padding:0.4em 0.4em;margin-bottom:1em}.property.svelte-n32e74.svelte-n32e74{display:flex;direction:column;padding:0.2em 0;border-bottom:1px solid rgba(0, 0, 0, 0.1)}.property.svelte-n32e74 div.svelte-n32e74{display:inline-block;white-space:pre-wrap;overflow:scroll}.property.svelte-n32e74 .key.svelte-n32e74{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;text-align:right;color:var(--labelColor);padding-right:1em}.property.svelte-n32e74 .val.svelte-n32e74{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;flex:1 1 auto;color:var(--secondaryLabelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZXMuc3ZlbHRlIiwic291cmNlcyI6WyJGaWxlcy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzJ1xuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gJy4uLy4uL0ZpbGVzTWFuYWdlcidcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuc2VjdGlvbiB7XG4gIHBhZGRpbmc6IDByZW0gMXJlbTtcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcbn1cblxuaDEge1xuICBmb250LWZhbWlseTogXCJTRiBQcm8gRGlzcGxheVwiO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjRweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjEycHg7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cblxuaDIge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgY29sb3I6IHZhcigtLXNlY29uZGFyeUxhYmVsQ29sb3IpO1xufVxuXG4uc3RhdGVUYWJsZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXRlcnRpYXJ5TGFiZWxDb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMC40ZW0gMC40ZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbn1cbi5zdGF0ZVRhYmxlIGgyIHtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZzogMDtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG4gIG1hcmdpbjogMCAwIDFlbTtcbn1cblxuLnByb3BlcnR5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDAuMmVtIDA7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XG59XG4ucHJvcGVydHkgZGl2IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIG92ZXJmbG93OiBzY3JvbGw7XG59XG4ucHJvcGVydHkgLmtleSB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBjb2xvcjogdmFyKC0tbGFiZWxDb2xvcik7XG4gIHBhZGRpbmctcmlnaHQ6IDFlbTtcbn1cbi5wcm9wZXJ0eSAudmFsIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgZmxleDogMSAxIGF1dG87XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbn08L3N0eWxlPlxuXG48c2VjdGlvbj5cbiAgPGgxPlByb2plY3QgRmlsZXM8L2gxPlxuXG4gIDxkaXYgY2xhc3M9XCJzdGF0ZVRhYmxlXCI+XG4gICAgPGRpdiBjbGFzcz1cInByb3BlcnR5XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwia2V5XCI+ZmlsZXM8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2YWxcIj57c3RyaW5naWZ5KCRmaWxlcyl9PC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICBcbjwvc2VjdGlvbj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNd0IsV0FBVyx5QkFBWSxDQUFDLEFBQzlDLElBQUksQUFBQyxDQUFDLEFBQ0osVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUM1RCxDQUFDLEFBQ0QsRUFBRSxBQUFDLENBQUMsQUFDRixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxBQUN0RixDQUFDLEFBQ0gsQ0FBQyxBQUNELE9BQU8sNEJBQUMsQ0FBQyxBQUNQLE9BQU8sQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUNsQixRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFDLEFBRUQsRUFBRSw0QkFBQyxDQUFDLEFBQ0YsV0FBVyxDQUFFLGdCQUFnQixDQUM3QixXQUFXLENBQUUsSUFBSSxDQUNqQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxBQUMxQixDQUFDLEFBV0QsV0FBVyw0QkFBQyxDQUFDLEFBQ1gsTUFBTSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxDQUMzQyxhQUFhLENBQUUsR0FBRyxDQUNsQixPQUFPLENBQUUsS0FBSyxDQUFDLEtBQUssQ0FDcEIsYUFBYSxDQUFFLEdBQUcsQUFDcEIsQ0FBQyxBQVlELFNBQVMsNEJBQUMsQ0FBQyxBQUNULE9BQU8sQ0FBRSxJQUFJLENBQ2IsU0FBUyxDQUFFLE1BQU0sQ0FDakIsT0FBTyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQ2hCLGFBQWEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQzdDLENBQUMsQUFDRCx1QkFBUyxDQUFDLEdBQUcsY0FBQyxDQUFDLEFBQ2IsT0FBTyxDQUFFLFlBQVksQ0FDckIsV0FBVyxDQUFFLFFBQVEsQ0FDckIsUUFBUSxDQUFFLE1BQU0sQUFDbEIsQ0FBQyxBQUNELHVCQUFTLENBQUMsSUFBSSxjQUFDLENBQUMsQUFDZCxXQUFXLENBQUUsU0FBUyxDQUN0QixXQUFXLENBQUUsTUFBTSxDQUNuQixTQUFTLENBQUUsSUFBSSxDQUNmLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLGNBQWMsQ0FBRSxHQUFHLENBQ25CLFVBQVUsQ0FBRSxLQUFLLENBQ2pCLEtBQUssQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUN4QixhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFDLEFBQ0QsdUJBQVMsQ0FBQyxJQUFJLGNBQUMsQ0FBQyxBQUNkLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNkLEtBQUssQ0FBRSxJQUFJLHFCQUFxQixDQUFDLEFBQ25DLENBQUMifQ== */";
	append_dev(document.head, style);
}

function create_fragment$13(ctx) {
	let section;
	let h1;
	let t1;
	let div3;
	let div2;
	let div0;
	let t3;
	let div1;
	let t4_value = stringify(/*$files*/ ctx[0]) + "";
	let t4;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			h1.textContent = "Project Files";
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "files";
			t3 = space();
			div1 = element("div");
			t4 = text(t4_value);
			attr_dev(h1, "class", "svelte-n32e74");
			add_location(h1, file$Z, 86, 2, 1653);
			attr_dev(div0, "class", "key svelte-n32e74");
			add_location(div0, file$Z, 90, 6, 1737);
			attr_dev(div1, "class", "val svelte-n32e74");
			add_location(div1, file$Z, 91, 6, 1772);
			attr_dev(div2, "class", "property svelte-n32e74");
			add_location(div2, file$Z, 89, 4, 1708);
			attr_dev(div3, "class", "stateTable svelte-n32e74");
			add_location(div3, file$Z, 88, 2, 1679);
			attr_dev(section, "class", "svelte-n32e74");
			add_location(section, file$Z, 85, 0, 1641);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(section, t1);
			append_dev(section, div3);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div1, t4);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$files*/ 1 && t4_value !== (t4_value = stringify(/*$files*/ ctx[0]) + "")) set_data_dev(t4, t4_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$13.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$13($$self, $$props, $$invalidate) {
	let $files;
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(0, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Files", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Files> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ stringify, files, $files });
	return [$files];
}

class Files extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-n32e74-style")) add_css$$();
		init(this, options, instance$13, create_fragment$13, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Files",
			options,
			id: create_fragment$13.name
		});
	}
}

/* src/js/renderer/component/dev/State.svelte generated by Svelte v3.30.1 */
const file$_ = "src/js/renderer/component/dev/State.svelte";

function add_css$10() {
	var style = element("style");
	style.id = "svelte-n32e74-style";
	style.textContent = "@keyframes svelte-n32e74-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}section.svelte-n32e74.svelte-n32e74{padding:0rem 1rem;overflow:scroll}h1.svelte-n32e74.svelte-n32e74{font-family:\"SF Pro Display\";font-weight:bold;font-size:20px;line-height:24px;letter-spacing:-0.12px;color:var(--labelColor)}.stateTable.svelte-n32e74.svelte-n32e74{border:1px solid var(--tertiaryLabelColor);border-radius:4px;padding:0.4em 0.4em;margin-bottom:1em}.property.svelte-n32e74.svelte-n32e74{display:flex;direction:column;padding:0.2em 0;border-bottom:1px solid rgba(0, 0, 0, 0.1)}.property.svelte-n32e74 div.svelte-n32e74{display:inline-block;white-space:pre-wrap;overflow:scroll}.property.svelte-n32e74 .key.svelte-n32e74{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;text-align:right;color:var(--labelColor);padding-right:1em}.property.svelte-n32e74 .val.svelte-n32e74{font-family:system-ui;font-weight:normal;font-size:11px;line-height:13px;letter-spacing:0px;flex:1 1 auto;color:var(--secondaryLabelColor)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGUuc3ZlbHRlIiwic291cmNlcyI6WyJTdGF0ZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzJ1xuICBpbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4uLy4uL1N0YXRlTWFuYWdlcidcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuc2VjdGlvbiB7XG4gIHBhZGRpbmc6IDByZW0gMXJlbTtcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcbn1cblxuaDEge1xuICBmb250LWZhbWlseTogXCJTRiBQcm8gRGlzcGxheVwiO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjRweDtcbiAgbGV0dGVyLXNwYWNpbmc6IC0wLjEycHg7XG4gIGNvbG9yOiB2YXIoLS1sYWJlbENvbG9yKTtcbn1cblxuaDIge1xuICBmb250LWZhbWlseTogc3lzdGVtLXVpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDhweDtcbiAgY29sb3I6IHZhcigtLXNlY29uZGFyeUxhYmVsQ29sb3IpO1xufVxuXG4uc3RhdGVUYWJsZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXRlcnRpYXJ5TGFiZWxDb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMC40ZW0gMC40ZW07XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbn1cbi5zdGF0ZVRhYmxlIGgyIHtcbiAgY29sb3I6IHZhcigtLWxhYmVsQ29sb3IpO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZzogMDtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG4gIG1hcmdpbjogMCAwIDFlbTtcbn1cblxuLnByb3BlcnR5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDAuMmVtIDA7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XG59XG4ucHJvcGVydHkgZGl2IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gIG92ZXJmbG93OiBzY3JvbGw7XG59XG4ucHJvcGVydHkgLmtleSB7XG4gIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwcHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBjb2xvcjogdmFyKC0tbGFiZWxDb2xvcik7XG4gIHBhZGRpbmctcmlnaHQ6IDFlbTtcbn1cbi5wcm9wZXJ0eSAudmFsIHtcbiAgZm9udC1mYW1pbHk6IHN5c3RlbS11aTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBsaW5lLWhlaWdodDogMTNweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDBweDtcbiAgZmxleDogMSAxIGF1dG87XG4gIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnlMYWJlbENvbG9yKTtcbn08L3N0eWxlPlxuXG48c2VjdGlvbj5cbiAgPGgxPkFwcCBTdGF0ZTwvaDE+XG5cbiAgPGRpdiBjbGFzcz1cInN0YXRlVGFibGVcIj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJrZXlcIj5zdGF0ZTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInZhbFwiPntzdHJpbmdpZnkoJHN0YXRlKX08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIFxuPC9zZWN0aW9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU13QixXQUFXLHlCQUFZLENBQUMsQUFDOUMsSUFBSSxBQUFDLENBQUMsQUFDSixVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEFBQzVELENBQUMsQUFDRCxFQUFFLEFBQUMsQ0FBQyxBQUNGLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLEFBQ3RGLENBQUMsQUFDSCxDQUFDLEFBQ0QsT0FBTyw0QkFBQyxDQUFDLEFBQ1AsT0FBTyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQ2xCLFFBQVEsQ0FBRSxNQUFNLEFBQ2xCLENBQUMsQUFFRCxFQUFFLDRCQUFDLENBQUMsQUFDRixXQUFXLENBQUUsZ0JBQWdCLENBQzdCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLE9BQU8sQ0FDdkIsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLEFBQzFCLENBQUMsQUFXRCxXQUFXLDRCQUFDLENBQUMsQUFDWCxNQUFNLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLG9CQUFvQixDQUFDLENBQzNDLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLE9BQU8sQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUNwQixhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFDLEFBWUQsU0FBUyw0QkFBQyxDQUFDLEFBQ1QsT0FBTyxDQUFFLElBQUksQ0FDYixTQUFTLENBQUUsTUFBTSxDQUNqQixPQUFPLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FDaEIsYUFBYSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFDN0MsQ0FBQyxBQUNELHVCQUFTLENBQUMsR0FBRyxjQUFDLENBQUMsQUFDYixPQUFPLENBQUUsWUFBWSxDQUNyQixXQUFXLENBQUUsUUFBUSxDQUNyQixRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFDLEFBQ0QsdUJBQVMsQ0FBQyxJQUFJLGNBQUMsQ0FBQyxBQUNkLFdBQVcsQ0FBRSxTQUFTLENBQ3RCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLFNBQVMsQ0FBRSxJQUFJLENBQ2YsV0FBVyxDQUFFLElBQUksQ0FDakIsY0FBYyxDQUFFLEdBQUcsQ0FDbkIsVUFBVSxDQUFFLEtBQUssQ0FDakIsS0FBSyxDQUFFLElBQUksWUFBWSxDQUFDLENBQ3hCLGFBQWEsQ0FBRSxHQUFHLEFBQ3BCLENBQUMsQUFDRCx1QkFBUyxDQUFDLElBQUksY0FBQyxDQUFDLEFBQ2QsV0FBVyxDQUFFLFNBQVMsQ0FDdEIsV0FBVyxDQUFFLE1BQU0sQ0FDbkIsU0FBUyxDQUFFLElBQUksQ0FDZixXQUFXLENBQUUsSUFBSSxDQUNqQixjQUFjLENBQUUsR0FBRyxDQUNuQixJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2QsS0FBSyxDQUFFLElBQUkscUJBQXFCLENBQUMsQUFDbkMsQ0FBQyJ9 */";
	append_dev(document.head, style);
}

function create_fragment$14(ctx) {
	let section;
	let h1;
	let t1;
	let div3;
	let div2;
	let div0;
	let t3;
	let div1;
	let t4_value = stringify(/*$state*/ ctx[0]) + "";
	let t4;

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			h1.textContent = "App State";
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "state";
			t3 = space();
			div1 = element("div");
			t4 = text(t4_value);
			attr_dev(h1, "class", "svelte-n32e74");
			add_location(h1, file$_, 86, 2, 1653);
			attr_dev(div0, "class", "key svelte-n32e74");
			add_location(div0, file$_, 90, 6, 1733);
			attr_dev(div1, "class", "val svelte-n32e74");
			add_location(div1, file$_, 91, 6, 1768);
			attr_dev(div2, "class", "property svelte-n32e74");
			add_location(div2, file$_, 89, 4, 1704);
			attr_dev(div3, "class", "stateTable svelte-n32e74");
			add_location(div3, file$_, 88, 2, 1675);
			attr_dev(section, "class", "svelte-n32e74");
			add_location(section, file$_, 85, 0, 1641);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(section, t1);
			append_dev(section, div3);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div1, t4);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$state*/ 1 && t4_value !== (t4_value = stringify(/*$state*/ ctx[0]) + "")) set_data_dev(t4, t4_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$14.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$14($$self, $$props, $$invalidate) {
	let $state;
	validate_store(state, "state");
	component_subscribe($$self, state, $$value => $$invalidate(0, $state = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("State", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<State> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ stringify, state, $state });
	return [$state];
}

class State extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-n32e74-style")) add_css$10();
		init(this, options, instance$14, create_fragment$14, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "State",
			options,
			id: create_fragment$14.name
		});
	}
}

/* src/js/renderer/component/Layout.svelte generated by Svelte v3.30.1 */

const { window: window_1$1 } = globals;
const file$$ = "src/js/renderer/component/Layout.svelte";

function add_css$11() {
	var style = element("style");
	style.id = "svelte-1wfjlr5-style";
	style.textContent = "@keyframes svelte-1wfjlr5-selectField{from{box-shadow:0 0 0 20px transparent, 0 0 0 20px transparent}to{box-shadow:0 0 0 4px rgba(255, 255, 255, 0.25), 0 0 0 4px var(--controlAccentColor)}}#main.svelte-1wfjlr5{transform:translate(250px, 0);position:absolute;display:flex;flex-direction:column;width:calc(100% - 250px);height:100%}#content.svelte-1wfjlr5{width:100%;height:100%;overflow:scroll}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGF5b3V0LnN2ZWx0ZSIsInNvdXJjZXMiOlsiTGF5b3V0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBwcm9qZWN0IH0gZnJvbSAnLi4vU3RhdGVNYW5hZ2VyJ1xuICBpbXBvcnQgeyBmaWxlcyB9IGZyb20gJy4uL0ZpbGVzTWFuYWdlcidcbiAgaW1wb3J0IEJhY2tncm91bmQgZnJvbSAnLi9iYWNrZ3JvdW5kcy9CYWNrZ3JvdW5kLnN2ZWx0ZSdcbiAgaW1wb3J0IEVkaXRvclBhbmVscyBmcm9tICcuL21haW4vRWRpdG9yUGFuZWxzLnN2ZWx0ZSdcbiAgaW1wb3J0IEZpcnN0UnVuIGZyb20gJy4vZmlyc3RydW4vRmlyc3RSdW4uc3ZlbHRlJ1xuICBpbXBvcnQgRnVuY3Rpb25hbFRlc3RzIGZyb20gJy4vZGV2L0Z1bmN0aW9uYWxUZXN0cy5zdmVsdGUnO1xuICBpbXBvcnQgU2lkZUJhciBmcm9tICcuL3NpZGViYXIvU2lkZUJhci5zdmVsdGUnXG4gIGltcG9ydCBUb29sYmFyIGZyb20gJy4vbWFpbi9Ub29sYmFyLnN2ZWx0ZSdcbiAgaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuL3VpL1NlcGFyYXRvci5zdmVsdGUnXG4gIGltcG9ydCBNZW51IGZyb20gJy4vdWkvTWVudS5zdmVsdGUnXG4gIGltcG9ydCBUb29sdGlwIGZyb20gJy4vdWkvVG9vbHRpcC5zdmVsdGUnXG4gIGltcG9ydCBDb2xvcnMgZnJvbSAnLi9kZXYvQ29sb3JzLnN2ZWx0ZSdcbiAgaW1wb3J0IFVJRWxlbWVudHMgZnJvbSAnLi9kZXYvVUlFbGVtZW50cy5zdmVsdGUnO1xuICBpbXBvcnQgRmlsZXMgZnJvbSAnLi9kZXYvRmlsZXMuc3ZlbHRlJ1xuICBpbXBvcnQgU3RhdGUgZnJvbSAnLi9kZXYvU3RhdGUuc3ZlbHRlJ1xuICBpbXBvcnQgeyBzZXRMYXlvdXRGb2N1cyB9IGZyb20gJy4vdWkvYWN0aW9ucyc7XG5cbiAgJDogZGlyZWN0b3J5SXNTZXQgPSAkcHJvamVjdC5kaXJlY3RvcnlcbiAgJDogZmlsZXNQb3B1bGF0ZWQgPSAkZmlsZXMudHJlZVxuICAkOiBpc1dpbmRvd0RyYWdnZWRPdmVyID0gJHByb2plY3Qud2luZG93LmlzRHJhZ2dlZE92ZXJcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhbmQgdGhlIG5leHQgc2V0IHRoZSBgaXNEcmFnZ2VkT3ZlcmAgYm9vbCBvbiB0aGUgd2luZG93LlxuICAgKi9cbiAgZnVuY3Rpb24gb25EcmFnT3ZlcigpIHtcbiAgICBpZiAoIWlzV2luZG93RHJhZ2dlZE92ZXIpIHtcbiAgICAgIHdpbmRvdy5hcGkuc2VuZCgnZGlzcGF0Y2gnLCB7IHR5cGU6ICdQUk9KRUNUX1dJTkRPV19EUkFHX09WRVInfSlcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBXZSBjaGVjayB0aGUgZXZlbnQgYHJlbGF0ZWRUYXJnZXRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB1c2VyIGFjdHVhbGx5IGRyYWdnZWQgb3V0c2lkZSB0aGUgd2luZG93LCBvciBqdXN0IGRyYWdnZWQgb3ZlciBhIGNoaWxkIGVsZW1lbnQuIFRoZSBkcmFnbGVhdmUgZXZlbnQgZmlyZXMgaW4gYm90aCBjYXNlcywgYnV0IHdlIG9ubHkgY2FyZSBhYm91dCB0aGUgbGF0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBvbkRyYWdMZWF2ZShldnQpIHtcbiAgICBpZiAoaXNXaW5kb3dEcmFnZ2VkT3ZlciAmJiBldnQucmVsYXRlZFRhcmdldCA9PSBudWxsKSB7XG4gICAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywgeyB0eXBlOiAnUFJPSkVDVF9XSU5ET1dfRFJBR19MRUFWRSd9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRHJvcCgpIHtcbiAgICB3aW5kb3cuYXBpLnNlbmQoJ2Rpc3BhdGNoJywgeyB0eXBlOiAnUFJPSkVDVF9XSU5ET1dfRFJBR19MRUFWRSd9KVxuICB9XG4gIFxuPC9zY3JpcHQ+XG5cbjxzdHlsZSB0eXBlPVwidGV4dC9zY3NzXCI+QGtleWZyYW1lcyBzZWxlY3RGaWVsZCB7XG4gIGZyb20ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDIwcHggdHJhbnNwYXJlbnQsIDAgMCAwIDIwcHggdHJhbnNwYXJlbnQ7XG4gIH1cbiAgdG8ge1xuICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpLCAwIDAgMCA0cHggdmFyKC0tY29udHJvbEFjY2VudENvbG9yKTtcbiAgfVxufVxuI21haW4ge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgyNTBweCwgMCk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDI1MHB4KTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4jY29udGVudCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBzY3JvbGw7XG59PC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3cgXG4gIG9uOmRyYWdvdmVyfHByZXZlbnREZWZhdWx0PXtvbkRyYWdPdmVyfSBcbiAgb246ZHJhZ2xlYXZlfHByZXZlbnREZWZhdWx0PXtvbkRyYWdMZWF2ZX0gXG4gIG9uOmRyb3B8cHJldmVudERlZmF1bHQ9e29uRHJvcH0gXG4vPiBcblxuPFRvb2x0aXAgLz5cbjxNZW51IC8+XG5cbjwhLS0gPEZ1bmN0aW9uYWxUZXN0cyAvPiAtLT5cblxueyNpZiAhZGlyZWN0b3J5SXNTZXR9XG4gIDxGaXJzdFJ1biAvPlxuezplbHNlfVxuICB7I2lmIGZpbGVzUG9wdWxhdGVkfSAgXG4gICAgPFNpZGVCYXIgLz5cbiAgICA8ZGl2IFxuICAgICAgaWQ9XCJtYWluXCIgXG4gICAgICB1c2U6c2V0TGF5b3V0Rm9jdXM9e3tjdXJyZW50OiAkcHJvamVjdC5mb2N1c2VkU2VjdGlvbklkLCBzZXRUbzogJ21haW4nfX1cbiAgICA+XG4gICAgICA8VG9vbGJhciAvPlxuICAgICAgPFNlcGFyYXRvciAvPlxuICAgICAgPGRpdiBpZD1cImNvbnRlbnRcIj5cbiAgICAgICAgPEVkaXRvclBhbmVscyAvPlxuICAgICAgICA8IS0tIDxDb2xvcnMgLz4gLS0+XG4gICAgICAgIDwhLS0gPFVJRWxlbWVudHMgLz4gLS0+XG4gICAgICAgIDwhLS0gPFN0YXRlIC8+IC0tPlxuICAgICAgICA8IS0tIDxGaWxlcyAvPiAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB7L2lmfVxuey9pZn1cblxuPEJhY2tncm91bmQgLz5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Q3dCLFdBQVcsMEJBQVksQ0FBQyxBQUM5QyxJQUFJLEFBQUMsQ0FBQyxBQUNKLFVBQVUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQUFDNUQsQ0FBQyxBQUNELEVBQUUsQUFBQyxDQUFDLEFBQ0YsVUFBVSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsQUFDdEYsQ0FBQyxBQUNILENBQUMsQUFDRCxLQUFLLGVBQUMsQ0FBQyxBQUNMLFNBQVMsQ0FBRSxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM5QixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxNQUFNLENBQ3RCLEtBQUssQ0FBRSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQ3pCLE1BQU0sQ0FBRSxJQUFJLEFBQ2QsQ0FBQyxBQUVELFFBQVEsZUFBQyxDQUFDLEFBQ1IsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFFBQVEsQ0FBRSxNQUFNLEFBQ2xCLENBQUMifQ== */";
	append_dev(document.head, style);
}

// (84:2) {#if filesPopulated}
function create_if_block_1$g(ctx) {
	let sidebar;
	let t0;
	let div1;
	let toolbar;
	let t1;
	let separator;
	let t2;
	let div0;
	let editorpanels;
	let setLayoutFocus_action;
	let current;
	let mounted;
	let dispose;
	sidebar = new SideBar({ $$inline: true });
	toolbar = new Toolbar({ $$inline: true });
	separator = new Separator({ $$inline: true });
	editorpanels = new EditorPanels({ $$inline: true });

	const block = {
		c: function create() {
			create_component(sidebar.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(toolbar.$$.fragment);
			t1 = space();
			create_component(separator.$$.fragment);
			t2 = space();
			div0 = element("div");
			create_component(editorpanels.$$.fragment);
			attr_dev(div0, "id", "content");
			attr_dev(div0, "class", "svelte-1wfjlr5");
			add_location(div0, file$$, 91, 6, 2549);
			attr_dev(div1, "id", "main");
			attr_dev(div1, "class", "svelte-1wfjlr5");
			add_location(div1, file$$, 85, 4, 2397);
		},
		m: function mount(target, anchor) {
			mount_component(sidebar, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(toolbar, div1, null);
			append_dev(div1, t1);
			mount_component(separator, div1, null);
			append_dev(div1, t2);
			append_dev(div1, div0);
			mount_component(editorpanels, div0, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(setLayoutFocus_action = setLayoutFocus.call(null, div1, {
					current: /*$project*/ ctx[0].focusedSectionId,
					setTo: "main"
				}));

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (setLayoutFocus_action && is_function(setLayoutFocus_action.update) && dirty & /*$project*/ 1) setLayoutFocus_action.update.call(null, {
				current: /*$project*/ ctx[0].focusedSectionId,
				setTo: "main"
			});
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sidebar.$$.fragment, local);
			transition_in(toolbar.$$.fragment, local);
			transition_in(separator.$$.fragment, local);
			transition_in(editorpanels.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sidebar.$$.fragment, local);
			transition_out(toolbar.$$.fragment, local);
			transition_out(separator.$$.fragment, local);
			transition_out(editorpanels.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(sidebar, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(toolbar);
			destroy_component(separator);
			destroy_component(editorpanels);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$g.name,
		type: "if",
		source: "(84:2) {#if filesPopulated}",
		ctx
	});

	return block;
}

// (81:0) {#if !directoryIsSet}
function create_if_block$t(ctx) {
	let firstrun;
	let current;
	firstrun = new FirstRun({ $$inline: true });

	const block = {
		c: function create() {
			create_component(firstrun.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(firstrun, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(firstrun.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(firstrun.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(firstrun, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$t.name,
		type: "if",
		source: "(81:0) {#if !directoryIsSet}",
		ctx
	});

	return block;
}

function create_fragment$15(ctx) {
	let tooltip;
	let t0;
	let menu;
	let t1;
	let current_block_type_index;
	let if_block;
	let t2;
	let background;
	let current;
	let mounted;
	let dispose;
	tooltip = new Tooltip({ $$inline: true });
	menu = new Menu({ $$inline: true });
	const if_block_creators = [create_if_block$t, create_if_block_1$g];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*directoryIsSet*/ ctx[1]) return 0;
		if (/*filesPopulated*/ ctx[2]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	background = new Background({ $$inline: true });

	const block = {
		c: function create() {
			create_component(tooltip.$$.fragment);
			t0 = space();
			create_component(menu.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			create_component(background.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(tooltip, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(menu, target, anchor);
			insert_dev(target, t1, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t2, anchor);
			mount_component(background, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window_1$1, "dragover", prevent_default(/*onDragOver*/ ctx[3]), false, true, false),
					listen_dev(window_1$1, "dragleave", prevent_default(/*onDragLeave*/ ctx[4]), false, true, false),
					listen_dev(window_1$1, "drop", prevent_default(onDrop$1), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(t2.parentNode, t2);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltip.$$.fragment, local);
			transition_in(menu.$$.fragment, local);
			transition_in(if_block);
			transition_in(background.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tooltip.$$.fragment, local);
			transition_out(menu.$$.fragment, local);
			transition_out(if_block);
			transition_out(background.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tooltip, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(menu, detaching);
			if (detaching) detach_dev(t1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t2);
			destroy_component(background, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$15.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function onDrop$1() {
	window.api.send("dispatch", { type: "PROJECT_WINDOW_DRAG_LEAVE" });
}

function instance$15($$self, $$props, $$invalidate) {
	let $project;
	let $files;
	validate_store(project, "project");
	component_subscribe($$self, project, $$value => $$invalidate(0, $project = $$value));
	validate_store(files, "files");
	component_subscribe($$self, files, $$value => $$invalidate(5, $files = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Layout", slots, []);

	function onDragOver() {
		if (!isWindowDraggedOver) {
			window.api.send("dispatch", { type: "PROJECT_WINDOW_DRAG_OVER" });
		}
	}

	/**
 * We check the event `relatedTarget` to determine whether the user actually dragged outside the window, or just dragged over a child element. The dragleave event fires in both cases, but we only care about the later.
 */
	function onDragLeave(evt) {
		if (isWindowDraggedOver && evt.relatedTarget == null) {
			window.api.send("dispatch", { type: "PROJECT_WINDOW_DRAG_LEAVE" });
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		project,
		files,
		Background,
		EditorPanels,
		FirstRun,
		FunctionalTests,
		SideBar,
		Toolbar,
		Separator,
		Menu,
		Tooltip,
		Colors,
		UIElements,
		Files,
		State,
		setLayoutFocus,
		onDragOver,
		onDragLeave,
		onDrop: onDrop$1,
		directoryIsSet,
		$project,
		filesPopulated,
		$files,
		isWindowDraggedOver
	});

	$$self.$inject_state = $$props => {
		if ("directoryIsSet" in $$props) $$invalidate(1, directoryIsSet = $$props.directoryIsSet);
		if ("filesPopulated" in $$props) $$invalidate(2, filesPopulated = $$props.filesPopulated);
		if ("isWindowDraggedOver" in $$props) isWindowDraggedOver = $$props.isWindowDraggedOver;
	};

	let directoryIsSet;
	let filesPopulated;
	let isWindowDraggedOver;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$project*/ 1) {
			 $$invalidate(1, directoryIsSet = $project.directory);
		}

		if ($$self.$$.dirty & /*$files*/ 32) {
			 $$invalidate(2, filesPopulated = $files.tree);
		}

		if ($$self.$$.dirty & /*$project*/ 1) {
			 isWindowDraggedOver = $project.window.isDraggedOver;
		}
	};

	return [$project, directoryIsSet, filesPopulated, onDragOver, onDragLeave, $files];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-1wfjlr5-style")) add_css$11();
		init(this, options, instance$15, create_fragment$15, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment$15.name
		});
	}
}

// ------ SETUP ------ //

async function init$4() {

  // Get initial state and files
  const initialState = await window.api.invoke('getState');
  const initialFiles = await window.api.invoke('getFiles');
  const initialColors = await window.api.invoke('getColors', true);

  // Set initial values
  init$2(initialState);
  init$3(initialFiles);
  init$1(initialState, initialColors);

  // Define CodeMirror "Gambier" mode. We only need to do this once.
  // Individual CodeMirror instances load via `mode: 'gambier'` in their setup configs.
  defineGambierMode();

  // Define an array of CodeMirror instances on window.
  // We push to these in onMount of Editor components.
  // We use these when we need to a CM instance's contents
  // from outside the scope of its parent Editor component.
  window.cmInstances = [];

  // Create layout
  const layout = new Layout({
    target: document.querySelector('#layout')
  });

  // Finish setup by showing window
  window.api.send('showWindow');
}


window.addEventListener('DOMContentLoaded', init$4);
//# sourceMappingURL=renderer.js.map
